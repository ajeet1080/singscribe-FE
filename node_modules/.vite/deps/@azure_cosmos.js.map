{
  "version": 3,
  "sources": ["../../priorityqueuejs/index.js", "../../semaphore/lib/semaphore.js", "../../fast-json-stable-stringify/index.js", "../../node-abort-controller/browser.js", "../../@azure/cosmos/src/common/partitionKeys.ts", "../../@azure/cosmos/src/common/constants.ts", "../../@azure/cosmos/src/common/helper.ts", "../../@azure/cosmos/src/common/statusCodes.ts", "../../@azure/cosmos/src/common/uriFactory.ts", "../../@azure/cosmos/src/utils/encode.ts", "../../@azure/cosmos/src/utils/atob.browser.ts", "../../@azure/cosmos/src/utils/globalCrypto.ts", "../../@azure/cosmos/src/utils/hmac.browser.ts", "../../@azure/cosmos/src/utils/headers.ts", "../../@azure/cosmos/src/auth.ts", "../../@azure/logger/src/log.browser.ts", "../../@azure/logger/src/debug.ts", "../../@azure/logger/src/index.ts", "../../@azure/cosmos/src/documents/ConnectionMode.ts", "../../@azure/cosmos/src/documents/ConnectionPolicy.ts", "../../@azure/cosmos/src/documents/ConsistencyLevel.ts", "../../@azure/cosmos/src/documents/DatabaseAccount.ts", "../../@azure/cosmos/src/documents/DataType.ts", "../../@azure/cosmos/src/documents/IndexingMode.ts", "../../@azure/cosmos/src/documents/IndexingPolicy.ts", "../../@azure/cosmos/src/documents/IndexKind.ts", "../../@azure/cosmos/src/documents/PartitionKeyInternal.ts", "../../@azure/cosmos/src/documents/PartitionKey.ts", "../../@azure/cosmos/src/documents/PartitionKeyDefinitionVersion.ts", "../../@azure/cosmos/src/documents/PartitionKeyKind.ts", "../../@azure/cosmos/src/documents/PermissionMode.ts", "../../@azure/cosmos/src/documents/PriorityLevel.ts", "../../@azure/cosmos/src/documents/TriggerOperation.ts", "../../@azure/cosmos/src/documents/TriggerType.ts", "../../@azure/cosmos/src/documents/UserDefinedFunctionType.ts", "../../@azure/cosmos/src/documents/GeospatialType.ts", "../../@azure/cosmos/src/extractPartitionKey.ts", "../../uuid/dist/esm-browser/rng.js", "../../uuid/dist/esm-browser/regex.js", "../../uuid/dist/esm-browser/validate.js", "../../uuid/dist/esm-browser/stringify.js", "../../uuid/dist/esm-browser/parse.js", "../../uuid/dist/esm-browser/v35.js", "../../uuid/dist/esm-browser/md5.js", "../../uuid/dist/esm-browser/v3.js", "../../uuid/dist/esm-browser/v4.js", "../../uuid/dist/esm-browser/sha1.js", "../../uuid/dist/esm-browser/v5.js", "../../@azure/cosmos/src/utils/typeChecks.ts", "../../@azure/cosmos/src/common/logger.ts", "../../@azure/cosmos/src/request/request.ts", "../../@azure/cosmos/src/utils/batch.ts", "../../@azure/cosmos/src/utils/patch.ts", "../../@azure/cosmos/src/request/ErrorResponse.ts", "../../@azure/cosmos/src/request/ResourceResponse.ts", "../../@azure/cosmos/src/queryMetrics/clientSideMetrics.ts", "../../@azure/cosmos/src/queryMetrics/queryMetricsConstants.ts", "../../@azure/cosmos/src/queryMetrics/timeSpan.ts", "../../@azure/cosmos/src/queryMetrics/queryMetricsUtils.ts", "../../@azure/cosmos/src/queryMetrics/queryPreparationTime.ts", "../../@azure/cosmos/src/queryMetrics/runtimeExecutionTimes.ts", "../../@azure/cosmos/src/queryMetrics/queryMetrics.ts", "../../@azure/cosmos/src/queryExecutionContext/headerUtils.ts", "../../@azure/cosmos/src/indexMetrics/IndexUtilizationInfo.ts", "../../@azure/cosmos/src/indexMetrics/Constants.ts", "../../@azure/cosmos/src/indexMetrics/IndexMetricWriter.ts", "../../@azure/cosmos/src/request/FeedResponse.ts", "../../@azure/cosmos/src/request/TimeoutError.ts", "../../@azure/cosmos/src/utils/time.ts", "../../@azure/cosmos/src/diagnostics/CosmosDiagnosticsContext.ts", "../../@azure/cosmos/src/CosmosDiagnostics.ts", "../../@azure/cosmos/src/diagnostics/CosmosDbDiagnosticLevel.ts", "../../@azure/cosmos/src/diagnostics/diagnosticLevelComparator.ts", "../../@azure/cosmos/src/diagnostics/DiagnosticNodeInternal.ts", "../../@azure/cosmos/src/utils/diagnostics.ts", "../../@azure/cosmos/src/queryExecutionContext/defaultQueryExecutionContext.ts", "../../@azure/cosmos/src/queryExecutionContext/Aggregators/AverageAggregator.ts", "../../@azure/cosmos/src/queryExecutionContext/Aggregators/CountAggregator.ts", "../../@azure/cosmos/src/queryExecutionContext/orderByDocumentProducerComparator.ts", "../../@azure/cosmos/src/queryExecutionContext/Aggregators/MaxAggregator.ts", "../../@azure/cosmos/src/queryExecutionContext/Aggregators/MinAggregator.ts", "../../@azure/cosmos/src/queryExecutionContext/Aggregators/SumAggregator.ts", "../../@azure/cosmos/src/queryExecutionContext/Aggregators/StaticValueAggregator.ts", "../../@azure/cosmos/src/queryExecutionContext/Aggregators/index.ts", "../../@azure/cosmos/src/queryExecutionContext/FetchResult.ts", "../../@azure/cosmos/src/queryExecutionContext/documentProducer.ts", "../../@azure/cosmos/src/queryExecutionContext/parallelQueryExecutionContextBase.ts", "../../@azure/cosmos/src/routing/QueryRange.ts", "../../@azure/cosmos/src/routing/inMemoryCollectionRoutingMap.ts", "../../@azure/cosmos/src/routing/CollectionRoutingMapFactory.ts", "../../@azure/cosmos/src/routing/partitionKeyRangeCache.ts", "../../@azure/cosmos/src/routing/smartRoutingMapProvider.ts", "../../@azure/cosmos/src/queryExecutionContext/parallelQueryExecutionContext.ts", "../../@azure/cosmos/src/queryExecutionContext/orderByQueryExecutionContext.ts", "../../@azure/cosmos/src/queryExecutionContext/EndpointComponent/OffsetLimitEndpointComponent.ts", "../../@azure/cosmos/src/queryExecutionContext/EndpointComponent/OrderByEndpointComponent.ts", "../../@azure/cosmos/src/utils/digest.browser.ts", "../../@azure/cosmos/src/utils/hashObject.ts", "../../@azure/cosmos/src/queryExecutionContext/EndpointComponent/OrderedDistinctEndpointComponent.ts", "../../@azure/cosmos/src/queryExecutionContext/EndpointComponent/UnorderedDistinctEndpointComponent.ts", "../../@azure/cosmos/src/queryExecutionContext/EndpointComponent/emptyGroup.ts", "../../@azure/cosmos/src/queryExecutionContext/EndpointComponent/GroupByEndpointComponent.ts", "../../@azure/cosmos/src/queryExecutionContext/EndpointComponent/GroupByValueEndpointComponent.ts", "../../@azure/cosmos/src/queryExecutionContext/pipelinedQueryExecutionContext.ts", "../../@azure/cosmos/src/queryIterator.ts", "../../@azure/cosmos/src/client/Conflict/ConflictResponse.ts", "../../@azure/cosmos/src/client/ClientUtils.ts", "../../@azure/cosmos/src/client/Conflict/Conflict.ts", "../../@azure/cosmos/src/client/Conflict/Conflicts.ts", "../../@azure/cosmos/src/client/Conflict/ConflictResolutionMode.ts", "../../@azure/cosmos/src/client/Item/ItemResponse.ts", "../../@azure/cosmos/src/client/Item/Item.ts", "../../@azure/cosmos/src/ChangeFeedResponse.ts", "../../@azure/cosmos/src/ChangeFeedIterator.ts", "../../jsbi/lib/jsbi.ts", "../../@azure/cosmos/src/utils/hashing/encoding/prefix.ts", "../../@azure/cosmos/src/utils/hashing/encoding/number.ts", "../../@azure/cosmos/src/utils/hashing/murmurHash.ts", "../../@azure/cosmos/src/utils/hashing/v2.ts", "../../@azure/cosmos/src/utils/hashing/multiHash.ts", "../../@azure/cosmos/src/utils/hashing/encoding/string.ts", "../../@azure/cosmos/src/utils/hashing/v1.ts", "../../@azure/cosmos/src/utils/hashing/hash.ts", "../../@azure/cosmos/src/client/ChangeFeed/ChangeFeedRange.ts", "../../@azure/cosmos/src/client/ChangeFeed/ChangeFeedIteratorResponse.ts", "../../@azure/cosmos/src/client/ChangeFeed/FeedRangeQueue.ts", "../../@azure/cosmos/src/client/ChangeFeed/CompositeContinuationToken.ts", "../../@azure/cosmos/src/client/ChangeFeed/ChangeFeedStartFromBeginning.ts", "../../@azure/cosmos/src/client/ChangeFeed/ChangeFeedStartFromNow.ts", "../../@azure/cosmos/src/client/ChangeFeed/ChangeFeedStartFromTime.ts", "../../@azure/cosmos/src/client/ChangeFeed/FeedRange.ts", "../../@azure/cosmos/src/client/ChangeFeed/changeFeedUtils.ts", "../../@azure/cosmos/src/client/ChangeFeed/ChangeFeedForEpkRange.ts", "../../@azure/cosmos/src/client/ChangeFeed/ContinuationTokenForPartitionKey.ts", "../../@azure/cosmos/src/client/ChangeFeed/ChangeFeedForPartitionKey.ts", "../../@azure/cosmos/src/client/ChangeFeed/ChangeFeedEnums.ts", "../../@azure/cosmos/src/client/ChangeFeed/ChangeFeedStartFromContinuation.ts", "../../@azure/cosmos/src/client/ChangeFeed/ChangeFeedStartFrom.ts", "../../@azure/cosmos/src/client/ChangeFeed/changeFeedIteratorBuilder.ts", "../../@azure/cosmos/src/client/Item/Items.ts", "../../@azure/cosmos/src/client/StoredProcedure/StoredProcedureResponse.ts", "../../@azure/cosmos/src/client/StoredProcedure/StoredProcedure.ts", "../../@azure/cosmos/src/client/StoredProcedure/StoredProcedures.ts", "../../@azure/cosmos/src/client/Trigger/TriggerResponse.ts", "../../@azure/cosmos/src/client/Trigger/Trigger.ts", "../../@azure/cosmos/src/client/Trigger/Triggers.ts", "../../@azure/cosmos/src/client/UserDefinedFunction/UserDefinedFunctionResponse.ts", "../../@azure/cosmos/src/client/UserDefinedFunction/UserDefinedFunction.ts", "../../@azure/cosmos/src/client/UserDefinedFunction/UserDefinedFunctions.ts", "../../@azure/cosmos/src/client/Script/Scripts.ts", "../../@azure/cosmos/src/client/Container/ContainerResponse.ts", "../../@azure/cosmos/src/client/Offer/OfferResponse.ts", "../../@azure/cosmos/src/client/Offer/Offer.ts", "../../@azure/cosmos/src/client/Offer/Offers.ts", "../../@azure/cosmos/src/client/Container/Container.ts", "../../@azure/cosmos/src/utils/offers.ts", "../../@azure/cosmos/src/client/Container/Containers.ts", "../../@azure/cosmos/src/client/Permission/PermissionResponse.ts", "../../@azure/cosmos/src/client/Permission/Permission.ts", "../../@azure/cosmos/src/client/Permission/Permissions.ts", "../../@azure/cosmos/src/client/User/UserResponse.ts", "../../@azure/cosmos/src/client/User/User.ts", "../../@azure/cosmos/src/client/User/Users.ts", "../../@azure/cosmos/src/client/Database/DatabaseResponse.ts", "../../@azure/cosmos/src/client/Database/Database.ts", "../../@azure/cosmos/src/client/Database/Databases.ts", "../../@azure/core-rest-pipeline/src/pipeline.ts", "../../@azure/core-rest-pipeline/src/log.ts", "../../@azure/abort-controller/src/AbortController.ts", "../../@azure/core-util/src/object.ts", "../../@azure/core-util/src/bytesEncoding.browser.ts", "../../@azure/core-util/src/uuidUtils.native.ts", "../../@azure/core-util/src/uuidUtils.browser.ts", "../../@azure/core-util/src/checkEnvironment.ts", "../../@azure/core-rest-pipeline/src/util/sanitizer.ts", "../../@azure/core-rest-pipeline/src/util/userAgentPlatform.browser.ts", "../../@azure/core-rest-pipeline/src/util/userAgent.ts", "../../@azure/core-rest-pipeline/src/policies/userAgentPolicy.ts", "../../@azure/core-rest-pipeline/src/util/typeGuards.ts", "../../@azure/core-rest-pipeline/src/util/file.ts", "../../@azure/core-rest-pipeline/src/policies/multipartPolicy.ts", "../../@azure/core-rest-pipeline/node_modules/@azure/abort-controller/src/AbortError.ts", "../../@azure/core-rest-pipeline/src/util/helpers.ts", "../../@azure/core-rest-pipeline/src/retryStrategies/exponentialRetryStrategy.ts", "../../@azure/core-rest-pipeline/src/policies/retryPolicy.ts", "../../@azure/core-rest-pipeline/node_modules/@azure/core-tracing/src/tracingContext.ts", "../../@azure/core-rest-pipeline/src/util/inspect.browser.ts", "../../@azure/core-rest-pipeline/src/restError.ts", "../../@azure/core-rest-pipeline/src/httpHeaders.ts", "../../@azure/core-rest-pipeline/src/fetchHttpClient.ts", "../../@azure/core-rest-pipeline/src/defaultHttpClient.browser.ts", "../../@azure/core-rest-pipeline/src/pipelineRequest.ts", "../../@azure/core-rest-pipeline/src/util/tokenCycler.ts", "../../@azure/core-rest-pipeline/src/policies/bearerTokenAuthenticationPolicy.ts", "../../@azure/cosmos/src/plugins/Plugin.ts", "../../@azure/cosmos/src/request/RequestHandler.ts", "../../@azure/cosmos/src/retry/defaultRetryPolicy.ts", "../../@azure/cosmos/src/retry/endpointDiscoveryRetryPolicy.ts", "../../@azure/cosmos/src/retry/resourceThrottleRetryPolicy.ts", "../../@azure/cosmos/src/retry/sessionRetryPolicy.ts", "../../@azure/cosmos/src/retry/timeoutFailoverRetryPolicy.ts", "../../@azure/cosmos/src/retry/retryUtility.ts", "../../@azure/cosmos/src/request/defaultAgent.browser.ts", "../../@azure/cosmos/src/utils/cachedClient.ts", "../../@azure/cosmos/src/session/VectorSessionToken.ts", "../../@azure/cosmos/src/session/sessionContainer.ts", "../../@azure/cosmos/src/utils/checkURL.ts", "../../@azure/cosmos/src/diagnostics/DiagnosticWriter.ts", "../../@azure/cosmos/src/diagnostics/DiagnosticFormatter.ts", "../../@azure/cosmos/src/ClientContext.ts", "../../universal-user-agent/dist-src/index.js", "../../@azure/cosmos/src/common/platform.ts", "../../@azure/cosmos/src/utils/strings.ts", "../../@azure/cosmos/src/diagnostics/index.ts", "../../@azure/cosmos/src/globalEndpointManager.ts", "../../@azure/cosmos/src/CosmosClient.ts", "../../@azure/cosmos/src/client/SasToken/SasTokenProperties.ts", "../../@azure/cosmos/src/utils/SasToken.ts"],
  "sourcesContent": ["/**\n * Expose `PriorityQueue`.\n */\nmodule.exports = PriorityQueue;\n\n/**\n * Initializes a new empty `PriorityQueue` with the given `comparator(a, b)`\n * function, uses `.DEFAULT_COMPARATOR()` when no function is provided.\n *\n * The comparator function must return a positive number when `a > b`, 0 when\n * `a == b` and a negative number when `a < b`.\n *\n * @param {Function}\n * @return {PriorityQueue}\n * @api public\n */\nfunction PriorityQueue(comparator) {\n  this._comparator = comparator || PriorityQueue.DEFAULT_COMPARATOR;\n  this._elements = [];\n}\n\n/**\n * Compares `a` and `b`, when `a > b` it returns a positive number, when\n * it returns 0 and when `a < b` it returns a negative number.\n *\n * @param {String|Number} a\n * @param {String|Number} b\n * @return {Number}\n * @api public\n */\nPriorityQueue.DEFAULT_COMPARATOR = function(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  } else {\n    a = a.toString();\n    b = b.toString();\n\n    if (a == b) return 0;\n\n    return (a > b) ? 1 : -1;\n  }\n};\n\n/**\n * Returns whether the priority queue is empty or not.\n *\n * @return {Boolean}\n * @api public\n */\nPriorityQueue.prototype.isEmpty = function() {\n  return this.size() === 0;\n};\n\n/**\n * Peeks at the top element of the priority queue.\n *\n * @return {Object}\n * @throws {Error} when the queue is empty.\n * @api public\n */\nPriorityQueue.prototype.peek = function() {\n  if (this.isEmpty()) throw new Error('PriorityQueue is empty');\n\n  return this._elements[0];\n};\n\n/**\n * Dequeues the top element of the priority queue.\n *\n * @return {Object}\n * @throws {Error} when the queue is empty.\n * @api public\n */\nPriorityQueue.prototype.deq = function() {\n  var first = this.peek();\n  var last = this._elements.pop();\n  var size = this.size();\n\n  if (size === 0) return first;\n\n  this._elements[0] = last;\n  var current = 0;\n\n  while (current < size) {\n    var largest = current;\n    var left = (2 * current) + 1;\n    var right = (2 * current) + 2;\n\n    if (left < size && this._compare(left, largest) >= 0) {\n      largest = left;\n    }\n\n    if (right < size && this._compare(right, largest) >= 0) {\n      largest = right;\n    }\n\n    if (largest === current) break;\n\n    this._swap(largest, current);\n    current = largest;\n  }\n\n  return first;\n};\n\n/**\n * Enqueues the `element` at the priority queue and returns its new size.\n *\n * @param {Object} element\n * @return {Number}\n * @api public\n */\nPriorityQueue.prototype.enq = function(element) {\n  var size = this._elements.push(element);\n  var current = size - 1;\n\n  while (current > 0) {\n    var parent = Math.floor((current - 1) / 2);\n\n    if (this._compare(current, parent) <= 0) break;\n\n    this._swap(parent, current);\n    current = parent;\n  }\n\n  return size;\n};\n\n/**\n * Returns the size of the priority queue.\n *\n * @return {Number}\n * @api public\n */\nPriorityQueue.prototype.size = function() {\n  return this._elements.length;\n};\n\n/**\n *  Iterates over queue elements\n *\n *  @param {Function} fn\n */\nPriorityQueue.prototype.forEach = function(fn) {\n  return this._elements.forEach(fn);\n};\n\n/**\n * Compares the values at position `a` and `b` in the priority queue using its\n * comparator function.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @api private\n */\nPriorityQueue.prototype._compare = function(a, b) {\n  return this._comparator(this._elements[a], this._elements[b]);\n};\n\n/**\n * Swaps the values at position `a` and `b` in the priority queue.\n *\n * @param {Number} a\n * @param {Number} b\n * @api private\n */\nPriorityQueue.prototype._swap = function(a, b) {\n  var aux = this._elements[a];\n  this._elements[a] = this._elements[b];\n  this._elements[b] = aux;\n};\n", ";(function(global) {\n\n'use strict';\n\nvar nextTick = function (fn) { setTimeout(fn, 0); }\nif (typeof process != 'undefined' && process && typeof process.nextTick == 'function') {\n\t// node.js and the like\n\tnextTick = process.nextTick;\n}\n\nfunction semaphore(capacity) {\n\tvar semaphore = {\n\t\tcapacity: capacity || 1,\n\t\tcurrent: 0,\n\t\tqueue: [],\n\t\tfirstHere: false,\n\n\t\ttake: function() {\n\t\t\tif (semaphore.firstHere === false) {\n        \t\t\tsemaphore.current++;\n        \t\t\tsemaphore.firstHere = true;\n        \t\t\tvar isFirst = 1;\n      \t\t\t} else {\n        \t\t\tvar isFirst = 0;\n      \t\t\t}\n\t\t\tvar item = { n: 1 };\n\n\t\t\tif (typeof arguments[0] == 'function') {\n\t\t\t\titem.task = arguments[0];\n\t\t\t} else {\n\t\t\t\titem.n = arguments[0];\n\t\t\t}\n\n\t\t\tif (arguments.length >= 2)  {\n\t\t\t\tif (typeof arguments[1] == 'function') item.task = arguments[1];\n\t\t\t\telse item.n = arguments[1];\n\t\t\t}\n\n\t\t\tvar task = item.task;\n\t\t\titem.task = function() { task(semaphore.leave); };\n\n\t\t\tif (semaphore.current + item.n - isFirst > semaphore.capacity) {\n        \t\t\tif (isFirst === 1) {\n        \t\t\t\tsemaphore.current--;\n        \t\t\t\tsemaphore.firstHere = false;\n        \t\t\t}\n\t\t\t\treturn semaphore.queue.push(item);\n\t\t\t}\n\n\t\t\tsemaphore.current += item.n - isFirst;\n\t\t\titem.task(semaphore.leave);\n      \t\t\tif (isFirst === 1) semaphore.firstHere = false;\n\t\t},\n\n\t\tleave: function(n) {\n\t\t\tn = n || 1;\n\n\t\t\tsemaphore.current -= n;\n\n\t\t\tif (!semaphore.queue.length) {\n\t\t\t\tif (semaphore.current < 0) {\n\t\t\t\t\tthrow new Error('leave called too many times.');\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar item = semaphore.queue[0];\n\n\t\t\tif (item.n + semaphore.current > semaphore.capacity) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsemaphore.queue.shift();\n\t\t\tsemaphore.current += item.n;\n\n\t\t\tnextTick(item.task);\n\t\t},\n\n\t\tavailable: function(n) {\n\t\t\tn = n || 1;\n\t\t\treturn(semaphore.current + n <= semaphore.capacity);\n\t\t}\n\t};\n\n\treturn semaphore;\n};\n\nif (typeof exports === 'object') {\n    // node export\n    module.exports = semaphore;\n} else if (typeof define === 'function' && define.amd) {\n    // amd export\n    define(function () {\n        return semaphore;\n    });\n} else {\n    // browser global\n    global.semaphore = semaphore;\n}\n}(this));\n", "'use strict';\n\nmodule.exports = function (data, opts) {\n    if (!opts) opts = {};\n    if (typeof opts === 'function') opts = { cmp: opts };\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\n\n    var cmp = opts.cmp && (function (f) {\n        return function (node) {\n            return function (a, b) {\n                var aobj = { key: a, value: node[a] };\n                var bobj = { key: b, value: node[b] };\n                return f(aobj, bobj);\n            };\n        };\n    })(opts.cmp);\n\n    var seen = [];\n    return (function stringify (node) {\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\n            node = node.toJSON();\n        }\n\n        if (node === undefined) return;\n        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n        if (typeof node !== 'object') return JSON.stringify(node);\n\n        var i, out;\n        if (Array.isArray(node)) {\n            out = '[';\n            for (i = 0; i < node.length; i++) {\n                if (i) out += ',';\n                out += stringify(node[i]) || 'null';\n            }\n            return out + ']';\n        }\n\n        if (node === null) return 'null';\n\n        if (seen.indexOf(node) !== -1) {\n            if (cycles) return JSON.stringify('__cycle__');\n            throw new TypeError('Converting circular structure to JSON');\n        }\n\n        var seenIndex = seen.push(node) - 1;\n        var keys = Object.keys(node).sort(cmp && cmp(node));\n        out = '';\n        for (i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var value = stringify(node[key]);\n\n            if (!value) continue;\n            if (out) out += ',';\n            out += JSON.stringify(key) + ':' + value;\n        }\n        seen.splice(seenIndex, 1);\n        return '{' + out + '}';\n    })(data);\n};\n", "'use strict'\n\nconst _global =\n  typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : /* otherwise */ undefined\n\nif (!_global) {\n  throw new Error(\n    `Unable to find global scope. Are you sure this is running in the browser?`\n  )\n}\n\nif (!_global.AbortController) {\n  throw new Error(\n    `Could not find \"AbortController\" in the global scope. You need to polyfill it first`\n  )\n}\n\nmodule.exports.AbortController = _global.AbortController", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport const DEFAULT_PARTITION_KEY_PATH = \"/_partitionKey\" as \"/_partitionKey\"; // eslint-disable-line @typescript-eslint/prefer-as-const\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport interface PartitionKeyRangePropertiesNames {\n  // Partition Key Range Constants\n  MinInclusive: \"minInclusive\";\n  MaxExclusive: \"maxExclusive\";\n  Id: \"id\";\n}\n\n/**\n * @hidden\n */\nexport const Constants = {\n  HttpHeaders: {\n    Authorization: \"authorization\",\n    ETag: \"etag\",\n    MethodOverride: \"X-HTTP-Method\",\n    Slug: \"Slug\",\n    ContentType: \"Content-Type\",\n    LastModified: \"Last-Modified\",\n    ContentEncoding: \"Content-Encoding\",\n    CharacterSet: \"CharacterSet\",\n    UserAgent: \"User-Agent\",\n    IfModifiedSince: \"If-Modified-Since\",\n    IfMatch: \"If-Match\",\n    IfNoneMatch: \"If-None-Match\",\n    ContentLength: \"Content-Length\",\n    AcceptEncoding: \"Accept-Encoding\",\n    KeepAlive: \"Keep-Alive\",\n    CacheControl: \"Cache-Control\",\n    TransferEncoding: \"Transfer-Encoding\",\n    ContentLanguage: \"Content-Language\",\n    ContentLocation: \"Content-Location\",\n    ContentMd5: \"Content-Md5\",\n    ContentRange: \"Content-Range\",\n    Accept: \"Accept\",\n    AcceptCharset: \"Accept-Charset\",\n    AcceptLanguage: \"Accept-Language\",\n    IfRange: \"If-Range\",\n    IfUnmodifiedSince: \"If-Unmodified-Since\",\n    MaxForwards: \"Max-Forwards\",\n    ProxyAuthorization: \"Proxy-Authorization\",\n    AcceptRanges: \"Accept-Ranges\",\n    ProxyAuthenticate: \"Proxy-Authenticate\",\n    RetryAfter: \"Retry-After\",\n    SetCookie: \"Set-Cookie\",\n    WwwAuthenticate: \"Www-Authenticate\",\n    Origin: \"Origin\",\n    Host: \"Host\",\n    AccessControlAllowOrigin: \"Access-Control-Allow-Origin\",\n    AccessControlAllowHeaders: \"Access-Control-Allow-Headers\",\n    KeyValueEncodingFormat: \"application/x-www-form-urlencoded\",\n    WrapAssertionFormat: \"wrap_assertion_format\",\n    WrapAssertion: \"wrap_assertion\",\n    WrapScope: \"wrap_scope\",\n    SimpleToken: \"SWT\",\n    HttpDate: \"date\",\n    Prefer: \"Prefer\",\n    Location: \"Location\",\n    Referer: \"referer\",\n    A_IM: \"A-IM\",\n\n    // Query\n    Query: \"x-ms-documentdb-query\",\n    IsQuery: \"x-ms-documentdb-isquery\",\n    IsQueryPlan: \"x-ms-cosmos-is-query-plan-request\",\n    SupportedQueryFeatures: \"x-ms-cosmos-supported-query-features\",\n    QueryVersion: \"x-ms-cosmos-query-version\",\n\n    // Our custom Azure Cosmos DB headers\n    Continuation: \"x-ms-continuation\",\n    ContinuationToken: \"x-ms-continuation-token\",\n    PageSize: \"x-ms-max-item-count\",\n    ItemCount: \"x-ms-item-count\",\n\n    // Request sender generated. Simply echoed by backend.\n    ActivityId: \"x-ms-activity-id\",\n    PreTriggerInclude: \"x-ms-documentdb-pre-trigger-include\",\n    PreTriggerExclude: \"x-ms-documentdb-pre-trigger-exclude\",\n    PostTriggerInclude: \"x-ms-documentdb-post-trigger-include\",\n    PostTriggerExclude: \"x-ms-documentdb-post-trigger-exclude\",\n    IndexingDirective: \"x-ms-indexing-directive\",\n    SessionToken: \"x-ms-session-token\",\n    ConsistencyLevel: \"x-ms-consistency-level\",\n    XDate: \"x-ms-date\",\n    CollectionPartitionInfo: \"x-ms-collection-partition-info\",\n    CollectionServiceInfo: \"x-ms-collection-service-info\",\n    // Deprecated, use RetryAfterInMs instead.\n    RetryAfterInMilliseconds: \"x-ms-retry-after-ms\",\n    RetryAfterInMs: \"x-ms-retry-after-ms\",\n    IsFeedUnfiltered: \"x-ms-is-feed-unfiltered\",\n    ResourceTokenExpiry: \"x-ms-documentdb-expiry-seconds\",\n    EnableScanInQuery: \"x-ms-documentdb-query-enable-scan\",\n    EmitVerboseTracesInQuery: \"x-ms-documentdb-query-emit-traces\",\n    EnableCrossPartitionQuery: \"x-ms-documentdb-query-enablecrosspartition\",\n    ParallelizeCrossPartitionQuery: \"x-ms-documentdb-query-parallelizecrosspartitionquery\",\n    ResponseContinuationTokenLimitInKB: \"x-ms-documentdb-responsecontinuationtokenlimitinkb\",\n\n    // QueryMetrics\n    // Request header to tell backend to give you query metrics.\n    PopulateQueryMetrics: \"x-ms-documentdb-populatequerymetrics\",\n    // Response header that holds the serialized version of query metrics.\n    QueryMetrics: \"x-ms-documentdb-query-metrics\",\n\n    // IndexMetrics\n    // Request header to tell backend to give you index metrics.\n    PopulateIndexMetrics: \"x-ms-cosmos-populateindexmetrics\",\n    // Response header that holds the serialized version of index metrics.\n    IndexUtilization: \"x-ms-cosmos-index-utilization\",\n    // Version headers and values\n    Version: \"x-ms-version\",\n\n    // Owner name\n    OwnerFullName: \"x-ms-alt-content-path\",\n\n    // Owner ID used for name based request in session token.\n    OwnerId: \"x-ms-content-path\",\n\n    // Partition Key\n    PartitionKey: \"x-ms-documentdb-partitionkey\",\n    PartitionKeyRangeID: \"x-ms-documentdb-partitionkeyrangeid\",\n\n    // Epk Range headers\n    StartEpk: \"x-ms-start-epk\",\n    EndEpk: \"x-ms-end-epk\",\n\n    // Read Feed Type\n    ReadFeedKeyType: \"x-ms-read-key-type\",\n\n    // Quota Info\n    MaxEntityCount: \"x-ms-root-entity-max-count\",\n    CurrentEntityCount: \"x-ms-root-entity-current-count\",\n    CollectionQuotaInMb: \"x-ms-collection-quota-mb\",\n    CollectionCurrentUsageInMb: \"x-ms-collection-usage-mb\",\n    MaxMediaStorageUsageInMB: \"x-ms-max-media-storage-usage-mb\",\n    CurrentMediaStorageUsageInMB: \"x-ms-media-storage-usage-mb\",\n    RequestCharge: \"x-ms-request-charge\",\n    PopulateQuotaInfo: \"x-ms-documentdb-populatequotainfo\",\n    MaxResourceQuota: \"x-ms-resource-quota\",\n\n    // Offer header\n    OfferType: \"x-ms-offer-type\",\n    OfferThroughput: \"x-ms-offer-throughput\",\n    AutoscaleSettings: \"x-ms-cosmos-offer-autopilot-settings\",\n\n    // Custom RUs/minute headers\n    DisableRUPerMinuteUsage: \"x-ms-documentdb-disable-ru-per-minute-usage\",\n    IsRUPerMinuteUsed: \"x-ms-documentdb-is-ru-per-minute-used\",\n    OfferIsRUPerMinuteThroughputEnabled: \"x-ms-offer-is-ru-per-minute-throughput-enabled\",\n\n    // Index progress headers\n    IndexTransformationProgress: \"x-ms-documentdb-collection-index-transformation-progress\",\n    LazyIndexingProgress: \"x-ms-documentdb-collection-lazy-indexing-progress\",\n\n    // Upsert header\n    IsUpsert: \"x-ms-documentdb-is-upsert\",\n\n    // Sub status of the error\n    SubStatus: \"x-ms-substatus\",\n\n    // StoredProcedure related headers\n    EnableScriptLogging: \"x-ms-documentdb-script-enable-logging\",\n    ScriptLogResults: \"x-ms-documentdb-script-log-results\",\n\n    // Multi-Region Write\n    ALLOW_MULTIPLE_WRITES: \"x-ms-cosmos-allow-tentative-writes\",\n\n    // Bulk/Batch header\n    IsBatchRequest: \"x-ms-cosmos-is-batch-request\",\n    IsBatchAtomic: \"x-ms-cosmos-batch-atomic\",\n    BatchContinueOnError: \"x-ms-cosmos-batch-continue-on-error\",\n\n    // Dedicated Gateway Headers\n    DedicatedGatewayPerRequestCacheStaleness: \"x-ms-dedicatedgateway-max-age\",\n\n    // Cache Refresh header\n    ForceRefresh: \"x-ms-force-refresh\",\n\n    // Priority Based throttling header\n    PriorityLevel: \"x-ms-cosmos-priority-level\",\n  },\n\n  // GlobalDB related constants\n  WritableLocations: \"writableLocations\",\n  ReadableLocations: \"readableLocations\",\n  LocationUnavailableExpirationTimeInMs: 5 * 60 * 1000, // 5 minutes\n\n  // ServiceDocument Resource\n  ENABLE_MULTIPLE_WRITABLE_LOCATIONS: \"enableMultipleWriteLocations\",\n\n  // Background refresh time\n  DefaultUnavailableLocationExpirationTimeMS: 5 * 60 * 1000,\n\n  // Client generated retry count response header\n  ThrottleRetryCount: \"x-ms-throttle-retry-count\",\n  ThrottleRetryWaitTimeInMs: \"x-ms-throttle-retry-wait-time-ms\",\n\n  // Platform\n  CurrentVersion: \"2020-07-15\",\n  AzureNamespace: \"Azure.Cosmos\",\n  AzurePackageName: \"@azure/cosmos\",\n  SDKName: \"azure-cosmos-js\",\n  SDKVersion: \"4.0.0\",\n\n  // Diagnostics\n  CosmosDbDiagnosticLevelEnvVarName: \"AZURE_COSMOSDB_DIAGNOSTICS_LEVEL\",\n\n  // Bulk Operations\n  DefaultMaxBulkRequestBodySizeInBytes: 220201,\n\n  Quota: {\n    CollectionSize: \"collectionSize\",\n  },\n\n  Path: {\n    Root: \"/\",\n    DatabasesPathSegment: \"dbs\",\n    CollectionsPathSegment: \"colls\",\n    UsersPathSegment: \"users\",\n    DocumentsPathSegment: \"docs\",\n    PermissionsPathSegment: \"permissions\",\n    StoredProceduresPathSegment: \"sprocs\",\n    TriggersPathSegment: \"triggers\",\n    UserDefinedFunctionsPathSegment: \"udfs\",\n    ConflictsPathSegment: \"conflicts\",\n    AttachmentsPathSegment: \"attachments\",\n    PartitionKeyRangesPathSegment: \"pkranges\",\n    SchemasPathSegment: \"schemas\",\n    OffersPathSegment: \"offers\",\n    TopologyPathSegment: \"topology\",\n    DatabaseAccountPathSegment: \"databaseaccount\",\n  },\n\n  PartitionKeyRange: {\n    // Partition Key Range Constants\n    MinInclusive: \"minInclusive\",\n    MaxExclusive: \"maxExclusive\",\n    Id: \"id\",\n  } as PartitionKeyRangePropertiesNames,\n\n  QueryRangeConstants: {\n    // Partition Key Range Constants\n    MinInclusive: \"minInclusive\",\n    MaxExclusive: \"maxExclusive\",\n    min: \"min\",\n  },\n\n  /**\n   * @deprecated Use EffectivePartitionKeyConstants instead\n   */\n  EffectiveParitionKeyConstants: {\n    MinimumInclusiveEffectivePartitionKey: \"\",\n    MaximumExclusiveEffectivePartitionKey: \"FF\",\n  },\n\n  EffectivePartitionKeyConstants: {\n    MinimumInclusiveEffectivePartitionKey: \"\",\n    MaximumExclusiveEffectivePartitionKey: \"FF\",\n  },\n};\n\n/**\n * @hidden\n */\nexport enum ResourceType {\n  none = \"\",\n  database = \"dbs\",\n  offer = \"offers\",\n  user = \"users\",\n  permission = \"permissions\",\n  container = \"colls\",\n  conflicts = \"conflicts\",\n  sproc = \"sprocs\",\n  udf = \"udfs\",\n  trigger = \"triggers\",\n  item = \"docs\",\n  pkranges = \"pkranges\",\n  partitionkey = \"partitionKey\",\n}\n\n/**\n * @hidden\n */\nexport enum HTTPMethod {\n  get = \"GET\",\n  patch = \"PATCH\",\n  post = \"POST\",\n  put = \"PUT\",\n  delete = \"DELETE\",\n}\n\n/**\n * @hidden\n */\nexport enum OperationType {\n  Create = \"create\",\n  Replace = \"replace\",\n  Upsert = \"upsert\",\n  Delete = \"delete\",\n  Read = \"read\",\n  Query = \"query\",\n  Execute = \"execute\",\n  Batch = \"batch\",\n  Patch = \"patch\",\n}\n\n/**\n * @hidden\n */\nexport enum CosmosKeyType {\n  PrimaryMaster = \"PRIMARY_MASTER\",\n  SecondaryMaster = \"SECONDARY_MASTER\",\n  PrimaryReadOnly = \"PRIMARY_READONLY\",\n  SecondaryReadOnly = \"SECONDARY_READONLY\",\n}\n\n/**\n * @hidden\n */\nexport enum CosmosContainerChildResourceKind {\n  Item = \"ITEM\",\n  StoredProcedure = \"STORED_PROCEDURE\",\n  UserDefinedFunction = \"USER_DEFINED_FUNCTION\",\n  Trigger = \"TRIGGER\",\n}\n/**\n * @hidden\n */\nexport enum PermissionScopeValues {\n  /**\n   * Values which set permission Scope applicable to control plane related operations.\n   */\n  ScopeAccountReadValue = 0x0001,\n  ScopeAccountListDatabasesValue = 0x0002,\n  ScopeDatabaseReadValue = 0x0004,\n  ScopeDatabaseReadOfferValue = 0x0008,\n  ScopeDatabaseListContainerValue = 0x0010,\n  ScopeContainerReadValue = 0x0020,\n  ScopeContainerReadOfferValue = 0x0040,\n\n  ScopeAccountCreateDatabasesValue = 0x0001,\n  ScopeAccountDeleteDatabasesValue = 0x0002,\n  ScopeDatabaseDeleteValue = 0x0004,\n  ScopeDatabaseReplaceOfferValue = 0x0008,\n  ScopeDatabaseCreateContainerValue = 0x0010,\n  ScopeDatabaseDeleteContainerValue = 0x0020,\n  ScopeContainerReplaceValue = 0x0040,\n  ScopeContainerDeleteValue = 0x0080,\n  ScopeContainerReplaceOfferValue = 0x0100,\n\n  ScopeAccountReadAllAccessValue = 0xffff,\n  ScopeDatabaseReadAllAccessValue = PermissionScopeValues.ScopeDatabaseReadValue |\n    PermissionScopeValues.ScopeDatabaseReadOfferValue |\n    PermissionScopeValues.ScopeDatabaseListContainerValue |\n    PermissionScopeValues.ScopeContainerReadValue |\n    PermissionScopeValues.ScopeContainerReadOfferValue,\n\n  ScopeContainersReadAllAccessValue = PermissionScopeValues.ScopeContainerReadValue |\n    PermissionScopeValues.ScopeContainerReadOfferValue,\n\n  ScopeAccountWriteAllAccessValue = 0xffff,\n  ScopeDatabaseWriteAllAccessValue = PermissionScopeValues.ScopeDatabaseDeleteValue |\n    PermissionScopeValues.ScopeDatabaseReplaceOfferValue |\n    PermissionScopeValues.ScopeDatabaseCreateContainerValue |\n    PermissionScopeValues.ScopeDatabaseDeleteContainerValue |\n    PermissionScopeValues.ScopeContainerReplaceValue |\n    PermissionScopeValues.ScopeContainerDeleteValue |\n    PermissionScopeValues.ScopeContainerReplaceOfferValue,\n\n  ScopeContainersWriteAllAccessValue = PermissionScopeValues.ScopeContainerReplaceValue |\n    PermissionScopeValues.ScopeContainerDeleteValue |\n    PermissionScopeValues.ScopeContainerReplaceOfferValue,\n\n  /**\n   * Values which set permission Scope applicable to data plane related operations.\n   */\n  ScopeContainerExecuteQueriesValue = 0x00000001,\n  ScopeContainerReadFeedsValue = 0x00000002,\n  ScopeContainerReadStoredProceduresValue = 0x00000004,\n  ScopeContainerReadUserDefinedFunctionsValue = 0x00000008,\n  ScopeContainerReadTriggersValue = 0x00000010,\n  ScopeContainerReadConflictsValue = 0x00000020,\n  ScopeItemReadValue = 0x00000040,\n  ScopeStoredProcedureReadValue = 0x00000080,\n  ScopeUserDefinedFunctionReadValue = 0x00000100,\n  ScopeTriggerReadValue = 0x00000200,\n\n  ScopeContainerCreateItemsValue = 0x00000001,\n  ScopeContainerReplaceItemsValue = 0x00000002,\n  ScopeContainerUpsertItemsValue = 0x00000004,\n  ScopeContainerDeleteItemsValue = 0x00000008,\n  ScopeContainerCreateStoredProceduresValue = 0x00000010,\n  ScopeContainerReplaceStoredProceduresValue = 0x00000020,\n  ScopeContainerDeleteStoredProceduresValue = 0x00000040,\n  ScopeContainerExecuteStoredProceduresValue = 0x00000080,\n  ScopeContainerCreateTriggersValue = 0x00000100,\n  ScopeContainerReplaceTriggersValue = 0x00000200,\n  ScopeContainerDeleteTriggersValue = 0x00000400,\n  ScopeContainerCreateUserDefinedFunctionsValue = 0x00000800,\n  ScopeContainerReplaceUserDefinedFunctionsValue = 0x00001000,\n  ScopeContainerDeleteUserDefinedFunctionSValue = 0x00002000,\n  ScopeContainerDeleteCONFLICTSValue = 0x00004000,\n  ScopeItemReplaceValue = 0x00010000,\n  ScopeItemUpsertValue = 0x00020000,\n  ScopeItemDeleteValue = 0x00040000,\n  ScopeStoredProcedureReplaceValue = 0x00100000,\n  ScopeStoredProcedureDeleteValue = 0x00200000,\n  ScopeStoredProcedureExecuteValue = 0x00400000,\n  ScopeUserDefinedFunctionReplaceValue = 0x00800000,\n  ScopeUserDefinedFunctionDeleteValue = 0x01000000,\n  ScopeTriggerReplaceValue = 0x02000000,\n  ScopeTriggerDeleteValue = 0x04000000,\n\n  ScopeContainerReadAllAccessValue = 0xffffffff,\n  ScopeItemReadAllAccessValue = PermissionScopeValues.ScopeContainerExecuteQueriesValue |\n    PermissionScopeValues.ScopeItemReadValue,\n  ScopeContainerWriteAllAccessValue = 0xffffffff,\n  ScopeItemWriteAllAccessValue = PermissionScopeValues.ScopeContainerCreateItemsValue |\n    PermissionScopeValues.ScopeContainerReplaceItemsValue |\n    PermissionScopeValues.ScopeContainerUpsertItemsValue |\n    PermissionScopeValues.ScopeContainerDeleteItemsValue |\n    PermissionScopeValues.ScopeItemReplaceValue |\n    PermissionScopeValues.ScopeItemUpsertValue |\n    PermissionScopeValues.ScopeItemDeleteValue,\n\n  NoneValue = 0,\n}\n/**\n * @hidden\n */\nexport enum SasTokenPermissionKind {\n  ContainerCreateItems = PermissionScopeValues.ScopeContainerCreateItemsValue,\n  ContainerReplaceItems = PermissionScopeValues.ScopeContainerReplaceItemsValue,\n  ContainerUpsertItems = PermissionScopeValues.ScopeContainerUpsertItemsValue,\n  ContainerDeleteItems = PermissionScopeValues.ScopeContainerDeleteValue,\n  ContainerExecuteQueries = PermissionScopeValues.ScopeContainerExecuteQueriesValue,\n  ContainerReadFeeds = PermissionScopeValues.ScopeContainerReadFeedsValue,\n  ContainerCreateStoreProcedure = PermissionScopeValues.ScopeContainerCreateStoredProceduresValue,\n  ContainerReadStoreProcedure = PermissionScopeValues.ScopeContainerReadStoredProceduresValue,\n  ContainerReplaceStoreProcedure = PermissionScopeValues.ScopeContainerReplaceStoredProceduresValue,\n  ContainerDeleteStoreProcedure = PermissionScopeValues.ScopeContainerDeleteStoredProceduresValue,\n  ContainerCreateTriggers = PermissionScopeValues.ScopeContainerCreateTriggersValue,\n  ContainerReadTriggers = PermissionScopeValues.ScopeContainerReadTriggersValue,\n  ContainerReplaceTriggers = PermissionScopeValues.ScopeContainerReplaceTriggersValue,\n  ContainerDeleteTriggers = PermissionScopeValues.ScopeContainerDeleteTriggersValue,\n  ContainerCreateUserDefinedFunctions = PermissionScopeValues.ScopeContainerCreateUserDefinedFunctionsValue,\n  ContainerReadUserDefinedFunctions = PermissionScopeValues.ScopeContainerReadUserDefinedFunctionsValue,\n  ContainerReplaceUserDefinedFunctions = PermissionScopeValues.ScopeContainerReplaceUserDefinedFunctionsValue,\n  ContainerDeleteUserDefinedFunctions = PermissionScopeValues.ScopeContainerDeleteUserDefinedFunctionSValue,\n  ContainerExecuteStoredProcedure = PermissionScopeValues.ScopeContainerExecuteStoredProceduresValue,\n  ContainerReadConflicts = PermissionScopeValues.ScopeContainerReadConflictsValue,\n  ContainerDeleteConflicts = PermissionScopeValues.ScopeContainerDeleteCONFLICTSValue,\n  ContainerReadAny = PermissionScopeValues.ScopeContainerReadOfferValue,\n  ContainerFullAccess = PermissionScopeValues.ScopeContainerReadAllAccessValue,\n  ItemReadAny = PermissionScopeValues.ScopeItemReplaceValue,\n  ItemFullAccess = PermissionScopeValues.ScopeItemReadAllAccessValue,\n  ItemRead = PermissionScopeValues.ScopeItemReadValue,\n  ItemReplace = PermissionScopeValues.ScopeItemReplaceValue,\n  ItemUpsert = PermissionScopeValues.ScopeItemUpsertValue,\n  ItemDelete = PermissionScopeValues.ScopeItemDeleteValue,\n  StoreProcedureRead = PermissionScopeValues.ScopeStoredProcedureReadValue,\n  StoreProcedureReplace = PermissionScopeValues.ScopeStoredProcedureReplaceValue,\n  StoreProcedureDelete = PermissionScopeValues.ScopeStoredProcedureDeleteValue,\n  StoreProcedureExecute = PermissionScopeValues.ScopeStoredProcedureExecuteValue,\n  UserDefinedFuntionRead = PermissionScopeValues.ScopeUserDefinedFunctionReadValue,\n  UserDefinedFuntionReplace = PermissionScopeValues.ScopeUserDefinedFunctionReplaceValue,\n  UserDefinedFuntionDelete = PermissionScopeValues.ScopeUserDefinedFunctionDeleteValue,\n  TriggerRead = PermissionScopeValues.ScopeTriggerReadValue,\n  TriggerReplace = PermissionScopeValues.ScopeTriggerReplaceValue,\n  TriggerDelete = PermissionScopeValues.ScopeTriggerDeleteValue,\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosClientOptions } from \"../CosmosClientOptions\";\nimport { OperationType, ResourceType } from \"./constants\";\n\nconst trimLeftSlashes = new RegExp(\"^[/]+\");\nconst trimRightSlashes = new RegExp(\"[/]+$\");\nconst illegalResourceIdCharacters = new RegExp(\"[/\\\\\\\\?#]\");\nconst illegalItemResourceIdCharacters = new RegExp(\"[/\\\\\\\\#]\");\n\n/** @hidden */\nexport function jsonStringifyAndEscapeNonASCII(arg: unknown): string {\n  // TODO: better way for this? Not sure.\n  // escapes non-ASCII characters as \\uXXXX\n  return JSON.stringify(arg).replace(/[\\u007F-\\uFFFF]/g, (m) => {\n    return \"\\\\u\" + (\"0000\" + m.charCodeAt(0).toString(16)).slice(-4);\n  });\n}\n\n/**\n * @hidden\n */\nexport function parseLink(resourcePath: string): {\n  type: ResourceType;\n  objectBody: {\n    id: string;\n    self: string;\n  };\n} {\n  if (resourcePath.length === 0) {\n    /* for DatabaseAccount case, both type and objectBody will be undefined. */\n    return {\n      type: undefined,\n      objectBody: undefined,\n    };\n  }\n\n  if (resourcePath[resourcePath.length - 1] !== \"/\") {\n    resourcePath = resourcePath + \"/\";\n  }\n\n  if (resourcePath[0] !== \"/\") {\n    resourcePath = \"/\" + resourcePath;\n  }\n\n  /*\n         The path will be in the form of /[resourceType]/[resourceId]/ ....\n         /[resourceType]//[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId]/\n         or /[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId]/[resourceType]/[resourceId]/ ....\n          /[resourceType]/[resourceId]/\n         The result of split will be in the form of\n         [[[resourceType], [resourceId] ... ,[resourceType], [resourceId], \"\"]\n         In the first case, to extract the resourceId it will the element before last ( at length -2 )\n         and the type will be before it ( at length -3 )\n         In the second case, to extract the resource type it will the element before last ( at length -2 )\n        */\n  const pathParts = resourcePath.split(\"/\");\n  let id;\n  let type: ResourceType;\n  if (pathParts.length % 2 === 0) {\n    // request in form /[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId].\n    id = pathParts[pathParts.length - 2];\n    type = pathParts[pathParts.length - 3] as ResourceType;\n  } else {\n    // request in form /[resourceType]/[resourceId]/ .... /[resourceType]/.\n    id = pathParts[pathParts.length - 3];\n    type = pathParts[pathParts.length - 2] as ResourceType;\n  }\n\n  const result = {\n    type,\n    objectBody: {\n      id,\n      self: resourcePath,\n    },\n  };\n\n  return result;\n}\n\n/**\n * @hidden\n */\nexport function isReadRequest(operationType: OperationType): boolean {\n  return operationType === OperationType.Read || operationType === OperationType.Query;\n}\n\n/**\n * @hidden\n */\nexport function sleep(time: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n\n/**\n * @hidden\n */\nexport function getContainerLink(link: string): string {\n  return link.split(\"/\").slice(0, 4).join(\"/\");\n}\n\n/**\n * @hidden\n */\nexport function prepareURL(endpoint: string, path: string): string {\n  return trimSlashes(endpoint) + path;\n}\n\n/**\n * @hidden\n */\nexport function trimSlashes(source: string): string {\n  return source.replace(trimLeftSlashes, \"\").replace(trimRightSlashes, \"\");\n}\n\n/**\n * @hidden\n */\nexport function getHexaDigit(): string {\n  return Math.floor(Math.random() * 16).toString(16);\n}\n\n/**\n * @hidden\n */\nexport function parsePath(path: string): string[] {\n  const pathParts = [];\n  let currentIndex = 0;\n\n  const throwError = (): never => {\n    throw new Error(\"Path \" + path + \" is invalid at index \" + currentIndex);\n  };\n\n  const getEscapedToken = (): string => {\n    const quote = path[currentIndex];\n    let newIndex = ++currentIndex;\n\n    for (;;) {\n      newIndex = path.indexOf(quote, newIndex);\n      if (newIndex === -1) {\n        throwError();\n      }\n\n      if (path[newIndex - 1] !== \"\\\\\") {\n        break;\n      }\n\n      ++newIndex;\n    }\n\n    const token = path.substr(currentIndex, newIndex - currentIndex);\n    currentIndex = newIndex + 1;\n    return token;\n  };\n\n  const getToken = (): string => {\n    const newIndex = path.indexOf(\"/\", currentIndex);\n    let token = null;\n    if (newIndex === -1) {\n      token = path.substr(currentIndex);\n      currentIndex = path.length;\n    } else {\n      token = path.substr(currentIndex, newIndex - currentIndex);\n      currentIndex = newIndex;\n    }\n\n    token = token.trim();\n    return token;\n  };\n\n  while (currentIndex < path.length) {\n    if (path[currentIndex] !== \"/\") {\n      throwError();\n    }\n\n    if (++currentIndex === path.length) {\n      break;\n    }\n\n    if (path[currentIndex] === '\"' || path[currentIndex] === \"'\") {\n      pathParts.push(getEscapedToken());\n    } else {\n      pathParts.push(getToken());\n    }\n  }\n\n  return pathParts;\n}\n\n/**\n * @hidden\n */\nexport function isResourceValid(resource: { id?: string }, err: { message?: string }): boolean {\n  // TODO: fix strictness issues so that caller contexts respects the types of the functions\n  if (resource.id) {\n    if (typeof resource.id !== \"string\") {\n      err.message = \"Id must be a string.\";\n      return false;\n    }\n\n    if (\n      resource.id.indexOf(\"/\") !== -1 ||\n      resource.id.indexOf(\"\\\\\") !== -1 ||\n      resource.id.indexOf(\"?\") !== -1 ||\n      resource.id.indexOf(\"#\") !== -1\n    ) {\n      err.message = \"Id contains illegal chars.\";\n      return false;\n    }\n\n    if (resource.id[resource.id.length - 1] === \" \") {\n      err.message = \"Id ends with a space.\";\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @hidden\n */\nexport function isItemResourceValid(resource: { id?: string }, err: { message?: string }): boolean {\n  // TODO: fix strictness issues so that caller contexts respects the types of the functions\n  if (resource.id) {\n    if (typeof resource.id !== \"string\") {\n      err.message = \"Id must be a string.\";\n      return false;\n    }\n\n    if (\n      resource.id.indexOf(\"/\") !== -1 ||\n      resource.id.indexOf(\"\\\\\") !== -1 ||\n      resource.id.indexOf(\"#\") !== -1\n    ) {\n      err.message = \"Id contains illegal chars.\";\n      return false;\n    }\n  }\n  return true;\n}\n\n/** @hidden */\nexport function getIdFromLink(resourceLink: string): string {\n  resourceLink = trimSlashes(resourceLink);\n  return resourceLink;\n}\n\n/** @hidden */\nexport function getPathFromLink(resourceLink: string, resourceType?: string): string {\n  resourceLink = trimSlashes(resourceLink);\n  if (resourceType) {\n    return \"/\" + encodeURI(resourceLink) + \"/\" + resourceType;\n  } else {\n    return \"/\" + encodeURI(resourceLink);\n  }\n}\n\n/**\n * @hidden\n */\nexport function isStringNullOrEmpty(inputString: string): boolean {\n  // checks whether string is null, undefined, empty or only contains space\n  return !inputString || /^\\s*$/.test(inputString);\n}\n\n/**\n * @hidden\n */\nexport function trimSlashFromLeftAndRight(inputString: string): string {\n  if (typeof inputString !== \"string\") {\n    throw new Error(\"invalid input: input is not string\");\n  }\n\n  return inputString.replace(trimLeftSlashes, \"\").replace(trimRightSlashes, \"\");\n}\n\n/**\n * @hidden\n */\nexport function validateResourceId(resourceId: string): boolean {\n  // if resourceId is not a string or is empty throw an error\n  if (typeof resourceId !== \"string\" || isStringNullOrEmpty(resourceId)) {\n    throw new Error(\"Resource ID must be a string and cannot be undefined, null or empty\");\n  }\n\n  // if resource id contains illegal characters throw an error\n  if (illegalResourceIdCharacters.test(resourceId)) {\n    throw new Error(\"Illegal characters ['/', '\\\\', '#', '?'] cannot be used in Resource ID\");\n  }\n\n  return true;\n}\n\n/**\n * @hidden\n */\nexport function validateItemResourceId(resourceId: string): boolean {\n  // if resourceId is not a string or is empty throw an error\n  if (typeof resourceId !== \"string\" || isStringNullOrEmpty(resourceId)) {\n    throw new Error(\"Resource ID must be a string and cannot be undefined, null or empty\");\n  }\n\n  // if resource id contains illegal characters throw an error\n  if (illegalItemResourceIdCharacters.test(resourceId)) {\n    throw new Error(\"Illegal characters ['/', '\\\\', '#'] cannot be used in Resource ID\");\n  }\n\n  return true;\n}\n\n/**\n * @hidden\n */\nexport function getResourceIdFromPath(resourcePath: string): string {\n  if (!resourcePath || typeof resourcePath !== \"string\") {\n    return null;\n  }\n\n  const trimmedPath = trimSlashFromLeftAndRight(resourcePath);\n  const pathSegments = trimmedPath.split(\"/\");\n\n  // number of segments of a path must always be even\n  if (pathSegments.length % 2 !== 0) {\n    return null;\n  }\n\n  return pathSegments[pathSegments.length - 1];\n}\n\n/**\n * @hidden\n */\ninterface ConnectionObject {\n  AccountEndpoint: string;\n  AccountKey: string;\n}\n\n/**\n * @hidden\n */\nexport function parseConnectionString(connectionString: string): CosmosClientOptions {\n  const keyValueStrings = connectionString.split(\";\");\n  const { AccountEndpoint, AccountKey } = keyValueStrings.reduce(\n    (connectionObject, keyValueString: string) => {\n      const [key, ...value] = keyValueString.split(\"=\");\n      (connectionObject as any)[key] = value.join(\"=\");\n      return connectionObject;\n    },\n    {} as ConnectionObject\n  );\n  if (!AccountEndpoint || !AccountKey) {\n    throw new Error(\"Could not parse the provided connection string\");\n  }\n  return {\n    endpoint: AccountEndpoint,\n    key: AccountKey,\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * @hidden\n */\nexport interface StatusCodesType {\n  // Success\n  Ok: 200;\n  Created: 201;\n  Accepted: 202;\n  NoContent: 204;\n  NotModified: 304;\n\n  // Client error\n  BadRequest: 400;\n  Unauthorized: 401;\n  Forbidden: 403;\n  NotFound: 404;\n  MethodNotAllowed: 405;\n  RequestTimeout: 408;\n  Conflict: 409;\n  Gone: 410;\n  PreconditionFailed: 412;\n  RequestEntityTooLarge: 413;\n  TooManyRequests: 429;\n  RetryWith: 449;\n\n  // Server Error\n  InternalServerError: 500;\n  ServiceUnavailable: 503;\n\n  // System codes\n  ENOTFOUND: \"ENOTFOUND\";\n\n  // Operation pause and cancel. These are FAKE status codes for QOS logging purpose only.\n  OperationPaused: 1200;\n  OperationCancelled: 1201;\n}\n\n/**\n * @hidden\n */\nexport const StatusCodes: StatusCodesType = {\n  // Success\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NoContent: 204,\n  NotModified: 304,\n\n  // Client error\n  BadRequest: 400,\n  Unauthorized: 401,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  PreconditionFailed: 412,\n  RequestEntityTooLarge: 413,\n  TooManyRequests: 429,\n  RetryWith: 449,\n\n  // Server Error\n  InternalServerError: 500,\n  ServiceUnavailable: 503,\n\n  // System codes\n  ENOTFOUND: \"ENOTFOUND\",\n\n  // Operation pause and cancel. These are FAKE status codes for QOS logging purpose only.\n  OperationPaused: 1200,\n  OperationCancelled: 1201,\n};\n\n/**\n * @hidden\n */\nexport interface SubStatusCodesType {\n  Unknown: 0;\n\n  // 400: Bad Request Substatus\n  CrossPartitionQueryNotServable: 1004;\n\n  // 410: StatusCodeType_Gone: substatus\n  PartitionKeyRangeGone: 1002;\n  CompletingSplit: 1007;\n\n  // 404: NotFound Substatus\n  ReadSessionNotAvailable: 1002;\n\n  // 403: Forbidden Substatus\n  WriteForbidden: 3;\n  DatabaseAccountNotFound: 1008;\n}\n\n/**\n * @hidden\n */\nexport const SubStatusCodes: SubStatusCodesType = {\n  Unknown: 0,\n\n  // 400: Bad Request Substatus\n  CrossPartitionQueryNotServable: 1004,\n\n  // 410: StatusCodeType_Gone: substatus\n  PartitionKeyRangeGone: 1002,\n  CompletingSplit: 1007,\n  // 404: NotFound Substatus\n  ReadSessionNotAvailable: 1002,\n\n  // 403: Forbidden Substatus\n  WriteForbidden: 3,\n  DatabaseAccountNotFound: 1008,\n};\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"./constants\";\nimport { trimSlashFromLeftAndRight, validateResourceId, validateItemResourceId } from \"./helper\";\n\n/**\n * Would be used when creating or deleting a DocumentCollection\n * or a User in Azure Cosmos DB database service\n * @hidden\n * Given a database id, this creates a database link.\n * @param databaseId - The database id\n * @returns A database link in the format of `dbs/{0}`\n * with `{0}` being a Uri escaped version of the databaseId\n */\nexport function createDatabaseUri(databaseId: string): string {\n  databaseId = trimSlashFromLeftAndRight(databaseId);\n  validateResourceId(databaseId);\n\n  return Constants.Path.DatabasesPathSegment + \"/\" + databaseId;\n}\n\n/**\n * Given a database and collection id, this creates a collection link.\n * Would be used when updating or deleting a DocumentCollection, creating a\n * Document, a StoredProcedure, a Trigger, a UserDefinedFunction, or when executing a query\n * with CreateDocumentQuery in Azure Cosmos DB database service.\n * @param databaseId - The database id\n * @param collectionId - The collection id\n * @returns A collection link in the format of `dbs/{0}/colls/{1}`\n * with `{0}` being a Uri escaped version of the databaseId and `{1}` being collectionId\n * @hidden\n */\nexport function createDocumentCollectionUri(databaseId: string, collectionId: string): string {\n  collectionId = trimSlashFromLeftAndRight(collectionId);\n  validateResourceId(collectionId);\n\n  return (\n    createDatabaseUri(databaseId) + \"/\" + Constants.Path.CollectionsPathSegment + \"/\" + collectionId\n  );\n}\n\n/**\n * Given a database and user id, this creates a user link.\n * Would be used when creating a Permission, or when replacing or deleting\n * a User in Azure Cosmos DB database service\n * @param databaseId - The database id\n * @param userId - The user id\n * @returns A user link in the format of `dbs/{0}/users/{1}`\n * with `{0}` being a Uri escaped version of the databaseId and `{1}` being userId\n * @hidden\n */\nexport function createUserUri(databaseId: string, userId: string): string {\n  userId = trimSlashFromLeftAndRight(userId);\n  validateResourceId(userId);\n\n  return createDatabaseUri(databaseId) + \"/\" + Constants.Path.UsersPathSegment + \"/\" + userId;\n}\n\n/**\n * Given a database and collection id, this creates a collection link.\n * Would be used when creating an Attachment, or when replacing\n * or deleting a Document in Azure Cosmos DB database service\n * @param databaseId - The database id\n * @param collectionId - The collection id\n * @param documentId - The document id\n * @returns A document link in the format of\n * `dbs/{0}/colls/{1}/docs/{2}` with `{0}` being a Uri escaped version of\n * the databaseId, `{1}` being collectionId and `{2}` being the documentId\n * @hidden\n */\nexport function createDocumentUri(\n  databaseId: string,\n  collectionId: string,\n  documentId: string\n): string {\n  documentId = trimSlashFromLeftAndRight(documentId);\n  validateItemResourceId(documentId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.DocumentsPathSegment +\n    \"/\" +\n    documentId\n  );\n}\n\n/**\n * Given a database, collection and document id, this creates a document link.\n * Would be used when replacing or deleting a Permission in Azure Cosmos DB database service.\n * @param databaseId    -The database Id\n * @param userId        -The user Id\n * @param permissionId  - The permissionId\n * @returns A permission link in the format of `dbs/{0}/users/{1}/permissions/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being userId and `{2}` being permissionId\n * @hidden\n */\nexport function createPermissionUri(\n  databaseId: string,\n  userId: string,\n  permissionId: string\n): string {\n  permissionId = trimSlashFromLeftAndRight(permissionId);\n  validateResourceId(permissionId);\n\n  return (\n    createUserUri(databaseId, userId) +\n    \"/\" +\n    Constants.Path.PermissionsPathSegment +\n    \"/\" +\n    permissionId\n  );\n}\n\n/**\n * Given a database, collection and stored proc id, this creates a stored proc link.\n * Would be used when replacing, executing, or deleting a StoredProcedure in\n * Azure Cosmos DB database service.\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param storedProcedureId -The stored procedure Id\n * @returns A stored procedure link in the format of\n * `dbs/{0}/colls/{1}/sprocs/{2}` with `{0}` being a Uri escaped version of the databaseId,\n * `{1}` being collectionId and `{2}` being the storedProcedureId\n * @hidden\n */\nexport function createStoredProcedureUri(\n  databaseId: string,\n  collectionId: string,\n  storedProcedureId: string\n): string {\n  storedProcedureId = trimSlashFromLeftAndRight(storedProcedureId);\n  validateResourceId(storedProcedureId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.StoredProceduresPathSegment +\n    \"/\" +\n    storedProcedureId\n  );\n}\n\n/**\n * Given a database, collection and trigger id, this creates a trigger link.\n * Would be used when replacing, executing, or deleting a Trigger in Azure Cosmos DB database service\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param triggerId         -The trigger Id\n * @returns A trigger link in the format of\n * `dbs/{0}/colls/{1}/triggers/{2}` with `{0}` being a Uri escaped version of the databaseId,\n * `{1}` being collectionId and `{2}` being the triggerId\n * @hidden\n */\nexport function createTriggerUri(\n  databaseId: string,\n  collectionId: string,\n  triggerId: string\n): string {\n  triggerId = trimSlashFromLeftAndRight(triggerId);\n  validateResourceId(triggerId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.TriggersPathSegment +\n    \"/\" +\n    triggerId\n  );\n}\n\n/**\n * Given a database, collection and udf id, this creates a udf link.\n * Would be used when replacing, executing, or deleting a UserDefinedFunction in\n * Azure Cosmos DB database service\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param udfId             -The User Defined Function Id\n * @returns A udf link in the format of `dbs/{0}/colls/{1}/udfs/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being collectionId and `{2}` being the udfId\n * @hidden\n */\nexport function createUserDefinedFunctionUri(\n  databaseId: string,\n  collectionId: string,\n  udfId: string\n): string {\n  udfId = trimSlashFromLeftAndRight(udfId);\n  validateResourceId(udfId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.UserDefinedFunctionsPathSegment +\n    \"/\" +\n    udfId\n  );\n}\n\n/**\n * Given a database, collection and conflict id, this creates a conflict link.\n * Would be used when creating a Conflict in Azure Cosmos DB database service.\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param conflictId        -The conflict Id\n * @returns A conflict link in the format of `dbs/{0}/colls/{1}/conflicts/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being collectionId and `{2}` being the conflictId\n * @hidden\n */\nexport function createConflictUri(\n  databaseId: string,\n  collectionId: string,\n  conflictId: string\n): string {\n  conflictId = trimSlashFromLeftAndRight(conflictId);\n  validateResourceId(conflictId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.ConflictsPathSegment +\n    \"/\" +\n    conflictId\n  );\n}\n\n/**\n * Given a database, collection and conflict id, this creates a conflict link.\n * Would be used when creating a Conflict in Azure Cosmos DB database service.\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param documentId        -The document Id\n * @param attachmentId      -The attachment Id\n * @returns A conflict link in the format of `dbs/{0}/colls/{1}/conflicts/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being collectionId and `{2}` being the conflictId\n * @hidden\n */\nexport function createAttachmentUri(\n  databaseId: string,\n  collectionId: string,\n  documentId: string,\n  attachmentId: string\n): string {\n  attachmentId = trimSlashFromLeftAndRight(attachmentId);\n  validateResourceId(attachmentId);\n\n  return (\n    createDocumentUri(databaseId, collectionId, documentId) +\n    \"/\" +\n    Constants.Path.AttachmentsPathSegment +\n    \"/\" +\n    attachmentId\n  );\n}\n\n/**\n * Given a database and collection, this creates a partition key ranges link in\n *  the Azure Cosmos DB database service.\n * @param databaseId - The database Id\n * @param collectionId - The collection Id\n * @returns A partition key ranges link in the format of\n * `dbs/{0}/colls/{1}/pkranges` with `{0}` being a Uri escaped version of the databaseId and `{1}` being collectionId\n * @hidden\n */\nexport function createPartitionKeyRangesUri(databaseId: string, collectionId: string): string {\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.PartitionKeyRangesPathSegment\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/// <reference lib=\"dom\"/>\n\nexport function encodeUTF8(str: string): Uint8Array {\n  const bytes = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n  return bytes;\n}\n\nexport function encodeBase64(value: ArrayBuffer): string {\n  if (\"function\" !== typeof btoa) {\n    throw new Error(\"Your browser environment is missing the global `btoa` function\");\n  }\n\n  let binary = \"\";\n  const bytes = new Uint8Array(value);\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nlet safeatob: any;\n\n// base64 character set, plus padding character (=)\nconst b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n// Regular expression to check formal correctness of base64 encoded strings\nconst b64re = /^(?:[A-Za-z\\d+/]{4})*?(?:[A-Za-z\\d+/]{2}(?:==)?|[A-Za-z\\d+/]{3}=?)?$/;\n\nif (\"function\" !== typeof atob) {\n  // atob implementation for React Native\n  safeatob = (str: string): string => {\n    // atob can work with strings with whitespaces, even inside the encoded part,\n    // but only \\t, \\n, \\f, \\r and ' ', which can be stripped.\n    str = String(str).replace(/[\\t\\n\\f\\r ]+/g, \"\");\n    if (!b64re.test(str)) {\n      throw new TypeError(\n        \"Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.\"\n      );\n    }\n\n    // Adding the padding if missing, for simplicity\n    str += \"==\".slice(2 - (str.length & 3));\n    let bitmap;\n    let result = \"\";\n    let r1;\n    let r2;\n    let i = 0;\n    for (; i < str.length; ) {\n      bitmap =\n        (b64.indexOf(str.charAt(i++)) << 18) |\n        (b64.indexOf(str.charAt(i++)) << 12) |\n        ((r1 = b64.indexOf(str.charAt(i++))) << 6) |\n        (r2 = b64.indexOf(str.charAt(i++)));\n\n      result +=\n        r1 === 64\n          ? String.fromCharCode((bitmap >> 16) & 255)\n          : r2 === 64\n          ? String.fromCharCode((bitmap >> 16) & 255, (bitmap >> 8) & 255)\n          : String.fromCharCode((bitmap >> 16) & 255, (bitmap >> 8) & 255, bitmap & 255);\n    }\n    return result;\n  };\n} else {\n  safeatob = atob;\n}\n\nexport default safeatob;\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// eslint-disable-next-line @azure/azure-sdk/ts-no-window\nconst globalRef: any = typeof self === \"undefined\" ? window : self;\n\nif (!globalRef) {\n  throw new Error(\"Could not find global\");\n}\n\nconst globalCrypto: Crypto = globalRef.crypto || globalRef.msCrypto;\n\nif (!globalCrypto || !globalCrypto.subtle) {\n  throw new Error(\"Browser does not support cryptography functions\");\n}\n\nexport { globalCrypto };\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { encodeUTF8, encodeBase64 } from \"./encode\";\nimport atob from \"./atob\";\nimport { globalCrypto } from \"./globalCrypto\";\n\nexport async function hmac(key: string, message: string): Promise<string> {\n  const importParams: HmacImportParams = { name: \"HMAC\", hash: { name: \"SHA-256\" } };\n  const encodedMessage = new Uint8Array(\n    [...unescape(encodeURIComponent(message))].map((c) => c.charCodeAt(0))\n  );\n  const encodedKey = encodeUTF8(atob(key));\n  const cryptoKey = await globalCrypto.subtle.importKey(\"raw\", encodedKey, importParams, false, [\n    \"sign\",\n  ]);\n  const signature = await globalCrypto.subtle.sign(importParams, cryptoKey, encodedMessage);\n\n  return encodeBase64(signature);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { hmac } from \"./hmac\";\nimport { HTTPMethod, ResourceType, Constants } from \"../common\";\n\nexport async function generateHeaders(\n  masterKey: string,\n  method: HTTPMethod,\n  resourceType: ResourceType = ResourceType.none,\n  resourceId: string = \"\",\n  date = new Date()\n): Promise<{\n  [x: string]: string;\n}> {\n  if (masterKey.startsWith(\"type=sas&\")) {\n    return {\n      [Constants.HttpHeaders.Authorization]: encodeURIComponent(masterKey),\n      [Constants.HttpHeaders.XDate]: date.toUTCString(),\n    };\n  }\n  const sig = await signature(masterKey, method, resourceType, resourceId, date);\n\n  return {\n    [Constants.HttpHeaders.Authorization]: sig,\n    [Constants.HttpHeaders.XDate]: date.toUTCString(),\n  };\n}\n\nasync function signature(\n  masterKey: string,\n  method: HTTPMethod,\n  resourceType: ResourceType,\n  resourceId: string = \"\",\n  date = new Date()\n): Promise<string> {\n  const type = \"master\";\n  const version = \"1.0\";\n  const text =\n    method.toLowerCase() +\n    \"\\n\" +\n    resourceType.toLowerCase() +\n    \"\\n\" +\n    resourceId +\n    \"\\n\" +\n    date.toUTCString().toLowerCase() +\n    \"\\n\" +\n    \"\" +\n    \"\\n\";\n\n  const signed = await hmac(masterKey, text);\n\n  return encodeURIComponent(\"type=\" + type + \"&ver=\" + version + \"&sig=\" + signed);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { generateHeaders } from \"./utils/headers\";\nimport {\n  Constants,\n  getResourceIdFromPath,\n  HTTPMethod,\n  ResourceType,\n  trimSlashFromLeftAndRight,\n} from \"./common\";\nimport { CosmosClientOptions } from \"./CosmosClientOptions\";\nimport { CosmosHeaders } from \"./queryExecutionContext\";\n\n/** @hidden */\nexport interface RequestInfo {\n  verb: HTTPMethod;\n  path: string;\n  resourceId: string;\n  resourceType: ResourceType;\n  headers: CosmosHeaders;\n}\n\nexport type TokenProvider = (requestInfo: RequestInfo) => Promise<string>;\n\n/**\n * @hidden\n */\nexport async function setAuthorizationHeader(\n  clientOptions: CosmosClientOptions,\n  verb: HTTPMethod,\n  path: string,\n  resourceId: string,\n  resourceType: ResourceType,\n  headers: CosmosHeaders\n): Promise<void> {\n  if (clientOptions.permissionFeed) {\n    clientOptions.resourceTokens = {};\n    for (const permission of clientOptions.permissionFeed) {\n      const id = getResourceIdFromPath(permission.resource);\n      if (!id) {\n        throw new Error(`authorization error: ${id} \\\n                          is an invalid resourceId in permissionFeed`);\n      }\n\n      clientOptions.resourceTokens[id] = (permission as any)._token; // TODO: any\n    }\n  }\n\n  if (clientOptions.key) {\n    await setAuthorizationTokenHeaderUsingMasterKey(\n      verb,\n      resourceId,\n      resourceType,\n      headers,\n      clientOptions.key\n    );\n  } else if (clientOptions.resourceTokens) {\n    headers[Constants.HttpHeaders.Authorization] = encodeURIComponent(\n      getAuthorizationTokenUsingResourceTokens(clientOptions.resourceTokens, path, resourceId)\n    );\n  } else if (clientOptions.tokenProvider) {\n    headers[Constants.HttpHeaders.Authorization] = encodeURIComponent(\n      await clientOptions.tokenProvider({ verb, path, resourceId, resourceType, headers })\n    );\n  }\n}\n\n/**\n * The default function for setting header token using the masterKey\n * @hidden\n */\nexport async function setAuthorizationTokenHeaderUsingMasterKey(\n  verb: HTTPMethod,\n  resourceId: string,\n  resourceType: ResourceType,\n  headers: CosmosHeaders,\n  masterKey: string\n): Promise<void> {\n  // TODO This should live in cosmos-sign\n  if (resourceType === ResourceType.offer) {\n    resourceId = resourceId && resourceId.toLowerCase();\n  }\n  headers = Object.assign(\n    headers,\n    await generateHeaders(masterKey, verb, resourceType, resourceId)\n  );\n}\n\n/**\n * @hidden\n */\n// TODO: Resource tokens\nexport function getAuthorizationTokenUsingResourceTokens(\n  resourceTokens: { [resourceId: string]: string },\n  path: string,\n  resourceId: string\n): string {\n  if (resourceTokens && Object.keys(resourceTokens).length > 0) {\n    // For database account access(through getDatabaseAccount API), path and resourceId are \"\",\n    // so in this case we return the first token to be used for creating the auth header as the\n    // service will accept any token in this case\n    if (!path && !resourceId) {\n      return resourceTokens[Object.keys(resourceTokens)[0]];\n    }\n\n    // If we have exact resource token for the path use it\n    if (resourceId && resourceTokens[resourceId]) {\n      return resourceTokens[resourceId];\n    }\n\n    // minimum valid path /dbs\n    if (!path || path.length < 4) {\n      // TODO: This should throw an error\n      return null;\n    }\n\n    path = trimSlashFromLeftAndRight(path);\n    const pathSegments = (path && path.split(\"/\")) || [];\n\n    // Item path\n    if (pathSegments.length === 6) {\n      // Look for a container token matching the item path\n      const containerPath = pathSegments.slice(0, 4).map(decodeURIComponent).join(\"/\");\n      if (resourceTokens[containerPath]) {\n        return resourceTokens[containerPath];\n      }\n    }\n\n    // TODO remove in v4: This is legacy behavior that lets someone use a resource token pointing ONLY at an ID\n    // It was used when _rid was exposed by the SDK, but now that we are using user provided ids it is not needed\n    // However removing it now would be a breaking change\n    // if it's an incomplete path like /dbs/db1/colls/, start from the parent resource\n    let index = pathSegments.length % 2 === 0 ? pathSegments.length - 1 : pathSegments.length - 2;\n    for (; index > 0; index -= 2) {\n      const id = decodeURI(pathSegments[index]);\n      if (resourceTokens[id]) {\n        return resourceTokens[id];\n      }\n    }\n  }\n\n  // TODO: This should throw an error\n  return null;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport function log(...args: any[]): void {\n  if (args.length > 0) {\n    const firstArg = String(args[0]);\n    if (firstArg.includes(\":error\")) {\n      console.error(...args);\n    } else if (firstArg.includes(\":warning\")) {\n      console.warn(...args);\n    } else if (firstArg.includes(\":info\")) {\n      console.info(...args);\n    } else if (firstArg.includes(\":verbose\")) {\n      console.debug(...args);\n    } else {\n      console.debug(...args);\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { log } from \"./log\";\n\n/**\n * A simple mechanism for enabling logging.\n * Intended to mimic the publicly available `debug` package.\n */\nexport interface Debug {\n  /**\n   * Creates a new logger with the given namespace.\n   */\n  (namespace: string): Debugger;\n  /**\n   * The default log method (defaults to console)\n   */\n  log: (...args: any[]) => void;\n  /**\n   * Enables a particular set of namespaces.\n   * To enable multiple separate them with commas, e.g. \"info,debug\".\n   * Supports wildcards, e.g. \"azure:*\"\n   * Supports skip syntax, e.g. \"azure:*,-azure:storage:*\" will enable\n   * everything under azure except for things under azure:storage.\n   */\n  enable: (namespaces: string) => void;\n  /**\n   * Checks if a particular namespace is enabled.\n   */\n  enabled: (namespace: string) => boolean;\n  /**\n   * Disables all logging, returns what was previously enabled.\n   */\n  disable: () => string;\n}\n\n/**\n * A log function that can be dynamically enabled and redirected.\n */\nexport interface Debugger {\n  /**\n   * Logs the given arguments to the `log` method.\n   */\n  (...args: any[]): void;\n  /**\n   * True if this logger is active and logging.\n   */\n  enabled: boolean;\n  /**\n   * Used to cleanup/remove this logger.\n   */\n  destroy: () => boolean;\n  /**\n   * The current log method. Can be overridden to redirect output.\n   */\n  log: (...args: any[]) => void;\n  /**\n   * The namespace of this logger.\n   */\n  namespace: string;\n  /**\n   * Extends this logger with a child namespace.\n   * Namespaces are separated with a ':' character.\n   */\n  extend: (namespace: string) => Debugger;\n}\n\nconst debugEnvVariable =\n  (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\n\nlet enabledString: string | undefined;\nlet enabledNamespaces: RegExp[] = [];\nlet skippedNamespaces: RegExp[] = [];\nconst debuggers: Debugger[] = [];\n\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\n\nconst debugObj: Debug = Object.assign(\n  (namespace: string): Debugger => {\n    return createDebugger(namespace);\n  },\n  {\n    enable,\n    enabled,\n    disable,\n    log,\n  }\n);\n\nfunction enable(namespaces: string): void {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\n\nfunction enabled(namespace: string): boolean {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n  for (const enabledNamespace of enabledNamespaces) {\n    if (enabledNamespace.test(namespace)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction disable(): string {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\n\nfunction createDebugger(namespace: string): Debugger {\n  const newDebugger: Debugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend,\n  });\n\n  function debug(...args: any[]): void {\n    if (!newDebugger.enabled) {\n      return;\n    }\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n    newDebugger.log(...args);\n  }\n\n  debuggers.push(newDebugger);\n\n  return newDebugger;\n}\n\nfunction destroy(this: Debugger): boolean {\n  const index = debuggers.indexOf(this);\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n  return false;\n}\n\nfunction extend(this: Debugger, namespace: string): Debugger {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\n\nexport default debugObj;\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport debug, { Debugger } from \"./debug\";\nexport { Debugger } from \"./debug\";\n\nconst registeredLoggers = new Set<AzureDebugger>();\nconst logLevelFromEnv =\n  (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\n\nlet azureLogLevel: AzureLogLevel | undefined;\n\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexport const AzureLogger: AzureClientLogger = debug(\"azure\");\nAzureLogger.log = (...args) => {\n  debug.log(...args);\n};\n\n/**\n * The log levels supported by the logger.\n * The log levels in order of most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport type AzureLogLevel = \"verbose\" | \"info\" | \"warning\" | \"error\";\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\n\ntype AzureDebugger = Debugger & { level: AzureLogLevel };\n\n/**\n * An AzureClientLogger is a function that can log to an appropriate severity level.\n */\nexport type AzureClientLogger = Debugger;\n\nif (logLevelFromEnv) {\n  // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n  if (isAzureLogLevel(logLevelFromEnv)) {\n    setLogLevel(logLevelFromEnv);\n  } else {\n    console.error(\n      `AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\n        \", \"\n      )}.`\n    );\n  }\n}\n\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport function setLogLevel(level?: AzureLogLevel): void {\n  if (level && !isAzureLogLevel(level)) {\n    throw new Error(\n      `Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`\n    );\n  }\n  azureLogLevel = level;\n\n  const enabledNamespaces = [];\n  for (const logger of registeredLoggers) {\n    if (shouldEnable(logger)) {\n      enabledNamespaces.push(logger.namespace);\n    }\n  }\n\n  debug.enable(enabledNamespaces.join(\",\"));\n}\n\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel(): AzureLogLevel | undefined {\n  return azureLogLevel;\n}\n\nconst levelMap = {\n  verbose: 400,\n  info: 300,\n  warning: 200,\n  error: 100,\n};\n\n/**\n * Defines the methods available on the SDK-facing logger.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface AzureLogger {\n  /**\n   * Used for failures the program is unlikely to recover from,\n   * such as Out of Memory.\n   */\n  error: Debugger;\n  /**\n   * Used when a function fails to perform its intended task.\n   * Usually this means the function will throw an exception.\n   * Not used for self-healing events (e.g. automatic retry)\n   */\n  warning: Debugger;\n  /**\n   * Used when a function operates normally.\n   */\n  info: Debugger;\n  /**\n   * Used for detailed troubleshooting scenarios. This is\n   * intended for use by developers / system administrators\n   * for diagnosing specific failures.\n   */\n  verbose: Debugger;\n}\n\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nexport function createClientLogger(namespace: string): AzureLogger {\n  const clientRootLogger: AzureClientLogger = AzureLogger.extend(namespace);\n  patchLogMethod(AzureLogger, clientRootLogger);\n  return {\n    error: createLogger(clientRootLogger, \"error\"),\n    warning: createLogger(clientRootLogger, \"warning\"),\n    info: createLogger(clientRootLogger, \"info\"),\n    verbose: createLogger(clientRootLogger, \"verbose\"),\n  };\n}\n\nfunction patchLogMethod(parent: AzureClientLogger, child: AzureClientLogger | AzureDebugger): void {\n  child.log = (...args) => {\n    parent.log(...args);\n  };\n}\n\nfunction createLogger(parent: AzureClientLogger, level: AzureLogLevel): AzureDebugger {\n  const logger: AzureDebugger = Object.assign(parent.extend(level), {\n    level,\n  });\n\n  patchLogMethod(parent, logger);\n\n  if (shouldEnable(logger)) {\n    const enabledNamespaces = debug.disable();\n    debug.enable(enabledNamespaces + \",\" + logger.namespace);\n  }\n\n  registeredLoggers.add(logger);\n\n  return logger;\n}\n\nfunction shouldEnable(logger: AzureDebugger): boolean {\n  return Boolean(azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]);\n}\n\nfunction isAzureLogLevel(logLevel: string): logLevel is AzureLogLevel {\n  return AZURE_LOG_LEVELS.includes(logLevel as any);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/** Determines the connection behavior of the CosmosClient. Note, we currently only support Gateway Mode. */\nexport enum ConnectionMode {\n  /** Gateway mode talks to an intermediate gateway which handles the direct communication with your individual partitions. */\n  Gateway = 0,\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { RetryOptions } from \"../retry/retryOptions\";\nimport { ConnectionMode } from \"./ConnectionMode\";\n/**\n * Represents the Connection policy associated with a CosmosClient in the Azure Cosmos DB database service.\n */\nexport interface ConnectionPolicy {\n  /** Determines which mode to connect to Cosmos with. (Currently only supports Gateway option) */\n  connectionMode?: ConnectionMode;\n  /** Request timeout (time to wait for response from network peer). Represented in milliseconds. */\n  requestTimeout?: number;\n  /**\n   * Flag to enable/disable automatic redirecting of requests based on read/write operations. Default true.\n   * Required to call client.dispose() when this is set to true after destroying the CosmosClient inside another process or in the browser.\n   */\n  enableEndpointDiscovery?: boolean;\n  /** List of azure regions to be used as preferred locations for read requests. */\n  preferredLocations?: string[];\n  /** RetryOptions object which defines several configurable properties used during retry. */\n  retryOptions?: RetryOptions;\n  /**\n   * The flag that enables writes on any locations (regions) for geo-replicated database accounts in the Azure Cosmos DB service.\n   * Default is `false`.\n   */\n  useMultipleWriteLocations?: boolean;\n  /** Rate in milliseconds at which the client will refresh the endpoints list in the background */\n  endpointRefreshRateInMs?: number;\n  /** Flag to enable/disable background refreshing of endpoints. Defaults to false.\n   * Endpoint discovery using `enableEndpointsDiscovery` will still work for failed requests. */\n  enableBackgroundEndpointRefreshing?: boolean;\n}\n\n/**\n * @hidden\n */\nexport const defaultConnectionPolicy: ConnectionPolicy = Object.freeze({\n  connectionMode: ConnectionMode.Gateway,\n  requestTimeout: 60000,\n  enableEndpointDiscovery: true,\n  preferredLocations: [],\n  retryOptions: {\n    maxRetryAttemptCount: 9,\n    fixedRetryIntervalInMilliseconds: 0,\n    maxWaitTimeInSeconds: 30,\n  },\n  useMultipleWriteLocations: true,\n  endpointRefreshRateInMs: 300000,\n  enableBackgroundEndpointRefreshing: true,\n});\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Represents the consistency levels supported for Azure Cosmos DB client operations.<br>\n * The requested ConsistencyLevel must match or be weaker than that provisioned for the database account.\n * Consistency levels.\n *\n * Consistency levels by order of strength are Strong, BoundedStaleness, Session, Consistent Prefix, and Eventual.\n *\n * See https://aka.ms/cosmos-consistency for more detailed documentation on Consistency Levels.\n */\nexport enum ConsistencyLevel {\n  /**\n   * Strong Consistency guarantees that read operations always return the value that was last written.\n   */\n  Strong = \"Strong\",\n  /**\n   * Bounded Staleness guarantees that reads are not too out-of-date.\n   * This can be configured based on number of operations (MaxStalenessPrefix) or time (MaxStalenessIntervalInSeconds).\n   */\n  BoundedStaleness = \"BoundedStaleness\",\n  /**\n   * Session Consistency guarantees monotonic reads (you never read old data, then new, then old again),\n   * monotonic writes (writes are ordered) and read your writes (your writes are immediately visible to your reads)\n   * within any single session.\n   */\n  Session = \"Session\",\n  /**\n   * Eventual Consistency guarantees that reads will return a subset of writes.\n   * All writes will be eventually be available for reads.\n   */\n  Eventual = \"Eventual\",\n  /**\n   * ConsistentPrefix Consistency guarantees that reads will return some prefix of all writes with no gaps.\n   * All writes will be eventually be available for reads.\n   */\n  ConsistentPrefix = \"ConsistentPrefix\",\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"../common\";\nimport { CosmosHeaders } from \"../queryExecutionContext\";\nimport { ConsistencyLevel } from \"./ConsistencyLevel\";\n\n/**\n * Represents a DatabaseAccount in the Azure Cosmos DB database service.\n */\nexport class DatabaseAccount {\n  /** The list of writable locations for a geo-replicated database account. */\n  public readonly writableLocations: Location[] = [];\n  /** The list of readable locations for a geo-replicated database account. */\n  public readonly readableLocations: Location[] = [];\n  /**\n   * The self-link for Databases in the databaseAccount.\n   * @deprecated Use `databasesLink`\n   */\n  public get DatabasesLink(): string {\n    return this.databasesLink;\n  }\n  /** The self-link for Databases in the databaseAccount. */\n  public readonly databasesLink: string;\n  /**\n   * The self-link for Media in the databaseAccount.\n   * @deprecated Use `mediaLink`\n   */\n  public get MediaLink(): string {\n    return this.mediaLink;\n  }\n  /** The self-link for Media in the databaseAccount. */\n  public readonly mediaLink: string;\n  /**\n   * Attachment content (media) storage quota in MBs ( Retrieved from gateway ).\n   * @deprecated use `maxMediaStorageUsageInMB`\n   */\n  public get MaxMediaStorageUsageInMB(): number {\n    return this.maxMediaStorageUsageInMB;\n  }\n  /** Attachment content (media) storage quota in MBs ( Retrieved from gateway ). */\n  public readonly maxMediaStorageUsageInMB: number;\n  /**\n   * Current attachment content (media) usage in MBs (Retrieved from gateway )\n   *\n   * Value is returned from cached information updated periodically and is not guaranteed\n   * to be real time.\n   *\n   * @deprecated use `currentMediaStorageUsageInMB`\n   */\n  public get CurrentMediaStorageUsageInMB(): number {\n    return this.currentMediaStorageUsageInMB;\n  }\n  /**\n   * Current attachment content (media) usage in MBs (Retrieved from gateway )\n   *\n   * Value is returned from cached information updated periodically and is not guaranteed\n   * to be real time.\n   */\n  public readonly currentMediaStorageUsageInMB: number;\n  /**\n   * Gets the UserConsistencyPolicy settings.\n   * @deprecated use `consistencyPolicy`\n   */\n  public get ConsistencyPolicy(): ConsistencyLevel {\n    return this.consistencyPolicy;\n  }\n  /** Gets the UserConsistencyPolicy settings. */\n  public readonly consistencyPolicy: ConsistencyLevel;\n  public readonly enableMultipleWritableLocations: boolean;\n\n  // TODO: body - any\n  public constructor(body: { [key: string]: any }, headers: CosmosHeaders) {\n    this.databasesLink = \"/dbs/\";\n    this.mediaLink = \"/media/\";\n    this.maxMediaStorageUsageInMB = headers[Constants.HttpHeaders.MaxMediaStorageUsageInMB];\n    this.currentMediaStorageUsageInMB = headers[Constants.HttpHeaders.CurrentMediaStorageUsageInMB];\n    this.consistencyPolicy = body.userConsistencyPolicy\n      ? (body.userConsistencyPolicy.defaultConsistencyLevel as ConsistencyLevel)\n      : ConsistencyLevel.Session;\n    if (body[Constants.WritableLocations] && body.id !== \"localhost\") {\n      this.writableLocations = body[Constants.WritableLocations] as Location[];\n    }\n    if (body[Constants.ReadableLocations] && body.id !== \"localhost\") {\n      this.readableLocations = body[Constants.ReadableLocations] as Location[];\n    }\n    if (body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS]) {\n      this.enableMultipleWritableLocations =\n        body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === true ||\n        body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === \"true\";\n    }\n  }\n}\n\n/**\n * Used to specify the locations that are available, read is index 1 and write is index 0.\n */\nexport interface Location {\n  name: string;\n  databaseAccountEndpoint: string;\n  unavailable?: boolean;\n  lastUnavailabilityTimestampInMs?: number;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/** Defines a target data type of an index path specification in the Azure Cosmos DB service. */\nexport enum DataType {\n  /** Represents a numeric data type. */\n  Number = \"Number\",\n  /** Represents a string data type. */\n  String = \"String\",\n  /** Represents a point data type. */\n  Point = \"Point\",\n  /** Represents a line string data type. */\n  LineString = \"LineString\",\n  /** Represents a polygon data type. */\n  Polygon = \"Polygon\",\n  /** Represents a multi-polygon data type. */\n  MultiPolygon = \"MultiPolygon\",\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Specifies the supported indexing modes.\n */\nexport enum IndexingMode {\n  /**\n   * Index is updated synchronously with a create or update operation.\n   *\n   * With consistent indexing, query behavior is the same as the default consistency level for the container.\n   * The index is always kept up to date with the data.\n   */\n  consistent = \"consistent\",\n  /**\n   * Index is updated asynchronously with respect to a create or update operation.\n   *\n   * With lazy indexing, queries are eventually consistent. The index is updated when the container is idle.\n   */\n  lazy = \"lazy\",\n  /** No Index is provided. */\n  none = \"none\",\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DataType, IndexingMode, IndexKind } from \"./index\";\n\nexport interface IndexingPolicy {\n  /** The indexing mode (consistent or lazy) {@link IndexingMode}. */\n  indexingMode?: keyof typeof IndexingMode;\n  automatic?: boolean;\n  /** An array of {@link IncludedPath} represents the paths to be included for indexing. */\n  includedPaths?: IndexedPath[];\n  /** An array of {@link IncludedPath} represents the paths to be excluded for indexing. */\n  excludedPaths?: IndexedPath[];\n  spatialIndexes?: SpatialIndex[];\n}\n\n/* The target data type of a spatial path */\nexport enum SpatialType {\n  LineString = \"LineString\",\n  MultiPolygon = \"MultiPolygon\",\n  Point = \"Point\",\n  Polygon = \"Polygon\",\n}\n\nexport interface SpatialIndex {\n  /* Path in JSON document to index */\n  path: string;\n  types: SpatialType[];\n  /* Bounding box for geometry spatial path */\n  boundingBox: {\n    /* X-coordinate of the lower-left corner of the bounding box. */\n    xmin: number;\n    /* Y-coordinate of the lower-left corner of the bounding box. */\n    ymin: number;\n    /* X-coordinate of the upper-right corner of the bounding box. */\n    xmax: number;\n    /* Y-coordinate of the upper-right corner of the bounding box. */\n    ymax: number;\n  };\n}\n\nexport interface IndexedPath {\n  path: string;\n  indexes?: Index[];\n}\n\nexport interface Index {\n  kind: keyof typeof IndexKind;\n  dataType: keyof typeof DataType;\n  precision?: number;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Specifies the supported Index types.\n */\nexport enum IndexKind {\n  /**\n   * This is supplied for a path which requires sorting.\n   */\n  Range = \"Range\",\n  /**\n   * This is supplied for a path which requires geospatial indexing.\n   */\n  Spatial = \"Spatial\",\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  NonePartitionKeyType,\n  NullPartitionKeyType,\n  PartitionKey,\n  PrimitivePartitionKeyValue,\n} from \"./PartitionKey\";\n\n/**\n * @hidden\n * Internal Representation Of Partition Key. TODO: Make sure {@link ClientContext} working with only {@link PartitionKeyInternal}\n */\nexport type PartitionKeyInternal = PrimitivePartitionKeyValue[];\n/**\n * @hidden\n * None PartitionKey Literal\n */\nexport const NonePartitionKeyLiteral: NonePartitionKeyType = {};\n/**\n * @hidden\n * Null PartitionKey Literal\n */\nexport const NullPartitionKeyLiteral: NullPartitionKeyType = null;\n/**\n * @hidden\n * Maps PartitionKey to InternalPartitionKey.\n * @param partitionKey - PartitonKey to be converted.\n * @returns PartitionKeyInternal\n */\nexport function convertToInternalPartitionKey(partitionKey: PartitionKey): PartitionKeyInternal {\n  if (Array.isArray(partitionKey)) {\n    return partitionKey.map((key) => (key === undefined ? NonePartitionKeyLiteral : key));\n  } else return [partitionKey];\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { NonePartitionKeyLiteral, NullPartitionKeyLiteral } from \"./PartitionKeyInternal\";\n\n/**\n * PartitionKey of a container.\n * @remarks\n * - PartitionKeyDefinition is no longer part of PartitionKey. So please use PartitionKeyDefinition\n * type directly where appropriate.\n */\nexport type PartitionKey = PrimitivePartitionKeyValue | PrimitivePartitionKeyValue[];\n\n/**\n * A primitive Partition Key value.\n */\nexport type PrimitivePartitionKeyValue =\n  | string\n  | number\n  | boolean\n  | NullPartitionKeyType\n  | NonePartitionKeyType;\n\n/**\n * The returned object represents a partition key value that allows creating and accessing items\n * with a null value for the partition key.\n */\nexport type NullPartitionKeyType = null;\n\n/**\n * The returned object represents a partition key value that allows creating and accessing items\n * without a value for partition key\n */\nexport type NonePartitionKeyType = {\n  [K in any]: never;\n};\n\n/**\n * Builder class for building PartitionKey.\n */\nexport class PartitionKeyBuilder {\n  readonly values: PrimitivePartitionKeyValue[] = [];\n  public addValue(value: string | boolean | number): PartitionKeyBuilder {\n    this.values.push(value);\n    return this;\n  }\n  public addNullValue(): PartitionKeyBuilder {\n    this.values.push(NullPartitionKeyLiteral);\n    return this;\n  }\n  public addNoneValue(): PartitionKeyBuilder {\n    this.values.push(NonePartitionKeyLiteral);\n    return this;\n  }\n  public build(): PartitionKey {\n    return [...this.values];\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * PartitionKey Definition Version\n */\nexport enum PartitionKeyDefinitionVersion {\n  V1 = 1,\n  V2 = 2,\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Type of PartitionKey i.e. Hash, MultiHash\n */\nexport enum PartitionKeyKind {\n  Hash = \"Hash\",\n  MultiHash = \"MultiHash\",\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Enum for permission mode values.\n */\nexport enum PermissionMode {\n  /** Permission not valid. */\n  None = \"none\",\n  /** Permission applicable for read operations only. */\n  Read = \"read\",\n  /** Permission applicable for all operations. */\n  All = \"all\",\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Represents Priority Level associated with each Azure Cosmos DB client requests.<br>\n * The Low priority requests are always throttled before any High priority requests.\n *\n * By default all requests are considered as High priority requests.\n *\n * See https://aka.ms/CosmosDB/PriorityBasedExecution for more detailed documentation on Priority based throttling.\n */\nexport enum PriorityLevel {\n  /**\n   * High Priority requests are throttled after Low priority requests.\n   */\n  High = \"High\",\n  /**\n   * Low Priority requests are throttled before High priority requests.\n   */\n  Low = \"Low\",\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Enum for trigger operation values.\n * specifies the operations on which a trigger should be executed.\n */\nexport enum TriggerOperation {\n  /** All operations. */\n  All = \"all\",\n  /** Create operations only. */\n  Create = \"create\",\n  /** Update operations only. */\n  Update = \"update\",\n  /** Delete operations only. */\n  Delete = \"delete\",\n  /** Replace operations only. */\n  Replace = \"replace\",\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Enum for trigger type values.\n * Specifies the type of the trigger.\n */\nexport enum TriggerType {\n  /** Trigger should be executed before the associated operation(s). */\n  Pre = \"pre\",\n  /** Trigger should be executed after the associated operation(s). */\n  Post = \"post\",\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Enum for udf type values.\n * Specifies the types of user defined functions.\n */\nexport enum UserDefinedFunctionType {\n  /** The User Defined Function is written in JavaScript. This is currently the only option. */\n  Javascript = \"Javascript\",\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport enum GeospatialType {\n  /** Represents data in round-earth coordinate system. */\n  Geography = \"Geography\",\n  /** Represents data in Eucledian(flat) coordinate system. */\n  Geometry = \"Geometry\",\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AzureLogger, createClientLogger } from \"@azure/logger\";\nimport { parsePath } from \"./common\";\nimport {\n  NonePartitionKeyLiteral,\n  NullPartitionKeyLiteral,\n  PartitionKeyDefinition,\n  PartitionKeyInternal,\n  PrimitivePartitionKeyValue,\n} from \"./documents\";\nimport { DEFAULT_PARTITION_KEY_PATH } from \"./common/partitionKeys\";\n\nconst logger: AzureLogger = createClientLogger(\"extractPartitionKey\");\n\n/**\n * Function to extract PartitionKey based on {@link PartitionKeyDefinition}\n * from an object.\n * Retuns\n * 1. PartitionKeyInternal[] if extraction is successful.\n * 2. undefined if either {@link partitionKeyDefinition} is not well formed\n * or an unsupported partitionkey type is encountered.\n * @hidden\n */\nexport function extractPartitionKeys(\n  document: unknown,\n  partitionKeyDefinition?: PartitionKeyDefinition\n): PartitionKeyInternal | undefined {\n  if (\n    partitionKeyDefinition &&\n    partitionKeyDefinition.paths &&\n    partitionKeyDefinition.paths.length > 0\n  ) {\n    if (partitionKeyDefinition.systemKey === true) {\n      return [];\n    }\n\n    if (\n      partitionKeyDefinition.paths.length === 1 &&\n      partitionKeyDefinition.paths[0] === DEFAULT_PARTITION_KEY_PATH\n    ) {\n      return [extractPartitionKey(DEFAULT_PARTITION_KEY_PATH, document)];\n    }\n\n    const partitionKeys: PrimitivePartitionKeyValue[] = [];\n    partitionKeyDefinition.paths.forEach((path: string) => {\n      const obj = extractPartitionKey(path, document);\n      if (obj === undefined) {\n        logger.warning(\"Unsupported PartitionKey found.\");\n        return undefined;\n      }\n      partitionKeys.push(obj);\n    });\n    return partitionKeys;\n  }\n  logger.error(\"Unexpected Partition Key Definition Found.\");\n  return undefined;\n}\n\nfunction extractPartitionKey(path: string, obj: unknown): any {\n  const pathParts: string[] = parsePath(path);\n  for (const part of pathParts) {\n    if (typeof obj === \"object\" && obj !== null && part in obj) {\n      obj = (obj as Record<string, unknown>)[part];\n    } else {\n      obj = undefined;\n      break;\n    }\n  }\n  if (typeof obj === \"string\" || typeof obj === \"number\" || typeof obj === \"boolean\") {\n    return obj;\n  } else if (obj === NullPartitionKeyLiteral) {\n    return NullPartitionKeyLiteral;\n  } else if (obj === undefined || JSON.stringify(obj) === JSON.stringify(NonePartitionKeyLiteral)) {\n    return NonePartitionKeyLiteral;\n  }\n  return undefined;\n}\n\n/**\n * @hidden\n */\nexport function undefinedPartitionKey(\n  partitionKeyDefinition: PartitionKeyDefinition\n): PartitionKeyInternal {\n  if (partitionKeyDefinition.systemKey === true) {\n    return [];\n  } else {\n    return partitionKeyDefinition.paths.map(() => NonePartitionKeyLiteral);\n  }\n}\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;", "import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}", "/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n\n  for (var i = 0; i < length32; i += 8) {\n    var x = input[i >> 5] >>> i % 32 & 0xff;\n    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  var length8 = input.length * 8;\n  var output = new Uint32Array(getOutputLength(length8));\n\n  for (var i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexport default md5;", "import v35 from './v35.js';\nimport md5 from './md5.js';\nvar v3 = v35('v3', 0x30, md5);\nexport default v3;", "import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;", "// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;", "import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  NonePartitionKeyLiteral,\n  NonePartitionKeyType,\n  NullPartitionKeyLiteral,\n  NullPartitionKeyType,\n  PrimitivePartitionKeyValue,\n} from \"../documents\";\n\n/**\n * A type which could be any type but undefined\n */\nexport type NonUndefinable<T> = T extends undefined ? never : T;\n\n/**\n * Utility function to avoid writing boilder plate code while checking for\n * undefined values. It throws Error if the input value is undefined.\n * @param value - Value which is potentially undefined.\n * @param msg - Error Message to throw if value is undefined.\n * @returns\n */\nexport function assertNotUndefined<T>(value: T, msg?: string): NonUndefinable<T> {\n  if (value !== undefined) {\n    return value as NonUndefinable<T>;\n  }\n  throw new Error(msg || \"Unexpected 'undefined' value encountered\");\n}\n\n/**\n * Check for value being PrimitivePartitionKeyValue.\n * @internal\n */\nexport function isPrimitivePartitionKeyValue(value: unknown): value is PrimitivePartitionKeyValue {\n  return (\n    isWellDefinedPartitionKeyValue(value) ||\n    isNonePartitionKeyValue(value) ||\n    isNullPartitionKeyValue(value)\n  );\n}\n\n/**\n * Check for value being string, number or boolean.\n * @internal\n */\nexport function isWellDefinedPartitionKeyValue(value: unknown): value is string | number | boolean {\n  return typeof value === \"string\" || typeof value === \"boolean\" || typeof value === \"number\";\n}\n\n/**\n * Check for value being NonePartitionKeyType.\n * @internal\n */\nexport function isNonePartitionKeyValue(value: unknown): value is NonePartitionKeyType {\n  return value !== undefined && JSON.stringify(value) === JSON.stringify(NonePartitionKeyLiteral);\n}\n\n/**\n * Check for value being NullPartitionKeyType.\n * @internal\n */\nexport function isNullPartitionKeyValue(value: unknown): value is NullPartitionKeyType {\n  return value === NullPartitionKeyLiteral;\n}\n/**\n * Verify validity of partition key.\n * @internal\n */\nexport function isPartitionKey(partitionKey: unknown): boolean {\n  return isPrimitivePartitionKeyValue(partitionKey) || Array.isArray(partitionKey);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createClientLogger, AzureLogger } from \"@azure/logger\";\n\n/**\n * The \\@azure/logger configuration for this package.\n */\nexport const defaultLogger: AzureLogger = createClientLogger(\"cosmosdb\");\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { setAuthorizationHeader } from \"../auth\";\nimport { Constants, HTTPMethod, jsonStringifyAndEscapeNonASCII, ResourceType } from \"../common\";\nimport { CosmosClientOptions } from \"../CosmosClientOptions\";\nimport { PartitionKeyInternal } from \"../documents\";\nimport { CosmosHeaders } from \"../queryExecutionContext\";\nimport { FeedOptions, RequestOptions } from \"./index\";\nimport { defaultLogger } from \"../common/logger\";\n// ----------------------------------------------------------------------------\n// Utility methods\n//\n\n/** @hidden */\nfunction javaScriptFriendlyJSONStringify(s: unknown): string {\n  // two line terminators (Line separator and Paragraph separator) are not needed to be escaped in JSON\n  // but are needed to be escaped in JavaScript.\n  return JSON.stringify(s)\n    .replace(/\\u2028/g, \"\\\\u2028\")\n    .replace(/\\u2029/g, \"\\\\u2029\");\n}\n\n/** @hidden */\nexport function bodyFromData(data: Buffer | string | Record<string, unknown>): string {\n  if (typeof data === \"object\") {\n    return javaScriptFriendlyJSONStringify(data);\n  }\n  return data;\n}\n\n/**\n * @hidden\n */\ninterface GetHeadersOptions {\n  clientOptions: CosmosClientOptions;\n  defaultHeaders: CosmosHeaders;\n  verb: HTTPMethod;\n  path: string;\n  resourceId: string;\n  resourceType: ResourceType;\n  options: RequestOptions & FeedOptions;\n  partitionKeyRangeId?: string;\n  useMultipleWriteLocations?: boolean;\n  partitionKey?: PartitionKeyInternal;\n}\n\nconst JsonContentType = \"application/json\";\n\n/**\n * @hidden\n */\nexport async function getHeaders({\n  clientOptions,\n  defaultHeaders,\n  verb,\n  path,\n  resourceId,\n  resourceType,\n  options = {},\n  partitionKeyRangeId,\n  useMultipleWriteLocations,\n  partitionKey,\n}: GetHeadersOptions): Promise<CosmosHeaders> {\n  const headers: CosmosHeaders = {\n    [Constants.HttpHeaders.ResponseContinuationTokenLimitInKB]: 1,\n    [Constants.HttpHeaders.EnableCrossPartitionQuery]: true,\n    ...defaultHeaders,\n  };\n\n  if (useMultipleWriteLocations) {\n    headers[Constants.HttpHeaders.ALLOW_MULTIPLE_WRITES] = true;\n  }\n\n  if (options.continuationTokenLimitInKB) {\n    headers[Constants.HttpHeaders.ResponseContinuationTokenLimitInKB] =\n      options.continuationTokenLimitInKB;\n  }\n  if (options.continuationToken) {\n    headers[Constants.HttpHeaders.Continuation] = options.continuationToken;\n  } else if (options.continuation) {\n    headers[Constants.HttpHeaders.Continuation] = options.continuation;\n  }\n\n  if (options.preTriggerInclude) {\n    headers[Constants.HttpHeaders.PreTriggerInclude] =\n      options.preTriggerInclude.constructor === Array\n        ? (options.preTriggerInclude as string[]).join(\",\")\n        : (options.preTriggerInclude as string);\n  }\n\n  if (options.postTriggerInclude) {\n    headers[Constants.HttpHeaders.PostTriggerInclude] =\n      options.postTriggerInclude.constructor === Array\n        ? (options.postTriggerInclude as string[]).join(\",\")\n        : (options.postTriggerInclude as string);\n  }\n\n  if (options.offerType) {\n    headers[Constants.HttpHeaders.OfferType] = options.offerType;\n  }\n\n  if (options.offerThroughput) {\n    headers[Constants.HttpHeaders.OfferThroughput] = options.offerThroughput;\n  }\n\n  if (options.maxItemCount) {\n    headers[Constants.HttpHeaders.PageSize] = options.maxItemCount;\n  }\n\n  if (options.accessCondition) {\n    if (options.accessCondition.type === \"IfMatch\") {\n      headers[Constants.HttpHeaders.IfMatch] = options.accessCondition.condition;\n    } else {\n      headers[Constants.HttpHeaders.IfNoneMatch] = options.accessCondition.condition;\n    }\n  }\n\n  if (options.useIncrementalFeed) {\n    headers[Constants.HttpHeaders.A_IM] = \"Incremental Feed\";\n  }\n\n  if (options.indexingDirective) {\n    headers[Constants.HttpHeaders.IndexingDirective] = options.indexingDirective;\n  }\n\n  if (options.consistencyLevel) {\n    headers[Constants.HttpHeaders.ConsistencyLevel] = options.consistencyLevel;\n  }\n\n  if (options.priorityLevel) {\n    headers[Constants.HttpHeaders.PriorityLevel] = options.priorityLevel;\n  }\n\n  if (options.maxIntegratedCacheStalenessInMs && resourceType === ResourceType.item) {\n    if (typeof options.maxIntegratedCacheStalenessInMs === \"number\") {\n      headers[Constants.HttpHeaders.DedicatedGatewayPerRequestCacheStaleness] =\n        options.maxIntegratedCacheStalenessInMs.toString();\n    } else {\n      defaultLogger.error(\n        `RangeError: maxIntegratedCacheStalenessInMs \"${options.maxIntegratedCacheStalenessInMs}\" is not a valid parameter.`\n      );\n      headers[Constants.HttpHeaders.DedicatedGatewayPerRequestCacheStaleness] = \"null\";\n    }\n  }\n\n  if (options.resourceTokenExpirySeconds) {\n    headers[Constants.HttpHeaders.ResourceTokenExpiry] = options.resourceTokenExpirySeconds;\n  }\n\n  if (options.sessionToken) {\n    headers[Constants.HttpHeaders.SessionToken] = options.sessionToken;\n  }\n\n  if (options.enableScanInQuery) {\n    headers[Constants.HttpHeaders.EnableScanInQuery] = options.enableScanInQuery;\n  }\n\n  if (options.populateQuotaInfo) {\n    headers[Constants.HttpHeaders.PopulateQuotaInfo] = options.populateQuotaInfo;\n  }\n\n  if (options.populateQueryMetrics) {\n    headers[Constants.HttpHeaders.PopulateQueryMetrics] = options.populateQueryMetrics;\n  }\n\n  if (options.maxDegreeOfParallelism !== undefined) {\n    headers[Constants.HttpHeaders.ParallelizeCrossPartitionQuery] = true;\n  }\n\n  if (options.populateQuotaInfo) {\n    headers[Constants.HttpHeaders.PopulateQuotaInfo] = true;\n  }\n\n  if (partitionKey !== undefined && !headers[Constants.HttpHeaders.PartitionKey]) {\n    headers[Constants.HttpHeaders.PartitionKey] = jsonStringifyAndEscapeNonASCII(partitionKey);\n  }\n\n  if (clientOptions.key || clientOptions.tokenProvider) {\n    headers[Constants.HttpHeaders.XDate] = new Date().toUTCString();\n  }\n\n  if (verb === HTTPMethod.post || verb === HTTPMethod.put) {\n    if (!headers[Constants.HttpHeaders.ContentType]) {\n      headers[Constants.HttpHeaders.ContentType] = JsonContentType;\n    }\n  }\n\n  if (!headers[Constants.HttpHeaders.Accept]) {\n    headers[Constants.HttpHeaders.Accept] = JsonContentType;\n  }\n\n  if (partitionKeyRangeId !== undefined) {\n    headers[Constants.HttpHeaders.PartitionKeyRangeID] = partitionKeyRangeId;\n  }\n\n  if (options.enableScriptLogging) {\n    headers[Constants.HttpHeaders.EnableScriptLogging] = options.enableScriptLogging;\n  }\n\n  if (options.disableRUPerMinuteUsage) {\n    headers[Constants.HttpHeaders.DisableRUPerMinuteUsage] = true;\n  }\n\n  if (options.populateIndexMetrics) {\n    headers[Constants.HttpHeaders.PopulateIndexMetrics] = options.populateIndexMetrics;\n  }\n\n  if (\n    clientOptions.key ||\n    clientOptions.resourceTokens ||\n    clientOptions.tokenProvider ||\n    clientOptions.permissionFeed\n  ) {\n    await setAuthorizationHeader(clientOptions, verb, path, resourceId, resourceType, headers);\n  }\n  return headers;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { JSONObject } from \"../queryExecutionContext\";\nimport { extractPartitionKeys } from \"../extractPartitionKey\";\nimport { CosmosDiagnostics, RequestOptions } from \"..\";\nimport {\n  NonePartitionKeyLiteral,\n  PartitionKey,\n  PartitionKeyDefinition,\n  PrimitivePartitionKeyValue,\n  convertToInternalPartitionKey,\n} from \"../documents\";\nimport { PatchRequestBody } from \"./patch\";\nimport { v4 } from \"uuid\";\nimport { assertNotUndefined } from \"./typeChecks\";\nimport { bodyFromData } from \"../request/request\";\nimport { Constants } from \"../common/constants\";\nconst uuid = v4;\n\nexport type Operation =\n  | CreateOperation\n  | UpsertOperation\n  | ReadOperation\n  | DeleteOperation\n  | ReplaceOperation\n  | BulkPatchOperation;\n\nexport interface Batch {\n  min: string;\n  max: string;\n  rangeId: string;\n  indexes: number[];\n  operations: Operation[];\n}\n\nexport type BulkOperationResponse = OperationResponse[] & { diagnostics: CosmosDiagnostics };\n\nexport interface OperationResponse {\n  statusCode: number;\n  requestCharge: number;\n  eTag?: string;\n  resourceBody?: JSONObject;\n}\n\n/**\n * Options object used to modify bulk execution.\n * continueOnError (Default value: false) - Continues bulk execution when an operation fails ** NOTE THIS WILL DEFAULT TO TRUE IN the 4.0 RELEASE\n */\nexport interface BulkOptions {\n  continueOnError?: boolean;\n}\n\nexport function isKeyInRange(min: string, max: string, key: string): boolean {\n  const isAfterMinInclusive = key.localeCompare(min) >= 0;\n  const isBeforeMax = key.localeCompare(max) < 0;\n  return isAfterMinInclusive && isBeforeMax;\n}\n\nexport interface OperationBase {\n  partitionKey?: string;\n  ifMatch?: string;\n  ifNoneMatch?: string;\n}\n\nexport const BulkOperationType = {\n  Create: \"Create\",\n  Upsert: \"Upsert\",\n  Read: \"Read\",\n  Delete: \"Delete\",\n  Replace: \"Replace\",\n  Patch: \"Patch\",\n} as const;\n\nexport type OperationInput =\n  | CreateOperationInput\n  | UpsertOperationInput\n  | ReadOperationInput\n  | DeleteOperationInput\n  | ReplaceOperationInput\n  | PatchOperationInput;\n\nexport interface CreateOperationInput {\n  partitionKey?: PartitionKey;\n  ifMatch?: string;\n  ifNoneMatch?: string;\n  operationType: typeof BulkOperationType.Create;\n  resourceBody: JSONObject;\n}\n\nexport interface UpsertOperationInput {\n  partitionKey?: PartitionKey;\n  ifMatch?: string;\n  ifNoneMatch?: string;\n  operationType: typeof BulkOperationType.Upsert;\n  resourceBody: JSONObject;\n}\n\nexport interface ReadOperationInput {\n  partitionKey?: PartitionKey;\n  operationType: typeof BulkOperationType.Read;\n  id: string;\n}\n\nexport interface DeleteOperationInput {\n  partitionKey?: PartitionKey;\n  operationType: typeof BulkOperationType.Delete;\n  id: string;\n}\n\nexport interface ReplaceOperationInput {\n  partitionKey?: PartitionKey;\n  ifMatch?: string;\n  ifNoneMatch?: string;\n  operationType: typeof BulkOperationType.Replace;\n  resourceBody: JSONObject;\n  id: string;\n}\n\nexport interface PatchOperationInput {\n  partitionKey?: PartitionKey;\n  ifMatch?: string;\n  ifNoneMatch?: string;\n  operationType: typeof BulkOperationType.Patch;\n  resourceBody: PatchRequestBody;\n  id: string;\n}\n\nexport type OperationWithItem = OperationBase & {\n  resourceBody: JSONObject;\n};\n\nexport type CreateOperation = OperationWithItem & {\n  operationType: typeof BulkOperationType.Create;\n};\n\nexport type UpsertOperation = OperationWithItem & {\n  operationType: typeof BulkOperationType.Upsert;\n};\n\nexport type ReadOperation = OperationBase & {\n  operationType: typeof BulkOperationType.Read;\n  id: string;\n};\n\nexport type DeleteOperation = OperationBase & {\n  operationType: typeof BulkOperationType.Delete;\n  id: string;\n};\n\nexport type ReplaceOperation = OperationWithItem & {\n  operationType: typeof BulkOperationType.Replace;\n  id: string;\n};\n\nexport type BulkPatchOperation = OperationBase & {\n  operationType: typeof BulkOperationType.Patch;\n  id: string;\n};\n\nexport function hasResource(\n  operation: Operation\n): operation is CreateOperation | UpsertOperation | ReplaceOperation {\n  return (\n    operation.operationType !== \"Patch\" &&\n    (operation as OperationWithItem).resourceBody !== undefined\n  );\n}\n/**\n * Maps OperationInput to Operation by\n * - generating Ids if needed.\n * - choosing partitionKey which can be used to choose which batch this\n * operation should be part of. The order is -\n *   1. If the operationInput itself has partitionKey field set it is used.\n *   2. Other wise for create/replace/upsert it is extracted from resource body.\n *   3. For read/delete/patch type operations undefined partitionKey is used.\n * - Here one nuance is that, the partitionKey field inside Operation needs to\n *  be serialized as a JSON string.\n * @param operationInput - OperationInput\n * @param definition - PartitionKeyDefinition\n * @param options - RequestOptions\n * @returns\n */\nexport function prepareOperations(\n  operationInput: OperationInput,\n  definition: PartitionKeyDefinition,\n  options: RequestOptions = {}\n): {\n  operation: Operation;\n  partitionKey: PrimitivePartitionKeyValue[];\n} {\n  populateIdsIfNeeded(operationInput, options);\n\n  let partitionKey: PrimitivePartitionKeyValue[];\n  if (Object.prototype.hasOwnProperty.call(operationInput, \"partitionKey\")) {\n    if (operationInput.partitionKey === undefined) {\n      partitionKey = definition.paths.map(() => NonePartitionKeyLiteral);\n    } else {\n      partitionKey = convertToInternalPartitionKey(operationInput.partitionKey);\n    }\n  } else {\n    switch (operationInput.operationType) {\n      case BulkOperationType.Create:\n      case BulkOperationType.Replace:\n      case BulkOperationType.Upsert:\n        partitionKey = assertNotUndefined(\n          extractPartitionKeys(operationInput.resourceBody, definition),\n          \"Unexpected undefined Partition Key Found.\"\n        );\n        break;\n      case BulkOperationType.Read:\n      case BulkOperationType.Delete:\n      case BulkOperationType.Patch:\n        partitionKey = definition.paths.map(() => NonePartitionKeyLiteral);\n    }\n  }\n  return {\n    operation: { ...operationInput, partitionKey: JSON.stringify(partitionKey) } as Operation,\n    partitionKey,\n  };\n}\n\n/**\n * For operations requiring Id genrate random uuids.\n * @param operationInput - OperationInput to be checked.\n * @param options - RequestOptions\n */\nfunction populateIdsIfNeeded(operationInput: OperationInput, options: RequestOptions) {\n  if (\n    operationInput.operationType === BulkOperationType.Create ||\n    operationInput.operationType === BulkOperationType.Upsert\n  ) {\n    if (\n      (operationInput.resourceBody.id === undefined || operationInput.resourceBody.id === \"\") &&\n      !options.disableAutomaticIdGeneration\n    ) {\n      operationInput.resourceBody.id = uuid();\n    }\n  }\n}\n\n/**\n * Splits a batch into array of batches based on cumulative size of its operations by making sure\n * cumulative size of an individual batch is not larger than {@link Constants.DefaultMaxBulkRequestBodySizeInBytes}.\n * If a single operation itself is larger than {@link Constants.DefaultMaxBulkRequestBodySizeInBytes}, that\n * operation would be moved into a batch containing only that operation.\n * @param originalBatch - A batch of operations needed to be checked.\n * @returns\n * @hidden\n */\nexport function splitBatchBasedOnBodySize(originalBatch: Batch): Batch[] {\n  if (originalBatch?.operations === undefined || originalBatch.operations.length < 1) return [];\n  let currentBatchSize = calculateObjectSizeInBytes(originalBatch.operations[0]);\n  let currentBatch: Batch = {\n    ...originalBatch,\n    operations: [originalBatch.operations[0]],\n    indexes: [originalBatch.indexes[0]],\n  };\n  const processedBatches: Batch[] = [];\n  processedBatches.push(currentBatch);\n\n  for (let index = 1; index < originalBatch.operations.length; index++) {\n    const operation = originalBatch.operations[index];\n    const currentOpSize = calculateObjectSizeInBytes(operation);\n    if (currentBatchSize + currentOpSize > Constants.DefaultMaxBulkRequestBodySizeInBytes) {\n      currentBatch = {\n        ...originalBatch,\n        operations: [],\n        indexes: [],\n      };\n      processedBatches.push(currentBatch);\n      currentBatchSize = 0;\n    }\n    currentBatch.operations.push(operation);\n    currentBatch.indexes.push(originalBatch.indexes[index]);\n    currentBatchSize += currentOpSize;\n  }\n  return processedBatches;\n}\n\n/**\n * Calculates size of an JSON object in bytes with utf-8 encoding.\n * @hidden\n */\nexport function calculateObjectSizeInBytes(obj: unknown): number {\n  return new TextEncoder().encode(bodyFromData(obj as any)).length;\n}\n\nexport function decorateBatchOperation(\n  operation: OperationInput,\n  options: RequestOptions = {}\n): Operation {\n  if (\n    operation.operationType === BulkOperationType.Create ||\n    operation.operationType === BulkOperationType.Upsert\n  ) {\n    if (\n      (operation.resourceBody.id === undefined || operation.resourceBody.id === \"\") &&\n      !options.disableAutomaticIdGeneration\n    ) {\n      operation.resourceBody.id = uuid();\n    }\n  }\n  return operation as Operation;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport type PatchOperation = ExistingKeyOperation | RemoveOperation;\n\nexport const PatchOperationType = {\n  add: \"add\",\n  replace: \"replace\",\n  remove: \"remove\",\n  set: \"set\",\n  incr: \"incr\",\n} as const;\n\nexport type ExistingKeyOperation = {\n  op: keyof typeof PatchOperationType;\n  value: any;\n  path: string;\n};\n\nexport type RemoveOperation = {\n  op: \"remove\";\n  path: string;\n};\n\nexport type PatchRequestBody =\n  | {\n      operations: PatchOperation[];\n      condition?: string;\n    }\n  | PatchOperation[];\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosDiagnostics, CosmosHeaders } from \"../index\";\n\nexport interface ErrorBody {\n  code: string;\n  message: string;\n  /**\n   * @hidden\n   */\n  additionalErrorInfo?: PartitionedQueryExecutionInfo;\n}\n\n/**\n * @hidden\n */\nexport interface PartitionedQueryExecutionInfo {\n  partitionedQueryExecutionInfoVersion: number;\n  queryInfo: QueryInfo;\n  queryRanges: QueryRange[];\n}\n\n/**\n * @hidden\n */\nexport interface QueryRange {\n  min: string;\n  max: string;\n  isMinInclusive: boolean;\n  isMaxInclusive: boolean;\n}\n\n/**\n * @hidden\n */\nexport interface QueryInfo {\n  top?: any;\n  orderBy?: any[];\n  orderByExpressions?: any[];\n  offset?: number;\n  limit?: number;\n  aggregates?: AggregateType[];\n  groupByExpressions?: GroupByExpressions;\n  groupByAliasToAggregateType: GroupByAliasToAggregateType;\n  rewrittenQuery?: any;\n  distinctType: string;\n  hasSelectValue: boolean;\n}\n\nexport type GroupByExpressions = string[];\n\nexport type AggregateType = \"Average\" | \"Count\" | \"Max\" | \"Min\" | \"Sum\";\n\nexport interface GroupByAliasToAggregateType {\n  [key: string]: AggregateType;\n}\n\nexport class ErrorResponse extends Error {\n  code?: number | string;\n  substatus?: number;\n  body?: ErrorBody;\n  headers?: CosmosHeaders;\n  activityId?: string;\n  retryAfterInMs?: number;\n  retryAfterInMilliseconds?: number;\n  [key: string]: any;\n  diagnostics?: CosmosDiagnostics;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosDiagnostics } from \"../CosmosDiagnostics\";\nimport { Constants } from \"../common\";\nimport { CosmosHeaders } from \"../queryExecutionContext/CosmosHeaders\";\nimport { StatusCode, SubStatusCode } from \"./StatusCodes\";\n\nexport class ResourceResponse<TResource> {\n  constructor(\n    public readonly resource: TResource | undefined,\n    public readonly headers: CosmosHeaders,\n    public readonly statusCode: StatusCode,\n    public readonly diagnostics: CosmosDiagnostics,\n    public readonly substatus?: SubStatusCode\n  ) {}\n  public get requestCharge(): number {\n    return Number(this.headers[Constants.HttpHeaders.RequestCharge]) || 0;\n  }\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId] as string;\n  }\n  public get etag(): string {\n    return this.headers[Constants.HttpHeaders.ETag] as string;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport class ClientSideMetrics {\n  constructor(public readonly requestCharge: number) {}\n\n  /**\n   * Adds one or more ClientSideMetrics to a copy of this instance and returns the result.\n   */\n  public add(...clientSideMetricsArray: ClientSideMetrics[]): ClientSideMetrics {\n    let requestCharge = this.requestCharge;\n    for (const clientSideMetrics of clientSideMetricsArray) {\n      if (clientSideMetrics == null) {\n        throw new Error(\"clientSideMetrics has null or undefined item(s)\");\n      }\n\n      requestCharge += clientSideMetrics.requestCharge;\n    }\n\n    return new ClientSideMetrics(requestCharge);\n  }\n\n  public static readonly zero = new ClientSideMetrics(0);\n\n  public static createFromArray(...clientSideMetricsArray: ClientSideMetrics[]): ClientSideMetrics {\n    if (clientSideMetricsArray == null) {\n      throw new Error(\"clientSideMetricsArray is null or undefined item(s)\");\n    }\n\n    return this.zero.add(...clientSideMetricsArray);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport default {\n  // QueryMetrics\n  RetrievedDocumentCount: \"retrievedDocumentCount\",\n  RetrievedDocumentSize: \"retrievedDocumentSize\",\n  OutputDocumentCount: \"outputDocumentCount\",\n  OutputDocumentSize: \"outputDocumentSize\",\n  IndexHitRatio: \"indexUtilizationRatio\",\n  IndexHitDocumentCount: \"indexHitDocumentCount\",\n  TotalQueryExecutionTimeInMs: \"totalExecutionTimeInMs\",\n\n  // QueryPreparationTimes\n  QueryCompileTimeInMs: \"queryCompileTimeInMs\",\n  LogicalPlanBuildTimeInMs: \"queryLogicalPlanBuildTimeInMs\",\n  PhysicalPlanBuildTimeInMs: \"queryPhysicalPlanBuildTimeInMs\",\n  QueryOptimizationTimeInMs: \"queryOptimizationTimeInMs\",\n\n  // QueryTimes\n  IndexLookupTimeInMs: \"indexLookupTimeInMs\",\n  DocumentLoadTimeInMs: \"documentLoadTimeInMs\",\n  VMExecutionTimeInMs: \"VMExecutionTimeInMs\",\n  DocumentWriteTimeInMs: \"writeOutputTimeInMs\",\n\n  // RuntimeExecutionTimes\n  QueryEngineTimes: \"queryEngineTimes\",\n  SystemFunctionExecuteTimeInMs: \"systemFunctionExecuteTimeInMs\",\n  UserDefinedFunctionExecutionTimeInMs: \"userFunctionExecuteTimeInMs\",\n\n  // QueryMetrics Text\n  RetrievedDocumentCountText: \"Retrieved Document Count\",\n  RetrievedDocumentSizeText: \"Retrieved Document Size\",\n  OutputDocumentCountText: \"Output Document Count\",\n  OutputDocumentSizeText: \"Output Document Size\",\n  IndexUtilizationText: \"Index Utilization\",\n  TotalQueryExecutionTimeText: \"Total Query Execution Time\",\n\n  // QueryPreparationTimes Text\n  QueryPreparationTimesText: \"Query Preparation Times\",\n  QueryCompileTimeText: \"Query Compilation Time\",\n  LogicalPlanBuildTimeText: \"Logical Plan Build Time\",\n  PhysicalPlanBuildTimeText: \"Physical Plan Build Time\",\n  QueryOptimizationTimeText: \"Query Optimization Time\",\n\n  // QueryTimes Text\n  QueryEngineTimesText: \"Query Engine Times\",\n  IndexLookupTimeText: \"Index Lookup Time\",\n  DocumentLoadTimeText: \"Document Load Time\",\n  WriteOutputTimeText: \"Document Write Time\",\n\n  // RuntimeExecutionTimes Text\n  RuntimeExecutionTimesText: \"Runtime Execution Times\",\n  TotalExecutionTimeText: \"Query Engine Execution Time\",\n  SystemFunctionExecuteTimeText: \"System Function Execution Time\",\n  UserDefinedFunctionExecutionTimeText: \"User-defined Function Execution Time\",\n\n  // ClientSideQueryMetrics Text\n  ClientSideQueryMetricsText: \"Client Side Metrics\",\n  RetriesText: \"Retry Count\",\n  RequestChargeText: \"Request Charge\",\n  FetchExecutionRangesText: \"Partition Execution Timeline\",\n  SchedulingMetricsText: \"Scheduling Metrics\",\n};\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// Ported this implementation to javascript:\n// https://referencesource.microsoft.com/#mscorlib/system/timespan.cs,83e476c1ae112117\n/** @hidden */\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst ticksPerMillisecond = 10000;\n/** @hidden */\nconst millisecondsPerTick = 1.0 / ticksPerMillisecond;\n\n/** @hidden */\nconst ticksPerSecond = ticksPerMillisecond * 1000; // 10,000,000\n/** @hidden */\nconst secondsPerTick = 1.0 / ticksPerSecond; // 0.0001\n\n/** @hidden */\nconst ticksPerMinute = ticksPerSecond * 60; // 600,000,000\n/** @hidden */\nconst minutesPerTick = 1.0 / ticksPerMinute; // 1.6666666666667e-9\n\n/** @hidden */\nconst ticksPerHour = ticksPerMinute * 60; // 36,000,000,000\n/** @hidden */\nconst hoursPerTick = 1.0 / ticksPerHour; // 2.77777777777777778e-11\n\n/** @hidden */\nconst ticksPerDay = ticksPerHour * 24; // 864,000,000,000\n/** @hidden */\nconst daysPerTick = 1.0 / ticksPerDay; // 1.1574074074074074074e-12\n\n/** @hidden */\nconst millisPerSecond = 1000;\n/** @hidden */\nconst millisPerMinute = millisPerSecond * 60; //     60,000\n/** @hidden */\nconst millisPerHour = millisPerMinute * 60; //  3,600,000\n/** @hidden */\nconst millisPerDay = millisPerHour * 24; // 86,400,000\n\n/** @hidden */\nconst maxMilliSeconds = Number.MAX_SAFE_INTEGER / ticksPerMillisecond;\n/** @hidden */\nconst minMilliSeconds = Number.MIN_SAFE_INTEGER / ticksPerMillisecond;\n\n/**\n * Represents a time interval.\n *\n * @param days                 - Number of days.\n * @param hours                - Number of hours.\n * @param minutes              - Number of minutes.\n * @param seconds              - Number of seconds.\n * @param milliseconds         - Number of milliseconds.\n * @hidden\n */\nexport class TimeSpan {\n  protected _ticks: number;\n  constructor(days: number, hours: number, minutes: number, seconds: number, milliseconds: number) {\n    // Constructor\n    if (!Number.isInteger(days)) {\n      throw new Error(\"days is not an integer\");\n    }\n\n    if (!Number.isInteger(hours)) {\n      throw new Error(\"hours is not an integer\");\n    }\n\n    if (!Number.isInteger(minutes)) {\n      throw new Error(\"minutes is not an integer\");\n    }\n\n    if (!Number.isInteger(seconds)) {\n      throw new Error(\"seconds is not an integer\");\n    }\n\n    if (!Number.isInteger(milliseconds)) {\n      throw new Error(\"milliseconds is not an integer\");\n    }\n\n    const totalMilliSeconds =\n      (days * 3600 * 24 + hours * 3600 + minutes * 60 + seconds) * 1000 + milliseconds;\n    if (totalMilliSeconds > maxMilliSeconds || totalMilliSeconds < minMilliSeconds) {\n      throw new Error(\"Total number of milliseconds was either too large or too small\");\n    }\n\n    this._ticks = totalMilliSeconds * ticksPerMillisecond;\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the sum of the specified TimeSpan object and this instance.\n   * @param ts - The time interval to add.\n   */\n  public add(ts: TimeSpan): TimeSpan {\n    if (TimeSpan.additionDoesOverflow(this._ticks, ts._ticks)) {\n      throw new Error(\"Adding the two timestamps causes an overflow.\");\n    }\n\n    const results = this._ticks + ts._ticks;\n    return TimeSpan.fromTicks(results);\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the difference of the specified TimeSpan object and this instance.\n   * @param ts - The time interval to subtract.\n   */\n  public subtract(ts: TimeSpan): TimeSpan {\n    if (TimeSpan.subtractionDoesUnderflow(this._ticks, ts._ticks)) {\n      throw new Error(\"Subtracting the two timestamps causes an underflow.\");\n    }\n\n    const results = this._ticks - ts._ticks;\n    return TimeSpan.fromTicks(results);\n  }\n\n  /**\n   * Compares this instance to a specified object and returns an integer that indicates whether this\n   * instance is shorter than, equal to, or longer than the specified object.\n   * @param value - The time interval to add.\n   */\n  public compareTo(value: TimeSpan): 1 | -1 | 0 {\n    if (value == null) {\n      return 1;\n    }\n\n    if (!TimeSpan.isTimeSpan(value)) {\n      throw new Error(\"Argument must be a TimeSpan object\");\n    }\n\n    return TimeSpan.compare(this, value);\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the absolute value of the current TimeSpan object.\n   */\n  public duration(): TimeSpan {\n    return TimeSpan.fromTicks(this._ticks >= 0 ? this._ticks : -this._ticks);\n  }\n\n  /**\n   * Returns a value indicating whether this instance is equal to a specified object.\n   * @param value - The time interval to check for equality.\n   */\n  public equals(value: TimeSpan): boolean {\n    if (TimeSpan.isTimeSpan(value)) {\n      return this._ticks === value._ticks;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the negated value of this instance.\n   * @param value - The time interval to check for equality.\n   */\n  public negate(): TimeSpan {\n    return TimeSpan.fromTicks(-this._ticks);\n  }\n\n  public days(): number {\n    return Math.floor(this._ticks / ticksPerDay);\n  }\n\n  public hours(): number {\n    return Math.floor(this._ticks / ticksPerHour);\n  }\n\n  public milliseconds(): number {\n    return Math.floor(this._ticks / ticksPerMillisecond);\n  }\n\n  public seconds(): number {\n    return Math.floor(this._ticks / ticksPerSecond);\n  }\n\n  public ticks(): number {\n    return this._ticks;\n  }\n\n  public totalDays(): number {\n    return this._ticks * daysPerTick;\n  }\n  public totalHours(): number {\n    return this._ticks * hoursPerTick;\n  }\n\n  public totalMilliseconds(): number {\n    return this._ticks * millisecondsPerTick;\n  }\n\n  public totalMinutes(): number {\n    return this._ticks * minutesPerTick;\n  }\n\n  public totalSeconds(): number {\n    return this._ticks * secondsPerTick;\n  }\n\n  public static fromTicks(value: number): TimeSpan {\n    const timeSpan = new TimeSpan(0, 0, 0, 0, 0);\n    timeSpan._ticks = value;\n    return timeSpan;\n  }\n\n  public static readonly zero = new TimeSpan(0, 0, 0, 0, 0);\n  public static readonly maxValue = TimeSpan.fromTicks(Number.MAX_SAFE_INTEGER);\n  public static readonly minValue = TimeSpan.fromTicks(Number.MIN_SAFE_INTEGER);\n\n  public static isTimeSpan(timespan: TimeSpan): number {\n    return timespan._ticks;\n  }\n\n  public static additionDoesOverflow(a: number, b: number): boolean {\n    const c = a + b;\n    return a !== c - b || b !== c - a;\n  }\n\n  public static subtractionDoesUnderflow(a: number, b: number): boolean {\n    const c = a - b;\n    return a !== c + b || b !== a - c;\n  }\n\n  public static compare(t1: TimeSpan, t2: TimeSpan): 1 | 0 | -1 {\n    if (t1._ticks > t2._ticks) {\n      return 1;\n    }\n    if (t1._ticks < t2._ticks) {\n      return -1;\n    }\n    return 0;\n  }\n\n  public static interval(value: number, scale: number): TimeSpan {\n    if (isNaN(value)) {\n      throw new Error(\"value must be a number\");\n    }\n\n    const milliseconds = value * scale;\n    if (milliseconds > maxMilliSeconds || milliseconds < minMilliSeconds) {\n      throw new Error(\"timespan too long\");\n    }\n\n    return TimeSpan.fromTicks(Math.floor(milliseconds * ticksPerMillisecond));\n  }\n\n  public static fromMilliseconds(value: number): TimeSpan {\n    return TimeSpan.interval(value, 1);\n  }\n\n  public static fromSeconds(value: number): TimeSpan {\n    return TimeSpan.interval(value, millisPerSecond);\n  }\n\n  public static fromMinutes(value: number): TimeSpan {\n    return TimeSpan.interval(value, millisPerMinute);\n  }\n\n  public static fromHours(value: number): TimeSpan {\n    return TimeSpan.interval(value, millisPerHour);\n  }\n\n  public static fromDays(value: number): TimeSpan {\n    return TimeSpan.interval(value, millisPerDay);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { TimeSpan } from \"./timeSpan\";\n\n/**\n * @hidden\n */\nexport function parseDelimitedString(delimitedString: string): {\n  [key: string]: any;\n} {\n  if (delimitedString == null) {\n    throw new Error(\"delimitedString is null or undefined\");\n  }\n\n  const metrics: { [key: string]: any } = {};\n\n  const headerAttributes = delimitedString.split(\";\");\n  for (const attribute of headerAttributes) {\n    const attributeKeyValue = attribute.split(\"=\");\n\n    if (attributeKeyValue.length !== 2) {\n      throw new Error(\"recieved a malformed delimited string\");\n    }\n\n    const attributeKey = attributeKeyValue[0];\n    const attributeValue = parseFloat(attributeKeyValue[1]);\n\n    metrics[attributeKey] = attributeValue;\n  }\n\n  return metrics;\n}\n\n/**\n * @hidden\n */\nexport function timeSpanFromMetrics(\n  metrics: { [key: string]: any } /* TODO: any */,\n  key: string\n): TimeSpan {\n  if (key in metrics) {\n    return TimeSpan.fromMilliseconds(metrics[key]);\n  }\n\n  return TimeSpan.zero;\n}\n\n/**\n * @hidden\n */\nexport function isNumeric(input: unknown): boolean {\n  return !isNaN(parseFloat(input as string)) && isFinite(input as number);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { TimeSpan } from \"./timeSpan\";\n\nexport class QueryPreparationTimes {\n  constructor(\n    public readonly queryCompilationTime: TimeSpan,\n    public readonly logicalPlanBuildTime: TimeSpan,\n    public readonly physicalPlanBuildTime: TimeSpan,\n    public readonly queryOptimizationTime: TimeSpan\n  ) {}\n\n  /**\n   * returns a new QueryPreparationTimes instance that is the addition of this and the arguments.\n   */\n  public add(...queryPreparationTimesArray: QueryPreparationTimes[]): QueryPreparationTimes {\n    let queryCompilationTime = this.queryCompilationTime;\n    let logicalPlanBuildTime = this.logicalPlanBuildTime;\n    let physicalPlanBuildTime = this.physicalPlanBuildTime;\n    let queryOptimizationTime = this.queryOptimizationTime;\n\n    for (const queryPreparationTimes of queryPreparationTimesArray) {\n      if (queryPreparationTimes == null) {\n        throw new Error(\"queryPreparationTimesArray has null or undefined item(s)\");\n      }\n\n      queryCompilationTime = queryCompilationTime.add(queryPreparationTimes.queryCompilationTime);\n      logicalPlanBuildTime = logicalPlanBuildTime.add(queryPreparationTimes.logicalPlanBuildTime);\n      physicalPlanBuildTime = physicalPlanBuildTime.add(\n        queryPreparationTimes.physicalPlanBuildTime\n      );\n      queryOptimizationTime = queryOptimizationTime.add(\n        queryPreparationTimes.queryOptimizationTime\n      );\n    }\n\n    return new QueryPreparationTimes(\n      queryCompilationTime,\n      logicalPlanBuildTime,\n      physicalPlanBuildTime,\n      queryOptimizationTime\n    );\n  }\n\n  /**\n   * Output the QueryPreparationTimes as a delimited string.\n   */\n  public toDelimitedString(): string {\n    return (\n      `${\n        QueryMetricsConstants.QueryCompileTimeInMs\n      }=${this.queryCompilationTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.LogicalPlanBuildTimeInMs\n      }=${this.logicalPlanBuildTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.PhysicalPlanBuildTimeInMs\n      }=${this.physicalPlanBuildTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.QueryOptimizationTimeInMs\n      }=${this.queryOptimizationTime.totalMilliseconds()}`\n    );\n  }\n\n  public static readonly zero = new QueryPreparationTimes(\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero\n  );\n\n  /**\n   * Returns a new instance of the QueryPreparationTimes class that is the\n   * aggregation of an array of QueryPreparationTimes.\n   */\n  public static createFromArray(\n    queryPreparationTimesArray: QueryPreparationTimes[]\n  ): QueryPreparationTimes {\n    if (queryPreparationTimesArray == null) {\n      throw new Error(\"queryPreparationTimesArray is null or undefined item(s)\");\n    }\n\n    return QueryPreparationTimes.zero.add(...queryPreparationTimesArray);\n  }\n\n  /**\n   * Returns a new instance of the QueryPreparationTimes class this is deserialized from a delimited string.\n   */\n  public static createFromDelimitedString(delimitedString: string): QueryPreparationTimes {\n    const metrics = parseDelimitedString(delimitedString);\n\n    return new QueryPreparationTimes(\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryCompileTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.LogicalPlanBuildTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.PhysicalPlanBuildTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryOptimizationTimeInMs)\n    );\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { TimeSpan } from \"./timeSpan\";\n\nexport class RuntimeExecutionTimes {\n  constructor(\n    public readonly queryEngineExecutionTime: TimeSpan,\n    public readonly systemFunctionExecutionTime: TimeSpan,\n    public readonly userDefinedFunctionExecutionTime: TimeSpan\n  ) {}\n\n  /**\n   * returns a new RuntimeExecutionTimes instance that is the addition of this and the arguments.\n   */\n  public add(...runtimeExecutionTimesArray: RuntimeExecutionTimes[]): RuntimeExecutionTimes {\n    let queryEngineExecutionTime = this.queryEngineExecutionTime;\n    let systemFunctionExecutionTime = this.systemFunctionExecutionTime;\n    let userDefinedFunctionExecutionTime = this.userDefinedFunctionExecutionTime;\n\n    for (const runtimeExecutionTimes of runtimeExecutionTimesArray) {\n      if (runtimeExecutionTimes == null) {\n        throw new Error(\"runtimeExecutionTimes has null or undefined item(s)\");\n      }\n\n      queryEngineExecutionTime = queryEngineExecutionTime.add(\n        runtimeExecutionTimes.queryEngineExecutionTime\n      );\n      systemFunctionExecutionTime = systemFunctionExecutionTime.add(\n        runtimeExecutionTimes.systemFunctionExecutionTime\n      );\n      userDefinedFunctionExecutionTime = userDefinedFunctionExecutionTime.add(\n        runtimeExecutionTimes.userDefinedFunctionExecutionTime\n      );\n    }\n\n    return new RuntimeExecutionTimes(\n      queryEngineExecutionTime,\n      systemFunctionExecutionTime,\n      userDefinedFunctionExecutionTime\n    );\n  }\n\n  /**\n   * Output the RuntimeExecutionTimes as a delimited string.\n   */\n  public toDelimitedString(): string {\n    return (\n      `${\n        QueryMetricsConstants.SystemFunctionExecuteTimeInMs\n      }=${this.systemFunctionExecutionTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs\n      }=${this.userDefinedFunctionExecutionTime.totalMilliseconds()}`\n    );\n  }\n\n  public static readonly zero = new RuntimeExecutionTimes(\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero\n  );\n\n  /**\n   * Returns a new instance of the RuntimeExecutionTimes class that is\n   *  the aggregation of an array of RuntimeExecutionTimes.\n   */\n  public static createFromArray(\n    runtimeExecutionTimesArray: RuntimeExecutionTimes[]\n  ): RuntimeExecutionTimes {\n    if (runtimeExecutionTimesArray == null) {\n      throw new Error(\"runtimeExecutionTimesArray is null or undefined item(s)\");\n    }\n\n    return RuntimeExecutionTimes.zero.add(...runtimeExecutionTimesArray);\n  }\n\n  /**\n   * Returns a new instance of the RuntimeExecutionTimes class this is deserialized from a delimited string.\n   */\n  public static createFromDelimitedString(delimitedString: string): RuntimeExecutionTimes {\n    const metrics = parseDelimitedString(delimitedString);\n\n    const vmExecutionTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs);\n    const indexLookupTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs);\n    const documentLoadTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.DocumentLoadTimeInMs\n    );\n    const documentWriteTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.DocumentWriteTimeInMs\n    );\n\n    let queryEngineExecutionTime = TimeSpan.zero;\n    queryEngineExecutionTime = queryEngineExecutionTime.add(vmExecutionTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(indexLookupTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentLoadTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentWriteTime);\n    return new RuntimeExecutionTimes(\n      queryEngineExecutionTime,\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.SystemFunctionExecuteTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs)\n    );\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientSideMetrics } from \"./clientSideMetrics\";\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { QueryPreparationTimes } from \"./queryPreparationTime\";\nimport { RuntimeExecutionTimes } from \"./runtimeExecutionTimes\";\nimport { TimeSpan } from \"./timeSpan\";\n\nexport class QueryMetrics {\n  constructor(\n    public readonly retrievedDocumentCount: number,\n    public readonly retrievedDocumentSize: number,\n    public readonly outputDocumentCount: number,\n    public readonly outputDocumentSize: number,\n    public readonly indexHitDocumentCount: number,\n    public readonly totalQueryExecutionTime: TimeSpan,\n    public readonly queryPreparationTimes: QueryPreparationTimes,\n    public readonly indexLookupTime: TimeSpan,\n    public readonly documentLoadTime: TimeSpan,\n    public readonly vmExecutionTime: TimeSpan,\n    public readonly runtimeExecutionTimes: RuntimeExecutionTimes,\n    public readonly documentWriteTime: TimeSpan,\n    public readonly clientSideMetrics: ClientSideMetrics\n  ) {}\n\n  /**\n   * Gets the IndexHitRatio\n   * @hidden\n   */\n  public get indexHitRatio(): number {\n    return this.retrievedDocumentCount === 0\n      ? 1\n      : this.indexHitDocumentCount / this.retrievedDocumentCount;\n  }\n\n  /**\n   * returns a new QueryMetrics instance that is the addition of this and the arguments.\n   */\n  public add(queryMetricsArray: QueryMetrics[]): QueryMetrics {\n    let retrievedDocumentCount = 0;\n    let retrievedDocumentSize = 0;\n    let outputDocumentCount = 0;\n    let outputDocumentSize = 0;\n    let indexHitDocumentCount = 0;\n    let totalQueryExecutionTime = TimeSpan.zero;\n    const queryPreparationTimesArray = [];\n    let indexLookupTime = TimeSpan.zero;\n    let documentLoadTime = TimeSpan.zero;\n    let vmExecutionTime = TimeSpan.zero;\n    const runtimeExecutionTimesArray = [];\n    let documentWriteTime = TimeSpan.zero;\n    const clientSideQueryMetricsArray = [];\n\n    queryMetricsArray.push(this);\n\n    for (const queryMetrics of queryMetricsArray) {\n      if (queryMetrics) {\n        retrievedDocumentCount += queryMetrics.retrievedDocumentCount;\n        retrievedDocumentSize += queryMetrics.retrievedDocumentSize;\n        outputDocumentCount += queryMetrics.outputDocumentCount;\n        outputDocumentSize += queryMetrics.outputDocumentSize;\n        indexHitDocumentCount += queryMetrics.indexHitDocumentCount;\n        totalQueryExecutionTime = totalQueryExecutionTime.add(queryMetrics.totalQueryExecutionTime);\n        queryPreparationTimesArray.push(queryMetrics.queryPreparationTimes);\n        indexLookupTime = indexLookupTime.add(queryMetrics.indexLookupTime);\n        documentLoadTime = documentLoadTime.add(queryMetrics.documentLoadTime);\n        vmExecutionTime = vmExecutionTime.add(queryMetrics.vmExecutionTime);\n        runtimeExecutionTimesArray.push(queryMetrics.runtimeExecutionTimes);\n        documentWriteTime = documentWriteTime.add(queryMetrics.documentWriteTime);\n        clientSideQueryMetricsArray.push(queryMetrics.clientSideMetrics);\n      }\n    }\n\n    return new QueryMetrics(\n      retrievedDocumentCount,\n      retrievedDocumentSize,\n      outputDocumentCount,\n      outputDocumentSize,\n      indexHitDocumentCount,\n      totalQueryExecutionTime,\n      QueryPreparationTimes.createFromArray(queryPreparationTimesArray),\n      indexLookupTime,\n      documentLoadTime,\n      vmExecutionTime,\n      RuntimeExecutionTimes.createFromArray(runtimeExecutionTimesArray),\n      documentWriteTime,\n      ClientSideMetrics.createFromArray(...clientSideQueryMetricsArray)\n    );\n  }\n\n  /**\n   * Output the QueryMetrics as a delimited string.\n   * @hidden\n   */\n  public toDelimitedString(): string {\n    return (\n      QueryMetricsConstants.RetrievedDocumentCount +\n      \"=\" +\n      this.retrievedDocumentCount +\n      \";\" +\n      QueryMetricsConstants.RetrievedDocumentSize +\n      \"=\" +\n      this.retrievedDocumentSize +\n      \";\" +\n      QueryMetricsConstants.OutputDocumentCount +\n      \"=\" +\n      this.outputDocumentCount +\n      \";\" +\n      QueryMetricsConstants.OutputDocumentSize +\n      \"=\" +\n      this.outputDocumentSize +\n      \";\" +\n      QueryMetricsConstants.IndexHitRatio +\n      \"=\" +\n      this.indexHitRatio +\n      \";\" +\n      QueryMetricsConstants.TotalQueryExecutionTimeInMs +\n      \"=\" +\n      this.totalQueryExecutionTime.totalMilliseconds() +\n      \";\" +\n      this.queryPreparationTimes.toDelimitedString() +\n      \";\" +\n      QueryMetricsConstants.IndexLookupTimeInMs +\n      \"=\" +\n      this.indexLookupTime.totalMilliseconds() +\n      \";\" +\n      QueryMetricsConstants.DocumentLoadTimeInMs +\n      \"=\" +\n      this.documentLoadTime.totalMilliseconds() +\n      \";\" +\n      QueryMetricsConstants.VMExecutionTimeInMs +\n      \"=\" +\n      this.vmExecutionTime.totalMilliseconds() +\n      \";\" +\n      this.runtimeExecutionTimes.toDelimitedString() +\n      \";\" +\n      QueryMetricsConstants.DocumentWriteTimeInMs +\n      \"=\" +\n      this.documentWriteTime.totalMilliseconds()\n    );\n  }\n\n  public static readonly zero = new QueryMetrics(\n    0,\n    0,\n    0,\n    0,\n    0,\n    TimeSpan.zero,\n    QueryPreparationTimes.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    RuntimeExecutionTimes.zero,\n    TimeSpan.zero,\n    ClientSideMetrics.zero\n  );\n\n  /**\n   * Returns a new instance of the QueryMetrics class that is the aggregation of an array of query metrics.\n   */\n  public static createFromArray(queryMetricsArray: QueryMetrics[]): QueryMetrics {\n    if (!queryMetricsArray) {\n      throw new Error(\"queryMetricsArray is null or undefined item(s)\");\n    }\n\n    return QueryMetrics.zero.add(queryMetricsArray);\n  }\n\n  /**\n   * Returns a new instance of the QueryMetrics class this is deserialized from a delimited string.\n   */\n  public static createFromDelimitedString(\n    delimitedString: string,\n    clientSideMetrics?: ClientSideMetrics\n  ): QueryMetrics {\n    const metrics = parseDelimitedString(delimitedString);\n\n    const indexHitRatio = metrics[QueryMetricsConstants.IndexHitRatio] || 0;\n    const retrievedDocumentCount = metrics[QueryMetricsConstants.RetrievedDocumentCount] || 0;\n    const indexHitCount = indexHitRatio * retrievedDocumentCount;\n    const outputDocumentCount = metrics[QueryMetricsConstants.OutputDocumentCount] || 0;\n    const outputDocumentSize = metrics[QueryMetricsConstants.OutputDocumentSize] || 0;\n    const retrievedDocumentSize = metrics[QueryMetricsConstants.RetrievedDocumentSize] || 0;\n    const totalQueryExecutionTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.TotalQueryExecutionTimeInMs\n    );\n    return new QueryMetrics(\n      retrievedDocumentCount,\n      retrievedDocumentSize,\n      outputDocumentCount,\n      outputDocumentSize,\n      indexHitCount,\n      totalQueryExecutionTime,\n      QueryPreparationTimes.createFromDelimitedString(delimitedString),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentLoadTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs),\n      RuntimeExecutionTimes.createFromDelimitedString(delimitedString),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentWriteTimeInMs),\n      clientSideMetrics || ClientSideMetrics.zero\n    );\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"../common\";\nimport { QueryMetrics } from \"../queryMetrics/queryMetrics\";\n\nexport interface CosmosHeaders {\n  [key: string]: any;\n}\n\n/** @hidden */\n// TODO: docs\nexport function getRequestChargeIfAny(headers: CosmosHeaders | number): number {\n  if (typeof headers === \"number\") {\n    return headers;\n  } else if (typeof headers === \"string\") {\n    return parseFloat(headers);\n  }\n\n  if (headers) {\n    const rc = headers[Constants.HttpHeaders.RequestCharge];\n    if (rc) {\n      return parseFloat(rc as string);\n    } else {\n      return 0;\n    }\n  } else {\n    return 0;\n  }\n}\n\n/**\n * @hidden\n */\nexport function getInitialHeader(): CosmosHeaders {\n  const headers: CosmosHeaders = {};\n  headers[Constants.HttpHeaders.RequestCharge] = 0;\n  headers[Constants.HttpHeaders.QueryMetrics] = {};\n  return headers;\n}\n\n/**\n * @hidden\n */\n// TODO: The name of this method isn't very accurate to what it does\nexport function mergeHeaders(headers: CosmosHeaders, toBeMergedHeaders: CosmosHeaders): void {\n  if (headers[Constants.HttpHeaders.RequestCharge] === undefined) {\n    headers[Constants.HttpHeaders.RequestCharge] = 0;\n  }\n\n  if (headers[Constants.HttpHeaders.QueryMetrics] === undefined) {\n    headers[Constants.HttpHeaders.QueryMetrics] = QueryMetrics.zero;\n  }\n\n  if (!toBeMergedHeaders) {\n    return;\n  }\n\n  headers[Constants.HttpHeaders.RequestCharge] += getRequestChargeIfAny(toBeMergedHeaders);\n  if (toBeMergedHeaders[Constants.HttpHeaders.IsRUPerMinuteUsed]) {\n    headers[Constants.HttpHeaders.IsRUPerMinuteUsed] =\n      toBeMergedHeaders[Constants.HttpHeaders.IsRUPerMinuteUsed];\n  }\n\n  if (Constants.HttpHeaders.QueryMetrics in toBeMergedHeaders) {\n    const headerQueryMetrics = headers[Constants.HttpHeaders.QueryMetrics];\n    const toBeMergedHeaderQueryMetrics = toBeMergedHeaders[Constants.HttpHeaders.QueryMetrics];\n\n    for (const partitionId in toBeMergedHeaderQueryMetrics) {\n      if (headerQueryMetrics[partitionId]) {\n        const combinedQueryMetrics = headerQueryMetrics[partitionId].add([\n          toBeMergedHeaderQueryMetrics[partitionId],\n        ]);\n        headerQueryMetrics[partitionId] = combinedQueryMetrics;\n      } else {\n        headerQueryMetrics[partitionId] = toBeMergedHeaderQueryMetrics[partitionId];\n      }\n    }\n  }\n\n  if (Constants.HttpHeaders.IndexUtilization in toBeMergedHeaders) {\n    headers[Constants.HttpHeaders.IndexUtilization] =\n      toBeMergedHeaders[Constants.HttpHeaders.IndexUtilization];\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SingleIndexUtilizationEntity } from \"./SingleIndexUtilizationEntity\";\nimport { CompositeIndexUtilizationEntity } from \"./CompositeIndexUtilizationEntity\";\nexport class IndexUtilizationInfo {\n  public static readonly Empty = new IndexUtilizationInfo([], [], [], []);\n\n  constructor(\n    public readonly UtilizedSingleIndexes: SingleIndexUtilizationEntity[],\n    public readonly PotentialSingleIndexes: SingleIndexUtilizationEntity[],\n    public readonly UtilizedCompositeIndexes: CompositeIndexUtilizationEntity[],\n    public readonly PotentialCompositeIndexes: CompositeIndexUtilizationEntity[]\n  ) {}\n\n  public static tryCreateFromDelimitedBase64String(\n    delimitedString: string,\n    out: { result?: IndexUtilizationInfo }\n  ): boolean {\n    if (delimitedString == null) {\n      out.result = IndexUtilizationInfo.Empty;\n      return false;\n    }\n\n    return IndexUtilizationInfo.tryCreateFromDelimitedString(\n      Buffer.from(delimitedString, \"base64\").toString(),\n      out\n    );\n  }\n\n  public static tryCreateFromDelimitedString(\n    delimitedString: string,\n    out: { result?: IndexUtilizationInfo }\n  ): boolean {\n    if (delimitedString == null) {\n      out.result = IndexUtilizationInfo.Empty;\n      return false;\n    }\n\n    try {\n      out.result = JSON.parse(delimitedString) || IndexUtilizationInfo.Empty;\n      return true;\n    } catch (error) {\n      out.result = IndexUtilizationInfo.Empty;\n      return false;\n    }\n  }\n\n  public static createFromString(\n    delimitedString: string,\n    isBase64Encoded: boolean\n  ): IndexUtilizationInfo {\n    const result: { result?: IndexUtilizationInfo } = { result: undefined };\n\n    if (isBase64Encoded) {\n      IndexUtilizationInfo.tryCreateFromDelimitedBase64String(delimitedString, result);\n    } else {\n      IndexUtilizationInfo.tryCreateFromDelimitedString(delimitedString, result);\n    }\n\n    return result.result ?? IndexUtilizationInfo.Empty;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport default {\n  IndexUtilizationInfo: \"Index Utilization Information\",\n  UtilizedSingleIndexes: \"Utilized Single Indexes\",\n  PotentialSingleIndexes: \"Potential Single Indexes\",\n  UtilizedCompositeIndexes: \"Utilized Composite Indexes\",\n  PotentialCompositeIndexes: \"Potential Composite Indexes\",\n  IndexExpression: \"Index Spec\",\n  IndexImpactScore: \"Index Impact Score\",\n  IndexUtilizationSeparator: \"---\",\n};\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport Constants from \"./Constants\";\nimport { CompositeIndexUtilizationEntity } from \"./CompositeIndexUtilizationEntity\";\nimport { IndexUtilizationInfo } from \"./IndexUtilizationInfo\";\nimport { SingleIndexUtilizationEntity } from \"./SingleIndexUtilizationEntity\";\n\nexport class IndexMetricWriter {\n  public writeIndexMetrics(indexUtilizationInfo: IndexUtilizationInfo): string {\n    let result = \"\";\n    result = this.writeBeforeIndexUtilizationInfo(result);\n    result = this.writeIndexUtilizationInfo(result, indexUtilizationInfo);\n    result = this.writeAfterIndexUtilizationInfo(result);\n    return result;\n  }\n\n  protected writeBeforeIndexUtilizationInfo(result: string): string {\n    result = this.appendNewlineToResult(result);\n    result = this.appendHeaderToResult(result, Constants.IndexUtilizationInfo, 0);\n    return result;\n  }\n\n  protected writeIndexUtilizationInfo(\n    result: string,\n    indexUtilizationInfo: IndexUtilizationInfo\n  ): string {\n    result = this.appendHeaderToResult(result, Constants.UtilizedSingleIndexes, 1);\n\n    for (const indexUtilizationEntity of indexUtilizationInfo.UtilizedSingleIndexes) {\n      result = this.writeSingleIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n    result = this.appendHeaderToResult(result, Constants.PotentialSingleIndexes, 1);\n\n    for (const indexUtilizationEntity of indexUtilizationInfo.PotentialSingleIndexes) {\n      result = this.writeSingleIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n\n    result = this.appendHeaderToResult(result, Constants.UtilizedCompositeIndexes, 1);\n\n    for (const indexUtilizationEntity of indexUtilizationInfo.UtilizedCompositeIndexes) {\n      result = this.writeCompositeIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n\n    result = this.appendHeaderToResult(result, Constants.PotentialCompositeIndexes, 1);\n\n    for (const indexUtilizationEntity of indexUtilizationInfo.PotentialCompositeIndexes) {\n      result = this.writeCompositeIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n    return result;\n  }\n\n  protected writeAfterIndexUtilizationInfo(result: string): string {\n    return result;\n  }\n\n  private writeSingleIndexUtilizationEntity(\n    result: string,\n    indexUtilizationEntity: SingleIndexUtilizationEntity\n  ): string {\n    result = this.appendHeaderToResult(\n      result,\n      `${Constants.IndexExpression}: ${indexUtilizationEntity.IndexSpec}`,\n      2\n    );\n    result = this.appendHeaderToResult(\n      result,\n      `${Constants.IndexImpactScore}: ${indexUtilizationEntity.IndexImpactScore}`,\n      2\n    );\n    result = this.appendHeaderToResult(result, Constants.IndexUtilizationSeparator, 2);\n    return result;\n  }\n\n  private writeCompositeIndexUtilizationEntity(\n    result: string,\n    indexUtilizationEntity: CompositeIndexUtilizationEntity\n  ): string {\n    result = this.appendHeaderToResult(\n      result,\n      `${Constants.IndexExpression}: ${indexUtilizationEntity.IndexSpecs.join(\", \")}`,\n      2\n    );\n    result = this.appendHeaderToResult(\n      result,\n      `${Constants.IndexImpactScore}: ${indexUtilizationEntity.IndexImpactScore}`,\n      2\n    );\n    result = this.appendHeaderToResult(result, Constants.IndexUtilizationSeparator, 2);\n    return result;\n  }\n\n  private appendNewlineToResult(result: string): string {\n    return this.appendHeaderToResult(result, \"\", 0);\n  }\n\n  private appendHeaderToResult(result: string, headerTitle: string, indentLevel: number): string {\n    const Indent = \"  \";\n    const header = `${Indent.repeat(indentLevel)}${headerTitle}\\n`;\n    result += header;\n    return result;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"../common\";\nimport { CosmosHeaders, getRequestChargeIfAny } from \"../queryExecutionContext/headerUtils\";\nimport { IndexMetricWriter, IndexUtilizationInfo } from \"../indexMetrics\";\nimport { CosmosDiagnostics } from \"../CosmosDiagnostics\";\n\nexport class FeedResponse<TResource> {\n  constructor(\n    public readonly resources: TResource[],\n    private readonly headers: CosmosHeaders,\n    public readonly hasMoreResults: boolean,\n    public readonly diagnostics: CosmosDiagnostics\n  ) {}\n\n  public get continuation(): string {\n    return this.continuationToken;\n  }\n  public get continuationToken(): string {\n    return this.headers[Constants.HttpHeaders.Continuation];\n  }\n  public get queryMetrics(): string {\n    return this.headers[Constants.HttpHeaders.QueryMetrics];\n  }\n  public get requestCharge(): number {\n    return getRequestChargeIfAny(this.headers);\n  }\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n  public get indexMetrics(): string {\n    const writer = new IndexMetricWriter();\n    const indexUtilizationInfo = IndexUtilizationInfo.createFromString(\n      this.headers[Constants.HttpHeaders.IndexUtilization],\n      true\n    );\n    return writer.writeIndexMetrics(indexUtilizationInfo);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * @hidden\n */\nexport const TimeoutErrorCode = \"TimeoutError\";\n\nexport class TimeoutError extends Error {\n  public readonly code: string = TimeoutErrorCode;\n  constructor(message: string = \"Timeout Error\") {\n    super(message);\n    this.name = TimeoutErrorCode;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * @hidden\n * Utility function to get currentTime in UTC milliseconds.\n * @returns\n */\n\nexport function getCurrentTimestampInMs(): number {\n  return Date.now();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  ClientSideRequestStatistics,\n  FailedRequestAttemptDiagnostic,\n  GatewayStatistics,\n  MetadataLookUpDiagnostic,\n  MetadataLookUpType,\n} from \"../CosmosDiagnostics\";\nimport { getCurrentTimestampInMs } from \"../utils/time\";\n\n/**\n * @hidden\n * Internal class to hold CosmosDiagnostic aggregate information all through the lifecycle of a request.\n * This object gathers diagnostic information throughout Client operation which may span across multiple\n * Server call, retries etc.\n * Functions - recordFailedAttempt, recordMetaDataQuery, recordEndpointContactEvent are used to ingest\n * data into the context. At the end of operation, getDiagnostics() is used to\n * get final CosmosDiagnostic object.\n */\nexport class CosmosDiagnosticContext {\n  private requestStartTimeUTCinMs: number;\n  private failedAttempts: FailedRequestAttemptDiagnostic[] = [];\n  private metadataLookups: MetadataLookUpDiagnostic[] = [];\n  private gaterwayStatistics: GatewayStatistics[] = [];\n  public locationEndpointsContacted: Set<string> = new Set();\n\n  public constructor() {\n    this.requestStartTimeUTCinMs = getCurrentTimestampInMs();\n  }\n\n  public recordFailedAttempt(\n    gaterwayStatistics: GatewayStatistics,\n    retryAttemptNumber: number\n  ): void {\n    const attempt: FailedRequestAttemptDiagnostic = {\n      attemptNumber: retryAttemptNumber,\n      startTimeUTCInMs: gaterwayStatistics.startTimeUTCInMs,\n      durationInMs: gaterwayStatistics.durationInMs,\n      statusCode: gaterwayStatistics.statusCode,\n      substatusCode: gaterwayStatistics.subStatusCode,\n      requestPayloadLengthInBytes: gaterwayStatistics.requestPayloadLengthInBytes,\n      responsePayloadLengthInBytes: gaterwayStatistics.responsePayloadLengthInBytes,\n      activityId: gaterwayStatistics.activityId,\n      operationType: gaterwayStatistics.operationType,\n      resourceType: gaterwayStatistics.resourceType,\n    };\n    this.failedAttempts.push(attempt);\n  }\n\n  public recordNetworkCall(gaterwayStatistics: GatewayStatistics): void {\n    this.gaterwayStatistics.push(gaterwayStatistics);\n  }\n\n  /**\n   * Merge given DiagnosticContext to current node's DiagnosticContext, Treating GatewayRequests of\n   * given DiagnosticContext, as metadata requests.\n   */\n  public mergeDiagnostics(\n    childDiagnostics: CosmosDiagnosticContext,\n    metadataType: MetadataLookUpType\n  ): void {\n    // Copy Location endpoints contacted.\n    childDiagnostics.locationEndpointsContacted.forEach((endpoint) =>\n      this.locationEndpointsContacted.add(endpoint)\n    );\n\n    // Copy child nodes's GatewayStatistics to parent's metadata lookups.\n    childDiagnostics.gaterwayStatistics.forEach((gateway) =>\n      this.metadataLookups.push({\n        activityId: gateway.activityId,\n        requestPayloadLengthInBytes: gateway.requestPayloadLengthInBytes,\n        responsePayloadLengthInBytes: gateway.responsePayloadLengthInBytes,\n        startTimeUTCInMs: gateway.startTimeUTCInMs,\n        operationType: gateway.operationType,\n        resourceType: gateway.resourceType,\n        durationInMs: gateway.durationInMs,\n        metaDataType: metadataType,\n      })\n    );\n\n    // Copy child nodes's metadata lookups to parent's metadata lookups.\n    childDiagnostics.metadataLookups.forEach((lookup) => this.metadataLookups.push(lookup));\n\n    // Copy child nodes's failed attempts to parent's failed attempts.\n    childDiagnostics.failedAttempts.forEach((lookup) => this.failedAttempts.push(lookup));\n  }\n\n  public getClientSideStats(\n    endTimeUTCInMs: number = getCurrentTimestampInMs()\n  ): ClientSideRequestStatistics {\n    return {\n      requestStartTimeUTCInMs: this.requestStartTimeUTCinMs,\n      requestDurationInMs: endTimeUTCInMs - this.requestStartTimeUTCinMs,\n      totalRequestPayloadLengthInBytes: this.getTotalRequestPayloadLength(),\n      totalResponsePayloadLengthInBytes: this.getTotalResponsePayloadLength(),\n      locationEndpointsContacted: [...this.locationEndpointsContacted.values()],\n      metadataDiagnostics: {\n        metadataLookups: [...this.metadataLookups],\n      },\n      retryDiagnostics: {\n        failedAttempts: [...this.failedAttempts],\n      },\n      gatewayStatistics: this.gaterwayStatistics,\n    };\n  }\n\n  public getTotalRequestPayloadLength(): number {\n    let totalRequestPayloadLength = 0;\n    this.gaterwayStatistics.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes)\n    );\n    this.metadataLookups.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes)\n    );\n    this.failedAttempts.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes)\n    );\n    return totalRequestPayloadLength;\n  }\n\n  public getTotalResponsePayloadLength(): number {\n    let totalResponsePayloadLength = 0;\n    this.gaterwayStatistics.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes)\n    );\n    this.metadataLookups.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes)\n    );\n    this.failedAttempts.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes)\n    );\n    return totalResponsePayloadLength;\n  }\n\n  public recordEndpointResolution(location: string): void {\n    this.locationEndpointsContacted.add(location);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationType, ResourceType } from \"./common\";\nimport { CosmosDbDiagnosticLevel } from \"./diagnostics/CosmosDbDiagnosticLevel\";\nimport { DiagnosticNodeInternal } from \"./diagnostics/DiagnosticNodeInternal\";\nimport { ConsistencyLevel } from \"./documents\";\n\n/**\n *  * This is a Cosmos Diagnostic type that holds collected diagnostic information during a client operations. ie. Item.read(), Container.create().\n * It has three members -\n * 1. `clientSideRequestStatistics` member contains aggregate diagnostic information, including -\n *   - metadata lookups. Here all the server requests, apart from the final intended resource are considered as metadata calls.\n *    i.e. for item.read(id), if the client makes server call to discover endpoints it would be considered as metadata call.\n *   - retries\n *   - endpoints contacted.\n *   - request, response payload stats.\n *   - gatewayStatistics - Information corresponding to main operation. For example during Item.read(), the client might perform many operations\n *    i.e. metadata lookup etc, but gatewayStatistics represents the diagnostics information for actual read operation.\n *\n * 2. diagnosticNode - Is a tree like structure which captures detailed diagnostic information. By default it is disabled, and is intended to be\n * used only for debugging on non production environments. The kind of details captured in diagnosticNode is controlled by `CosmosDbDiagnosticLevel`.\n * - CosmosDbDiagnosticLevel.info - Is default value. In this level only clientSideRequestStatistics are captured. Is is meant for production environments.\n * - CosmosDbDiagnosticLevel.debug - Captures diagnosticNode and clientConfig. No request and response payloads are captured. Is not meant to be used\n * in production environment.\n * - CosmosDbDiagnosticLevel.debug-unsafe - In addition to data captured in CosmosDbDiagnosticLevel.debug, also captures request and response payloads.\n * Is not meant to be used in production environment.\n * 3. clientConfig - Captures information related to how client was configured during initialization.\n */\nexport class CosmosDiagnostics {\n  public readonly clientSideRequestStatistics: ClientSideRequestStatistics;\n  public readonly diagnosticNode: DiagnosticNode;\n  public readonly clientConfig?: ClientConfigDiagnostic;\n  /**\n   * @internal\n   */\n  constructor(\n    clientSideRequestStatistics: ClientSideRequestStatistics,\n    diagnosticNode?: DiagnosticNode,\n    clientConfig?: ClientConfigDiagnostic\n  ) {\n    this.clientSideRequestStatistics = clientSideRequestStatistics;\n    this.diagnosticNode = diagnosticNode;\n    this.clientConfig = clientConfig;\n  }\n}\n\n/**\n * This type holds information related to initialization of `CosmosClient`\n */\nexport type ClientConfigDiagnostic = {\n  /**\n   * End point configured during client initialization.\n   */\n  endpoint: string;\n  /**\n   * True if `resourceTokens` was supplied during client initialization.\n   */\n  resourceTokensConfigured: boolean;\n  /**\n   * True if `tokenProvider` was supplied during client initialization.\n   */\n  tokenProviderConfigured: boolean;\n  /**\n   * True if `aadCredentials` was supplied during client initialization.\n   */\n  aadCredentialsConfigured: boolean;\n  /**\n   * True if `connectionPolicy` was supplied during client initialization.\n   */\n  connectionPolicyConfigured: boolean;\n  /**\n   * `consistencyLevel` supplied during client initialization.\n   */\n  consistencyLevel?: keyof typeof ConsistencyLevel;\n  /**\n   * `defaultHeaders` supplied during client initialization.\n   */\n  defaultHeaders?: { [key: string]: any };\n  /**\n   * True if `connectionPolicy` were supplied during client initialization.\n   */\n  agentConfigured: boolean;\n  /**\n   * `userAgentSuffix` supplied during client initialization.\n   */\n  userAgentSuffix: string;\n  /**\n   * `diagnosticLevel` supplied during client initialization.\n   */\n  diagnosticLevel?: CosmosDbDiagnosticLevel;\n  /**\n   * True if `plugins` were supplied during client initialization.\n   */\n  pluginsConfigured: boolean;\n  /**\n   * SDK version\n   */\n  sDKVersion: string;\n};\n\n/**\n * This type contains diagnostic information regarding all metadata request to server during an CosmosDB client operation.\n */\nexport type MetadataLookUpDiagnostics = {\n  metadataLookups: MetadataLookUpDiagnostic[];\n};\n\n/**\n * This type captures diagnostic information regarding retries attempt during an CosmosDB client operation.\n */\nexport type RetryDiagnostics = {\n  failedAttempts: FailedRequestAttemptDiagnostic[];\n};\n\nexport type GatewayStatistics = {\n  /**\n   * This is the activityId for request, made to server for fetching the requested resource. (As opposed to other potential meta data requests)\n   */\n  activityId?: string;\n  startTimeUTCInMs: number;\n  durationInMs: number;\n  operationType?: OperationType;\n  resourceType?: ResourceType;\n  statusCode?: number;\n  subStatusCode?: number;\n  requestCharge?: number;\n  requestPayloadLengthInBytes: number;\n  responsePayloadLengthInBytes: number;\n};\n\n/**\n * This type contains diagnostic information regarding a single metadata request to server.\n */\nexport interface MetadataLookUpDiagnostic {\n  activityId: string;\n  startTimeUTCInMs: number;\n  durationInMs: number;\n  operationType?: OperationType;\n  resourceType?: ResourceType;\n  metaDataType: MetadataLookUpType;\n  requestPayloadLengthInBytes: number;\n  responsePayloadLengthInBytes: number;\n}\n\n/**\n * This type captures diagnostic information regarding a failed request to server api.\n */\nexport interface FailedRequestAttemptDiagnostic {\n  attemptNumber: number;\n  activityId: string;\n  startTimeUTCInMs: number;\n  durationInMs: number;\n  operationType?: OperationType;\n  resourceType?: ResourceType;\n  statusCode: number;\n  substatusCode?: number;\n  requestPayloadLengthInBytes: number;\n  responsePayloadLengthInBytes: number;\n}\n\n/**\n * This is enum for Type of Metadata lookups possible.\n */\nexport enum MetadataLookUpType {\n  PartitionKeyRangeLookUp = \"PARTITION_KEY_RANGE_LOOK_UP\",\n  DatabaseAccountLookUp = \"DATABASE_ACCOUNT_LOOK_UP\",\n  QueryPlanLookUp = \"QUERY_PLAN_LOOK_UP\",\n  DatabaseLookUp = \"DATABASE_LOOK_UP\",\n  ContainerLookUp = \"CONTAINER_LOOK_UP\",\n}\n\n/**\n * This is a collection type for all client side diagnostic information.\n */\nexport type ClientSideRequestStatistics = {\n  /**\n   * This is the UTC timestamp for start of client operation.\n   */\n  requestStartTimeUTCInMs: number;\n  /**\n   * This is the duration in milli seconds taken by client operation.\n   */\n  requestDurationInMs: number;\n  /**\n   * This is the list of Location Endpoints contacted during the client operation.\n   */\n  locationEndpointsContacted: string[];\n  /**\n   * This field captures diagnostic information for retries happened during client operation.\n   */\n  retryDiagnostics: RetryDiagnostics;\n  /**\n   * This field captures diagnostic information for meta data lookups happened during client operation.\n   */\n  metadataDiagnostics: MetadataLookUpDiagnostics;\n  /**\n   * These are the statistics for main point look operation.\n   */\n  gatewayStatistics: GatewayStatistics[];\n  /**\n   * This is the cumulated Request Payload Length n bytes, this includes metadata calls along with the main operation.\n   */\n  totalRequestPayloadLengthInBytes: number;\n  /**\n   * This is the cumulated Response Payload Length n bytes, this includes metadata calls along with the main operation.\n   */\n  totalResponsePayloadLengthInBytes: number;\n};\n\nexport function getRootNode(node: DiagnosticNodeInternal): DiagnosticNodeInternal {\n  if (node.parent) return getRootNode(node.parent);\n  else return node;\n}\n\n/**\n * Represents a tree like structure, for capturing diagnostic information.\n */\nexport interface DiagnosticNode {\n  id: string;\n  nodeType: string;\n  children: DiagnosticNode[];\n  data: { [key: string]: any };\n  startTimeUTCInMs: number;\n  durationInMs: number;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Cosmos DB Diagnostic Level\n */\nexport enum CosmosDbDiagnosticLevel {\n  info = \"info\",\n  debug = \"debug\",\n  debugUnsafe = \"debug-unsafe\",\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CosmosDbDiagnosticLevel } from \"./CosmosDbDiagnosticLevel\";\n\n/**\n * @hidden\n */\nexport const CosmosDbDiagnosticLevelOrder = [\n  CosmosDbDiagnosticLevel.info,\n  CosmosDbDiagnosticLevel.debug,\n  CosmosDbDiagnosticLevel.debugUnsafe,\n];\n\n/**\n * @hidden\n */\nexport function allowTracing(\n  levelToCheck: CosmosDbDiagnosticLevel,\n  clientDiagnosticLevel: CosmosDbDiagnosticLevel\n): boolean {\n  const indexOfDiagnosticLevelToCheck = CosmosDbDiagnosticLevelOrder.indexOf(levelToCheck);\n  const indexOfClientDiagnosticLevel = CosmosDbDiagnosticLevelOrder.indexOf(clientDiagnosticLevel);\n  if (indexOfDiagnosticLevelToCheck === -1 || indexOfClientDiagnosticLevel === -1) {\n    return false;\n  }\n  return indexOfDiagnosticLevelToCheck <= indexOfClientDiagnosticLevel;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CosmosDiagnosticContext } from \"./CosmosDiagnosticsContext\";\nimport { RequestContext } from \"../request\";\nimport { v4 } from \"uuid\";\nimport {\n  DiagnosticNode,\n  MetadataLookUpType,\n  CosmosDiagnostics,\n  getRootNode,\n  ClientConfigDiagnostic,\n} from \"../CosmosDiagnostics\";\nimport { getCurrentTimestampInMs } from \"../utils/time\";\nimport { CosmosDbDiagnosticLevel } from \"./CosmosDbDiagnosticLevel\";\nimport { CosmosHeaders } from \"../queryExecutionContext/CosmosHeaders\";\nimport { HttpHeaders, PipelineResponse } from \"@azure/core-rest-pipeline\";\nimport { Constants, OperationType, ResourceType, prepareURL } from \"../common\";\nimport { allowTracing } from \"./diagnosticLevelComparator\";\n\n/**\n * @hidden\n * This is Internal Representation for DiagnosticNode. It contains useful helper functions to collect\n * diagnostic information throughout the lifetime of Diagnostic session.\n * The functions toDiagnosticNode() & toDiagnostic() are given to convert it to public facing counterpart.\n */\nexport class DiagnosticNodeInternal implements DiagnosticNode {\n  public id: string;\n  public nodeType: DiagnosticNodeType;\n  public parent: DiagnosticNodeInternal;\n  public children: DiagnosticNodeInternal[];\n  public data: Partial<DiagnosticDataValue>;\n  public startTimeUTCInMs: number;\n  public durationInMs: number;\n  public diagnosticLevel: CosmosDbDiagnosticLevel;\n  private diagnosticCtx: CosmosDiagnosticContext;\n\n  /**\n   * @internal\n   */\n  constructor(\n    diagnosticLevel: CosmosDbDiagnosticLevel,\n    type: DiagnosticNodeType,\n    parent: DiagnosticNodeInternal,\n    data: Partial<DiagnosticDataValue> = {},\n    startTimeUTCInMs: number = getCurrentTimestampInMs(),\n    ctx: CosmosDiagnosticContext = new CosmosDiagnosticContext()\n  ) {\n    this.id = v4();\n    this.nodeType = type;\n    this.startTimeUTCInMs = startTimeUTCInMs;\n    this.data = data;\n    this.children = [];\n    this.durationInMs = 0;\n    this.parent = parent;\n    this.diagnosticCtx = ctx;\n    this.diagnosticLevel = diagnosticLevel;\n  }\n\n  /**\n   * @internal\n   */\n  private addLog(msg: string): void {\n    if (!this.data.log) {\n      this.data.log = [];\n    }\n    this.data.log.push(msg);\n  }\n\n  /**\n   * @internal\n   */\n  private sanitizeHeaders(headers?: CosmosHeaders | HttpHeaders): CosmosHeaders | HttpHeaders {\n    return headers;\n  }\n\n  /**\n   * Updated durationInMs for node, based on endTimeUTCInMs provided.\n   * @internal\n   */\n  public updateTimestamp(endTimeUTCInMs: number = getCurrentTimestampInMs()): void {\n    this.durationInMs = endTimeUTCInMs - this.startTimeUTCInMs;\n  }\n\n  /**\n   * @internal\n   */\n  public recordSuccessfulNetworkCall(\n    startTimeUTCInMs: number,\n    requestContext: RequestContext,\n    pipelineResponse: PipelineResponse,\n    substatus: number,\n    url: string\n  ): void {\n    const responseHeaders = pipelineResponse.headers.toJSON();\n    const gatewayRequest = {\n      activityId: responseHeaders[Constants.HttpHeaders.ActivityId],\n      startTimeUTCInMs,\n      durationInMs: getCurrentTimestampInMs() - startTimeUTCInMs,\n      statusCode: pipelineResponse.status,\n      subStatusCode: substatus,\n      requestPayloadLengthInBytes: calculateRequestPayloadLength(requestContext),\n      responsePayloadLengthInBytes: calculateResponsePayloadLength(pipelineResponse),\n      operationType: requestContext.operationType,\n      resourceType: requestContext.resourceType,\n      partitionKeyRangeId: requestContext.partitionKeyRangeId,\n    };\n    let requestData: any = {\n      OperationType: gatewayRequest.operationType,\n      resourceType: gatewayRequest.resourceType,\n      requestPayloadLengthInBytes: gatewayRequest.requestPayloadLengthInBytes,\n    };\n\n    if (allowTracing(CosmosDbDiagnosticLevel.debugUnsafe, this.diagnosticLevel)) {\n      requestData = {\n        ...requestData,\n        headers: this.sanitizeHeaders(requestContext.headers),\n        requestBody: requestContext.body,\n        responseBody: pipelineResponse.bodyAsText,\n        url: url,\n      };\n    }\n    this.addData({\n      requestPayloadLengthInBytes: gatewayRequest.requestPayloadLengthInBytes,\n      responsePayloadLengthInBytes: gatewayRequest.responsePayloadLengthInBytes,\n      startTimeUTCInMs: gatewayRequest.startTimeUTCInMs,\n      durationInMs: gatewayRequest.durationInMs,\n      requestData,\n    });\n    this.diagnosticCtx.recordNetworkCall(gatewayRequest);\n  }\n\n  /**\n   * @internal\n   */\n  public recordFailedNetworkCall(\n    startTimeUTCInMs: number,\n    requestContext: RequestContext,\n    retryAttemptNumber: number,\n    statusCode: number,\n    substatusCode: number,\n    responseHeaders: CosmosHeaders\n  ): void {\n    this.addData({ failedAttempty: true });\n    const requestPayloadLengthInBytes = calculateRequestPayloadLength(requestContext);\n    this.diagnosticCtx.recordFailedAttempt(\n      {\n        activityId: responseHeaders[Constants.HttpHeaders.ActivityId] as string,\n        startTimeUTCInMs,\n        durationInMs: getCurrentTimestampInMs() - startTimeUTCInMs,\n        statusCode,\n        subStatusCode: substatusCode,\n        requestPayloadLengthInBytes,\n        responsePayloadLengthInBytes: 0,\n        operationType: requestContext.operationType,\n        resourceType: requestContext.resourceType,\n      },\n      retryAttemptNumber\n    );\n    let requestData: any = {\n      OperationType: requestContext.operationType,\n      resourceType: requestContext.resourceType,\n      requestPayloadLengthInBytes,\n    };\n    if (allowTracing(CosmosDbDiagnosticLevel.debugUnsafe, this.diagnosticLevel)) {\n      requestData = {\n        ...requestData,\n        headers: this.sanitizeHeaders(requestContext.headers),\n        requestBody: requestContext.body,\n        url: prepareURL(requestContext.endpoint, requestContext.path),\n      };\n    }\n    this.addData({\n      failedAttempty: true,\n      requestData,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public recordEndpointResolution(location: string): void {\n    this.addData({ selectedLocation: location });\n    this.diagnosticCtx.recordEndpointResolution(location);\n  }\n\n  /**\n   * @internal\n   */\n  public addData(\n    data: Partial<DiagnosticDataValue>,\n    msg?: string,\n    level: CosmosDbDiagnosticLevel = this.diagnosticLevel\n  ): void {\n    if (level !== CosmosDbDiagnosticLevel.info) {\n      this.data = { ...this.data, ...data };\n      if (msg) {\n        this.addLog(msg);\n      }\n    }\n  }\n\n  /**\n   * Merge given DiagnosticNodeInternal's context to current node's DiagnosticContext, Treating GatewayRequests of\n   * given DiagnosticContext, as metadata requests. Given DiagnosticNodeInternal becomes a child of this node.\n   * @internal\n   */\n  public addChildNode(\n    child: DiagnosticNodeInternal,\n    level: CosmosDbDiagnosticLevel,\n    metadataType?: MetadataLookUpType\n  ): DiagnosticNodeInternal {\n    this.diagnosticCtx.mergeDiagnostics(child.diagnosticCtx, metadataType);\n    if (allowTracing(level, this.diagnosticLevel)) {\n      child.parent = this;\n      this.children.push(child);\n    }\n    return child;\n  }\n\n  /**\n   * @internal\n   */\n  public initializeChildNode(\n    type: DiagnosticNodeType,\n    level: CosmosDbDiagnosticLevel,\n    data: Partial<DiagnosticDataValue> = {}\n  ): DiagnosticNodeInternal {\n    if (allowTracing(level, this.diagnosticLevel)) {\n      const child = new DiagnosticNodeInternal(\n        this.diagnosticLevel,\n        type,\n        this,\n        data,\n        getCurrentTimestampInMs(),\n        this.diagnosticCtx\n      );\n      this.children.push(child);\n      return child;\n    } else {\n      return this;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  public recordQueryResult(resources: unknown, level: CosmosDbDiagnosticLevel): void {\n    if (allowTracing(level, this.diagnosticLevel)) {\n      const previousCount = this.data.queryRecordsRead ?? 0;\n      if (Array.isArray(resources)) {\n        this.data.queryRecordsRead = previousCount + resources.length;\n      }\n    }\n  }\n\n  /**\n   * Convert DiagnosticNodeInternal (internal representation) to DiagnosticNode (public, sanitized representation)\n   * @internal\n   */\n  public toDiagnosticNode(): DiagnosticNode {\n    return {\n      id: this.id,\n      nodeType: this.nodeType,\n      children: this.children.map((child) => child.toDiagnosticNode()),\n      data: this.data,\n      startTimeUTCInMs: this.startTimeUTCInMs,\n      durationInMs: this.durationInMs,\n    };\n  }\n\n  /**\n   * Convert to CosmosDiagnostics\n   * @internal\n   */\n  public toDiagnostic(clientConfigDiagnostic: ClientConfigDiagnostic): CosmosDiagnostics {\n    const rootNode = getRootNode(this);\n    const diagnostiNode = allowTracing(CosmosDbDiagnosticLevel.debug, this.diagnosticLevel)\n      ? rootNode.toDiagnosticNode()\n      : undefined;\n    const clientConfig = allowTracing(CosmosDbDiagnosticLevel.debug, this.diagnosticLevel)\n      ? clientConfigDiagnostic\n      : undefined;\n    const cosmosDiagnostic = new CosmosDiagnostics(\n      this.diagnosticCtx.getClientSideStats(),\n      diagnostiNode,\n      clientConfig\n    );\n    return cosmosDiagnostic;\n  }\n}\n\n/**\n * @hidden\n */\nexport type DiagnosticDataValue = {\n  selectedLocation: string;\n  activityId: string;\n  requestAttempNumber: number;\n  requestPayloadLengthInBytes: number;\n  responsePayloadLengthInBytes: number;\n  responseStatus: number;\n  readFromCache: boolean;\n  operationType: OperationType;\n  metadatOperationType: MetadataLookUpType;\n  resourceType: ResourceType;\n  failedAttempty: boolean;\n  successfulRetryPolicy: string;\n  partitionKeyRangeId: string;\n  stateful: boolean;\n  queryRecordsRead: number;\n  queryMethodIdentifier: string;\n  log: string[];\n  failure: boolean;\n  startTimeUTCInMs: number;\n  durationInMs: number;\n  requestData: Partial<{\n    requestPayloadLengthInBytes: number;\n    responsePayloadLengthInBytes: number;\n    operationType: OperationType;\n    resourceType: ResourceType;\n    headers: CosmosHeaders;\n    requestBody: any;\n    responseBody: any;\n    url: string;\n  }>;\n};\n\n/**\n * @hidden\n */\nexport enum DiagnosticNodeType {\n  CLIENT_REQUEST_NODE = \"CLIENT_REQUEST_NODE\", // Top most node representing client operations.\n  METADATA_REQUEST_NODE = \"METADATA_REQUEST_NODE\", // Node representing a metadata request.\n  HTTP_REQUEST = \"HTTP_REQUEST\", // Node representing REST call to backend services.\n  BATCH_REQUEST = \"BATCH_REQUEST\", // Node representing batch request.\n  PARALLEL_QUERY_NODE = \"PARALLEL_QUERY_NODE\", // Node representing parallel query execution.\n  DEFAULT_QUERY_NODE = \"DEFAULT_QUERY_NODE\", // Node representing default query execution.\n  QUERY_REPAIR_NODE = \"QUERY_REPAIR_NODE\", // Node representing query repair.\n  BACKGROUND_REFRESH_THREAD = \"BACKGROUND_REFRESH_THREAD\", // Node representing background refresh.\n  REQUEST_ATTEMPTS = \"REQUEST_ATTEMPTS\", // Node representing request attempts.\n}\n\nfunction calculateResponsePayloadLength(response: PipelineResponse) {\n  return response?.bodyAsText?.length || 0;\n}\n\nfunction calculateRequestPayloadLength(requestContext: RequestContext) {\n  return requestContext.body ? requestContext.body.length : 0;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CosmosDiagnostics, MetadataLookUpType } from \"../CosmosDiagnostics\";\nimport {\n  DiagnosticDataValue,\n  DiagnosticNodeInternal,\n  DiagnosticNodeType,\n} from \"../diagnostics/DiagnosticNodeInternal\";\nimport { ClientContext } from \"../ClientContext\";\nimport { getCurrentTimestampInMs } from \"./time\";\nimport { v4 } from \"uuid\";\nimport { CosmosDbDiagnosticLevel } from \"../diagnostics/CosmosDbDiagnosticLevel\";\n\n/**\n * @hidden\n * Utility function to create an Empty CosmosDiagnostic object.\n */\nexport function getEmptyCosmosDiagnostics(): CosmosDiagnostics {\n  return new CosmosDiagnostics(\n    {\n      requestDurationInMs: 0,\n      requestStartTimeUTCInMs: getCurrentTimestampInMs(),\n      totalRequestPayloadLengthInBytes: 0,\n      totalResponsePayloadLengthInBytes: 0,\n      locationEndpointsContacted: [],\n      retryDiagnostics: {\n        failedAttempts: [],\n      },\n      metadataDiagnostics: {\n        metadataLookups: [],\n      },\n      gatewayStatistics: [],\n    },\n    {\n      id: v4(),\n      nodeType: DiagnosticNodeType.CLIENT_REQUEST_NODE,\n      children: [],\n      data: {},\n      startTimeUTCInMs: getCurrentTimestampInMs(),\n      durationInMs: 0,\n    }\n  );\n}\n\n/**\n * @hidden\n */\nexport type ExtractPromise<T> = T extends Promise<infer U> ? U : never;\n\n/**\n * A supporting utility wrapper function, to be used inside a diagnostic session started\n * by `withDiagnostics` function.\n * Created a Diagnostic node and add it as a child to existing diagnostic session.\n * @hidden\n */\nexport async function addDignosticChild<\n  Callback extends (node: DiagnosticNodeInternal) => Promise<any>\n>(\n  callback: Callback,\n  node: DiagnosticNodeInternal,\n  type: DiagnosticNodeType,\n  data: Partial<DiagnosticDataValue> = {}\n): Promise<ExtractPromise<ReturnType<Callback>>> {\n  const childNode = node.initializeChildNode(type, CosmosDbDiagnosticLevel.debug, data);\n  try {\n    const response = await callback(childNode);\n    childNode.updateTimestamp();\n    return response;\n  } catch (e: any) {\n    childNode.addData({\n      failure: true,\n    });\n    childNode.updateTimestamp();\n    throw e;\n  }\n}\n\n/**\n * A supporting utility wrapper function, to be used inside a diagnostic session started\n * by `withDiagnostics` function.\n * Treats requests originating in  provided `callback` as metadata calls.\n * To realize this, starts a temporary diagnostic session, after execution of callback is\n * finished. Merges this temporary diagnostic session to the original diagnostic session\n * represented by the input parameter `node`.\n * @hidden\n */\nexport async function withMetadataDiagnostics<\n  Callback extends (node: DiagnosticNodeInternal) => Promise<any>\n>(\n  callback: Callback,\n  node: DiagnosticNodeInternal,\n  type: MetadataLookUpType\n): Promise<ExtractPromise<ReturnType<Callback>>> {\n  const diagnosticNodeForMetadataCall = new DiagnosticNodeInternal(\n    node.diagnosticLevel,\n    DiagnosticNodeType.METADATA_REQUEST_NODE,\n    null\n  );\n  try {\n    const response: any = await callback(diagnosticNodeForMetadataCall);\n    node.addChildNode(diagnosticNodeForMetadataCall, CosmosDbDiagnosticLevel.debug, type);\n    return response;\n  } catch (e) {\n    node.addChildNode(diagnosticNodeForMetadataCall, CosmosDbDiagnosticLevel.debug, type);\n    throw e;\n  }\n}\n\n/**\n * Utility wrapper function to managed lifecycle of a Diagnostic session.\n * Meant to be used at the root of the client operation. i.e. item.read(),\n * queryIterator.fetchAll().\n *\n * This utility starts a new diagnostic session. So using it any where else\n * other than start of operation, will result is different diagnostic sessions.\n *\n * Workings :\n * 1. Takes a callback function as input.\n * 2. Creates a new instance of DiagnosticNodeInternal, which can be though as starting\n * a new diagnostic session.\n * 3. Executes the callback function.\n * 4. If execution was successful. Converts DiagnosticNodeInternal to CosmosDiagnostics\n * and injects it to the response object and returns this object.\n * 5. If execution threw an exception. Sill converts DiagnosticNodeInternal to CosmosDiagnostics\n * and injects it to the Error object, and rethrows the Error object.\n *\n * @hidden\n */\nexport async function withDiagnostics<\n  Callback extends (node: DiagnosticNodeInternal) => Promise<any>\n>(\n  callback: Callback,\n  clientContext: ClientContext,\n  type: DiagnosticNodeType = DiagnosticNodeType.CLIENT_REQUEST_NODE\n): Promise<ExtractPromise<ReturnType<Callback>>> {\n  const diagnosticNode = new DiagnosticNodeInternal(clientContext.diagnosticLevel, type, null);\n  try {\n    const response: any = await callback(diagnosticNode);\n    diagnosticNode.updateTimestamp();\n    const diagnostics = diagnosticNode.toDiagnostic(clientContext.getClientConfig());\n    if (typeof response === \"object\" && response !== null) {\n      (response as any).diagnostics = diagnostics;\n    }\n    clientContext.recordDiagnostics(diagnostics);\n    return response;\n  } catch (e: any) {\n    diagnosticNode.updateTimestamp();\n    diagnosticNode.addData({\n      failure: true,\n    });\n    const diagnostics = diagnosticNode.toDiagnostic(clientContext.getClientConfig());\n    e.diagnostics = diagnostics;\n    clientContext.recordDiagnostics(diagnostics);\n    throw e;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AzureLogger, createClientLogger } from \"@azure/logger\";\nimport { Constants } from \"../common\";\nimport { ClientSideMetrics, QueryMetrics } from \"../queryMetrics\";\nimport { FeedOptions, Response } from \"../request\";\nimport { getInitialHeader } from \"./headerUtils\";\nimport { ExecutionContext } from \"./index\";\nimport { DiagnosticNodeInternal, DiagnosticNodeType } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { addDignosticChild } from \"../utils/diagnostics\";\nimport { CosmosDbDiagnosticLevel } from \"../diagnostics/CosmosDbDiagnosticLevel\";\n\nconst logger: AzureLogger = createClientLogger(\"ClientContext\");\n/** @hidden */\nexport type FetchFunctionCallback = (\n  diagnosticNode: DiagnosticNodeInternal,\n  options: FeedOptions\n) => Promise<Response<any>>;\n\n/** @hidden */\nenum STATES {\n  start = \"start\",\n  inProgress = \"inProgress\",\n  ended = \"ended\",\n}\n\n/** @hidden */\nexport class DefaultQueryExecutionContext implements ExecutionContext {\n  private static readonly STATES = STATES;\n  private resources: any[]; // TODO: any resources\n  private currentIndex: number;\n  private currentPartitionIndex: number;\n  private fetchFunctions: FetchFunctionCallback[];\n  private options: FeedOptions; // TODO: any options\n  public continuationToken: string; // TODO: any continuation\n  public get continuation(): string {\n    return this.continuationToken;\n  }\n  private state: STATES;\n  private nextFetchFunction: Promise<Response<any>>;\n  /**\n   * Provides the basic Query Execution Context.\n   * This wraps the internal logic query execution using provided fetch functions\n   *\n   * @param clientContext  - Is used to read the partitionKeyRanges for split proofing\n   * @param query          - A SQL query.\n   * @param options        - Represents the feed options.\n   * @param fetchFunctions - A function to retrieve each page of data.\n   *                          An array of functions may be used to query more than one partition.\n   * @hidden\n   */\n  constructor(\n    options: FeedOptions,\n    fetchFunctions: FetchFunctionCallback | FetchFunctionCallback[]\n  ) {\n    this.resources = [];\n    this.currentIndex = 0;\n    this.currentPartitionIndex = 0;\n    this.fetchFunctions = Array.isArray(fetchFunctions) ? fetchFunctions : [fetchFunctions];\n    this.options = options || {};\n    this.continuationToken = this.options.continuationToken || this.options.continuation || null;\n    this.state = DefaultQueryExecutionContext.STATES.start;\n  }\n\n  /**\n   * Execute a provided callback on the next element in the execution context.\n   */\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    ++this.currentIndex;\n    const response = await this.current(diagnosticNode);\n    return response;\n  }\n\n  /**\n   * Retrieve the current element on the execution context.\n   */\n  public async current(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    if (this.currentIndex < this.resources.length) {\n      return {\n        result: this.resources[this.currentIndex],\n        headers: getInitialHeader(),\n      };\n    }\n\n    if (this._canFetchMore()) {\n      const { result: resources, headers } = await this.fetchMore(diagnosticNode);\n      this.resources = resources;\n      if (this.resources.length === 0) {\n        if (!this.continuationToken && this.currentPartitionIndex >= this.fetchFunctions.length) {\n          this.state = DefaultQueryExecutionContext.STATES.ended;\n          return { result: undefined, headers };\n        } else {\n          return this.current(diagnosticNode);\n        }\n      }\n      return { result: this.resources[this.currentIndex], headers };\n    } else {\n      this.state = DefaultQueryExecutionContext.STATES.ended;\n      return {\n        result: undefined,\n        headers: getInitialHeader(),\n      };\n    }\n  }\n\n  /**\n   * Determine if there are still remaining resources to processs based on\n   * the value of the continuation token or the elements remaining on the current batch in the execution context.\n   *\n   * @returns true if there is other elements to process in the DefaultQueryExecutionContext.\n   */\n  public hasMoreResults(): boolean {\n    return (\n      this.state === DefaultQueryExecutionContext.STATES.start ||\n      this.continuationToken !== undefined ||\n      this.currentIndex < this.resources.length - 1 ||\n      this.currentPartitionIndex < this.fetchFunctions.length\n    );\n  }\n\n  /**\n   * Fetches the next batch of the feed and pass them as an array to a callback\n   */\n  public async fetchMore(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    return addDignosticChild(\n      async (childDiagnosticNode: DiagnosticNodeInternal) => {\n        if (this.currentPartitionIndex >= this.fetchFunctions.length) {\n          return {\n            headers: getInitialHeader(),\n            result: undefined,\n          };\n        }\n\n        // Keep to the original continuation and to restore the value after fetchFunction call\n        const originalContinuation = this.options.continuationToken || this.options.continuation;\n        this.options.continuationToken = this.continuationToken;\n\n        // Return undefined if there is no more results\n        if (this.currentPartitionIndex >= this.fetchFunctions.length) {\n          return {\n            headers: getInitialHeader(),\n            result: undefined,\n          };\n        }\n\n        let resources;\n        let responseHeaders;\n        try {\n          let p: Promise<Response<any>>;\n          if (this.nextFetchFunction !== undefined) {\n            logger.verbose(\"using prefetch\");\n            p = this.nextFetchFunction;\n            this.nextFetchFunction = undefined;\n          } else {\n            logger.verbose(\"using fresh fetch\");\n            p = this.fetchFunctions[this.currentPartitionIndex](childDiagnosticNode, this.options);\n          }\n          const response = await p;\n          resources = response.result;\n          childDiagnosticNode.recordQueryResult(resources, CosmosDbDiagnosticLevel.debugUnsafe);\n          responseHeaders = response.headers;\n          this.continuationToken = responseHeaders[Constants.HttpHeaders.Continuation];\n          if (!this.continuationToken) {\n            ++this.currentPartitionIndex;\n          }\n\n          if (this.options && this.options.bufferItems === true) {\n            const fetchFunction = this.fetchFunctions[this.currentPartitionIndex];\n            this.nextFetchFunction = fetchFunction\n              ? fetchFunction(childDiagnosticNode, {\n                  ...this.options,\n                  continuationToken: this.continuationToken,\n                })\n              : undefined;\n          }\n        } catch (err: any) {\n          this.state = DefaultQueryExecutionContext.STATES.ended;\n          // return callback(err, undefined, responseHeaders);\n          // TODO: Error and data being returned is an antipattern, this might broken\n          throw err;\n        }\n\n        this.state = DefaultQueryExecutionContext.STATES.inProgress;\n        this.currentIndex = 0;\n        this.options.continuationToken = originalContinuation;\n        this.options.continuation = originalContinuation;\n\n        // deserializing query metrics so that we aren't working with delimited strings in the rest of the code base\n        if (Constants.HttpHeaders.QueryMetrics in responseHeaders) {\n          const delimitedString = responseHeaders[Constants.HttpHeaders.QueryMetrics];\n          let queryMetrics = QueryMetrics.createFromDelimitedString(delimitedString);\n\n          // Add the request charge to the query metrics so that we can have per partition request charge.\n          if (Constants.HttpHeaders.RequestCharge in responseHeaders) {\n            const requestCharge = Number(responseHeaders[Constants.HttpHeaders.RequestCharge]) || 0;\n            queryMetrics = new QueryMetrics(\n              queryMetrics.retrievedDocumentCount,\n              queryMetrics.retrievedDocumentSize,\n              queryMetrics.outputDocumentCount,\n              queryMetrics.outputDocumentSize,\n              queryMetrics.indexHitDocumentCount,\n              queryMetrics.totalQueryExecutionTime,\n              queryMetrics.queryPreparationTimes,\n              queryMetrics.indexLookupTime,\n              queryMetrics.documentLoadTime,\n              queryMetrics.vmExecutionTime,\n              queryMetrics.runtimeExecutionTimes,\n              queryMetrics.documentWriteTime,\n              new ClientSideMetrics(requestCharge)\n            );\n          }\n\n          // Wraping query metrics in a object where the key is '0' just so single partition\n          // and partition queries have the same response schema\n          responseHeaders[Constants.HttpHeaders.QueryMetrics] = {};\n          responseHeaders[Constants.HttpHeaders.QueryMetrics][\"0\"] = queryMetrics;\n        }\n\n        return { result: resources, headers: responseHeaders };\n      },\n      diagnosticNode,\n      DiagnosticNodeType.DEFAULT_QUERY_NODE,\n      {\n        queryMethodIdentifier: \"fetchMore\",\n      }\n    );\n  }\n\n  private _canFetchMore(): boolean {\n    const res =\n      this.state === DefaultQueryExecutionContext.STATES.start ||\n      (this.continuationToken && this.state === DefaultQueryExecutionContext.STATES.inProgress) ||\n      (this.currentPartitionIndex < this.fetchFunctions.length &&\n        this.state === DefaultQueryExecutionContext.STATES.inProgress);\n    return res;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Aggregator } from \"./Aggregator\";\n\n/** @hidden */\nexport interface AverageAggregateResult {\n  sum: number;\n  count: number;\n}\n\n/** @hidden */\nexport class AverageAggregator implements Aggregator {\n  public sum: number;\n  public count: number;\n  /**\n   * Add the provided item to aggregation result.\n   */\n  public aggregate(other: AverageAggregateResult): void {\n    if (other == null || other.sum == null) {\n      return;\n    }\n    if (this.sum == null) {\n      this.sum = 0.0;\n      this.count = 0;\n    }\n    this.sum += other.sum;\n    this.count += other.count;\n  }\n\n  /**\n   * Get the aggregation result.\n   */\n  public getResult(): number {\n    if (this.sum == null || this.count <= 0) {\n      return undefined;\n    }\n    return this.sum / this.count;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Aggregator } from \"./Aggregator\";\n\n/** @hidden */\nexport class CountAggregator implements Aggregator {\n  public value: number;\n  /**\n   * Represents an aggregator for COUNT operator.\n   * @hidden\n   */\n  constructor() {\n    this.value = 0;\n  }\n  /**\n   * Add the provided item to aggregation result.\n   */\n  public aggregate(other: number): void {\n    this.value += other;\n  }\n\n  /**\n   * Get the aggregation result.\n   */\n  public getResult(): number {\n    return this.value;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DocumentProducer } from \"./documentProducer\";\n\n// TODO: this smells funny\n/** @hidden */\nconst TYPEORDCOMPARATOR: {\n  [type: string]: { ord: number; compFunc?: (a: any, b: any) => number };\n} = Object.freeze({\n  NoValue: {\n    ord: 0,\n  },\n  undefined: {\n    ord: 1,\n  },\n  boolean: {\n    ord: 2,\n    compFunc: (a: boolean, b: boolean) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    },\n  },\n  number: {\n    ord: 4,\n    compFunc: (a: number, b: number) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    },\n  },\n  string: {\n    ord: 5,\n    compFunc: (a: string, b: string) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    },\n  },\n});\n\n/** @hidden */\nexport class OrderByDocumentProducerComparator {\n  constructor(public sortOrder: string[]) {} // TODO: This should be an enum\n\n  private targetPartitionKeyRangeDocProdComparator(\n    docProd1: DocumentProducer,\n    docProd2: DocumentProducer\n  ): 0 | 1 | -1 {\n    const a = docProd1.getTargetParitionKeyRange()[\"minInclusive\"];\n    const b = docProd2.getTargetParitionKeyRange()[\"minInclusive\"];\n    return a === b ? 0 : a > b ? 1 : -1;\n  }\n\n  public compare(docProd1: DocumentProducer, docProd2: DocumentProducer): number {\n    // Need to check for split, since we don't want to dereference \"item\" of undefined / exception\n    if (docProd1.gotSplit()) {\n      return -1;\n    }\n    if (docProd2.gotSplit()) {\n      return 1;\n    }\n\n    const orderByItemsRes1 = this.getOrderByItems(docProd1.peekBufferedItems()[0]);\n    const orderByItemsRes2 = this.getOrderByItems(docProd2.peekBufferedItems()[0]);\n\n    // validate order by items and types\n    // TODO: once V1 order by on different types is fixed this need to change\n    this.validateOrderByItems(orderByItemsRes1, orderByItemsRes2);\n\n    // no async call in the for loop\n    for (let i = 0; i < orderByItemsRes1.length; i++) {\n      // compares the orderby items one by one\n      const compRes = this.compareOrderByItem(orderByItemsRes1[i], orderByItemsRes2[i]);\n      if (compRes !== 0) {\n        if (this.sortOrder[i] === \"Ascending\") {\n          return compRes;\n        } else if (this.sortOrder[i] === \"Descending\") {\n          return -compRes;\n        }\n      }\n    }\n\n    return this.targetPartitionKeyRangeDocProdComparator(docProd1, docProd2);\n  }\n\n  // TODO: This smells funny\n  public compareValue(item1: unknown, type1: string, item2: unknown, type2: string): number {\n    if (type1 === \"object\" || type2 === \"object\") {\n      throw new Error(\"Tried to compare an object type\");\n    }\n    const type1Ord = TYPEORDCOMPARATOR[type1].ord;\n    const type2Ord = TYPEORDCOMPARATOR[type2].ord;\n    const typeCmp = type1Ord - type2Ord;\n\n    if (typeCmp !== 0) {\n      // if the types are different, use type ordinal\n      return typeCmp;\n    }\n\n    // both are of the same type\n    if (\n      type1Ord === TYPEORDCOMPARATOR[\"undefined\"].ord ||\n      type1Ord === TYPEORDCOMPARATOR[\"NoValue\"].ord\n    ) {\n      // if both types are undefined or Null they are equal\n      return 0;\n    }\n\n    const compFunc = TYPEORDCOMPARATOR[type1].compFunc;\n    if (typeof compFunc === \"undefined\") {\n      throw new Error(\"Cannot find the comparison function\");\n    }\n    // same type and type is defined compare the items\n    return compFunc(item1, item2);\n  }\n\n  private compareOrderByItem(orderByItem1: any, orderByItem2: any): number {\n    const type1 = this.getType(orderByItem1);\n    const type2 = this.getType(orderByItem2);\n    return this.compareValue(orderByItem1[\"item\"], type1, orderByItem2[\"item\"], type2);\n  }\n\n  private validateOrderByItems(res1: string[], res2: string[]): void {\n    if (res1.length !== res2.length) {\n      throw new Error(`Expected ${res1.length}, but got ${res2.length}.`);\n    }\n    if (res1.length !== this.sortOrder.length) {\n      throw new Error(\"orderByItems cannot have a different size than sort orders.\");\n    }\n\n    for (let i = 0; i < this.sortOrder.length; i++) {\n      const type1 = this.getType(res1[i]);\n      const type2 = this.getType(res2[i]);\n      if (type1 !== type2) {\n        throw new Error(\n          `Expected ${type1}, but got ${type2}. Cannot execute cross partition order-by queries on mixed types. Consider filtering your query using IS_STRING or IS_NUMBER to get around this exception.`\n        );\n      }\n    }\n  }\n\n  private getType(\n    orderByItem: any\n  ):\n    | \"string\"\n    | \"number\"\n    | \"bigint\"\n    | \"boolean\"\n    | \"symbol\"\n    | \"undefined\"\n    | \"object\"\n    | \"function\"\n    | \"NoValue\" {\n    // TODO: any item?\n    if (orderByItem === undefined || orderByItem.item === undefined) {\n      return \"NoValue\";\n    }\n    const type = typeof orderByItem.item;\n    if (TYPEORDCOMPARATOR[type] === undefined) {\n      throw new Error(`unrecognizable type ${type}`);\n    }\n    return type;\n  }\n\n  private getOrderByItems(res: any): any {\n    // TODO: any res?\n    return res[\"orderByItems\"];\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { OrderByDocumentProducerComparator } from \"../orderByDocumentProducerComparator\";\nimport { Aggregator } from \"./Aggregator\";\n\ninterface MaxAggregateResult {\n  count: number;\n  max?: number;\n}\n\n/** @hidden */\nexport class MaxAggregator implements Aggregator {\n  private value: number;\n  private comparer: OrderByDocumentProducerComparator;\n  /**\n   * Represents an aggregator for MAX operator.\n   * @hidden\n   */\n  constructor() {\n    this.value = undefined;\n    this.comparer = new OrderByDocumentProducerComparator([\"Ascending\"]);\n  }\n  /**\n   * Add the provided item to aggregation result.\n   */\n  public aggregate(other: MaxAggregateResult): void {\n    if (this.value === undefined) {\n      this.value = other.max;\n    } else if (\n      this.comparer.compareValue(other.max, typeof other.max, this.value, typeof this.value) > 0\n    ) {\n      this.value = other.max;\n    }\n  }\n\n  /**\n   * Get the aggregation result.\n   */\n  public getResult(): number {\n    return this.value;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { OrderByDocumentProducerComparator } from \"../orderByDocumentProducerComparator\";\nimport { Aggregator } from \"./Aggregator\";\n\nexport interface MinAggregateResult {\n  min: number;\n  count: number;\n}\n\n/** @hidden */\nexport class MinAggregator implements Aggregator {\n  private value: number;\n  private comparer: OrderByDocumentProducerComparator;\n  /**\n   * Represents an aggregator for MIN operator.\n   * @hidden\n   */\n  constructor() {\n    this.value = undefined;\n    this.comparer = new OrderByDocumentProducerComparator([\"Ascending\"]);\n  }\n  /**\n   * Add the provided item to aggregation result.\n   */\n  public aggregate(other: MinAggregateResult): void {\n    if (this.value === undefined) {\n      // || typeof this.value === \"object\"\n      this.value = other.min;\n    } else {\n      const otherType = other.min === null ? \"NoValue\" : typeof other.min; // || typeof other === \"object\"\n      const thisType = this.value === null ? \"NoValue\" : typeof this.value;\n      if (this.comparer.compareValue(other.min, otherType, this.value, thisType) < 0) {\n        this.value = other.min;\n      }\n    }\n  }\n\n  /**\n   * Get the aggregation result.\n   */\n  public getResult(): number {\n    return this.value;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Aggregator } from \"./Aggregator\";\n\n/** @hidden */\nexport class SumAggregator implements Aggregator {\n  public sum: number;\n  /**\n   * Add the provided item to aggregation result.\n   */\n  public aggregate(other: number): void {\n    if (other === undefined) {\n      return;\n    }\n    if (this.sum === undefined) {\n      this.sum = other;\n    } else {\n      this.sum += other;\n    }\n  }\n\n  /**\n   * Get the aggregation result.\n   */\n  public getResult(): number {\n    return this.sum;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Aggregator } from \"./Aggregator\";\n\n/** @hidden */\nexport class StaticValueAggregator implements Aggregator {\n  public value: any;\n  public aggregate(other: unknown): void {\n    if (this.value === undefined) {\n      this.value = other;\n    }\n  }\n\n  public getResult(): any {\n    return this.value;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AverageAggregator } from \"./AverageAggregator\";\nimport { CountAggregator } from \"./CountAggregator\";\nimport { MaxAggregator } from \"./MaxAggregator\";\nimport { MinAggregator } from \"./MinAggregator\";\nimport { SumAggregator } from \"./SumAggregator\";\nimport { StaticValueAggregator } from \"./StaticValueAggregator\";\nimport { AggregateType } from \"../../request/ErrorResponse\";\n\nexport function createAggregator(\n  aggregateType: AggregateType\n):\n  | AverageAggregator\n  | CountAggregator\n  | MaxAggregator\n  | MinAggregator\n  | SumAggregator\n  | StaticValueAggregator {\n  switch (aggregateType) {\n    case \"Average\":\n      return new AverageAggregator();\n    case \"Count\":\n      return new CountAggregator();\n    case \"Max\":\n      return new MaxAggregator();\n    case \"Min\":\n      return new MinAggregator();\n    case \"Sum\":\n      return new SumAggregator();\n    default:\n      return new StaticValueAggregator();\n  }\n}\n\nexport { AverageAggregator, CountAggregator, MaxAggregator, MinAggregator, SumAggregator };\nexport { Aggregator } from \"./Aggregator\";\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/** @hidden */\nexport enum FetchResultType {\n  \"Done\" = 0,\n  \"Exception\" = 1,\n  \"Result\" = 2,\n}\n\n/** @hidden */\nexport class FetchResult {\n  public feedResponse: any;\n  public fetchResultType: FetchResultType;\n  public error: any;\n  /**\n   * Wraps fetch results for the document producer.\n   * This allows the document producer to buffer exceptions so that actual results don't get flushed during splits.\n   *\n   * @param feedReponse - The response the document producer got back on a successful fetch\n   * @param error - The exception meant to be buffered on an unsuccessful fetch\n   * @hidden\n   */\n  constructor(feedResponse: unknown, error: unknown) {\n    // TODO: feedResponse/error\n    if (feedResponse !== undefined) {\n      this.feedResponse = feedResponse;\n      this.fetchResultType = FetchResultType.Result;\n    } else {\n      this.error = error;\n      this.fetchResultType = FetchResultType.Exception;\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { PartitionKeyRange, Resource } from \"../client\";\nimport { ClientContext } from \"../ClientContext\";\nimport {\n  Constants,\n  getIdFromLink,\n  getPathFromLink,\n  ResourceType,\n  StatusCodes,\n  SubStatusCodes,\n} from \"../common\";\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { FeedOptions } from \"../request\";\nimport { Response } from \"../request\";\nimport { DefaultQueryExecutionContext } from \"./defaultQueryExecutionContext\";\nimport { FetchResult, FetchResultType } from \"./FetchResult\";\nimport { CosmosHeaders, getInitialHeader, mergeHeaders } from \"./headerUtils\";\nimport { SqlQuerySpec } from \"./index\";\n\n/** @hidden */\nexport class DocumentProducer {\n  private collectionLink: string;\n  private query: string | SqlQuerySpec;\n  public targetPartitionKeyRange: PartitionKeyRange;\n  public fetchResults: FetchResult[];\n  public allFetched: boolean;\n  private err: Error;\n  public previousContinuationToken: string;\n  public continuationToken: string;\n  public generation: number = 0;\n  private respHeaders: CosmosHeaders;\n  private internalExecutionContext: DefaultQueryExecutionContext;\n\n  /**\n   * Provides the Target Partition Range Query Execution Context.\n   * @param clientContext  - The service endpoint to use to create the client.\n   * @param collectionLink - Represents collection link\n   * @param query          - A SQL query.\n   * @param targetPartitionKeyRange - Query Target Partition key Range\n   * @hidden\n   */\n  constructor(\n    private clientContext: ClientContext,\n    collectionLink: string,\n    query: SqlQuerySpec,\n    targetPartitionKeyRange: PartitionKeyRange,\n    options: FeedOptions\n  ) {\n    // TODO: any options\n    this.collectionLink = collectionLink;\n    this.query = query;\n    this.targetPartitionKeyRange = targetPartitionKeyRange;\n    this.fetchResults = [];\n\n    this.allFetched = false;\n    this.err = undefined;\n\n    this.previousContinuationToken = undefined;\n    this.continuationToken = undefined;\n    this.respHeaders = getInitialHeader();\n\n    this.internalExecutionContext = new DefaultQueryExecutionContext(options, this.fetchFunction);\n  }\n  /**\n   * Synchronously gives the contiguous buffered results (stops at the first non result) if any\n   * @returns buffered current items if any\n   * @hidden\n   */\n  public peekBufferedItems(): any[] {\n    const bufferedResults = [];\n    for (let i = 0, done = false; i < this.fetchResults.length && !done; i++) {\n      const fetchResult = this.fetchResults[i];\n      switch (fetchResult.fetchResultType) {\n        case FetchResultType.Done:\n          done = true;\n          break;\n        case FetchResultType.Exception:\n          done = true;\n          break;\n        case FetchResultType.Result:\n          bufferedResults.push(fetchResult.feedResponse);\n          break;\n      }\n    }\n    return bufferedResults;\n  }\n\n  public fetchFunction = async (\n    diagnosticNode: DiagnosticNodeInternal,\n    options: FeedOptions\n  ): Promise<Response<Resource>> => {\n    const path = getPathFromLink(this.collectionLink, ResourceType.item);\n    diagnosticNode.addData({ partitionKeyRangeId: this.targetPartitionKeyRange.id });\n    const id = getIdFromLink(this.collectionLink);\n\n    return this.clientContext.queryFeed({\n      path,\n      resourceType: ResourceType.item,\n      resourceId: id,\n      resultFn: (result: any) => result.Documents,\n      query: this.query,\n      options,\n      diagnosticNode,\n      partitionKeyRangeId: this.targetPartitionKeyRange[\"id\"],\n    });\n  };\n\n  public hasMoreResults(): boolean {\n    return this.internalExecutionContext.hasMoreResults() || this.fetchResults.length !== 0;\n  }\n\n  public gotSplit(): boolean {\n    const fetchResult = this.fetchResults[0];\n    if (fetchResult.fetchResultType === FetchResultType.Exception) {\n      if (DocumentProducer._needPartitionKeyRangeCacheRefresh(fetchResult.error)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _getAndResetActiveResponseHeaders(): CosmosHeaders {\n    const ret = this.respHeaders;\n    this.respHeaders = getInitialHeader();\n    return ret;\n  }\n\n  private _updateStates(err: any, allFetched: boolean): void {\n    // TODO: any Error\n    if (err) {\n      this.err = err;\n      return;\n    }\n    if (allFetched) {\n      this.allFetched = true;\n    }\n    if (this.internalExecutionContext.continuationToken === this.continuationToken) {\n      // nothing changed\n      return;\n    }\n    this.previousContinuationToken = this.continuationToken;\n    this.continuationToken = this.internalExecutionContext.continuationToken;\n  }\n\n  private static _needPartitionKeyRangeCacheRefresh(error: any): boolean {\n    // TODO: error\n    return (\n      error.code === StatusCodes.Gone &&\n      \"substatus\" in error &&\n      error[\"substatus\"] === SubStatusCodes.PartitionKeyRangeGone\n    );\n  }\n\n  /**\n   * Fetches and bufferes the next page of results and executes the given callback\n   */\n  public async bufferMore(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    if (this.err) {\n      throw this.err;\n    }\n\n    try {\n      const { result: resources, headers: headerResponse } =\n        await this.internalExecutionContext.fetchMore(diagnosticNode);\n      ++this.generation;\n      this._updateStates(undefined, resources === undefined);\n      if (resources !== undefined) {\n        // some more results\n        resources.forEach((element: any) => {\n          // TODO: resources any\n          this.fetchResults.push(new FetchResult(element, undefined));\n        });\n      }\n\n      // need to modify the header response so that the query metrics are per partition\n      if (headerResponse != null && Constants.HttpHeaders.QueryMetrics in headerResponse) {\n        // \"0\" is the default partition before one is actually assigned.\n        const queryMetrics = headerResponse[Constants.HttpHeaders.QueryMetrics][\"0\"];\n\n        // Wraping query metrics in a object where the keys are the partition key range.\n        headerResponse[Constants.HttpHeaders.QueryMetrics] = {};\n        headerResponse[Constants.HttpHeaders.QueryMetrics][this.targetPartitionKeyRange.id] =\n          queryMetrics;\n      }\n\n      return { result: resources, headers: headerResponse };\n    } catch (err: any) {\n      // TODO: any error\n      if (DocumentProducer._needPartitionKeyRangeCacheRefresh(err)) {\n        // Split just happend\n        // Buffer the error so the execution context can still get the feedResponses in the itemBuffer\n        const bufferedError = new FetchResult(undefined, err);\n        this.fetchResults.push(bufferedError);\n        // Putting a dummy result so that the rest of code flows\n        return {\n          result: [bufferedError],\n          headers: err.headers,\n        };\n      } else {\n        this._updateStates(err, err.resources === undefined);\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Synchronously gives the bufferend current item if any\n   * @returns buffered current item if any\n   * @hidden\n   */\n  public getTargetParitionKeyRange(): PartitionKeyRange {\n    return this.targetPartitionKeyRange;\n  }\n\n  /**\n   * Fetches the next element in the DocumentProducer.\n   */\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    if (this.err) {\n      this._updateStates(this.err, undefined);\n      throw this.err;\n    }\n\n    try {\n      const { result, headers } = await this.current(diagnosticNode);\n\n      const fetchResult = this.fetchResults.shift();\n      this._updateStates(undefined, result === undefined);\n      if (fetchResult.feedResponse !== result) {\n        throw new Error(`Expected ${fetchResult.feedResponse} to equal ${result}`);\n      }\n      switch (fetchResult.fetchResultType) {\n        case FetchResultType.Done:\n          return { result: undefined, headers };\n        case FetchResultType.Exception:\n          fetchResult.error.headers = headers;\n          throw fetchResult.error;\n        case FetchResultType.Result:\n          return { result: fetchResult.feedResponse, headers };\n      }\n    } catch (err: any) {\n      this._updateStates(err, err.item === undefined);\n      throw err;\n    }\n  }\n\n  /**\n   * Retrieve the current element on the DocumentProducer.\n   */\n  public async current(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    // If something is buffered just give that\n    if (this.fetchResults.length > 0) {\n      const fetchResult = this.fetchResults[0];\n      // Need to unwrap fetch results\n      switch (fetchResult.fetchResultType) {\n        case FetchResultType.Done:\n          return {\n            result: undefined,\n            headers: this._getAndResetActiveResponseHeaders(),\n          };\n        case FetchResultType.Exception:\n          fetchResult.error.headers = this._getAndResetActiveResponseHeaders();\n          throw fetchResult.error;\n        case FetchResultType.Result:\n          return {\n            result: fetchResult.feedResponse,\n            headers: this._getAndResetActiveResponseHeaders(),\n          };\n      }\n    }\n\n    // If there isn't anymore items left to fetch then let the user know.\n    if (this.allFetched) {\n      return {\n        result: undefined,\n        headers: this._getAndResetActiveResponseHeaders(),\n      };\n    }\n\n    // If there are no more bufferd items and there are still items to be fetched then buffer more\n    const { result, headers } = await this.bufferMore(diagnosticNode);\n    mergeHeaders(this.respHeaders, headers);\n    if (result === undefined) {\n      return { result: undefined, headers: this.respHeaders };\n    }\n    return this.current(diagnosticNode);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport PriorityQueue from \"priorityqueuejs\";\nimport semaphore from \"semaphore\";\nimport { ClientContext } from \"../ClientContext\";\nimport { AzureLogger, createClientLogger } from \"@azure/logger\";\nimport { StatusCodes, SubStatusCodes } from \"../common/statusCodes\";\nimport { FeedOptions, Response } from \"../request\";\nimport { PartitionedQueryExecutionInfo } from \"../request/ErrorResponse\";\nimport { QueryRange } from \"../routing/QueryRange\";\nimport { SmartRoutingMapProvider } from \"../routing/smartRoutingMapProvider\";\nimport { CosmosHeaders } from \"./CosmosHeaders\";\nimport { DocumentProducer } from \"./documentProducer\";\nimport { ExecutionContext } from \"./ExecutionContext\";\nimport { getInitialHeader, mergeHeaders } from \"./headerUtils\";\nimport { SqlQuerySpec } from \"./SqlQuerySpec\";\nimport { DiagnosticNodeInternal, DiagnosticNodeType } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { addDignosticChild } from \"../utils/diagnostics\";\nimport { MetadataLookUpType } from \"../CosmosDiagnostics\";\nimport { CosmosDbDiagnosticLevel } from \"../diagnostics/CosmosDbDiagnosticLevel\";\n\n/** @hidden */\nconst logger: AzureLogger = createClientLogger(\"parallelQueryExecutionContextBase\");\n\n/** @hidden */\nexport enum ParallelQueryExecutionContextBaseStates {\n  started = \"started\",\n  inProgress = \"inProgress\",\n  ended = \"ended\",\n}\n\n/** @hidden */\nexport abstract class ParallelQueryExecutionContextBase implements ExecutionContext {\n  private err: any;\n  private state: any;\n  private static STATES = ParallelQueryExecutionContextBaseStates;\n  private routingProvider: SmartRoutingMapProvider;\n  protected sortOrders: any;\n  private requestContinuation: any;\n  private respHeaders: CosmosHeaders;\n  private orderByPQ: PriorityQueue<DocumentProducer>;\n  private sem: any;\n  private waitingForInternalExecutionContexts: number;\n  private diagnosticNodeWrapper: {\n    consumed: boolean;\n    diagnosticNode: DiagnosticNodeInternal;\n  };\n  /**\n   * Provides the ParallelQueryExecutionContextBase.\n   * This is the base class that ParallelQueryExecutionContext and OrderByQueryExecutionContext will derive from.\n   *\n   * When handling a parallelized query, it instantiates one instance of\n   * DocumentProcuder per target partition key range and aggregates the result of each.\n   *\n   * @param clientContext - The service endpoint to use to create the client.\n   * @param collectionLink - The Collection Link\n   * @param options - Represents the feed options.\n   * @param partitionedQueryExecutionInfo - PartitionedQueryExecutionInfo\n   * @hidden\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private collectionLink: string,\n    private query: string | SqlQuerySpec,\n    private options: FeedOptions,\n    private partitionedQueryExecutionInfo: PartitionedQueryExecutionInfo\n  ) {\n    this.clientContext = clientContext;\n    this.collectionLink = collectionLink;\n    this.query = query;\n    this.options = options;\n    this.partitionedQueryExecutionInfo = partitionedQueryExecutionInfo;\n    this.diagnosticNodeWrapper = {\n      consumed: false,\n      diagnosticNode: new DiagnosticNodeInternal(\n        clientContext.diagnosticLevel,\n        DiagnosticNodeType.PARALLEL_QUERY_NODE,\n        null\n      ),\n    };\n    this.diagnosticNodeWrapper.diagnosticNode.addData({ stateful: true });\n    this.err = undefined;\n    this.state = ParallelQueryExecutionContextBase.STATES.started;\n    this.routingProvider = new SmartRoutingMapProvider(this.clientContext);\n    this.sortOrders = this.partitionedQueryExecutionInfo.queryInfo.orderBy;\n\n    this.requestContinuation = options ? options.continuationToken || options.continuation : null;\n    // response headers of undergoing operation\n    this.respHeaders = getInitialHeader();\n\n    // Make priority queue for documentProducers\n    // The comparator is supplied by the derived class\n    this.orderByPQ = new PriorityQueue<DocumentProducer>(\n      (a: DocumentProducer, b: DocumentProducer) => this.documentProducerComparator(b, a)\n    );\n    // Creating the documentProducers\n    this.sem = semaphore(1);\n    // Creating callback for semaphore\n    // TODO: Code smell\n    const createDocumentProducersAndFillUpPriorityQueueFunc = async (): Promise<void> => {\n      // ensure the lock is released after finishing up\n      try {\n        const targetPartitionRanges = await this._onTargetPartitionRanges();\n        this.waitingForInternalExecutionContexts = targetPartitionRanges.length;\n\n        const maxDegreeOfParallelism =\n          options.maxDegreeOfParallelism === undefined || options.maxDegreeOfParallelism < 1\n            ? targetPartitionRanges.length\n            : Math.min(options.maxDegreeOfParallelism, targetPartitionRanges.length);\n\n        logger.info(\n          \"Query starting against \" +\n            targetPartitionRanges.length +\n            \" ranges with parallelism of \" +\n            maxDegreeOfParallelism\n        );\n\n        const parallelismSem = semaphore(maxDegreeOfParallelism);\n        let filteredPartitionKeyRanges = [];\n        // The document producers generated from filteredPartitionKeyRanges\n        const targetPartitionQueryExecutionContextList: DocumentProducer[] = [];\n\n        if (this.requestContinuation) {\n          throw new Error(\"Continuation tokens are not yet supported for cross partition queries\");\n        } else {\n          filteredPartitionKeyRanges = targetPartitionRanges;\n        }\n\n        // Create one documentProducer for each partitionTargetRange\n        filteredPartitionKeyRanges.forEach((partitionTargetRange: any) => {\n          // TODO: any partitionTargetRange\n          // no async callback\n          targetPartitionQueryExecutionContextList.push(\n            this._createTargetPartitionQueryExecutionContext(partitionTargetRange)\n          );\n        });\n\n        // Fill up our priority queue with documentProducers\n        targetPartitionQueryExecutionContextList.forEach((documentProducer): void => {\n          // has async callback\n          const throttledFunc = async (): Promise<void> => {\n            try {\n              const { result: document, headers } = await documentProducer.current(\n                this.getDiagnosticNode()\n              );\n              this._mergeWithActiveResponseHeaders(headers);\n              if (document === undefined) {\n                // no results on this one\n                return;\n              }\n              // if there are matching results in the target ex range add it to the priority queue\n              try {\n                this.orderByPQ.enq(documentProducer);\n              } catch (e: any) {\n                this.err = e;\n              }\n            } catch (err: any) {\n              this._mergeWithActiveResponseHeaders(err.headers);\n              this.err = err;\n            } finally {\n              parallelismSem.leave();\n              this._decrementInitiationLock();\n            }\n          };\n          parallelismSem.take(throttledFunc);\n        });\n      } catch (err: any) {\n        this.err = err;\n        // release the lock\n        this.sem.leave();\n        return;\n      }\n    };\n    this.sem.take(createDocumentProducersAndFillUpPriorityQueueFunc);\n  }\n\n  protected abstract documentProducerComparator(\n    dp1: DocumentProducer,\n    dp2: DocumentProducer\n  ): number;\n\n  private _decrementInitiationLock(): void {\n    // decrements waitingForInternalExecutionContexts\n    // if waitingForInternalExecutionContexts reaches 0 releases the semaphore and changes the state\n    this.waitingForInternalExecutionContexts = this.waitingForInternalExecutionContexts - 1;\n    if (this.waitingForInternalExecutionContexts === 0) {\n      this.sem.leave();\n      if (this.orderByPQ.size() === 0) {\n        this.state = ParallelQueryExecutionContextBase.STATES.inProgress;\n      }\n    }\n  }\n\n  private _mergeWithActiveResponseHeaders(headers: CosmosHeaders): void {\n    mergeHeaders(this.respHeaders, headers);\n  }\n\n  private _getAndResetActiveResponseHeaders(): CosmosHeaders {\n    const ret = this.respHeaders;\n    this.respHeaders = getInitialHeader();\n    return ret;\n  }\n\n  private getDiagnosticNode(): DiagnosticNodeInternal {\n    return this.diagnosticNodeWrapper.diagnosticNode;\n  }\n\n  private async _onTargetPartitionRanges(): Promise<any[]> {\n    // invokes the callback when the target partition ranges are ready\n    const parsedRanges = this.partitionedQueryExecutionInfo.queryRanges;\n    const queryRanges = parsedRanges.map((item) => QueryRange.parseFromDict(item));\n    return this.routingProvider.getOverlappingRanges(\n      this.collectionLink,\n      queryRanges,\n      this.getDiagnosticNode()\n    );\n  }\n\n  /**\n   * Gets the replacement ranges for a partitionkeyrange that has been split\n   */\n  private async _getReplacementPartitionKeyRanges(\n    documentProducer: DocumentProducer\n  ): Promise<any[]> {\n    const partitionKeyRange = documentProducer.targetPartitionKeyRange;\n    // Download the new routing map\n    this.routingProvider = new SmartRoutingMapProvider(this.clientContext);\n    // Get the queryRange that relates to this partitionKeyRange\n    const queryRange = QueryRange.parsePartitionKeyRange(partitionKeyRange);\n    return this.routingProvider.getOverlappingRanges(\n      this.collectionLink,\n      [queryRange],\n      this.getDiagnosticNode()\n    );\n  }\n\n  // TODO: P0 Code smell - can barely tell what this is doing\n  /**\n   * Removes the current document producer from the priqueue,\n   * replaces that document producer with child document producers,\n   * then reexecutes the originFunction with the corrrected executionContext\n   */\n  private async _repairExecutionContext(\n    diagnosticNode: DiagnosticNodeInternal,\n    originFunction: any\n  ): Promise<void> {\n    // TODO: any\n    // Get the replacement ranges\n    // Removing the invalid documentProducer from the orderByPQ\n    const parentDocumentProducer = this.orderByPQ.deq();\n    try {\n      const replacementPartitionKeyRanges: any[] = await this._getReplacementPartitionKeyRanges(\n        parentDocumentProducer\n      );\n      const replacementDocumentProducers: DocumentProducer[] = [];\n      // Create the replacement documentProducers\n      replacementPartitionKeyRanges.forEach((partitionKeyRange) => {\n        // Create replacment document producers with the parent's continuationToken\n        const replacementDocumentProducer = this._createTargetPartitionQueryExecutionContext(\n          partitionKeyRange,\n          parentDocumentProducer.continuationToken\n        );\n        replacementDocumentProducers.push(replacementDocumentProducer);\n      });\n      // We need to check if the documentProducers even has anything left to fetch from before enqueing them\n      const checkAndEnqueueDocumentProducer = async (\n        documentProducerToCheck: DocumentProducer,\n        checkNextDocumentProducerCallback: any\n      ): Promise<void> => {\n        try {\n          const { result: afterItem } = await documentProducerToCheck.current(diagnosticNode);\n          if (afterItem === undefined) {\n            // no more results left in this document producer, so we don't enqueue it\n          } else {\n            // Safe to put document producer back in the queue\n            this.orderByPQ.enq(documentProducerToCheck);\n          }\n\n          await checkNextDocumentProducerCallback();\n        } catch (err: any) {\n          this.err = err;\n          return;\n        }\n      };\n      const checkAndEnqueueDocumentProducers = async (rdp: DocumentProducer[]): Promise<any> => {\n        if (rdp.length > 0) {\n          // We still have a replacementDocumentProducer to check\n          const replacementDocumentProducer = rdp.shift();\n          await checkAndEnqueueDocumentProducer(replacementDocumentProducer, async () => {\n            await checkAndEnqueueDocumentProducers(rdp);\n          });\n        } else {\n          // reexecutes the originFunction with the corrrected executionContext\n          return originFunction();\n        }\n      };\n      // Invoke the recursive function to get the ball rolling\n      await checkAndEnqueueDocumentProducers(replacementDocumentProducers);\n    } catch (err: any) {\n      this.err = err;\n      throw err;\n    }\n  }\n\n  private static _needPartitionKeyRangeCacheRefresh(error: any): boolean {\n    // TODO: any error\n    return (\n      error.code === StatusCodes.Gone &&\n      \"substatus\" in error &&\n      error[\"substatus\"] === SubStatusCodes.PartitionKeyRangeGone\n    );\n  }\n\n  /**\n   * Checks to see if the executionContext needs to be repaired.\n   * if so it repairs the execution context and executes the ifCallback,\n   * else it continues with the current execution context and executes the elseCallback\n   */\n  private async _repairExecutionContextIfNeeded(\n    diagnosticNode: DiagnosticNodeInternal,\n    ifCallback: any,\n    elseCallback: any\n  ): Promise<void> {\n    const documentProducer = this.orderByPQ.peek();\n    // Check if split happened\n    try {\n      await documentProducer.current(diagnosticNode);\n      elseCallback();\n    } catch (err: any) {\n      if (ParallelQueryExecutionContextBase._needPartitionKeyRangeCacheRefresh(err)) {\n        // Split has happened so we need to repair execution context before continueing\n        return addDignosticChild(\n          (childNode) => this._repairExecutionContext(childNode, ifCallback),\n          diagnosticNode,\n          DiagnosticNodeType.QUERY_REPAIR_NODE\n        );\n      } else {\n        // Something actually bad happened ...\n        this.err = err;\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Fetches the next element in the ParallelQueryExecutionContextBase.\n   */\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    if (this.err) {\n      // if there is a prior error return error\n      throw this.err;\n    }\n    return new Promise<Response<any>>((resolve, reject) => {\n      this.sem.take(() => {\n        if (!this.diagnosticNodeWrapper.consumed) {\n          diagnosticNode.addChildNode(\n            this.diagnosticNodeWrapper.diagnosticNode,\n            CosmosDbDiagnosticLevel.debug,\n            MetadataLookUpType.QueryPlanLookUp\n          );\n          this.diagnosticNodeWrapper.diagnosticNode = undefined;\n          this.diagnosticNodeWrapper.consumed = true;\n        } else {\n          this.diagnosticNodeWrapper.diagnosticNode = diagnosticNode;\n        }\n\n        // NOTE: lock must be released before invoking quitting\n        if (this.err) {\n          // release the lock before invoking callback\n          this.sem.leave();\n          // if there is a prior error return error\n          this.err.headers = this._getAndResetActiveResponseHeaders();\n          reject(this.err);\n          return;\n        }\n\n        if (this.orderByPQ.size() === 0) {\n          // there is no more results\n          this.state = ParallelQueryExecutionContextBase.STATES.ended;\n          // release the lock before invoking callback\n          this.sem.leave();\n          return resolve({\n            result: undefined,\n            headers: this._getAndResetActiveResponseHeaders(),\n          });\n        }\n\n        const ifCallback = (): void => {\n          // Release the semaphore to avoid deadlock\n          this.sem.leave();\n          // Reexcute the function\n          return resolve(this.nextItem(diagnosticNode));\n        };\n        const elseCallback = async (): Promise<void> => {\n          let documentProducer: DocumentProducer;\n          try {\n            documentProducer = this.orderByPQ.deq();\n          } catch (e: any) {\n            // if comparing elements of the priority queue throws exception\n            // set that error and return error\n            this.err = e;\n            // release the lock before invoking callback\n            this.sem.leave();\n            this.err.headers = this._getAndResetActiveResponseHeaders();\n            reject(this.err);\n            return;\n          }\n\n          let item: any;\n          let headers: CosmosHeaders;\n          try {\n            const response = await documentProducer.nextItem(diagnosticNode);\n            item = response.result;\n            headers = response.headers;\n            this._mergeWithActiveResponseHeaders(headers);\n            if (item === undefined) {\n              // this should never happen\n              // because the documentProducer already has buffered an item\n              // assert item !== undefined\n              this.err = new Error(\n                `Extracted DocumentProducer from the priority queue \\\n                                            doesn't have any buffered item!`\n              );\n              // release the lock before invoking callback\n              this.sem.leave();\n              return resolve({\n                result: undefined,\n                headers: this._getAndResetActiveResponseHeaders(),\n              });\n            }\n          } catch (err: any) {\n            this.err = new Error(\n              `Extracted DocumentProducer from the priority queue fails to get the \\\n                                    buffered item. Due to ${JSON.stringify(err)}`\n            );\n            this.err.headers = this._getAndResetActiveResponseHeaders();\n            // release the lock before invoking callback\n            this.sem.leave();\n            reject(this.err);\n            return;\n          }\n\n          // we need to put back the document producer to the queue if it has more elements.\n          // the lock will be released after we know document producer must be put back in the queue or not\n          try {\n            const { result: afterItem, headers: otherHeaders } = await documentProducer.current(\n              diagnosticNode\n            );\n            this._mergeWithActiveResponseHeaders(otherHeaders);\n            if (afterItem === undefined) {\n              // no more results is left in this document producer\n            } else {\n              try {\n                const headItem = documentProducer.fetchResults[0];\n                if (typeof headItem === \"undefined\") {\n                  throw new Error(\n                    \"Extracted DocumentProducer from PQ is invalid state with no result!\"\n                  );\n                }\n                this.orderByPQ.enq(documentProducer);\n              } catch (e: any) {\n                // if comparing elements in priority queue throws exception\n                // set error\n                this.err = e;\n              }\n            }\n          } catch (err: any) {\n            if (ParallelQueryExecutionContextBase._needPartitionKeyRangeCacheRefresh(err)) {\n              // We want the document producer enqueued\n              // So that later parts of the code can repair the execution context\n              this.orderByPQ.enq(documentProducer);\n            } else {\n              // Something actually bad happened\n              this.err = err;\n              reject(this.err);\n            }\n          } finally {\n            // release the lock before returning\n            this.sem.leave();\n          }\n          // invoke the callback on the item\n          return resolve({\n            result: item,\n            headers: this._getAndResetActiveResponseHeaders(),\n          });\n        };\n        this._repairExecutionContextIfNeeded(diagnosticNode, ifCallback, elseCallback).catch(\n          reject\n        );\n      });\n    });\n  }\n\n  /**\n   * Determine if there are still remaining resources to processs based on the value of the continuation\n   * token or the elements remaining on the current batch in the QueryIterator.\n   * @returns true if there is other elements to process in the ParallelQueryExecutionContextBase.\n   */\n  public hasMoreResults(): boolean {\n    return !(\n      this.state === ParallelQueryExecutionContextBase.STATES.ended || this.err !== undefined\n    );\n  }\n\n  /**\n   * Creates document producers\n   */\n  private _createTargetPartitionQueryExecutionContext(\n    partitionKeyTargetRange: any,\n    continuationToken?: any\n  ): DocumentProducer {\n    // TODO: any\n    // creates target partition range Query Execution Context\n    let rewrittenQuery = this.partitionedQueryExecutionInfo.queryInfo.rewrittenQuery;\n    let sqlQuerySpec: SqlQuerySpec;\n    const query = this.query;\n    if (typeof query === \"string\") {\n      sqlQuerySpec = { query };\n    } else {\n      sqlQuerySpec = query;\n    }\n\n    const formatPlaceHolder = \"{documentdb-formattableorderbyquery-filter}\";\n    if (rewrittenQuery) {\n      sqlQuerySpec = JSON.parse(JSON.stringify(sqlQuerySpec));\n      // We hardcode the formattable filter to true for now\n      rewrittenQuery = rewrittenQuery.replace(formatPlaceHolder, \"true\");\n      sqlQuerySpec[\"query\"] = rewrittenQuery;\n    }\n\n    const options = { ...this.options };\n    options.continuationToken = continuationToken;\n\n    return new DocumentProducer(\n      this.clientContext,\n      this.collectionLink,\n      sqlQuerySpec,\n      partitionKeyTargetRange,\n      options\n    );\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { PartitionKeyRange } from \"../client/Container/PartitionKeyRange\";\nimport { Constants } from \"../common\";\nimport { QueryRange as ResponseQueryRange } from \"../request/ErrorResponse\";\n\n/** @hidden */\nexport class QueryRange {\n  public min: string;\n  public max: string;\n  public isMinInclusive: boolean;\n  public isMaxInclusive: boolean;\n\n  /**\n   * Represents a QueryRange.\n   *\n   * @param rangeMin                - min\n   * @param rangeMin                - max\n   * @param isMinInclusive         - isMinInclusive\n   * @param isMaxInclusive         - isMaxInclusive\n   * @hidden\n   */\n  constructor(\n    rangeMin: string,\n    rangeMax: string,\n    isMinInclusive: boolean,\n    isMaxInclusive: boolean\n  ) {\n    this.min = rangeMin;\n    this.max = rangeMax;\n    this.isMinInclusive = isMinInclusive;\n    this.isMaxInclusive = isMaxInclusive;\n  }\n  public overlaps(other: QueryRange): boolean {\n    const range1 = this; // eslint-disable-line @typescript-eslint/no-this-alias\n    const range2 = other;\n    if (range1 === undefined || range2 === undefined) {\n      return false;\n    }\n    if (range1.isEmpty() || range2.isEmpty()) {\n      return false;\n    }\n\n    if (range1.min <= range2.max || range2.min <= range1.max) {\n      if (\n        (range1.min === range2.max && !(range1.isMinInclusive && range2.isMaxInclusive)) ||\n        (range2.min === range1.max && !(range2.isMinInclusive && range1.isMaxInclusive))\n      ) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  public isFullRange(): boolean {\n    return (\n      this.min === Constants.EffectivePartitionKeyConstants.MinimumInclusiveEffectivePartitionKey &&\n      this.max === Constants.EffectivePartitionKeyConstants.MaximumExclusiveEffectivePartitionKey &&\n      this.isMinInclusive === true &&\n      this.isMaxInclusive === false\n    );\n  }\n\n  public isEmpty(): boolean {\n    return !(this.isMinInclusive && this.isMaxInclusive) && this.min === this.max;\n  }\n  /**\n   * Parse a QueryRange from a partitionKeyRange\n   * @returns QueryRange\n   * @hidden\n   */\n  public static parsePartitionKeyRange(partitionKeyRange: PartitionKeyRange): QueryRange {\n    return new QueryRange(\n      partitionKeyRange[Constants.PartitionKeyRange.MinInclusive],\n      partitionKeyRange[Constants.PartitionKeyRange.MaxExclusive],\n      true,\n      false\n    );\n  }\n  /**\n   * Parse a QueryRange from a dictionary\n   * @returns QueryRange\n   * @hidden\n   */\n  public static parseFromDict(queryRangeDict: ResponseQueryRange): QueryRange {\n    return new QueryRange(\n      queryRangeDict.min,\n      queryRangeDict.max,\n      queryRangeDict.isMinInclusive,\n      queryRangeDict.isMaxInclusive\n    );\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { PartitionKeyRange } from \"../client\";\nimport { Constants } from \"../common\";\nimport { QueryRange } from \"./QueryRange\";\n\n/** @hidden */\nexport class InMemoryCollectionRoutingMap {\n  private orderedPartitionKeyRanges: PartitionKeyRange[];\n  private orderedRanges: QueryRange[];\n  // TODO: chrande made this public, even though it is implementation detail for a test\n  public orderedPartitionInfo: unknown;\n\n  /**\n   * Represents a InMemoryCollectionRoutingMap Object,\n   * Stores partition key ranges in an efficient way with some additional information and provides\n   * convenience methods for working with set of ranges.\n   */\n  constructor(orderedPartitionKeyRanges: PartitionKeyRange[], orderedPartitionInfo: unknown) {\n    this.orderedPartitionKeyRanges = orderedPartitionKeyRanges;\n    this.orderedRanges = orderedPartitionKeyRanges.map((pkr) => {\n      return new QueryRange(\n        pkr[Constants.PartitionKeyRange.MinInclusive],\n        pkr[Constants.PartitionKeyRange.MaxExclusive],\n        true,\n        false\n      );\n    });\n    this.orderedPartitionInfo = orderedPartitionInfo;\n  }\n  public getOrderedParitionKeyRanges(): PartitionKeyRange[] {\n    return this.orderedPartitionKeyRanges;\n  }\n\n  public getOverlappingRanges(providedQueryRanges: QueryRange | QueryRange[]): PartitionKeyRange[] {\n    // TODO This code has all kinds of smells. Multiple iterations and sorts just to grab overlapping ranges\n    // stfaul attempted to bring it down to one for-loop and failed\n    const pqr: QueryRange[] = Array.isArray(providedQueryRanges)\n      ? providedQueryRanges\n      : [providedQueryRanges];\n    const minToPartitionRange: any = {}; // TODO: any\n\n    // this for loop doesn't invoke any async callback\n    for (const queryRange of pqr) {\n      if (queryRange.isEmpty()) {\n        continue;\n      }\n\n      if (queryRange.isFullRange()) {\n        return this.orderedPartitionKeyRanges;\n      }\n\n      const minIndex = this.orderedRanges.findIndex((range) => {\n        if (queryRange.min > range.min && queryRange.min < range.max) {\n          return true;\n        }\n        if (queryRange.min === range.min) {\n          return true;\n        }\n        if (queryRange.min === range.max) {\n          return true;\n        }\n      });\n\n      if (minIndex < 0) {\n        throw new Error(\n          \"error in collection routing map, queried value is less than the start range.\"\n        );\n      }\n\n      // Start at the end and work backwards\n      let maxIndex: number;\n      for (let i = this.orderedRanges.length - 1; i >= 0; i--) {\n        const range = this.orderedRanges[i];\n        if (queryRange.max > range.min && queryRange.max < range.max) {\n          maxIndex = i;\n          break;\n        }\n        if (queryRange.max === range.min) {\n          maxIndex = i;\n          break;\n        }\n        if (queryRange.max === range.max) {\n          maxIndex = i;\n          break;\n        }\n      }\n\n      if (maxIndex > this.orderedRanges.length) {\n        throw new Error(\n          \"error in collection routing map, queried value is greater than the end range.\"\n        );\n      }\n\n      for (let j = minIndex; j < maxIndex + 1; j++) {\n        if (queryRange.overlaps(this.orderedRanges[j])) {\n          minToPartitionRange[\n            this.orderedPartitionKeyRanges[j][Constants.PartitionKeyRange.MinInclusive]\n          ] = this.orderedPartitionKeyRanges[j];\n        }\n      }\n    }\n\n    const overlappingPartitionKeyRanges = Object.keys(minToPartitionRange).map(\n      (k) => minToPartitionRange[k]\n    );\n\n    return overlappingPartitionKeyRanges.sort((a, b) => {\n      return a[Constants.PartitionKeyRange.MinInclusive].localeCompare(\n        b[Constants.PartitionKeyRange.MinInclusive]\n      );\n    });\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"../common/constants\";\nimport { InMemoryCollectionRoutingMap } from \"./inMemoryCollectionRoutingMap\";\n\n/**\n * @hidden\n */\nfunction compareRanges(a: any, b: any): 0 | 1 | -1 {\n  const aVal = a[0][Constants.PartitionKeyRange.MinInclusive];\n  const bVal = b[0][Constants.PartitionKeyRange.MinInclusive];\n  if (aVal > bVal) {\n    return 1;\n  }\n  if (aVal < bVal) {\n    return -1;\n  }\n  return 0;\n}\n\n/** @hidden */\nexport function createCompleteRoutingMap(\n  partitionKeyRangeInfoTuppleList: any[]\n): InMemoryCollectionRoutingMap {\n  const rangeById: any = {}; // TODO: any\n  const rangeByInfo: any = {}; // TODO: any\n\n  let sortedRanges = [];\n\n  // the for loop doesn't invoke any async callback\n  for (const r of partitionKeyRangeInfoTuppleList) {\n    rangeById[r[0][Constants.PartitionKeyRange.Id]] = r;\n    rangeByInfo[r[1]] = r[0];\n    sortedRanges.push(r);\n  }\n\n  sortedRanges = sortedRanges.sort(compareRanges);\n  const partitionKeyOrderedRange = sortedRanges.map((r) => r[0]);\n  const orderedPartitionInfo = sortedRanges.map((r) => r[1]);\n\n  if (!isCompleteSetOfRange(partitionKeyOrderedRange)) {\n    return undefined;\n  }\n  return new InMemoryCollectionRoutingMap(partitionKeyOrderedRange, orderedPartitionInfo);\n}\n\n/**\n * @hidden\n */\nfunction isCompleteSetOfRange(partitionKeyOrderedRange: any): boolean {\n  // TODO: any\n  let isComplete = false;\n  if (partitionKeyOrderedRange.length > 0) {\n    const firstRange = partitionKeyOrderedRange[0];\n    const lastRange = partitionKeyOrderedRange[partitionKeyOrderedRange.length - 1];\n    isComplete =\n      firstRange[Constants.PartitionKeyRange.MinInclusive] ===\n      Constants.EffectivePartitionKeyConstants.MinimumInclusiveEffectivePartitionKey;\n    isComplete =\n      isComplete &&\n      lastRange[Constants.PartitionKeyRange.MaxExclusive] ===\n        Constants.EffectivePartitionKeyConstants.MaximumExclusiveEffectivePartitionKey;\n\n    for (let i = 1; i < partitionKeyOrderedRange.length; i++) {\n      const previousRange = partitionKeyOrderedRange[i - 1];\n      const currentRange = partitionKeyOrderedRange[i];\n      isComplete =\n        isComplete &&\n        previousRange[Constants.PartitionKeyRange.MaxExclusive] ===\n          currentRange[Constants.PartitionKeyRange.MinInclusive];\n\n      if (!isComplete) {\n        if (\n          previousRange[Constants.PartitionKeyRange.MaxExclusive] >\n          currentRange[Constants.PartitionKeyRange.MinInclusive]\n        ) {\n          throw Error(\"Ranges overlap\");\n        }\n        break;\n      }\n    }\n  }\n  return isComplete;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { MetadataLookUpType } from \"../CosmosDiagnostics\";\nimport { PartitionKeyRange } from \"../client/Container/PartitionKeyRange\";\nimport { ClientContext } from \"../ClientContext\";\nimport { getIdFromLink } from \"../common/helper\";\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { withMetadataDiagnostics } from \"../utils/diagnostics\";\nimport { createCompleteRoutingMap } from \"./CollectionRoutingMapFactory\";\nimport { InMemoryCollectionRoutingMap } from \"./inMemoryCollectionRoutingMap\";\nimport { QueryRange } from \"./QueryRange\";\n\n/** @hidden */\nexport class PartitionKeyRangeCache {\n  private collectionRoutingMapByCollectionId: {\n    [key: string]: Promise<InMemoryCollectionRoutingMap>;\n  };\n\n  constructor(private clientContext: ClientContext) {\n    this.collectionRoutingMapByCollectionId = {};\n  }\n  /**\n   * Finds or Instantiates the requested Collection Routing Map\n   * @param collectionLink - Requested collectionLink\n   * @hidden\n   */\n  public async onCollectionRoutingMap(\n    collectionLink: string,\n    diagnosticNode: DiagnosticNodeInternal,\n    forceRefresh: boolean = false\n  ): Promise<InMemoryCollectionRoutingMap> {\n    const collectionId = getIdFromLink(collectionLink);\n    if (this.collectionRoutingMapByCollectionId[collectionId] === undefined || forceRefresh) {\n      this.collectionRoutingMapByCollectionId[collectionId] = this.requestCollectionRoutingMap(\n        collectionLink,\n        diagnosticNode\n      );\n    }\n    return this.collectionRoutingMapByCollectionId[collectionId];\n  }\n\n  /**\n   * Given the query ranges and a collection, invokes the callback on the list of overlapping partition key ranges\n   * @hidden\n   */\n  public async getOverlappingRanges(\n    collectionLink: string,\n    queryRange: QueryRange,\n    diagnosticNode: DiagnosticNodeInternal,\n    forceRefresh: boolean = false\n  ): Promise<PartitionKeyRange[]> {\n    const crm = await this.onCollectionRoutingMap(collectionLink, diagnosticNode, forceRefresh);\n    return crm.getOverlappingRanges(queryRange);\n  }\n\n  private async requestCollectionRoutingMap(\n    collectionLink: string,\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<InMemoryCollectionRoutingMap> {\n    const { resources } = await withMetadataDiagnostics(\n      async (metadataDiagnostics: DiagnosticNodeInternal) => {\n        return this.clientContext\n          .queryPartitionKeyRanges(collectionLink)\n          .fetchAllInternal(metadataDiagnostics);\n      },\n      diagnosticNode,\n      MetadataLookUpType.PartitionKeyRangeLookUp\n    );\n    return createCompleteRoutingMap(resources.map((r) => [r, true]));\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../ClientContext\";\nimport { Constants } from \"../common/constants\";\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { PartitionKeyRangeCache } from \"./partitionKeyRangeCache\";\nimport { QueryRange } from \"./QueryRange\";\n\n/** @hidden */\nexport const PARITIONKEYRANGE = Constants.PartitionKeyRange;\n\n/** @hidden */\nexport class SmartRoutingMapProvider {\n  private partitionKeyRangeCache: PartitionKeyRangeCache;\n\n  constructor(clientContext: ClientContext) {\n    this.partitionKeyRangeCache = new PartitionKeyRangeCache(clientContext);\n  }\n  private static _secondRangeIsAfterFirstRange(range1: QueryRange, range2: QueryRange): boolean {\n    if (typeof range1.max === \"undefined\") {\n      throw new Error(\"range1 must have max\");\n    }\n\n    if (typeof range2.min === \"undefined\") {\n      throw new Error(\"range2 must have min\");\n    }\n\n    if (range1.max > range2.min) {\n      // r.min < #previous_r.max\n      return false;\n    } else {\n      if (range1.max === range2.min && range1.isMaxInclusive && range2.isMinInclusive) {\n        // the inclusive ending endpoint of previous_r is the same as the inclusive beginning endpoint of r\n        // they share a point\n        return false;\n      }\n      return true;\n    }\n  }\n\n  private static _isSortedAndNonOverlapping(ranges: QueryRange[]): boolean {\n    for (let idx = 1; idx < ranges.length; idx++) {\n      const previousR = ranges[idx - 1];\n      const r = ranges[idx];\n      if (!this._secondRangeIsAfterFirstRange(previousR, r)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private static _stringMax(a: string, b: string): string {\n    return a >= b ? a : b;\n  }\n\n  private static _stringCompare(a: string, b: string): 1 | 0 | -1 {\n    return a === b ? 0 : a > b ? 1 : -1;\n  }\n\n  private static _subtractRange(r: QueryRange, partitionKeyRange: any): QueryRange {\n    const left = this._stringMax(partitionKeyRange[PARITIONKEYRANGE.MaxExclusive], r.min);\n    const leftInclusive = this._stringCompare(left, r.min) === 0 ? r.isMinInclusive : false;\n    return new QueryRange(left, r.max, leftInclusive, r.isMaxInclusive);\n  }\n\n  /**\n   * Given the sorted ranges and a collection, invokes the callback on the list of overlapping partition key ranges\n   * @param callback - Function execute on the overlapping partition key ranges result,\n   *                   takes two parameters error, partition key ranges\n   * @hidden\n   */\n  public async getOverlappingRanges(\n    collectionLink: string,\n    sortedRanges: QueryRange[],\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<any[]> {\n    // validate if the list is non- overlapping and sorted                             TODO: any PartitionKeyRanges\n    if (!SmartRoutingMapProvider._isSortedAndNonOverlapping(sortedRanges)) {\n      throw new Error(\"the list of ranges is not a non-overlapping sorted ranges\");\n    }\n\n    let partitionKeyRanges: any[] = []; // TODO: any ParitionKeyRanges\n\n    if (sortedRanges.length === 0) {\n      return partitionKeyRanges;\n    }\n\n    const collectionRoutingMap = await this.partitionKeyRangeCache.onCollectionRoutingMap(\n      collectionLink,\n      diagnosticNode\n    );\n\n    let index = 0;\n    let currentProvidedRange = sortedRanges[index];\n    for (;;) {\n      if (currentProvidedRange.isEmpty()) {\n        // skip and go to the next item\n        if (++index >= sortedRanges.length) {\n          return partitionKeyRanges;\n        }\n        currentProvidedRange = sortedRanges[index];\n        continue;\n      }\n\n      let queryRange;\n      if (partitionKeyRanges.length > 0) {\n        queryRange = SmartRoutingMapProvider._subtractRange(\n          currentProvidedRange,\n          partitionKeyRanges[partitionKeyRanges.length - 1]\n        );\n      } else {\n        queryRange = currentProvidedRange;\n      }\n\n      const overlappingRanges = collectionRoutingMap.getOverlappingRanges(queryRange);\n      if (overlappingRanges.length <= 0) {\n        throw new Error(`error: returned overlapping ranges for queryRange ${queryRange} is empty`);\n      }\n      partitionKeyRanges = partitionKeyRanges.concat(overlappingRanges);\n\n      const lastKnownTargetRange = QueryRange.parsePartitionKeyRange(\n        partitionKeyRanges[partitionKeyRanges.length - 1]\n      );\n      if (!lastKnownTargetRange) {\n        throw new Error(\"expected lastKnowTargetRange to be truthy\");\n      }\n      // the overlapping ranges must contain the requested range\n\n      if (\n        SmartRoutingMapProvider._stringCompare(currentProvidedRange.max, lastKnownTargetRange.max) >\n        0\n      ) {\n        throw new Error(`error: returned overlapping ranges ${overlappingRanges} \\\n        does not contain the requested range ${queryRange}`);\n      }\n\n      // the current range is contained in partitionKeyRanges just move forward\n      if (++index >= sortedRanges.length) {\n        return partitionKeyRanges;\n      }\n      currentProvidedRange = sortedRanges[index];\n\n      while (\n        SmartRoutingMapProvider._stringCompare(\n          currentProvidedRange.max,\n          lastKnownTargetRange.max\n        ) <= 0\n      ) {\n        // the current range is covered too.just move forward\n        if (++index >= sortedRanges.length) {\n          return partitionKeyRanges;\n        }\n        currentProvidedRange = sortedRanges[index];\n      }\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DocumentProducer } from \"./documentProducer\";\nimport { ExecutionContext } from \"./ExecutionContext\";\nimport { ParallelQueryExecutionContextBase } from \"./parallelQueryExecutionContextBase\";\n\n/**\n * Provides the ParallelQueryExecutionContext.\n * This class is capable of handling parallelized queries and derives from ParallelQueryExecutionContextBase.\n * @hidden\n */\nexport class ParallelQueryExecutionContext\n  extends ParallelQueryExecutionContextBase\n  implements ExecutionContext\n{\n  // Instance members are inherited\n\n  // Overriding documentProducerComparator for ParallelQueryExecutionContexts\n  /**\n   * Provides a Comparator for document producers using the min value of the corresponding target partition.\n   * @returns Comparator Function\n   * @hidden\n   */\n  public documentProducerComparator(\n    docProd1: DocumentProducer,\n    docProd2: DocumentProducer\n  ): number {\n    return docProd1.generation - docProd2.generation;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../ClientContext\";\nimport { PartitionedQueryExecutionInfo } from \"../request/ErrorResponse\";\nimport { FeedOptions } from \"../request/FeedOptions\";\nimport { DocumentProducer } from \"./documentProducer\";\nimport { ExecutionContext } from \"./ExecutionContext\";\nimport { OrderByDocumentProducerComparator } from \"./orderByDocumentProducerComparator\";\nimport { ParallelQueryExecutionContextBase } from \"./parallelQueryExecutionContextBase\";\nimport { SqlQuerySpec } from \"./SqlQuerySpec\";\n\n/** @hidden */\nexport class OrderByQueryExecutionContext\n  extends ParallelQueryExecutionContextBase\n  implements ExecutionContext\n{\n  private orderByComparator: any;\n  /**\n   * Provides the OrderByQueryExecutionContext.\n   * This class is capable of handling orderby queries and dervives from ParallelQueryExecutionContextBase.\n   *\n   * When handling a parallelized query, it instantiates one instance of\n   * DocumentProcuder per target partition key range and aggregates the result of each.\n   *\n   * @param clientContext - The service endpoint to use to create the client.\n   * @param collectionLink - The Collection Link\n   * @param options - Represents the feed options.\n   * @param partitionedQueryExecutionInfo - PartitionedQueryExecutionInfo\n   * @hidden\n   */\n  constructor(\n    clientContext: ClientContext,\n    collectionLink: string,\n    query: string | SqlQuerySpec,\n    options: FeedOptions,\n    partitionedQueryExecutionInfo: PartitionedQueryExecutionInfo\n  ) {\n    // Calling on base class constructor\n    super(clientContext, collectionLink, query, options, partitionedQueryExecutionInfo);\n    this.orderByComparator = new OrderByDocumentProducerComparator(this.sortOrders);\n  }\n  // Instance members are inherited\n\n  // Overriding documentProducerComparator for OrderByQueryExecutionContexts\n  /**\n   * Provides a Comparator for document producers which respects orderby sort order.\n   * @returns Comparator Function\n   * @hidden\n   */\n  public documentProducerComparator(docProd1: DocumentProducer, docProd2: DocumentProducer): any {\n    return this.orderByComparator.compare(docProd1, docProd2);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { Response } from \"../../request\";\nimport { ExecutionContext } from \"../ExecutionContext\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\n\n/** @hidden */\nexport class OffsetLimitEndpointComponent implements ExecutionContext {\n  constructor(\n    private executionContext: ExecutionContext,\n    private offset: number,\n    private limit: number\n  ) {}\n\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    const aggregateHeaders = getInitialHeader();\n    while (this.offset > 0) {\n      // Grab next item but ignore the result. We only need the headers\n      const { headers } = await this.executionContext.nextItem(diagnosticNode);\n      this.offset--;\n      mergeHeaders(aggregateHeaders, headers);\n    }\n    if (this.limit > 0) {\n      const { result, headers } = await this.executionContext.nextItem(diagnosticNode);\n      this.limit--;\n      mergeHeaders(aggregateHeaders, headers);\n      return { result, headers: aggregateHeaders };\n    }\n    // If both limit and offset are 0, return nothing\n    return {\n      result: undefined,\n      headers: getInitialHeader(),\n    };\n  }\n\n  public hasMoreResults(): boolean {\n    return (this.offset > 0 || this.limit > 0) && this.executionContext.hasMoreResults();\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { Response } from \"../../request\";\nimport { ExecutionContext } from \"../ExecutionContext\";\n\n/** @hidden */\nexport class OrderByEndpointComponent implements ExecutionContext {\n  /**\n   * Represents an endpoint in handling an order by query. For each processed orderby\n   * result it returns 'payload' item of the result\n   *\n   * @param executionContext - Underlying Execution Context\n   * @hidden\n   */\n  constructor(private executionContext: ExecutionContext) {}\n  /**\n   * Execute a provided function on the next element in the OrderByEndpointComponent.\n   */\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    const { result: item, headers } = await this.executionContext.nextItem(diagnosticNode);\n    return {\n      result: item !== undefined ? item.payload : undefined,\n      headers,\n    };\n  }\n\n  /**\n   * Determine if there are still remaining resources to processs.\n   * @returns true if there is other elements to process in the OrderByEndpointComponent.\n   */\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults();\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { encodeUTF8 } from \"./encode\";\nimport { globalCrypto } from \"./globalCrypto\";\n\nexport async function digest(str: string): Promise<string> {\n  const data = encodeUTF8(str);\n  const hash = await globalCrypto.subtle.digest(\"SHA-256\", data);\n  return bufferToHex(hash);\n}\n\nfunction bufferToHex(buffer: ArrayBuffer): string {\n  return Array.prototype.map\n    .call(new Uint8Array(buffer), (item: number) => (\"00\" + item.toString(16)).slice(-2))\n    .join(\"\");\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { digest } from \"./digest\";\nimport stableStringify from \"fast-json-stable-stringify\";\n\nexport async function hashObject(object: unknown): Promise<string> {\n  const stringifiedObject = stableStringify(object);\n  return digest(stringifiedObject);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Response } from \"../../request\";\nimport { ExecutionContext } from \"../ExecutionContext\";\nimport { hashObject } from \"../../utils/hashObject\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\n\n/** @hidden */\nexport class OrderedDistinctEndpointComponent implements ExecutionContext {\n  private hashedLastResult: string;\n  constructor(private executionContext: ExecutionContext) {}\n\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    const { headers, result } = await this.executionContext.nextItem(diagnosticNode);\n    if (result) {\n      const hashedResult = await hashObject(result);\n      if (hashedResult === this.hashedLastResult) {\n        return { result: undefined, headers };\n      }\n      this.hashedLastResult = hashedResult;\n    }\n    return { result, headers };\n  }\n\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults();\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Response } from \"../../request\";\nimport { ExecutionContext } from \"../ExecutionContext\";\nimport { hashObject } from \"../../utils/hashObject\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\n\n/** @hidden */\nexport class UnorderedDistinctEndpointComponent implements ExecutionContext {\n  private hashedResults: Set<string>;\n  constructor(private executionContext: ExecutionContext) {\n    this.hashedResults = new Set();\n  }\n\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    const { headers, result } = await this.executionContext.nextItem(diagnosticNode);\n    if (result) {\n      const hashedResult = await hashObject(result);\n      if (this.hashedResults.has(hashedResult)) {\n        return { result: undefined, headers };\n      }\n      this.hashedResults.add(hashedResult);\n    }\n    return { result, headers };\n  }\n\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults();\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// All aggregates are effectively a group by operation\n// The empty group is used for aggregates without a GROUP BY clause\nexport const emptyGroup = \"__empty__\";\n\n// Newer API versions rewrite the query to return `item2`. It fixes some legacy issues with the original `item` result\n// Aggregator code should use item2 when available\nexport const extractAggregateResult = (payload: { item2?: unknown; item: unknown }): any =>\n  Object.keys(payload).length > 0 ? (payload.item2 ? payload.item2 : payload.item) : null;\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Response } from \"../../request\";\nimport { ExecutionContext } from \"../ExecutionContext\";\nimport { CosmosHeaders } from \"../CosmosHeaders\";\nimport { QueryInfo } from \"../../request/ErrorResponse\";\nimport { hashObject } from \"../../utils/hashObject\";\nimport { Aggregator, createAggregator } from \"../Aggregators\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\nimport { emptyGroup, extractAggregateResult } from \"./emptyGroup\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\n\ninterface GroupByResponse {\n  result: GroupByResult;\n  headers: CosmosHeaders;\n}\n\ninterface GroupByResult {\n  groupByItems: any[];\n  payload: any;\n}\n\n/** @hidden */\nexport class GroupByEndpointComponent implements ExecutionContext {\n  constructor(private executionContext: ExecutionContext, private queryInfo: QueryInfo) {}\n\n  private readonly groupings: Map<string, Map<string, Aggregator>> = new Map();\n  private readonly aggregateResultArray: any[] = [];\n  private completed: boolean = false;\n\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    // If we have a full result set, begin returning results\n    if (this.aggregateResultArray.length > 0) {\n      return {\n        result: this.aggregateResultArray.pop(),\n        headers: getInitialHeader(),\n      };\n    }\n\n    if (this.completed) {\n      return {\n        result: undefined,\n        headers: getInitialHeader(),\n      };\n    }\n\n    const aggregateHeaders = getInitialHeader();\n\n    while (this.executionContext.hasMoreResults()) {\n      // Grab the next result\n      const { result, headers } = (await this.executionContext.nextItem(\n        diagnosticNode\n      )) as GroupByResponse;\n      mergeHeaders(aggregateHeaders, headers);\n\n      // If it exists, process it via aggregators\n      if (result) {\n        const group = result.groupByItems ? await hashObject(result.groupByItems) : emptyGroup;\n        const aggregators = this.groupings.get(group);\n        const payload = result.payload;\n        if (aggregators) {\n          // Iterator over all results in the payload\n          Object.keys(payload).map((key) => {\n            // in case the value of a group is null make sure we create a dummy payload with item2==null\n            const effectiveGroupByValue = payload[key]\n              ? payload[key]\n              : new Map().set(\"item2\", null);\n            const aggregateResult = extractAggregateResult(effectiveGroupByValue);\n            aggregators.get(key).aggregate(aggregateResult);\n          });\n        } else {\n          // This is the first time we have seen a grouping. Setup the initial result without aggregate values\n          const grouping = new Map();\n          this.groupings.set(group, grouping);\n          // Iterator over all results in the payload\n          Object.keys(payload).map((key) => {\n            const aggregateType = this.queryInfo.groupByAliasToAggregateType[key];\n            // Create a new aggregator for this specific aggregate field\n            const aggregator = createAggregator(aggregateType);\n            grouping.set(key, aggregator);\n            if (aggregateType) {\n              const aggregateResult = extractAggregateResult(payload[key]);\n              aggregator.aggregate(aggregateResult);\n            } else {\n              aggregator.aggregate(payload[key]);\n            }\n          });\n        }\n      }\n    }\n\n    for (const grouping of this.groupings.values()) {\n      const groupResult: any = {};\n      for (const [aggregateKey, aggregator] of grouping.entries()) {\n        groupResult[aggregateKey] = aggregator.getResult();\n      }\n      this.aggregateResultArray.push(groupResult);\n    }\n    this.completed = true;\n    return {\n      result: this.aggregateResultArray.pop(),\n      headers: aggregateHeaders,\n    };\n  }\n\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults() || this.aggregateResultArray.length > 0;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Response } from \"../../request\";\nimport { ExecutionContext } from \"../ExecutionContext\";\nimport { CosmosHeaders } from \"../CosmosHeaders\";\nimport { AggregateType, QueryInfo } from \"../../request/ErrorResponse\";\nimport { hashObject } from \"../../utils/hashObject\";\nimport { Aggregator, createAggregator } from \"../Aggregators\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\nimport { emptyGroup, extractAggregateResult } from \"./emptyGroup\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\n\ninterface GroupByResponse {\n  result: GroupByResult;\n  headers: CosmosHeaders;\n}\n\ninterface GroupByResult {\n  groupByItems: any[];\n  payload: any;\n}\n\n/** @hidden */\nexport class GroupByValueEndpointComponent implements ExecutionContext {\n  private readonly aggregators: Map<string, Aggregator> = new Map();\n  private readonly aggregateResultArray: any[] = [];\n  private aggregateType: AggregateType;\n  private completed: boolean = false;\n\n  constructor(private executionContext: ExecutionContext, private queryInfo: QueryInfo) {\n    // VALUE queries will only every have a single grouping\n    this.aggregateType = this.queryInfo.aggregates[0];\n  }\n\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    // Start returning results if we have processed a full results set\n    if (this.aggregateResultArray.length > 0) {\n      return {\n        result: this.aggregateResultArray.pop(),\n        headers: getInitialHeader(),\n      };\n    }\n\n    if (this.completed) {\n      return {\n        result: undefined,\n        headers: getInitialHeader(),\n      };\n    }\n\n    const aggregateHeaders = getInitialHeader();\n\n    while (this.executionContext.hasMoreResults()) {\n      // Grab the next result\n      const { result, headers } = (await this.executionContext.nextItem(\n        diagnosticNode\n      )) as GroupByResponse;\n      mergeHeaders(aggregateHeaders, headers);\n\n      // If it exists, process it via aggregators\n      if (result) {\n        let grouping: string = emptyGroup;\n        let payload: any = result;\n        if (result.groupByItems) {\n          // If the query contains a GROUP BY clause, it will have a payload property and groupByItems\n          payload = result.payload;\n          grouping = await hashObject(result.groupByItems);\n        }\n\n        const aggregator = this.aggregators.get(grouping);\n        if (!aggregator) {\n          // This is the first time we have seen a grouping so create a new aggregator\n          this.aggregators.set(grouping, createAggregator(this.aggregateType));\n        }\n\n        if (this.aggregateType) {\n          const aggregateResult = extractAggregateResult(payload[0]);\n          // if aggregate result is null, we need to short circuit aggregation and return undefined\n          if (aggregateResult === null) {\n            this.completed = true;\n          }\n          this.aggregators.get(grouping).aggregate(aggregateResult);\n        } else {\n          // Queries with no aggregates pass the payload directly to the aggregator\n          // Example: SELECT VALUE c.team FROM c GROUP BY c.team\n          this.aggregators.get(grouping).aggregate(payload);\n        }\n      }\n    }\n\n    // We bail early since we got an undefined result back `[{}]`\n    if (this.completed) {\n      return {\n        result: undefined,\n        headers: aggregateHeaders,\n      };\n    }\n    // If no results are left in the underlying execution context, convert our aggregate results to an array\n    for (const aggregator of this.aggregators.values()) {\n      this.aggregateResultArray.push(aggregator.getResult());\n    }\n    this.completed = true;\n    return {\n      result: this.aggregateResultArray.pop(),\n      headers: aggregateHeaders,\n    };\n  }\n\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults() || this.aggregateResultArray.length > 0;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../ClientContext\";\nimport { Response, FeedOptions } from \"../request\";\nimport { PartitionedQueryExecutionInfo } from \"../request/ErrorResponse\";\nimport { CosmosHeaders } from \"./CosmosHeaders\";\nimport { OffsetLimitEndpointComponent } from \"./EndpointComponent/OffsetLimitEndpointComponent\";\nimport { OrderByEndpointComponent } from \"./EndpointComponent/OrderByEndpointComponent\";\nimport { OrderedDistinctEndpointComponent } from \"./EndpointComponent/OrderedDistinctEndpointComponent\";\nimport { UnorderedDistinctEndpointComponent } from \"./EndpointComponent/UnorderedDistinctEndpointComponent\";\nimport { GroupByEndpointComponent } from \"./EndpointComponent/GroupByEndpointComponent\";\nimport { ExecutionContext } from \"./ExecutionContext\";\nimport { getInitialHeader, mergeHeaders } from \"./headerUtils\";\nimport { OrderByQueryExecutionContext } from \"./orderByQueryExecutionContext\";\nimport { ParallelQueryExecutionContext } from \"./parallelQueryExecutionContext\";\nimport { GroupByValueEndpointComponent } from \"./EndpointComponent/GroupByValueEndpointComponent\";\nimport { SqlQuerySpec } from \"./SqlQuerySpec\";\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\n\n/** @hidden */\nexport class PipelinedQueryExecutionContext implements ExecutionContext {\n  private fetchBuffer: any[];\n  private fetchMoreRespHeaders: CosmosHeaders;\n  private endpoint: ExecutionContext;\n  private pageSize: number;\n  private static DEFAULT_PAGE_SIZE = 10;\n  constructor(\n    private clientContext: ClientContext,\n    private collectionLink: string,\n    private query: string | SqlQuerySpec,\n    private options: FeedOptions,\n    private partitionedQueryExecutionInfo: PartitionedQueryExecutionInfo\n  ) {\n    this.endpoint = null;\n    this.pageSize = options[\"maxItemCount\"];\n    if (this.pageSize === undefined) {\n      this.pageSize = PipelinedQueryExecutionContext.DEFAULT_PAGE_SIZE;\n    }\n\n    // Pick between parallel vs order by execution context\n    const sortOrders = partitionedQueryExecutionInfo.queryInfo.orderBy;\n    if (Array.isArray(sortOrders) && sortOrders.length > 0) {\n      // Need to wrap orderby execution context in endpoint component, since the data is nested as a \\\n      //      \"payload\" property.\n      this.endpoint = new OrderByEndpointComponent(\n        new OrderByQueryExecutionContext(\n          this.clientContext,\n          this.collectionLink,\n          this.query,\n          this.options,\n          this.partitionedQueryExecutionInfo\n        )\n      );\n    } else {\n      this.endpoint = new ParallelQueryExecutionContext(\n        this.clientContext,\n        this.collectionLink,\n        this.query,\n        this.options,\n        this.partitionedQueryExecutionInfo\n      );\n    }\n    if (\n      Object.keys(partitionedQueryExecutionInfo.queryInfo.groupByAliasToAggregateType).length > 0 ||\n      partitionedQueryExecutionInfo.queryInfo.aggregates.length > 0 ||\n      partitionedQueryExecutionInfo.queryInfo.groupByExpressions.length > 0\n    ) {\n      if (partitionedQueryExecutionInfo.queryInfo.hasSelectValue) {\n        this.endpoint = new GroupByValueEndpointComponent(\n          this.endpoint,\n          partitionedQueryExecutionInfo.queryInfo\n        );\n      } else {\n        this.endpoint = new GroupByEndpointComponent(\n          this.endpoint,\n          partitionedQueryExecutionInfo.queryInfo\n        );\n      }\n    }\n    // If top then add that to the pipeline. TOP N is effectively OFFSET 0 LIMIT N\n    const top = partitionedQueryExecutionInfo.queryInfo.top;\n    if (typeof top === \"number\") {\n      this.endpoint = new OffsetLimitEndpointComponent(this.endpoint, 0, top);\n    }\n\n    // If offset+limit then add that to the pipeline\n    const limit = partitionedQueryExecutionInfo.queryInfo.limit;\n    const offset = partitionedQueryExecutionInfo.queryInfo.offset;\n    if (typeof limit === \"number\" && typeof offset === \"number\") {\n      this.endpoint = new OffsetLimitEndpointComponent(this.endpoint, offset, limit);\n    }\n\n    // If distinct then add that to the pipeline\n    const distinctType = partitionedQueryExecutionInfo.queryInfo.distinctType;\n    if (distinctType === \"Ordered\") {\n      this.endpoint = new OrderedDistinctEndpointComponent(this.endpoint);\n    }\n    if (distinctType === \"Unordered\") {\n      this.endpoint = new UnorderedDistinctEndpointComponent(this.endpoint);\n    }\n  }\n\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    return this.endpoint.nextItem(diagnosticNode);\n  }\n\n  // Removed callback here beacuse it wouldn't have ever worked...\n  public hasMoreResults(): boolean {\n    return this.endpoint.hasMoreResults();\n  }\n\n  public async fetchMore(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    // if the wrapped endpoint has different implementation for fetchMore use that\n    // otherwise use the default implementation\n    if (typeof this.endpoint.fetchMore === \"function\") {\n      return this.endpoint.fetchMore(diagnosticNode);\n    } else {\n      this.fetchBuffer = [];\n      this.fetchMoreRespHeaders = getInitialHeader();\n      return this._fetchMoreImplementation(diagnosticNode);\n    }\n  }\n\n  private async _fetchMoreImplementation(\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<Response<any>> {\n    try {\n      const { result: item, headers } = await this.endpoint.nextItem(diagnosticNode);\n      mergeHeaders(this.fetchMoreRespHeaders, headers);\n      if (item === undefined) {\n        // no more results\n        if (this.fetchBuffer.length === 0) {\n          return {\n            result: undefined,\n            headers: this.fetchMoreRespHeaders,\n          };\n        } else {\n          // Just give what we have\n          const temp = this.fetchBuffer;\n          this.fetchBuffer = [];\n          return { result: temp, headers: this.fetchMoreRespHeaders };\n        }\n      } else {\n        // append the result\n        this.fetchBuffer.push(item);\n        if (this.fetchBuffer.length >= this.pageSize) {\n          // fetched enough results\n          const temp = this.fetchBuffer.slice(0, this.pageSize);\n          this.fetchBuffer = this.fetchBuffer.splice(this.pageSize);\n          return { result: temp, headers: this.fetchMoreRespHeaders };\n        } else {\n          // recursively fetch more\n          // TODO: is recursion a good idea?\n          return this._fetchMoreImplementation(diagnosticNode);\n        }\n      }\n    } catch (err: any) {\n      mergeHeaders(this.fetchMoreRespHeaders, err.headers);\n      err.headers = this.fetchMoreRespHeaders;\n      if (err) {\n        throw err;\n      }\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport { ClientContext } from \"./ClientContext\";\nimport { DiagnosticNodeInternal, DiagnosticNodeType } from \"./diagnostics/DiagnosticNodeInternal\";\nimport { getPathFromLink, ResourceType, StatusCodes } from \"./common\";\nimport {\n  CosmosHeaders,\n  DefaultQueryExecutionContext,\n  ExecutionContext,\n  FetchFunctionCallback,\n  getInitialHeader,\n  mergeHeaders,\n  PipelinedQueryExecutionContext,\n  SqlQuerySpec,\n} from \"./queryExecutionContext\";\nimport { Response } from \"./request\";\nimport { ErrorResponse, PartitionedQueryExecutionInfo } from \"./request/ErrorResponse\";\nimport { FeedOptions } from \"./request/FeedOptions\";\nimport { FeedResponse } from \"./request/FeedResponse\";\nimport {\n  getEmptyCosmosDiagnostics,\n  withDiagnostics,\n  withMetadataDiagnostics,\n} from \"./utils/diagnostics\";\nimport { MetadataLookUpType } from \"./CosmosDiagnostics\";\n\n/**\n * Represents a QueryIterator Object, an implementation of feed or query response that enables\n * traversal and iterating over the response\n * in the Azure Cosmos DB database service.\n */\nexport class QueryIterator<T> {\n  private fetchAllTempResources: T[]; // TODO\n  private fetchAllLastResHeaders: CosmosHeaders;\n  private queryExecutionContext: ExecutionContext;\n  private queryPlanPromise: Promise<Response<PartitionedQueryExecutionInfo>>;\n  private isInitialized: boolean;\n  /**\n   * @hidden\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private query: SqlQuerySpec | string,\n    private options: FeedOptions,\n    private fetchFunctions: FetchFunctionCallback | FetchFunctionCallback[],\n    private resourceLink?: string,\n    private resourceType?: ResourceType\n  ) {\n    this.query = query;\n    this.fetchFunctions = fetchFunctions;\n    this.options = options || {};\n    this.resourceLink = resourceLink;\n    this.fetchAllLastResHeaders = getInitialHeader();\n    this.reset();\n    this.isInitialized = false;\n  }\n\n  /**\n   * Gets an async iterator that will yield results until completion.\n   *\n   * NOTE: AsyncIterators are a very new feature and you might need to\n   * use polyfils/etc. in order to use them in your code.\n   *\n   * If you're using TypeScript, you can use the following polyfill as long\n   * as you target ES6 or higher and are running on Node 6 or higher.\n   *\n   * ```typescript\n   * if (!Symbol || !Symbol.asyncIterator) {\n   *   (Symbol as any).asyncIterator = Symbol.for(\"Symbol.asyncIterator\");\n   * }\n   * ```\n   *\n   * @example Iterate over all databases\n   * ```typescript\n   * for await(const { resources: db } of client.databases.readAll().getAsyncIterator()) {\n   *   console.log(`Got ${db} from AsyncIterator`);\n   * }\n   * ```\n   */\n  public async *getAsyncIterator(): AsyncIterable<FeedResponse<T>> {\n    this.reset();\n    let diagnosticNode = new DiagnosticNodeInternal(\n      this.clientContext.diagnosticLevel,\n      DiagnosticNodeType.CLIENT_REQUEST_NODE,\n      null\n    );\n    this.queryPlanPromise = this.fetchQueryPlan(diagnosticNode);\n    while (this.queryExecutionContext.hasMoreResults()) {\n      let response: Response<any>;\n      try {\n        response = await this.queryExecutionContext.fetchMore(diagnosticNode);\n      } catch (error: any) {\n        if (this.needsQueryPlan(error)) {\n          await this.createPipelinedExecutionContext();\n          try {\n            response = await this.queryExecutionContext.fetchMore(diagnosticNode);\n          } catch (queryError: any) {\n            this.handleSplitError(queryError);\n          }\n        } else {\n          throw error;\n        }\n      }\n\n      const feedResponse = new FeedResponse<T>(\n        response.result,\n        response.headers,\n        this.queryExecutionContext.hasMoreResults(),\n        diagnosticNode.toDiagnostic(this.clientContext.getClientConfig())\n      );\n      diagnosticNode = new DiagnosticNodeInternal(\n        this.clientContext.diagnosticLevel,\n        DiagnosticNodeType.CLIENT_REQUEST_NODE,\n        null\n      );\n      if (response.result !== undefined) {\n        yield feedResponse;\n      }\n    }\n  }\n\n  /**\n   * Determine if there are still remaining resources to process based on the value of the continuation token or the\n   * elements remaining on the current batch in the QueryIterator.\n   * @returns true if there is other elements to process in the QueryIterator.\n   */\n  public hasMoreResults(): boolean {\n    return this.queryExecutionContext.hasMoreResults();\n  }\n\n  /**\n   * Fetch all pages for the query and return a single FeedResponse.\n   */\n\n  public async fetchAll(): Promise<FeedResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.fetchAllInternal(diagnosticNode);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async fetchAllInternal(diagnosticNode: DiagnosticNodeInternal): Promise<FeedResponse<T>> {\n    this.reset();\n    let response: FeedResponse<T>;\n    try {\n      response = await this.toArrayImplementation(diagnosticNode);\n    } catch (error: any) {\n      this.handleSplitError(error);\n    }\n    return response;\n  }\n\n  /**\n   * Retrieve the next batch from the feed.\n   *\n   * This may or may not fetch more pages from the backend depending on your settings\n   * and the type of query. Aggregate queries will generally fetch all backend pages\n   * before returning the first batch of responses.\n   */\n  public async fetchNext(): Promise<FeedResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      this.queryPlanPromise = withMetadataDiagnostics(\n        async (metadataNode: DiagnosticNodeInternal) => {\n          return this.fetchQueryPlan(metadataNode);\n        },\n        diagnosticNode,\n        MetadataLookUpType.QueryPlanLookUp\n      );\n      if (!this.isInitialized) {\n        await this.init();\n      }\n\n      let response: Response<any>;\n      try {\n        response = await this.queryExecutionContext.fetchMore(diagnosticNode);\n      } catch (error: any) {\n        if (this.needsQueryPlan(error)) {\n          await this.createPipelinedExecutionContext();\n          try {\n            response = await this.queryExecutionContext.fetchMore(diagnosticNode);\n          } catch (queryError: any) {\n            this.handleSplitError(queryError);\n          }\n        } else {\n          throw error;\n        }\n      }\n      return new FeedResponse<T>(\n        response.result,\n        response.headers,\n        this.queryExecutionContext.hasMoreResults(),\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Reset the QueryIterator to the beginning and clear all the resources inside it\n   */\n  public reset(): void {\n    this.queryPlanPromise = undefined;\n    this.fetchAllLastResHeaders = getInitialHeader();\n    this.fetchAllTempResources = [];\n    this.queryExecutionContext = new DefaultQueryExecutionContext(\n      this.options,\n      this.fetchFunctions\n    );\n  }\n\n  private async toArrayImplementation(\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<FeedResponse<T>> {\n    this.queryPlanPromise = withMetadataDiagnostics(\n      async (metadataNode: DiagnosticNodeInternal) => {\n        return this.fetchQueryPlan(metadataNode);\n      },\n      diagnosticNode,\n      MetadataLookUpType.QueryPlanLookUp\n    );\n\n    // this.queryPlanPromise = this.fetchQueryPlan(diagnosticNode);\n    if (!this.isInitialized) {\n      await this.init();\n    }\n    while (this.queryExecutionContext.hasMoreResults()) {\n      let response: Response<any>;\n      try {\n        response = await this.queryExecutionContext.nextItem(diagnosticNode);\n      } catch (error: any) {\n        if (this.needsQueryPlan(error)) {\n          await this.createPipelinedExecutionContext();\n          response = await this.queryExecutionContext.nextItem(diagnosticNode);\n        } else {\n          throw error;\n        }\n      }\n      const { result, headers } = response;\n      // concatenate the results and fetch more\n      mergeHeaders(this.fetchAllLastResHeaders, headers);\n\n      if (result !== undefined) {\n        this.fetchAllTempResources.push(result);\n      }\n    }\n    return new FeedResponse(\n      this.fetchAllTempResources,\n      this.fetchAllLastResHeaders,\n      this.queryExecutionContext.hasMoreResults(),\n      getEmptyCosmosDiagnostics()\n    );\n  }\n\n  private async createPipelinedExecutionContext(): Promise<void> {\n    const queryPlanResponse = await this.queryPlanPromise;\n\n    // We always coerce queryPlanPromise to resolved. So if it errored, we need to manually inspect the resolved value\n    if (queryPlanResponse instanceof Error) {\n      throw queryPlanResponse;\n    }\n\n    const queryPlan = queryPlanResponse.result;\n    const queryInfo = queryPlan.queryInfo;\n    if (queryInfo.aggregates.length > 0 && queryInfo.hasSelectValue === false) {\n      throw new Error(\"Aggregate queries must use the VALUE keyword\");\n    }\n    this.queryExecutionContext = new PipelinedQueryExecutionContext(\n      this.clientContext,\n      this.resourceLink,\n      this.query,\n      this.options,\n      queryPlan\n    );\n  }\n\n  private async fetchQueryPlan(diagnosticNode: DiagnosticNodeInternal): Promise<any> {\n    if (!this.queryPlanPromise && this.resourceType === ResourceType.item) {\n      return this.clientContext\n        .getQueryPlan(\n          getPathFromLink(this.resourceLink) + \"/docs\",\n          ResourceType.item,\n          this.resourceLink,\n          this.query,\n          this.options,\n          diagnosticNode\n        )\n        .catch((error: any) => error); // Without this catch, node reports an unhandled rejection. So we stash the promise as resolved even if it errored.\n    }\n    return this.queryPlanPromise;\n  }\n\n  private needsQueryPlan(error: ErrorResponse): error is ErrorResponse {\n    if (\n      error.body?.additionalErrorInfo ||\n      error.message.includes(\"Cross partition query only supports\")\n    ) {\n      return error.code === StatusCodes.BadRequest && this.resourceType === ResourceType.item;\n    } else {\n      throw error;\n    }\n  }\n\n  private initPromise: Promise<void>;\n  private async init(): Promise<void> {\n    if (this.isInitialized === true) {\n      return;\n    }\n    if (this.initPromise === undefined) {\n      this.initPromise = this._init();\n    }\n    return this.initPromise;\n  }\n  private async _init(): Promise<void> {\n    if (this.options.forceQueryPlan === true && this.resourceType === ResourceType.item) {\n      await this.createPipelinedExecutionContext();\n    }\n    this.isInitialized = true;\n  }\n\n  private handleSplitError(err: any): void {\n    if (err.code === 410) {\n      const error = new Error(\n        \"Encountered partition split and could not recover. This request is retryable\"\n      ) as any;\n      error.code = 503;\n      error.originalError = err;\n      throw error;\n    } else {\n      throw err;\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request\";\nimport { Resource } from \"../Resource\";\nimport { Conflict } from \"./Conflict\";\nimport { ConflictDefinition } from \"./ConflictDefinition\";\n\nexport class ConflictResponse extends ResourceResponse<ConflictDefinition & Resource> {\n  constructor(\n    resource: ConflictDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    conflict: Conflict,\n    diagnostics: CosmosDiagnostics\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.conflict = conflict;\n  }\n  /** A reference to the {@link Conflict} corresponding to the returned {@link ConflictDefinition}. */\n  public readonly conflict: Conflict;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { PartitionKeyDefinition } from \"../documents\";\nimport { Container } from \"./Container\";\n\nexport async function readPartitionKeyDefinition(\n  diagnosticNode: DiagnosticNodeInternal,\n  container: Container\n): Promise<PartitionKeyDefinition> {\n  const partitionKeyDefinition = await container.readPartitionKeyDefinition(diagnosticNode);\n  return partitionKeyDefinition.resource;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { Constants, getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport { RequestOptions } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { ConflictDefinition } from \"./ConflictDefinition\";\nimport { ConflictResponse } from \"./ConflictResponse\";\nimport { undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport { PartitionKey } from \"../../documents\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { readPartitionKeyDefinition } from \"../ClientUtils\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Use to read or delete a given {@link Conflict} by id.\n *\n * @see {@link Conflicts} to query or read all conflicts.\n */\nexport class Conflict {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return `/${this.container.url}/${Constants.Path.ConflictsPathSegment}/${this.id}`;\n  }\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link Conflict}.\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n    private partitionKey?: PartitionKey\n  ) {\n    this.partitionKey = partitionKey;\n  }\n\n  /**\n   * Read the {@link ConflictDefinition} for the given {@link Conflict}.\n   */\n  public async read(options?: RequestOptions): Promise<ConflictResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url, ResourceType.conflicts);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<ConflictDefinition>({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n\n      return new ConflictResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link ConflictDefinition}.\n   */\n  public async delete(options?: RequestOptions): Promise<ConflictResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (this.partitionKey === undefined) {\n        const partitionKeyDefinition = await readPartitionKeyDefinition(\n          diagnosticNode,\n          this.container\n        );\n        this.partitionKey = undefinedPartitionKey(partitionKeyDefinition);\n      }\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<ConflictDefinition>({\n        path,\n        resourceType: ResourceType.conflicts,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey,\n        diagnosticNode,\n      });\n      return new ConflictResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { Resource } from \"../Resource\";\nimport { ConflictDefinition } from \"./ConflictDefinition\";\n\n/**\n * Use to query or read all conflicts.\n *\n * @see {@link Conflict} to read or delete a given {@link Conflict} by id.\n */\nexport class Conflicts {\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Queries all conflicts.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return results in an array or iterate over them one at a time.\n   */\n  public query(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Queries all conflicts.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return results in an array or iterate over them one at a time.\n   */\n  public query<T>(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.conflicts);\n    const id = getIdFromLink(this.container.url);\n\n    return new QueryIterator(\n      this.clientContext,\n      query,\n      options,\n      (diagNode: DiagnosticNodeInternal, innerOptions) => {\n        return this.clientContext.queryFeed({\n          path,\n          resourceType: ResourceType.conflicts,\n          resourceId: id,\n          resultFn: (result) => result.Conflicts,\n          query,\n          options: innerOptions,\n          diagnosticNode: diagNode,\n        });\n      }\n    );\n  }\n\n  /**\n   * Reads all conflicts\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   */\n  public readAll(options?: FeedOptions): QueryIterator<ConflictDefinition & Resource> {\n    return this.query<ConflictDefinition & Resource>(undefined, options);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport enum ConflictResolutionMode {\n  Custom = \"Custom\",\n  LastWriterWins = \"LastWriterWins\",\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request/ResourceResponse\";\nimport { Resource } from \"../Resource\";\nimport { Item } from \"./Item\";\nimport { ItemDefinition } from \"./ItemDefinition\";\n\nexport class ItemResponse<T extends ItemDefinition> extends ResourceResponse<T & Resource> {\n  constructor(\n    resource: T & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    subsstatusCode: number,\n    item: Item,\n    diagnostics: CosmosDiagnostics\n  ) {\n    super(resource, headers, statusCode, diagnostics, subsstatusCode);\n    this.item = item;\n  }\n  /** Reference to the {@link Item} the response corresponds to. */\n  public readonly item: Item;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createDocumentUri,\n  getIdFromLink,\n  getPathFromLink,\n  isItemResourceValid,\n  ResourceType,\n  StatusCodes,\n} from \"../../common\";\nimport { PartitionKey, PartitionKeyInternal, convertToInternalPartitionKey } from \"../../documents\";\nimport { extractPartitionKeys, undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport { RequestOptions, Response } from \"../../request\";\nimport { PatchRequestBody } from \"../../utils/patch\";\nimport { readPartitionKeyDefinition } from \"../ClientUtils\";\nimport { Container } from \"../Container\";\nimport { Resource } from \"../Resource\";\nimport { ItemDefinition } from \"./ItemDefinition\";\nimport { ItemResponse } from \"./ItemResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Used to perform operations on a specific item.\n *\n * @see {@link Items} for operations on all items; see `container.items`.\n */\nexport class Item {\n  private partitionKey: PartitionKeyInternal;\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createDocumentUri(this.container.database.id, this.container.id, this.id);\n  }\n\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link Item}.\n   * @param partitionKey - The primary key of the given {@link Item} (only for partitioned containers).\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n    partitionKey?: PartitionKey\n  ) {\n    this.partitionKey =\n      partitionKey === undefined ? undefined : convertToInternalPartitionKey(partitionKey);\n  }\n\n  /**\n   * Read the item's definition.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   * If the type, T, is a class, it won't pass `typeof` comparisons, because it won't have a match prototype.\n   * It's recommended to only use interfaces.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param options - Additional options for the request\n   *\n   * @example Using custom type for response\n   * ```typescript\n   * interface TodoItem {\n   *   title: string;\n   *   done: bool;\n   *   id: string;\n   * }\n   *\n   * let item: TodoItem;\n   * ({body: item} = await item.read<TodoItem>());\n   * ```\n   */\n  public async read<T extends ItemDefinition = any>(\n    options: RequestOptions = {}\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (this.partitionKey === undefined) {\n        const partitionKeyDefinition = await readPartitionKeyDefinition(\n          diagnosticNode,\n          this.container\n        );\n        this.partitionKey = undefinedPartitionKey(partitionKeyDefinition);\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      let response: Response<T & Resource>;\n      try {\n        response = await this.clientContext.read<T>({\n          path,\n          resourceType: ResourceType.item,\n          resourceId: id,\n          options,\n          partitionKey: this.partitionKey,\n          diagnosticNode,\n        });\n      } catch (error: any) {\n        if (error.code !== StatusCodes.NotFound) {\n          throw error;\n        }\n        response = error;\n      }\n\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the item's definition.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body - The definition to replace the existing {@link Item}'s definition with.\n   * @param options - Additional options for the request\n   */\n  public replace(\n    body: ItemDefinition,\n    options?: RequestOptions\n  ): Promise<ItemResponse<ItemDefinition>>;\n  /**\n   * Replace the item's definition.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body - The definition to replace the existing {@link Item}'s definition with.\n   * @param options - Additional options for the request\n   */\n  public replace<T extends ItemDefinition>(\n    body: T,\n    options?: RequestOptions\n  ): Promise<ItemResponse<T>>;\n  public async replace<T extends ItemDefinition>(\n    body: T,\n    options: RequestOptions = {}\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (this.partitionKey === undefined) {\n        const partitionKeyResponse = await readPartitionKeyDefinition(\n          diagnosticNode,\n          this.container\n        );\n        this.partitionKey = extractPartitionKeys(body, partitionKeyResponse);\n      }\n\n      const err = {};\n      if (!isItemResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<T>({\n        body,\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey,\n        diagnosticNode,\n      });\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * @param options - Additional options for the request\n   */\n  public async delete<T extends ItemDefinition = any>(\n    options: RequestOptions = {}\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (this.partitionKey === undefined) {\n        const partitionKeyResponse = await readPartitionKeyDefinition(\n          diagnosticNode,\n          this.container\n        );\n        this.partitionKey = undefinedPartitionKey(partitionKeyResponse);\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<T>({\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey,\n        diagnosticNode,\n      });\n\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Perform a JSONPatch on the item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * @param options - Additional options for the request\n   */\n  public async patch<T extends ItemDefinition = any>(\n    body: PatchRequestBody,\n    options: RequestOptions = {}\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (this.partitionKey === undefined) {\n        const partitionKeyResponse = await readPartitionKeyDefinition(\n          diagnosticNode,\n          this.container\n        );\n        this.partitionKey = extractPartitionKeys(body, partitionKeyResponse);\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.patch<T>({\n        body,\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey,\n        diagnosticNode,\n      });\n\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosDiagnostics } from \"./CosmosDiagnostics\";\nimport { Constants } from \"./common\";\nimport { CosmosHeaders } from \"./queryExecutionContext\";\n\n/**\n * A single response page from the Azure Cosmos DB Change Feed\n */\nexport class ChangeFeedResponse<T> {\n  /**\n   * @internal\n   */\n  constructor(\n    /**\n     * Gets the items returned in the response from Azure Cosmos DB\n     */\n    public readonly result: T,\n    /**\n     * Gets the number of items returned in the response from Azure Cosmos DB\n     */\n    public readonly count: number,\n    /**\n     * Gets the status code of the response from Azure Cosmos DB\n     */\n    public readonly statusCode: number,\n    headers: CosmosHeaders,\n    public readonly diagnostics: CosmosDiagnostics\n  ) {\n    this.headers = Object.freeze(headers);\n  }\n\n  /**\n   * Gets the request charge for this request from the Azure Cosmos DB service.\n   */\n  public get requestCharge(): number {\n    const rus = this.headers[Constants.HttpHeaders.RequestCharge];\n    return rus ? parseInt(rus, 10) : null;\n  }\n\n  /**\n   * Gets the activity ID for the request from the Azure Cosmos DB service.\n   */\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n\n  /**\n   * Gets the continuation token to be used for continuing enumeration of the Azure Cosmos DB service.\n   *\n   * This is equivalent to the `etag` property.\n   */\n  public get continuation(): string {\n    return this.etag;\n  }\n\n  /**\n   * Gets the session token for use in session consistency reads from the Azure Cosmos DB service.\n   */\n  public get sessionToken(): string {\n    return this.headers[Constants.HttpHeaders.SessionToken];\n  }\n\n  /**\n   * Gets the entity tag associated with last transaction in the Azure Cosmos DB service,\n   * which can be used as If-Non-Match Access condition for ReadFeed REST request or\n   * `continuation` property of `ChangeFeedOptions` parameter for\n   * `Items.changeFeed()`\n   * to get feed changes since the transaction specified by this entity tag.\n   *\n   * This is equivalent to the `continuation` property.\n   */\n  public get etag(): string {\n    return this.headers[Constants.HttpHeaders.ETag];\n  }\n\n  /**\n   * Response headers of the response from Azure Cosmos DB\n   */\n  public headers: CosmosHeaders;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/// <reference lib=\"esnext.asynciterable\" />\nimport { ChangeFeedOptions } from \"./ChangeFeedOptions\";\nimport { ChangeFeedResponse } from \"./ChangeFeedResponse\";\nimport { Resource } from \"./client\";\nimport { ClientContext } from \"./ClientContext\";\nimport { Constants, ResourceType, StatusCodes } from \"./common\";\nimport { DiagnosticNodeInternal } from \"./diagnostics/DiagnosticNodeInternal\";\nimport { PartitionKey } from \"./documents\";\nimport { FeedOptions } from \"./request\";\nimport { Response } from \"./request\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"./utils/diagnostics\";\n\n/**\n * Provides iterator for change feed.\n *\n * Use `Items.changeFeed()` to get an instance of the iterator.\n */\nexport class ChangeFeedIterator<T> {\n  private static readonly IfNoneMatchAllHeaderValue = \"*\";\n  private nextIfNoneMatch: string;\n  private ifModifiedSince: string;\n  private lastStatusCode: number;\n  private isPartitionSpecified: boolean;\n\n  /**\n   * @internal\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private resourceId: string,\n    private resourceLink: string,\n    private partitionKey: PartitionKey,\n    private changeFeedOptions: ChangeFeedOptions\n  ) {\n    // partition key XOR partition key range id\n    const partitionKeyValid = partitionKey !== undefined;\n    this.isPartitionSpecified = partitionKeyValid;\n\n    let canUseStartFromBeginning = true;\n    if (changeFeedOptions.continuation) {\n      this.nextIfNoneMatch = changeFeedOptions.continuation;\n      canUseStartFromBeginning = false;\n    }\n\n    if (changeFeedOptions.startTime) {\n      // .toUTCString() is platform specific, but most platforms use RFC 1123.\n      // In ECMAScript 2018, this was standardized to RFC 1123.\n      // See for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\n      this.ifModifiedSince = changeFeedOptions.startTime.toUTCString();\n      canUseStartFromBeginning = false;\n    }\n\n    if (canUseStartFromBeginning && !changeFeedOptions.startFromBeginning) {\n      this.nextIfNoneMatch = ChangeFeedIterator.IfNoneMatchAllHeaderValue;\n    }\n  }\n\n  /**\n   * Gets a value indicating whether there are potentially additional results that can be retrieved.\n   *\n   * Initially returns true. This value is set based on whether the last execution returned a continuation token.\n   *\n   * @returns Boolean value representing if whether there are potentially additional results that can be retrieved.\n   */\n  get hasMoreResults(): boolean {\n    return this.lastStatusCode !== StatusCodes.NotModified;\n  }\n\n  /**\n   * Gets an async iterator which will yield pages of results from Azure Cosmos DB.\n   */\n  public async *getAsyncIterator(): AsyncIterable<ChangeFeedResponse<Array<T & Resource>>> {\n    do {\n      const result = await this.fetchNext();\n      if (result.count > 0) {\n        yield result;\n      }\n    } while (this.hasMoreResults);\n  }\n\n  /**\n   * Read feed and retrieves the next page of results in Azure Cosmos DB.\n   */\n  public async fetchNext(): Promise<ChangeFeedResponse<Array<T & Resource>>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const response = await this.getFeedResponse(diagnosticNode);\n      this.lastStatusCode = response.statusCode;\n      this.nextIfNoneMatch = response.headers[Constants.HttpHeaders.ETag];\n      return response;\n    }, this.clientContext);\n  }\n\n  private async getFeedResponse(\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<ChangeFeedResponse<Array<T & Resource>>> {\n    if (!this.isPartitionSpecified) {\n      throw new Error(\n        \"Container is partitioned, but no partition key or partition key range id was specified.\"\n      );\n    }\n    const feedOptions: FeedOptions = { initialHeaders: {}, useIncrementalFeed: true };\n\n    if (typeof this.changeFeedOptions.maxItemCount === \"number\") {\n      feedOptions.maxItemCount = this.changeFeedOptions.maxItemCount;\n    }\n\n    if (this.changeFeedOptions.sessionToken) {\n      feedOptions.sessionToken = this.changeFeedOptions.sessionToken;\n    }\n\n    if (this.nextIfNoneMatch) {\n      feedOptions.accessCondition = {\n        type: Constants.HttpHeaders.IfNoneMatch,\n        condition: this.nextIfNoneMatch,\n      };\n    }\n\n    if (this.ifModifiedSince) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfModifiedSince] = this.ifModifiedSince;\n    }\n\n    const response: Response<Array<T & Resource>> = await (this.clientContext.queryFeed<T>({\n      path: this.resourceLink,\n      resourceType: ResourceType.item,\n      resourceId: this.resourceId,\n      resultFn: (result) => (result ? result.Documents : []),\n      query: undefined,\n      options: feedOptions,\n      partitionKey: this.partitionKey,\n      diagnosticNode: diagnosticNode,\n    }) as Promise<any>); // TODO: some funky issues with query feed. Probably need to change it up.\n\n    return new ChangeFeedResponse(\n      response.result,\n      response.result ? response.result.length : 0,\n      response.code,\n      response.headers,\n      getEmptyCosmosDiagnostics()\n    );\n  }\n}\n", null, "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const BytePrefix = {\n  Undefined: \"00\",\n  Null: \"01\",\n  False: \"02\",\n  True: \"03\",\n  MinNumber: \"04\",\n  Number: \"05\",\n  MaxNumber: \"06\",\n  MinString: \"07\",\n  String: \"08\",\n  MaxString: \"09\",\n  Int64: \"0a\",\n  Int32: \"0b\",\n  Int16: \"0c\",\n  Int8: \"0d\",\n  Uint64: \"0e\",\n  Uint32: \"0f\",\n  Uint16: \"10\",\n  Uint8: \"11\",\n  Binary: \"12\",\n  Guid: \"13\",\n  Float: \"14\",\n  Infinity: \"FF\",\n};\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport JSBI from \"jsbi\";\nimport { BytePrefix } from \"./prefix\";\n\nexport function writeNumberForBinaryEncodingJSBI(hash: number): Buffer {\n  let payload = encodeNumberAsUInt64JSBI(hash);\n  let outputStream = Buffer.from(BytePrefix.Number, \"hex\");\n  const firstChunk = JSBI.asUintN(64, JSBI.signedRightShift(payload, JSBI.BigInt(56)));\n\n  outputStream = Buffer.concat([outputStream, Buffer.from(firstChunk.toString(16), \"hex\")]);\n  payload = JSBI.asUintN(64, JSBI.leftShift(JSBI.BigInt(payload), JSBI.BigInt(0x8)));\n\n  let byteToWrite = JSBI.BigInt(0);\n  let firstIteration = false;\n  let shifted: JSBI;\n  let padded: string;\n\n  do {\n    if (!firstIteration) {\n      // we pad because after shifting because we will produce characters like \"f\" or similar,\n      // which cannot be encoded as hex in a buffer because they are invalid hex\n      // https://github.com/nodejs/node/issues/24491\n      padded = byteToWrite.toString(16).padStart(2, \"0\");\n      if (padded !== \"00\") {\n        outputStream = Buffer.concat([outputStream, Buffer.from(padded, \"hex\")]);\n      }\n    } else {\n      firstIteration = false;\n    }\n\n    shifted = JSBI.asUintN(64, JSBI.signedRightShift(payload, JSBI.BigInt(56)));\n    byteToWrite = JSBI.asUintN(64, JSBI.bitwiseOr(shifted, JSBI.BigInt(0x01)));\n    payload = JSBI.asUintN(64, JSBI.leftShift(payload, JSBI.BigInt(7)));\n  } while (JSBI.notEqual(payload, JSBI.BigInt(0)));\n\n  const lastChunk = JSBI.asUintN(64, JSBI.bitwiseAnd(byteToWrite, JSBI.BigInt(0xfe)));\n  // we pad because after shifting because we will produce characters like \"f\" or similar,\n  // which cannot be encoded as hex in a buffer because they are invalid hex\n  // https://github.com/nodejs/node/issues/24491\n  padded = lastChunk.toString(16).padStart(2, \"0\");\n  if (padded !== \"00\") {\n    outputStream = Buffer.concat([outputStream, Buffer.from(padded, \"hex\")]);\n  }\n\n  return outputStream;\n}\n\nfunction encodeNumberAsUInt64JSBI(value: number): JSBI {\n  const rawValueBits = getRawBitsJSBI(value);\n  const mask = JSBI.BigInt(0x8000000000000000);\n  const returned =\n    rawValueBits < mask\n      ? JSBI.bitwiseXor(rawValueBits, mask)\n      : JSBI.add(JSBI.bitwiseNot(rawValueBits), JSBI.BigInt(1));\n  return returned;\n}\n\nexport function doubleToByteArrayJSBI(double: number): Buffer {\n  const output: Buffer = Buffer.alloc(8);\n  const lng = getRawBitsJSBI(double);\n  for (let i = 0; i < 8; i++) {\n    output[i] = JSBI.toNumber(\n      JSBI.bitwiseAnd(\n        JSBI.signedRightShift(lng, JSBI.multiply(JSBI.BigInt(i), JSBI.BigInt(8))),\n        JSBI.BigInt(0xff)\n      )\n    );\n  }\n  return output;\n}\n\nfunction getRawBitsJSBI(value: number): JSBI {\n  const view = new DataView(new ArrayBuffer(8));\n  view.setFloat64(0, value);\n  return JSBI.BigInt(`0x${buf2hex(view.buffer)}`);\n}\n\nfunction buf2hex(buffer: ArrayBuffer): string {\n  return Array.prototype.map\n    .call(new Uint8Array(buffer), (x: number) => (\"00\" + x.toString(16)).slice(-2))\n    .join(\"\");\n}\n", "// +----------------------------------------------------------------------+\n// | murmurHash3js.js v3.0.1 // https://github.com/pid/murmurHash3js\n// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |\n// |----------------------------------------------------------------------|\n// | Copyright (c) 2012-2015 Karan Lyons                                       |\n// | https://github.com/karanlyons/murmurHash3.js/blob/c1778f75792abef7bdd74bc85d2d4e1a3d25cfe9/murmurHash3.js |\n// | Freely distributable under the MIT license.                          |\n// +----------------------------------------------------------------------+\n\n// PRIVATE FUNCTIONS\n// -----------------\n\nfunction _x86Multiply(m: number, n: number) {\n  //\n  // Given two 32bit ints, returns the two multiplied together as a\n  // 32bit int.\n  //\n\n  return (m & 0xffff) * n + ((((m >>> 16) * n) & 0xffff) << 16);\n}\n\nfunction _x86Rotl(m: number, n: number) {\n  //\n  // Given a 32bit int and an int representing a number of bit positions,\n  // returns the 32bit int rotated left by that number of positions.\n  //\n\n  return (m << n) | (m >>> (32 - n));\n}\n\nfunction _x86Fmix(h: number) {\n  //\n  // Given a block, returns murmurHash3's final x86 mix of that block.\n  //\n\n  h ^= h >>> 16;\n  h = _x86Multiply(h, 0x85ebca6b);\n  h ^= h >>> 13;\n  h = _x86Multiply(h, 0xc2b2ae35);\n  h ^= h >>> 16;\n\n  return h;\n}\n\nfunction _x64Add(m: number[], n: number[]) {\n  //\n  // Given two 64bit ints (as an array of two 32bit ints) returns the two\n  // added together as a 64bit int (as an array of two 32bit ints).\n  //\n\n  m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n  n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n  const o = [0, 0, 0, 0];\n\n  o[3] += m[3] + n[3];\n  o[2] += o[3] >>> 16;\n  o[3] &= 0xffff;\n\n  o[2] += m[2] + n[2];\n  o[1] += o[2] >>> 16;\n  o[2] &= 0xffff;\n\n  o[1] += m[1] + n[1];\n  o[0] += o[1] >>> 16;\n  o[1] &= 0xffff;\n\n  o[0] += m[0] + n[0];\n  o[0] &= 0xffff;\n\n  return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n}\n\nfunction _x64Multiply(m: number[], n: number[]) {\n  //\n  // Given two 64bit ints (as an array of two 32bit ints) returns the two\n  // multiplied together as a 64bit int (as an array of two 32bit ints).\n  //\n\n  m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n  n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n  const o = [0, 0, 0, 0];\n\n  o[3] += m[3] * n[3];\n  o[2] += o[3] >>> 16;\n  o[3] &= 0xffff;\n\n  o[2] += m[2] * n[3];\n  o[1] += o[2] >>> 16;\n  o[2] &= 0xffff;\n\n  o[2] += m[3] * n[2];\n  o[1] += o[2] >>> 16;\n  o[2] &= 0xffff;\n\n  o[1] += m[1] * n[3];\n  o[0] += o[1] >>> 16;\n  o[1] &= 0xffff;\n\n  o[1] += m[2] * n[2];\n  o[0] += o[1] >>> 16;\n  o[1] &= 0xffff;\n\n  o[1] += m[3] * n[1];\n  o[0] += o[1] >>> 16;\n  o[1] &= 0xffff;\n\n  o[0] += m[0] * n[3] + m[1] * n[2] + m[2] * n[1] + m[3] * n[0];\n  o[0] &= 0xffff;\n\n  return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n}\n\nfunction _x64Rotl(m: number[], n: number) {\n  //\n  // Given a 64bit int (as an array of two 32bit ints) and an int\n  // representing a number of bit positions, returns the 64bit int (as an\n  // array of two 32bit ints) rotated left by that number of positions.\n  //\n\n  n %= 64;\n\n  if (n === 32) {\n    return [m[1], m[0]];\n  } else if (n < 32) {\n    return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];\n  } else {\n    n -= 32;\n    return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];\n  }\n}\n\nfunction _x64LeftShift(m: number[], n: number) {\n  //\n  // Given a 64bit int (as an array of two 32bit ints) and an int\n  // representing a number of bit positions, returns the 64bit int (as an\n  // array of two 32bit ints) shifted left by that number of positions.\n  //\n\n  n %= 64;\n\n  if (n === 0) {\n    return m;\n  } else if (n < 32) {\n    return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];\n  } else {\n    return [m[1] << (n - 32), 0];\n  }\n}\n\nfunction _x64Xor(m: number[], n: number[]) {\n  //\n  // Given two 64bit ints (as an array of two 32bit ints) returns the two\n  // xored together as a 64bit int (as an array of two 32bit ints).\n  //\n\n  return [m[0] ^ n[0], m[1] ^ n[1]];\n}\n\nfunction _x64Fmix(h: number[]) {\n  //\n  // Given a block, returns murmurHash3's final x64 mix of that block.\n  // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the\n  // only place where we need to right shift 64bit ints.)\n  //\n\n  h = _x64Xor(h, [0, h[0] >>> 1]);\n  h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);\n  h = _x64Xor(h, [0, h[0] >>> 1]);\n  h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);\n  h = _x64Xor(h, [0, h[0] >>> 1]);\n\n  return h;\n}\n\n// PUBLIC FUNCTIONS\n// ----------------\n\nfunction x86Hash32(bytes: Buffer, seed?: number) {\n  //\n  // Given a string and an optional seed as an int, returns a 32 bit hash\n  // using the x86 flavor of MurmurHash3, as an unsigned int.\n  //\n  seed = seed || 0;\n\n  const remainder = bytes.length % 4;\n  const blocks = bytes.length - remainder;\n\n  let h1 = seed;\n\n  let k1 = 0;\n\n  const c1 = 0xcc9e2d51;\n  const c2 = 0x1b873593;\n  let j = 0;\n\n  for (let i = 0; i < blocks; i = i + 4) {\n    k1 = bytes[i] | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);\n\n    k1 = _x86Multiply(k1, c1);\n    k1 = _x86Rotl(k1, 15);\n    k1 = _x86Multiply(k1, c2);\n\n    h1 ^= k1;\n    h1 = _x86Rotl(h1, 13);\n    h1 = _x86Multiply(h1, 5) + 0xe6546b64;\n    j = i + 4;\n  }\n\n  k1 = 0;\n\n  switch (remainder) {\n    case 3:\n      k1 ^= bytes[j + 2] << 16;\n\n    case 2:\n      k1 ^= bytes[j + 1] << 8;\n\n    case 1:\n      k1 ^= bytes[j];\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n      h1 ^= k1;\n  }\n\n  h1 ^= bytes.length;\n  h1 = _x86Fmix(h1);\n\n  return h1 >>> 0;\n}\n\nfunction x86Hash128(bytes: Buffer, seed?: number) {\n  //\n  // Given a string and an optional seed as an int, returns a 128 bit\n  // hash using the x86 flavor of MurmurHash3, as an unsigned hex.\n  //\n\n  seed = seed || 0;\n  const remainder = bytes.length % 16;\n  const blocks = bytes.length - remainder;\n\n  let h1 = seed;\n  let h2 = seed;\n  let h3 = seed;\n  let h4 = seed;\n\n  let k1 = 0;\n  let k2 = 0;\n  let k3 = 0;\n  let k4 = 0;\n\n  const c1 = 0x239b961b;\n  const c2 = 0xab0e9789;\n  const c3 = 0x38b34ae5;\n  const c4 = 0xa1e38b93;\n  let j = 0;\n\n  for (let i = 0; i < blocks; i = i + 16) {\n    k1 = bytes[i] | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);\n    k2 = bytes[i + 4] | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24);\n    k3 = bytes[i + 8] | (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24);\n    k4 = bytes[i + 12] | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24);\n\n    k1 = _x86Multiply(k1, c1);\n    k1 = _x86Rotl(k1, 15);\n    k1 = _x86Multiply(k1, c2);\n    h1 ^= k1;\n\n    h1 = _x86Rotl(h1, 19);\n    h1 += h2;\n    h1 = _x86Multiply(h1, 5) + 0x561ccd1b;\n\n    k2 = _x86Multiply(k2, c2);\n    k2 = _x86Rotl(k2, 16);\n    k2 = _x86Multiply(k2, c3);\n    h2 ^= k2;\n\n    h2 = _x86Rotl(h2, 17);\n    h2 += h3;\n    h2 = _x86Multiply(h2, 5) + 0x0bcaa747;\n\n    k3 = _x86Multiply(k3, c3);\n    k3 = _x86Rotl(k3, 17);\n    k3 = _x86Multiply(k3, c4);\n    h3 ^= k3;\n\n    h3 = _x86Rotl(h3, 15);\n    h3 += h4;\n    h3 = _x86Multiply(h3, 5) + 0x96cd1c35;\n\n    k4 = _x86Multiply(k4, c4);\n    k4 = _x86Rotl(k4, 18);\n    k4 = _x86Multiply(k4, c1);\n    h4 ^= k4;\n\n    h4 = _x86Rotl(h4, 13);\n    h4 += h1;\n    h4 = _x86Multiply(h4, 5) + 0x32ac3b17;\n    j = i + 16;\n  }\n\n  k1 = 0;\n  k2 = 0;\n  k3 = 0;\n  k4 = 0;\n\n  switch (remainder) {\n    case 15:\n      k4 ^= bytes[j + 14] << 16;\n\n    case 14:\n      k4 ^= bytes[j + 13] << 8;\n\n    case 13:\n      k4 ^= bytes[j + 12];\n      k4 = _x86Multiply(k4, c4);\n      k4 = _x86Rotl(k4, 18);\n      k4 = _x86Multiply(k4, c1);\n      h4 ^= k4;\n\n    case 12:\n      k3 ^= bytes[j + 11] << 24;\n\n    case 11:\n      k3 ^= bytes[j + 10] << 16;\n\n    case 10:\n      k3 ^= bytes[j + 9] << 8;\n\n    case 9:\n      k3 ^= bytes[j + 8];\n      k3 = _x86Multiply(k3, c3);\n      k3 = _x86Rotl(k3, 17);\n      k3 = _x86Multiply(k3, c4);\n      h3 ^= k3;\n\n    case 8:\n      k2 ^= bytes[j + 7] << 24;\n\n    case 7:\n      k2 ^= bytes[j + 6] << 16;\n\n    case 6:\n      k2 ^= bytes[j + 5] << 8;\n\n    case 5:\n      k2 ^= bytes[j + 4];\n      k2 = _x86Multiply(k2, c2);\n      k2 = _x86Rotl(k2, 16);\n      k2 = _x86Multiply(k2, c3);\n      h2 ^= k2;\n\n    case 4:\n      k1 ^= bytes[j + 3] << 24;\n\n    case 3:\n      k1 ^= bytes[j + 2] << 16;\n\n    case 2:\n      k1 ^= bytes[j + 1] << 8;\n\n    case 1:\n      k1 ^= bytes[j];\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n      h1 ^= k1;\n  }\n\n  h1 ^= bytes.length;\n  h2 ^= bytes.length;\n  h3 ^= bytes.length;\n  h4 ^= bytes.length;\n\n  h1 += h2;\n  h1 += h3;\n  h1 += h4;\n  h2 += h1;\n  h3 += h1;\n  h4 += h1;\n\n  h1 = _x86Fmix(h1);\n  h2 = _x86Fmix(h2);\n  h3 = _x86Fmix(h3);\n  h4 = _x86Fmix(h4);\n\n  h1 += h2;\n  h1 += h3;\n  h1 += h4;\n  h2 += h1;\n  h3 += h1;\n  h4 += h1;\n\n  return (\n    (\"00000000\" + (h1 >>> 0).toString(16)).slice(-8) +\n    (\"00000000\" + (h2 >>> 0).toString(16)).slice(-8) +\n    (\"00000000\" + (h3 >>> 0).toString(16)).slice(-8) +\n    (\"00000000\" + (h4 >>> 0).toString(16)).slice(-8)\n  );\n}\n\nfunction x64Hash128(bytes: Buffer, seed?: number) {\n  //\n  // Given a string and an optional seed as an int, returns a 128 bit\n  // hash using the x64 flavor of MurmurHash3, as an unsigned hex.\n  //\n  seed = seed || 0;\n\n  const remainder = bytes.length % 16;\n  const blocks = bytes.length - remainder;\n\n  let h1 = [0, seed];\n  let h2 = [0, seed];\n\n  let k1 = [0, 0];\n  let k2 = [0, 0];\n\n  const c1 = [0x87c37b91, 0x114253d5];\n  const c2 = [0x4cf5ad43, 0x2745937f];\n  let j = 0;\n\n  for (let i = 0; i < blocks; i = i + 16) {\n    k1 = [\n      bytes[i + 4] | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24),\n      bytes[i] | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24),\n    ];\n    k2 = [\n      bytes[i + 12] | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24),\n      bytes[i + 8] | (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24),\n    ];\n\n    k1 = _x64Multiply(k1, c1);\n    k1 = _x64Rotl(k1, 31);\n    k1 = _x64Multiply(k1, c2);\n    h1 = _x64Xor(h1, k1);\n\n    h1 = _x64Rotl(h1, 27);\n    h1 = _x64Add(h1, h2);\n    h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);\n\n    k2 = _x64Multiply(k2, c2);\n    k2 = _x64Rotl(k2, 33);\n    k2 = _x64Multiply(k2, c1);\n    h2 = _x64Xor(h2, k2);\n\n    h2 = _x64Rotl(h2, 31);\n    h2 = _x64Add(h2, h1);\n    h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);\n    j = i + 16;\n  }\n\n  k1 = [0, 0];\n  k2 = [0, 0];\n\n  switch (remainder) {\n    case 15:\n      k2 = _x64Xor(k2, _x64LeftShift([0, bytes[j + 14]], 48));\n\n    case 14:\n      k2 = _x64Xor(k2, _x64LeftShift([0, bytes[j + 13]], 40));\n\n    case 13:\n      k2 = _x64Xor(k2, _x64LeftShift([0, bytes[j + 12]], 32));\n\n    case 12:\n      k2 = _x64Xor(k2, _x64LeftShift([0, bytes[j + 11]], 24));\n\n    case 11:\n      k2 = _x64Xor(k2, _x64LeftShift([0, bytes[j + 10]], 16));\n\n    case 10:\n      k2 = _x64Xor(k2, _x64LeftShift([0, bytes[j + 9]], 8));\n\n    case 9:\n      k2 = _x64Xor(k2, [0, bytes[j + 8]]);\n      k2 = _x64Multiply(k2, c2);\n      k2 = _x64Rotl(k2, 33);\n      k2 = _x64Multiply(k2, c1);\n      h2 = _x64Xor(h2, k2);\n\n    case 8:\n      k1 = _x64Xor(k1, _x64LeftShift([0, bytes[j + 7]], 56));\n\n    case 7:\n      k1 = _x64Xor(k1, _x64LeftShift([0, bytes[j + 6]], 48));\n\n    case 6:\n      k1 = _x64Xor(k1, _x64LeftShift([0, bytes[j + 5]], 40));\n\n    case 5:\n      k1 = _x64Xor(k1, _x64LeftShift([0, bytes[j + 4]], 32));\n\n    case 4:\n      k1 = _x64Xor(k1, _x64LeftShift([0, bytes[j + 3]], 24));\n\n    case 3:\n      k1 = _x64Xor(k1, _x64LeftShift([0, bytes[j + 2]], 16));\n\n    case 2:\n      k1 = _x64Xor(k1, _x64LeftShift([0, bytes[j + 1]], 8));\n\n    case 1:\n      k1 = _x64Xor(k1, [0, bytes[j]]);\n      k1 = _x64Multiply(k1, c1);\n      k1 = _x64Rotl(k1, 31);\n      k1 = _x64Multiply(k1, c2);\n      h1 = _x64Xor(h1, k1);\n  }\n\n  h1 = _x64Xor(h1, [0, bytes.length]);\n  h2 = _x64Xor(h2, [0, bytes.length]);\n\n  h1 = _x64Add(h1, h2);\n  h2 = _x64Add(h2, h1);\n\n  h1 = _x64Fmix(h1);\n  h2 = _x64Fmix(h2);\n\n  h1 = _x64Add(h1, h2);\n  h2 = _x64Add(h2, h1);\n\n  // Here we reverse h1 and h2 in Cosmos\n  // This is an implementation detail and not part of the public spec\n  const h1Buff = Buffer.from(\n    (\"00000000\" + (h1[0] >>> 0).toString(16)).slice(-8) +\n      (\"00000000\" + (h1[1] >>> 0).toString(16)).slice(-8),\n    \"hex\"\n  );\n  const h1Reversed = reverse(h1Buff).toString(\"hex\");\n  const h2Buff = Buffer.from(\n    (\"00000000\" + (h2[0] >>> 0).toString(16)).slice(-8) +\n      (\"00000000\" + (h2[1] >>> 0).toString(16)).slice(-8),\n    \"hex\"\n  );\n  const h2Reversed = reverse(h2Buff).toString(\"hex\");\n  return h1Reversed + h2Reversed;\n}\n\nexport function reverse(buff: Buffer) {\n  const buffer = Buffer.allocUnsafe(buff.length);\n\n  for (let i = 0, j = buff.length - 1; i <= j; ++i, --j) {\n    buffer[i] = buff[j];\n    buffer[j] = buff[i];\n  }\n  return buffer;\n}\n\nexport default {\n  version: \"3.0.0\",\n  x86: {\n    hash32: x86Hash32,\n    hash128: x86Hash128,\n  },\n  x64: {\n    hash128: x64Hash128,\n  },\n  inputValidation: true,\n};\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PrimitivePartitionKeyValue } from \"../../documents\";\nimport { doubleToByteArrayJSBI } from \"./encoding/number\";\nimport { BytePrefix } from \"./encoding/prefix\";\nimport MurmurHash from \"./murmurHash\";\n\nexport function hashV2PartitionKey(partitionKey: PrimitivePartitionKeyValue[]): string {\n  const toHash: Buffer = Buffer.concat(partitionKey.map(prefixKeyByType));\n  const hash = MurmurHash.x64.hash128(toHash);\n  const reverseBuff: Buffer = reverse(Buffer.from(hash, \"hex\"));\n  reverseBuff[0] &= 0x3f;\n  return reverseBuff.toString(\"hex\").toUpperCase();\n}\n\nfunction prefixKeyByType(key: PrimitivePartitionKeyValue): Buffer {\n  let bytes: Buffer;\n  switch (typeof key) {\n    case \"string\": {\n      bytes = Buffer.concat([\n        Buffer.from(BytePrefix.String, \"hex\"),\n        Buffer.from(key),\n        Buffer.from(BytePrefix.Infinity, \"hex\"),\n      ]);\n      return bytes;\n    }\n    case \"number\": {\n      const numberBytes = doubleToByteArrayJSBI(key);\n      bytes = Buffer.concat([Buffer.from(BytePrefix.Number, \"hex\"), numberBytes]);\n      return bytes;\n    }\n    case \"boolean\": {\n      const prefix = key ? BytePrefix.True : BytePrefix.False;\n      return Buffer.from(prefix, \"hex\");\n    }\n    case \"object\": {\n      if (key === null) {\n        return Buffer.from(BytePrefix.Null, \"hex\");\n      }\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    }\n    case \"undefined\": {\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    }\n    default:\n      throw new Error(`Unexpected type: ${typeof key}`);\n  }\n}\n\nexport function reverse(buff: Buffer): Buffer {\n  const buffer = Buffer.allocUnsafe(buff.length);\n\n  for (let i = 0, j = buff.length - 1; i <= j; ++i, --j) {\n    buffer[i] = buff[j];\n    buffer[j] = buff[i];\n  }\n  return buffer;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { PrimitivePartitionKeyValue } from \"../../documents\";\nimport { hashV2PartitionKey } from \"./v2\";\n\n/**\n * Generate Hash for a `Multi Hash` type partition.\n * @param partitionKey - to be hashed.\n * @returns\n */\nexport function hashMultiHashPartitionKey(partitionKey: PrimitivePartitionKeyValue[]): string {\n  return partitionKey.map((keys) => hashV2PartitionKey([keys])).join(\"\");\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { BytePrefix } from \"./prefix\";\n\nexport function writeStringForBinaryEncoding(payload: string): Buffer {\n  let outputStream = Buffer.from(BytePrefix.String, \"hex\");\n  const MAX_STRING_BYTES_TO_APPEND = 100;\n  const byteArray = [...Buffer.from(payload)];\n\n  const isShortString = payload.length <= MAX_STRING_BYTES_TO_APPEND;\n\n  for (\n    let index = 0;\n    index < (isShortString ? byteArray.length : MAX_STRING_BYTES_TO_APPEND + 1);\n    index++\n  ) {\n    let charByte = byteArray[index];\n    if (charByte < 0xff) {\n      charByte++;\n    }\n    outputStream = Buffer.concat([outputStream, Buffer.from(charByte.toString(16), \"hex\")]);\n  }\n\n  if (isShortString) {\n    outputStream = Buffer.concat([outputStream, Buffer.from(BytePrefix.Undefined, \"hex\")]);\n  }\n  return outputStream;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { doubleToByteArrayJSBI, writeNumberForBinaryEncodingJSBI } from \"./encoding/number\";\nimport { writeStringForBinaryEncoding } from \"./encoding/string\";\nimport { BytePrefix } from \"./encoding/prefix\";\nimport MurmurHash from \"./murmurHash\";\nimport { PrimitivePartitionKeyValue } from \"../../documents\";\n\nconst MAX_STRING_CHARS = 100;\n\nexport function hashV1PartitionKey(partitionKey: PrimitivePartitionKeyValue[]): string {\n  const key = partitionKey[0];\n  const toHash = prefixKeyByType(key);\n  const hash = MurmurHash.x86.hash32(toHash);\n  const encodedJSBI = writeNumberForBinaryEncodingJSBI(hash);\n  const encodedValue = encodeByType(key);\n  const finalHash = Buffer.concat([encodedJSBI, encodedValue]).toString(\"hex\").toUpperCase();\n  return finalHash;\n}\n\nfunction prefixKeyByType(key: PrimitivePartitionKeyValue): Buffer {\n  let bytes: Buffer;\n  switch (typeof key) {\n    case \"string\": {\n      const truncated = key.substr(0, MAX_STRING_CHARS);\n      bytes = Buffer.concat([\n        Buffer.from(BytePrefix.String, \"hex\"),\n        Buffer.from(truncated),\n        Buffer.from(BytePrefix.Undefined, \"hex\"),\n      ]);\n      return bytes;\n    }\n    case \"number\": {\n      const numberBytes = doubleToByteArrayJSBI(key);\n      bytes = Buffer.concat([Buffer.from(BytePrefix.Number, \"hex\"), numberBytes]);\n      return bytes;\n    }\n    case \"boolean\": {\n      const prefix = key ? BytePrefix.True : BytePrefix.False;\n      return Buffer.from(prefix, \"hex\");\n    }\n    case \"object\": {\n      if (key === null) {\n        return Buffer.from(BytePrefix.Null, \"hex\");\n      }\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    }\n    case \"undefined\": {\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    }\n    default:\n      throw new Error(`Unexpected type: ${typeof key}`);\n  }\n}\n\nfunction encodeByType(key: PrimitivePartitionKeyValue): Buffer {\n  switch (typeof key) {\n    case \"string\": {\n      const truncated = key.substr(0, MAX_STRING_CHARS);\n      return writeStringForBinaryEncoding(truncated);\n    }\n    case \"number\": {\n      const encodedJSBI = writeNumberForBinaryEncodingJSBI(key);\n      return encodedJSBI;\n    }\n    case \"boolean\": {\n      const prefix = key ? BytePrefix.True : BytePrefix.False;\n      return Buffer.from(prefix, \"hex\");\n    }\n    case \"object\":\n      if (key === null) {\n        return Buffer.from(BytePrefix.Null, \"hex\");\n      }\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    case \"undefined\":\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    default:\n      throw new Error(`Unexpected type: ${typeof key}`);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  PartitionKeyDefinition,\n  PartitionKeyDefinitionVersion,\n  PartitionKeyKind,\n  PrimitivePartitionKeyValue,\n} from \"../../documents\";\nimport { hashMultiHashPartitionKey } from \"./multiHash\";\nimport { hashV1PartitionKey } from \"./v1\";\nimport { hashV2PartitionKey } from \"./v2\";\n\n/**\n * Generate hash of a PartitonKey based on it PartitionKeyDefinition.\n * @param partitionKey - to be hashed.\n * @param partitionDefinition - container's partitionKey definition\n * @returns\n */\nexport function hashPartitionKey(\n  partitionKey: PrimitivePartitionKeyValue[],\n  partitionDefinition: PartitionKeyDefinition\n): string {\n  const kind: PartitionKeyKind = partitionDefinition?.kind || PartitionKeyKind.Hash; // Default value.\n  const isV2 =\n    partitionDefinition &&\n    partitionDefinition.version &&\n    partitionDefinition.version === PartitionKeyDefinitionVersion.V2;\n  switch (kind) {\n    case PartitionKeyKind.Hash:\n      return isV2 ? hashV2PartitionKey(partitionKey) : hashV1PartitionKey(partitionKey);\n    case PartitionKeyKind.MultiHash:\n      return hashMultiHashPartitionKey(partitionKey);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * @internal\n * FeedRange for which change feed is being requested.\n */\nexport class ChangeFeedRange {\n  /**\n   * Min value for the range.\n   */\n  public minInclusive: string;\n  /**\n   * Max value for the range.\n   */\n  public maxExclusive: string;\n  /**\n   * Continuation token from where to start reading changes.\n   */\n  public continuationToken?: string;\n  /**\n   * Min epk value to begin reading changes from in case changefeed of entire partition is not requested.\n   */\n  public epkMinHeader?: string;\n  /**\n   * Max epk value to begin reading changes from in case changefeed of entire partition is not requested.\n   */\n  public epkMaxHeader?: string;\n\n  constructor(\n    minInclusive: string,\n    maxExclusive: string,\n    continuationToken?: string,\n    epkMinHeader?: string,\n    epkMaxHeader?: string\n  ) {\n    this.minInclusive = minInclusive;\n    this.maxExclusive = maxExclusive;\n    this.continuationToken = continuationToken;\n    this.epkMinHeader = epkMinHeader;\n    this.epkMaxHeader = epkMaxHeader;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport { Constants } from \"../../common\";\nimport { CosmosHeaders } from \"../../queryExecutionContext\";\n\n/**\n * A single response page from the Azure Cosmos DB Change Feed\n */\nexport class ChangeFeedIteratorResponse<T> {\n  /**\n   * @internal\n   */\n  constructor(\n    /**\n     * Gets the items returned in the response from Azure Cosmos DB\n     */\n    public readonly result: T,\n    /**\n     * Gets the number of items returned in the response from Azure Cosmos DB\n     */\n    public readonly count: number,\n    /**\n     * Gets the status code of the response from Azure Cosmos DB\n     */\n    public readonly statusCode: number,\n    /**\n     * Headers related to cosmos DB and change feed.\n     */\n    headers: CosmosHeaders,\n    /**\n     * Cosmos Diagnostic Object.\n     */\n    public readonly diagnostics: CosmosDiagnostics,\n    /**\n     * Gets the subStatusCodes of the response from Azure Cosmos DB. Useful in partition split or partition gone.\n     */\n    public readonly subStatusCode?: number\n  ) {\n    this.headers = headers;\n  }\n\n  /**\n   * Gets the request charge for this request from the Azure Cosmos DB service.\n   */\n  public get requestCharge(): number {\n    const rus = this.headers[Constants.HttpHeaders.RequestCharge];\n    return rus ? parseInt(rus, 10) : null;\n  }\n\n  /**\n   * Gets the activity ID for the request from the Azure Cosmos DB service.\n   */\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n\n  /**\n   * Gets the continuation token to be used for continuing enumeration of the Azure Cosmos DB service.\n   */\n  public get continuationToken(): string {\n    return this.headers[Constants.HttpHeaders.ContinuationToken];\n  }\n  /**\n   * Gets the session token for use in session consistency reads from the Azure Cosmos DB service.\n   */\n  public get sessionToken(): string {\n    return this.headers[Constants.HttpHeaders.SessionToken];\n  }\n  /**\n   * Response headers of the response from Azure Cosmos DB\n   */\n  public headers: CosmosHeaders;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ChangeFeedRange } from \"./ChangeFeedRange\";\n/**\n * @hidden\n * A queue for iterating over specified Epk ranges and fetch change feed for the given epk ranges.\n */\nexport class FeedRangeQueue<T> {\n  private elements: ChangeFeedRange[];\n\n  constructor() {\n    this.elements = [];\n  }\n\n  public modifyFirstElement(newItem: ChangeFeedRange): void {\n    if (!this.isEmpty()) {\n      this.elements[0] = newItem;\n    }\n  }\n\n  public enqueue(item: ChangeFeedRange): void {\n    this.elements.push(item);\n  }\n\n  public dequeue(): ChangeFeedRange {\n    return this.elements.shift();\n  }\n\n  public peek(): T | ChangeFeedRange {\n    return !this.isEmpty() ? this.elements[0] : undefined;\n  }\n\n  public isEmpty(): boolean {\n    return this.elements.length === 0;\n  }\n\n  public moveFirstElementToTheEnd(): void {\n    if (!this.isEmpty()) {\n      this.elements.push(this.dequeue());\n    }\n  }\n  /**\n   * Returns a snapshot of the queue as an array to be used as Continuation token.\n   */\n  public returnSnapshot(): ChangeFeedRange[] {\n    const allFeedRanges: ChangeFeedRange[] = [];\n    this.elements.map((element) => {\n      const minInclusive = element.epkMinHeader ? element.epkMinHeader : element.minInclusive;\n      const maxExclusive = element.epkMaxHeader ? element.epkMaxHeader : element.maxExclusive;\n      const feedRangeElement = new ChangeFeedRange(\n        minInclusive,\n        maxExclusive,\n        element.continuationToken\n      );\n      allFeedRanges.push(feedRangeElement);\n    });\n    return allFeedRanges;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ChangeFeedRange } from \"./ChangeFeedRange\";\n/**\n * Continuation token for change feed of entire container, or a specific Epk Range.\n * @internal\n */\nexport class CompositeContinuationToken {\n  /**\n   * rid of the container for which the continuation token is issued.\n   */\n  public readonly rid: string;\n  /**\n   * List of Epk Ranges part of the continuation token\n   */\n  public readonly Continuation: ChangeFeedRange[];\n\n  constructor(rid: string, Continuation: ChangeFeedRange[]) {\n    this.rid = rid;\n    this.Continuation = Continuation;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { PartitionKey } from \"../../documents\";\nimport { FeedRange } from \"./FeedRange\";\n\n/**\n * @hidden\n * Class which specifies the ChangeFeedIterator to start reading changes from beginning of time.\n */\nexport class ChangeFeedStartFromBeginning {\n  private cfResource?: PartitionKey | FeedRange;\n\n  constructor(cfResource?: PartitionKey | FeedRange) {\n    this.cfResource = cfResource;\n  }\n\n  public getCfResource(): PartitionKey | FeedRange | undefined {\n    return this.cfResource;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PartitionKey } from \"../../documents\";\nimport { FeedRange } from \"./FeedRange\";\n/**\n * @hidden\n * Class which specifies the ChangeFeedIterator to start reading changes from this moment in time.\n */\nexport class ChangeFeedStartFromNow {\n  public cfResource?: PartitionKey | FeedRange;\n\n  constructor(cfResource?: PartitionKey | FeedRange) {\n    this.cfResource = cfResource;\n  }\n\n  public getCfResource(): PartitionKey | FeedRange | undefined {\n    return this.cfResource;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { PartitionKey } from \"../../documents\";\nimport { FeedRange } from \"./FeedRange\";\n/**\n * @hidden\n * Class which specifies the ChangeFeedIterator to start reading changes from a particular point of time.\n */\nexport class ChangeFeedStartFromTime {\n  private cfResource?: PartitionKey | FeedRange;\n\n  private startTime: Date;\n\n  constructor(startTime: Date, cfResource?: PartitionKey | FeedRange) {\n    this.startTime = startTime;\n    this.cfResource = cfResource;\n  }\n\n  public getCfResource(): PartitionKey | FeedRange | undefined {\n    return this.cfResource;\n  }\n\n  public getStartTime(): Date {\n    return this.startTime;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ErrorResponse } from \"../../request\";\n\n/**\n * Specifies a feed range for the changefeed.\n */\nexport abstract class FeedRange {\n  /**\n   * Min value for the feed range.\n   */\n  readonly minInclusive: string;\n  /**\n   * Max value for the feed range.\n   */\n  readonly maxExclusive: string;\n  /**\n   * @internal\n   */\n  protected constructor(minInclusive: string, maxExclusive: string) {\n    // only way to explictly block users from creating FeedRange directly in JS\n    if (new.target === FeedRange) {\n      throw new ErrorResponse(\"Cannot instantiate abstract class FeedRange\");\n    }\n\n    this.minInclusive = minInclusive;\n    this.maxExclusive = maxExclusive;\n  }\n}\n\n/**\n * @hidden\n * Specifies a feed range for the changefeed.\n */\nexport class FeedRangeInternal extends FeedRange {\n  /* eslint-disable @typescript-eslint/no-useless-constructor */\n  constructor(minInclusive: string, maxExclusive: string) {\n    super(minInclusive, maxExclusive);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ChangeFeedIteratorOptions } from \"./ChangeFeedIteratorOptions\";\nimport { ErrorResponse } from \"../../request\";\nimport { PartitionKeyRange } from \"../Container\";\nimport { InternalChangeFeedIteratorOptions } from \"./InternalChangeFeedOptions\";\nimport { isPrimitivePartitionKeyValue } from \"../../utils/typeChecks\";\nimport { ChangeFeedStartFrom } from \"./ChangeFeedStartFrom\";\nimport { ChangeFeedStartFromBeginning } from \"./ChangeFeedStartFromBeginning\";\nimport { ChangeFeedStartFromNow } from \"./ChangeFeedStartFromNow\";\nimport { Constants } from \"../../common\";\nimport { ChangeFeedStartFromTime } from \"./ChangeFeedStartFromTime\";\nimport { QueryRange } from \"../../routing\";\nimport { FeedRangeInternal } from \"./FeedRange\";\n\n/**\n * @hidden\n * Validates the change feed options passed by the user\n */\nexport function validateChangeFeedIteratorOptions(options: ChangeFeedIteratorOptions): void {\n  if (!isChangeFeedIteratorOptions(options)) {\n    throw new ErrorResponse(\"Invalid Changefeed Iterator Options.\");\n  }\n  if (options?.maxItemCount && typeof options?.maxItemCount !== \"number\") {\n    throw new ErrorResponse(\"maxItemCount must be number\");\n  }\n  if (options?.maxItemCount !== undefined && options?.maxItemCount < 1) {\n    throw new ErrorResponse(\"maxItemCount must be a positive number\");\n  }\n}\n\nfunction isChangeFeedIteratorOptions(options: unknown): options is ChangeFeedIteratorOptions {\n  if (typeof options !== \"object\") {\n    return false;\n  }\n  if (Object.keys(options).length === 0 && JSON.stringify(options) === \"{}\") {\n    return true;\n  }\n  return options && !(isPrimitivePartitionKeyValue(options) || Array.isArray(options));\n}\n\n/**\n * @hidden\n * Checks if pkRange entirely covers the given overLapping range or there is only partial overlap.\n *\n * If no complete overlap, exact range which overlaps is retured which is used to set minEpk and maxEpk headers while quering change feed.\n */\nexport async function extractOverlappingRanges(\n  epkRange: QueryRange,\n  overLappingRange: PartitionKeyRange\n): Promise<[string, string]> {\n  if (\n    overLappingRange.minInclusive >= epkRange.min &&\n    overLappingRange.maxExclusive <= epkRange.max\n  ) {\n    return [undefined, undefined];\n  } else if (\n    overLappingRange.minInclusive <= epkRange.min &&\n    overLappingRange.maxExclusive >= epkRange.max\n  ) {\n    return [epkRange.min, epkRange.max];\n  }\n  // Right Side of overlapping range is covered\n  else if (\n    overLappingRange.minInclusive <= epkRange.min &&\n    overLappingRange.maxExclusive <= epkRange.max &&\n    overLappingRange.maxExclusive >= epkRange.min\n  ) {\n    return [epkRange.min, overLappingRange.maxExclusive];\n  }\n  // Left Side of overlapping range is covered\n  else {\n    return [overLappingRange.minInclusive, epkRange.max];\n  }\n}\n\n/**\n * @hidden\n * Checks if the object is a valid EpkRange\n */\nexport function isEpkRange(obj: unknown): boolean {\n  return (\n    obj instanceof FeedRangeInternal &&\n    typeof obj.minInclusive === \"string\" &&\n    typeof obj.maxExclusive === \"string\" &&\n    obj.minInclusive >=\n      Constants.EffectivePartitionKeyConstants.MinimumInclusiveEffectivePartitionKey &&\n    obj.maxExclusive <=\n      Constants.EffectivePartitionKeyConstants.MaximumExclusiveEffectivePartitionKey &&\n    obj.maxExclusive > obj.minInclusive\n  );\n}\n\n/**\n * @hidden\n */\nexport function buildInternalChangeFeedOptions(\n  options: ChangeFeedIteratorOptions,\n  continuationToken?: string,\n  startTime?: Date\n): InternalChangeFeedIteratorOptions {\n  const internalCfOptions = {} as InternalChangeFeedIteratorOptions;\n  internalCfOptions.maxItemCount = options?.maxItemCount;\n  internalCfOptions.sessionToken = options?.sessionToken;\n  internalCfOptions.continuationToken = continuationToken;\n\n  // Default option of changefeed is to start from now.\n  internalCfOptions.startTime = startTime;\n  return internalCfOptions;\n}\n/**\n * @hidden\n */\nexport function fetchStartTime(changeFeedStartFrom: ChangeFeedStartFrom): Date | undefined {\n  if (changeFeedStartFrom instanceof ChangeFeedStartFromBeginning) {\n    return undefined;\n  } else if (changeFeedStartFrom instanceof ChangeFeedStartFromNow) {\n    return new Date();\n  } else if (changeFeedStartFrom instanceof ChangeFeedStartFromTime) {\n    return changeFeedStartFrom.getStartTime();\n  }\n}\n\n/**\n * @hidden\n */\nexport function isNullOrEmpty(text: string | null | undefined): boolean {\n  return text === null || text === undefined || text.trim() === \"\";\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ChangeFeedRange } from \"./ChangeFeedRange\";\nimport { ChangeFeedIteratorResponse } from \"./ChangeFeedIteratorResponse\";\nimport { PartitionKeyRangeCache, QueryRange } from \"../../routing\";\nimport { FeedRangeQueue } from \"./FeedRangeQueue\";\nimport { ClientContext } from \"../../ClientContext\";\nimport { Container, Resource } from \"../../client\";\nimport { Constants, SubStatusCodes, StatusCodes, ResourceType } from \"../../common\";\nimport { Response, FeedOptions, ErrorResponse } from \"../../request\";\nimport { CompositeContinuationToken } from \"./CompositeContinuationToken\";\nimport { ChangeFeedPullModelIterator } from \"./ChangeFeedPullModelIterator\";\nimport { extractOverlappingRanges } from \"./changeFeedUtils\";\nimport { InternalChangeFeedIteratorOptions } from \"./InternalChangeFeedOptions\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n/**\n * @hidden\n * Provides iterator for change feed for entire container or an epk range.\n *\n * Use `Items.getChangeFeedIterator()` to get an instance of the iterator.\n */\nexport class ChangeFeedForEpkRange<T> implements ChangeFeedPullModelIterator<T> {\n  private continuationToken?: CompositeContinuationToken;\n  private queue: FeedRangeQueue<ChangeFeedRange>;\n  private startTime: string;\n  private isInstantiated: boolean;\n  private rId: string;\n  /**\n   * @internal\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private container: Container,\n    private partitionKeyRangeCache: PartitionKeyRangeCache,\n    private resourceId: string,\n    private resourceLink: string,\n    private url: string,\n    private changeFeedOptions: InternalChangeFeedIteratorOptions,\n    private epkRange: QueryRange\n  ) {\n    this.queue = new FeedRangeQueue<ChangeFeedRange>();\n    this.continuationToken = changeFeedOptions.continuationToken\n      ? JSON.parse(changeFeedOptions.continuationToken)\n      : undefined;\n    this.startTime = changeFeedOptions.startTime\n      ? changeFeedOptions.startTime.toUTCString()\n      : undefined;\n    this.isInstantiated = false;\n  }\n\n  private async setIteratorRid(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    const { resource } = await this.container.readInternal(diagnosticNode);\n    this.rId = resource._rid;\n  }\n\n  private continuationTokenRidMatchContainerRid(): boolean {\n    if (this.continuationToken.rid !== this.rId) {\n      return false;\n    }\n    return true;\n  }\n\n  private async fillChangeFeedQueue(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    if (this.continuationToken) {\n      // fill the queue with feed ranges in continuation token.\n      await this.fetchContinuationTokenFeedRanges(diagnosticNode);\n    } else {\n      // fill the queue with feed ranges overlapping the given epk range.\n      await this.fetchOverLappingFeedRanges(diagnosticNode);\n    }\n    this.isInstantiated = true;\n  }\n\n  /**\n   * Fill the queue with the feed ranges overlapping with the given epk range.\n   */\n  private async fetchOverLappingFeedRanges(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    try {\n      const overLappingRanges = await this.partitionKeyRangeCache.getOverlappingRanges(\n        this.url,\n        this.epkRange,\n        diagnosticNode\n      );\n      for (const overLappingRange of overLappingRanges) {\n        const [epkMinHeader, epkMaxHeader] = await extractOverlappingRanges(\n          this.epkRange,\n          overLappingRange\n        );\n        const feedRange: ChangeFeedRange = new ChangeFeedRange(\n          overLappingRange.minInclusive,\n          overLappingRange.maxExclusive,\n          \"\",\n          epkMinHeader,\n          epkMaxHeader\n        );\n        this.queue.enqueue(feedRange);\n      }\n    } catch (err) {\n      throw new ErrorResponse(err.message);\n    }\n  }\n  /**\n   * Fill the queue with feed ranges from continuation token\n   */\n  private async fetchContinuationTokenFeedRanges(\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<void> {\n    const contToken = this.continuationToken;\n    if (!this.continuationTokenRidMatchContainerRid()) {\n      throw new ErrorResponse(\"The continuation token is not for the current container definition\");\n    } else {\n      for (const cToken of contToken.Continuation) {\n        const queryRange = new QueryRange(cToken.minInclusive, cToken.maxExclusive, true, false);\n        try {\n          const overLappingRanges = await this.partitionKeyRangeCache.getOverlappingRanges(\n            this.url,\n            queryRange,\n            diagnosticNode\n          );\n          for (const overLappingRange of overLappingRanges) {\n            // check if the epk range present in continuation token entirely covers the overlapping range.\n            // If yes, minInclusive and maxExclusive of the overlapping range will be set.\n            // If no, i.e. there is only partial overlap, epkMinHeader and epkMaxHeader are set as min and max of overlap.\n            // This will be used when we make a call to fetch change feed.\n            const [epkMinHeader, epkMaxHeader] = await extractOverlappingRanges(\n              queryRange,\n              overLappingRange\n            );\n            const feedRange: ChangeFeedRange = new ChangeFeedRange(\n              overLappingRange.minInclusive,\n              overLappingRange.maxExclusive,\n              cToken.continuationToken,\n              epkMinHeader,\n              epkMaxHeader\n            );\n            this.queue.enqueue(feedRange);\n          }\n        } catch (err) {\n          throw new ErrorResponse(err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * Change feed is an infinite feed. hasMoreResults is always true.\n   */\n  get hasMoreResults(): boolean {\n    return true;\n  }\n\n  /**\n   * Gets an async iterator which will yield change feed results.\n   */\n  public async *getAsyncIterator(): AsyncIterable<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    do {\n      const result = await this.readNext();\n      yield result;\n    } while (this.hasMoreResults);\n  }\n\n  /**\n   * Gets an async iterator which will yield pages of results from Azure Cosmos DB.\n   *\n   * Keeps iterating over the feedranges and checks if any feed range has new result. Keeps note of the last feed range which returned non 304 result.\n   *\n   * When same feed range is reached and no new changes are found, a 304 (not Modified) is returned to the end user. Then starts process all over again.\n   */\n  public async readNext(): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      // validate if the internal queue is filled up with feed ranges.\n      if (!this.isInstantiated) {\n        await this.setIteratorRid(diagnosticNode);\n        await this.fillChangeFeedQueue(diagnosticNode);\n      }\n\n      // stores the last feedRange for which statusCode is not 304 i.e. there were new changes in that feed range.\n      let firstNotModifiedFeedRange: [string, string] = undefined;\n      let result: ChangeFeedIteratorResponse<Array<T & Resource>>;\n      do {\n        const [processedFeedRange, response] = await this.fetchNext(diagnosticNode);\n        result = response;\n        if (result !== undefined) {\n          {\n            if (firstNotModifiedFeedRange === undefined) {\n              firstNotModifiedFeedRange = processedFeedRange;\n            }\n            // move current feed range to end of queue to fetch result of next feed range.\n            // This is done to fetch changes in breadth first manner and avoid starvation.\n            this.queue.moveFirstElementToTheEnd();\n            // check if there are new results for the given feed range.\n            if (result.statusCode === StatusCodes.Ok) {\n              result.headers[Constants.HttpHeaders.ContinuationToken] =\n                this.generateContinuationToken();\n              return result;\n            }\n          }\n        }\n      } while (!this.checkedAllFeedRanges(firstNotModifiedFeedRange));\n      // set the continuation token after processing.\n      result.headers[Constants.HttpHeaders.ContinuationToken] = this.generateContinuationToken();\n      return result;\n    }, this.clientContext);\n  }\n\n  private generateContinuationToken = (): string => {\n    return JSON.stringify(new CompositeContinuationToken(this.rId, this.queue.returnSnapshot()));\n  };\n\n  /**\n   * Read feed and retrieves the next page of results in Azure Cosmos DB.\n   */\n  private async fetchNext(\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<[[string, string], ChangeFeedIteratorResponse<Array<T & Resource>>]> {\n    const feedRange = this.queue.peek();\n    if (feedRange) {\n      // fetch results for feed range at the beginning of the queue.\n      const result = await this.getFeedResponse(feedRange, diagnosticNode);\n\n      // check if results need to be fetched again depending on status code returned.\n      // Eg. in case of paritionSplit, results need to be fetched for the child partitions.\n      const shouldRetry: boolean = await this.shouldRetryOnFailure(\n        feedRange,\n        result,\n        diagnosticNode\n      );\n\n      if (shouldRetry) {\n        this.queue.dequeue();\n        return this.fetchNext(diagnosticNode);\n      } else {\n        // update the continuation value for the current feed range.\n        const continuationValueForFeedRange = result.headers[Constants.HttpHeaders.ETag];\n        const newFeedRange = this.queue.peek();\n        newFeedRange.continuationToken = continuationValueForFeedRange;\n\n        return [[newFeedRange.minInclusive, newFeedRange.maxExclusive], result];\n      }\n    } else {\n      return [[undefined, undefined], undefined];\n    }\n  }\n\n  private checkedAllFeedRanges(firstNotModifiedFeedRange: [string, string]): boolean {\n    if (firstNotModifiedFeedRange === undefined) {\n      return false;\n    }\n    const feedRangeQueueFirstElement = this.queue.peek();\n    return (\n      firstNotModifiedFeedRange[0] === feedRangeQueueFirstElement?.minInclusive &&\n      firstNotModifiedFeedRange[1] === feedRangeQueueFirstElement?.maxExclusive\n    );\n  }\n\n  /**\n   * Checks whether the current EpkRange is split into multiple ranges or not.\n   *\n   * If yes, it force refreshes the partitionKeyRange cache and enqueue children epk ranges.\n   */\n  private async shouldRetryOnFailure(\n    feedRange: ChangeFeedRange,\n    response: ChangeFeedIteratorResponse<Array<T & Resource>>,\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<boolean> {\n    if (response.statusCode === StatusCodes.Ok || response.statusCode === StatusCodes.NotModified) {\n      return false;\n    }\n\n    const partitionSplit =\n      response.statusCode === StatusCodes.Gone &&\n      (response.subStatusCode === SubStatusCodes.PartitionKeyRangeGone ||\n        response.subStatusCode === SubStatusCodes.CompletingSplit);\n\n    if (partitionSplit) {\n      const queryRange = new QueryRange(\n        feedRange.minInclusive,\n        feedRange.maxExclusive,\n        true,\n        false\n      );\n      const resolvedRanges = await this.partitionKeyRangeCache.getOverlappingRanges(\n        this.url,\n        queryRange,\n        diagnosticNode,\n        true\n      );\n      if (resolvedRanges.length < 1) {\n        throw new ErrorResponse(\"Partition split/merge detected but no overlapping ranges found.\");\n      }\n      // This covers both cases of merge and split.\n      // resolvedRanges.length > 1 in case of split.\n      // resolvedRanges.length === 1 in case of merge. EpkRange headers will be added in this case.\n      if (resolvedRanges.length >= 1) {\n        await this.handleSplit(false, resolvedRanges, queryRange, feedRange.continuationToken);\n      }\n      return true;\n    }\n    return false;\n  }\n  /*\n   * Enqueues all the children feed ranges for the given feed range.\n   */\n  private async handleSplit(\n    shiftLeft: boolean,\n    resolvedRanges: any,\n    oldFeedRange: QueryRange,\n    continuationToken: string\n  ): Promise<void> {\n    let flag = 0;\n    if (shiftLeft) {\n      // This section is only applicable when handleSplit is called by getPartitionRangeId().\n      // used only when existing partition key range cache is used to check for any overlapping ranges.\n      // Modifies the first element with the first overlapping range.\n      const [epkMinHeader, epkMaxHeader] = await extractOverlappingRanges(\n        oldFeedRange,\n        resolvedRanges[0]\n      );\n      const newFeedRange = new ChangeFeedRange(\n        resolvedRanges[0].minInclusive,\n        resolvedRanges[0].maxExclusive,\n        continuationToken,\n        epkMinHeader,\n        epkMaxHeader\n      );\n\n      this.queue.modifyFirstElement(newFeedRange);\n      flag = 1;\n    }\n    // Enqueue the overlapping ranges.\n    for (let i = flag; i < resolvedRanges.length; i++) {\n      const [epkMinHeader, epkMaxHeader] = await extractOverlappingRanges(\n        oldFeedRange,\n        resolvedRanges[i]\n      );\n\n      const newFeedRange = new ChangeFeedRange(\n        resolvedRanges[i].minInclusive,\n        resolvedRanges[i].maxExclusive,\n        continuationToken,\n        epkMinHeader,\n        epkMaxHeader\n      );\n      this.queue.enqueue(newFeedRange);\n    }\n  }\n\n  /**\n   * Fetch the partitionKeyRangeId for the given feed range.\n   *\n   * This partitionKeyRangeId is passed to queryFeed to fetch the results.\n   */\n  private async getPartitionRangeId(\n    feedRange: ChangeFeedRange,\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<string> {\n    const min = feedRange.epkMinHeader ? feedRange.epkMinHeader : feedRange.minInclusive;\n    const max = feedRange.epkMaxHeader ? feedRange.epkMaxHeader : feedRange.maxExclusive;\n    const queryRange = new QueryRange(min, max, true, false);\n    const resolvedRanges = await this.partitionKeyRangeCache.getOverlappingRanges(\n      this.url,\n      queryRange,\n      diagnosticNode,\n      false\n    );\n    if (resolvedRanges.length < 1) {\n      throw new ErrorResponse(\"No overlapping ranges found.\");\n    }\n    const firstResolvedRange = resolvedRanges[0];\n    if (resolvedRanges.length > 1) {\n      await this.handleSplit(true, resolvedRanges, queryRange, feedRange.continuationToken);\n    }\n    return firstResolvedRange.id;\n  }\n\n  private async getFeedResponse(\n    feedRange: ChangeFeedRange,\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    const feedOptions: FeedOptions = { initialHeaders: {}, useIncrementalFeed: true };\n\n    if (typeof this.changeFeedOptions.maxItemCount === \"number\") {\n      feedOptions.maxItemCount = this.changeFeedOptions.maxItemCount;\n    }\n\n    if (this.changeFeedOptions.sessionToken) {\n      feedOptions.sessionToken = this.changeFeedOptions.sessionToken;\n    }\n\n    if (feedRange.continuationToken) {\n      feedOptions.accessCondition = {\n        type: Constants.HttpHeaders.IfNoneMatch,\n        condition: feedRange.continuationToken,\n      };\n    }\n\n    if (this.startTime) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfModifiedSince] = this.startTime;\n    }\n    const rangeId = await this.getPartitionRangeId(feedRange, diagnosticNode);\n    try {\n      // startEpk and endEpk are only valid in case we want to fetch result for a part of partition and not the entire partition.\n      const response: Response<Array<T & Resource>> = await (this.clientContext.queryFeed<T>({\n        path: this.resourceLink,\n        resourceType: ResourceType.item,\n        resourceId: this.resourceId,\n        resultFn: (result) => (result ? result.Documents : []),\n        query: undefined,\n        options: feedOptions,\n        diagnosticNode,\n        partitionKey: undefined,\n        partitionKeyRangeId: rangeId,\n        startEpk: feedRange.epkMinHeader,\n        endEpk: feedRange.epkMaxHeader,\n      }) as Promise<any>);\n\n      return new ChangeFeedIteratorResponse(\n        response.result,\n        response.result ? response.result.length : 0,\n        response.code,\n        response.headers,\n        getEmptyCosmosDiagnostics()\n      );\n    } catch (err) {\n      // If any errors are encountered, eg. partition split or gone, handle it based on error code and not break the flow.\n      return new ChangeFeedIteratorResponse(\n        [],\n        0,\n        err.code,\n        err.headers,\n        getEmptyCosmosDiagnostics(),\n        err.substatus\n      );\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { PartitionKey } from \"../../documents\";\n/**\n * Continuation token for change feed of entire container, or a specific Epk Range.\n * @internal\n */\nexport class ContinuationTokenForPartitionKey {\n  /**\n   * rid of the container for which the continuation token is issued.\n   */\n  public readonly rid: string;\n  /**\n   * A specific Partition key in the container for which the continuation token is issued.\n   */\n  public readonly partitionKey: PartitionKey;\n  /**\n   * Continuation value for the specific Partition key in the container.\n   */\n  public Continuation: string;\n\n  constructor(rid: string, partitionKey: PartitionKey, continuation: string) {\n    this.rid = rid;\n    this.partitionKey = partitionKey;\n    this.Continuation = continuation;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { InternalChangeFeedIteratorOptions } from \"./InternalChangeFeedOptions\";\nimport { ChangeFeedIteratorResponse } from \"./ChangeFeedIteratorResponse\";\nimport { Container, Resource } from \"../../client\";\nimport { ClientContext } from \"../../ClientContext\";\nimport { Constants, ResourceType } from \"../../common\";\nimport { FeedOptions, Response, ErrorResponse } from \"../../request\";\nimport { ContinuationTokenForPartitionKey } from \"./ContinuationTokenForPartitionKey\";\nimport { ChangeFeedPullModelIterator } from \"./ChangeFeedPullModelIterator\";\nimport { PartitionKey } from \"../../documents\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n/**\n * @hidden\n * Provides iterator for change feed for one partition key.\n *\n * Use `Items.getChangeFeedIterator()` to get an instance of the iterator.\n */\nexport class ChangeFeedForPartitionKey<T> implements ChangeFeedPullModelIterator<T> {\n  private continuationToken: ContinuationTokenForPartitionKey;\n  private startTime: string;\n  private rId: string;\n  private isInstantiated: boolean;\n  /**\n   * @internal\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private container: Container,\n    private resourceId: string,\n    private resourceLink: string,\n    private partitionKey: PartitionKey,\n    private changeFeedOptions: InternalChangeFeedIteratorOptions\n  ) {\n    this.continuationToken = changeFeedOptions.continuationToken\n      ? JSON.parse(changeFeedOptions.continuationToken)\n      : undefined;\n    this.isInstantiated = false;\n\n    if (changeFeedOptions.startTime) {\n      this.startTime = changeFeedOptions.startTime.toUTCString();\n    }\n  }\n\n  private async instantiateIterator(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    await this.setIteratorRid(diagnosticNode);\n    if (this.continuationToken) {\n      if (!this.continuationTokenRidMatchContainerRid()) {\n        throw new ErrorResponse(\"The continuation is not for the current container definition.\");\n      }\n    } else {\n      this.continuationToken = new ContinuationTokenForPartitionKey(\n        this.rId,\n        this.partitionKey,\n        \"\"\n      );\n    }\n\n    this.isInstantiated = true;\n  }\n\n  private continuationTokenRidMatchContainerRid(): boolean {\n    if (this.continuationToken.rid !== this.rId) {\n      return false;\n    }\n    return true;\n  }\n\n  private async setIteratorRid(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    const { resource } = await this.container.readInternal(diagnosticNode);\n    this.rId = resource._rid;\n  }\n\n  /**\n   * Change feed is an infinite feed. hasMoreResults is always true.\n   */\n  get hasMoreResults(): boolean {\n    return true;\n  }\n\n  /**\n   * Gets an async iterator which will yield change feed results.\n   */\n  public async *getAsyncIterator(): AsyncIterable<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    do {\n      const result = await this.readNext();\n      yield result;\n    } while (this.hasMoreResults);\n  }\n\n  /**\n   * Returns the result of change feed from Azure Cosmos DB.\n   */\n  public async readNext(): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (!this.isInstantiated) {\n        await this.instantiateIterator(diagnosticNode);\n      }\n      const result = await this.fetchNext(diagnosticNode);\n      return result;\n    }, this.clientContext);\n  }\n\n  /**\n   * Read feed and retrieves the next set of results in Azure Cosmos DB.\n   */\n  private async fetchNext(\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    const response = await this.getFeedResponse(diagnosticNode);\n    this.continuationToken.Continuation = response.headers[Constants.HttpHeaders.ETag];\n    response.headers[Constants.HttpHeaders.ContinuationToken] = JSON.stringify(\n      this.continuationToken\n    );\n    return response;\n  }\n\n  private async getFeedResponse(\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    const feedOptions: FeedOptions = { initialHeaders: {}, useIncrementalFeed: true };\n\n    if (typeof this.changeFeedOptions.maxItemCount === \"number\") {\n      feedOptions.maxItemCount = this.changeFeedOptions.maxItemCount;\n    }\n\n    if (this.changeFeedOptions.sessionToken) {\n      feedOptions.sessionToken = this.changeFeedOptions.sessionToken;\n    }\n\n    const continuation = this.continuationToken.Continuation;\n    if (continuation) {\n      feedOptions.accessCondition = {\n        type: Constants.HttpHeaders.IfNoneMatch,\n        condition: continuation,\n      };\n    }\n\n    if (this.startTime) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfModifiedSince] = this.startTime;\n    }\n\n    const response: Response<Array<T & Resource>> = await (this.clientContext.queryFeed<T>({\n      path: this.resourceLink,\n      resourceType: ResourceType.item,\n      resourceId: this.resourceId,\n      resultFn: (result) => (result ? result.Documents : []),\n      diagnosticNode,\n      query: undefined,\n      options: feedOptions,\n      partitionKey: this.partitionKey,\n    }) as Promise<any>);\n\n    return new ChangeFeedIteratorResponse(\n      response.result,\n      response.result ? response.result.length : 0,\n      response.code,\n      response.headers,\n      getEmptyCosmosDiagnostics()\n    );\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Enum to specify the resource for which change feed is being fetched.\n */\nexport enum ChangeFeedResourceType {\n  FeedRange,\n  PartitionKey,\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ErrorResponse } from \"../../request\";\nimport { ChangeFeedResourceType } from \"./ChangeFeedEnums\";\n/**\n * @hidden\n * Class which specifies the ChangeFeedIterator to start reading changes from a saved point.\n */\nexport class ChangeFeedStartFromContinuation {\n  private continuationToken: string;\n\n  constructor(continuation: string) {\n    this.continuationToken = continuation;\n  }\n\n  public getCfResource(): string {\n    return this.continuationToken;\n  }\n  public getCfResourceJson(): any {\n    return JSON.parse(this.continuationToken);\n  }\n\n  public getResourceType(): any {\n    const cToken = this.getCfResourceJson();\n    if (\n      Object.prototype.hasOwnProperty.call(cToken, \"partitionKey\") &&\n      Object.prototype.hasOwnProperty.call(cToken, \"Continuation\") &&\n      typeof cToken.Continuation === \"string\"\n    ) {\n      return ChangeFeedResourceType.PartitionKey;\n    } else if (\n      Object.prototype.hasOwnProperty.call(cToken, \"Continuation\") &&\n      Array.isArray(cToken.Continuation) &&\n      cToken.Continuation.length > 0\n    ) {\n      return ChangeFeedResourceType.FeedRange;\n    } else {\n      throw new ErrorResponse(\"Invalid continuation token.\");\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { PartitionKey } from \"../../documents\";\nimport { FeedRange } from \"./FeedRange\";\nimport { ChangeFeedStartFromNow } from \"./ChangeFeedStartFromNow\";\nimport { ChangeFeedStartFromBeginning } from \"./ChangeFeedStartFromBeginning\";\nimport { ChangeFeedStartFromTime } from \"./ChangeFeedStartFromTime\";\nimport { ChangeFeedStartFromContinuation } from \"./ChangeFeedStartFromContinuation\";\nimport { ErrorResponse } from \"../../request/ErrorResponse\";\nimport { isNullOrEmpty } from \"./changeFeedUtils\";\n\n/**\n * Base class for where to start a ChangeFeedIterator.\n */\n/* eslint-disable @typescript-eslint/no-extraneous-class */\nexport abstract class ChangeFeedStartFrom {\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start from the beginning of time.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   */\n  public static Beginning(cfResource?: PartitionKey | FeedRange): ChangeFeedStartFromBeginning {\n    return new ChangeFeedStartFromBeginning(cfResource);\n  }\n  /**\n   *  Returns an object that tells the ChangeFeedIterator to start reading changes from this moment onward.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   **/\n  public static Now(cfResource?: PartitionKey | FeedRange): ChangeFeedStartFromNow {\n    return new ChangeFeedStartFromNow(cfResource);\n  }\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start reading changes from some point in time onward.\n   * @param startTime - Date object specfiying the time to start reading changes from.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   */\n  public static Time(\n    startTime: Date,\n    cfResource?: PartitionKey | FeedRange\n  ): ChangeFeedStartFromTime {\n    if (!startTime) {\n      throw new ErrorResponse(\"startTime must be present\");\n    }\n    if (startTime instanceof Date === true) {\n      return new ChangeFeedStartFromTime(startTime, cfResource);\n    } else {\n      throw new ErrorResponse(\"startTime must be a Date object.\");\n    }\n  }\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start reading changes from a save point.\n   * @param continuation - The continuation to resume from.\n   */\n  public static Continuation(continuationToken: string): ChangeFeedStartFromContinuation {\n    if (!continuationToken) {\n      throw new ErrorResponse(\"Argument continuation must be passed.\");\n    }\n    if (isNullOrEmpty(continuationToken)) {\n      throw new ErrorResponse(\"Argument continuationToken must be a non-empty string.\");\n    }\n    return new ChangeFeedStartFromContinuation(continuationToken);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { PartitionKey } from \"../../documents\";\nimport { QueryRange, PartitionKeyRangeCache } from \"../../routing\";\nimport { ChangeFeedIteratorOptions } from \"./ChangeFeedIteratorOptions\";\nimport { ChangeFeedStartFrom } from \"./ChangeFeedStartFrom\";\nimport { ChangeFeedStartFromBeginning } from \"./ChangeFeedStartFromBeginning\";\nimport { ChangeFeedStartFromContinuation } from \"./ChangeFeedStartFromContinuation\";\nimport { ChangeFeedStartFromNow } from \"./ChangeFeedStartFromNow\";\nimport { ChangeFeedStartFromTime } from \"./ChangeFeedStartFromTime\";\nimport { ChangeFeedResourceType } from \"./ChangeFeedEnums\";\nimport { ChangeFeedForPartitionKey } from \"./ChangeFeedForPartitionKey\";\nimport { ErrorResponse } from \"../../request\";\nimport { ChangeFeedForEpkRange } from \"./ChangeFeedForEpkRange\";\nimport { getIdFromLink, getPathFromLink, ResourceType, Constants } from \"../../common\";\nimport { buildInternalChangeFeedOptions, fetchStartTime, isEpkRange } from \"./changeFeedUtils\";\nimport { isPartitionKey } from \"../../utils/typeChecks\";\nimport { Container } from \"../Container\";\nimport { FeedRangeInternal } from \"./FeedRange\";\n\nexport function changeFeedIteratorBuilder(\n  cfOptions: ChangeFeedIteratorOptions,\n  clientContext: ClientContext,\n  container: Container,\n  partitionKeyRangeCache: PartitionKeyRangeCache\n): any {\n  const url = container.url;\n  const path = getPathFromLink(url, ResourceType.item);\n  const id = getIdFromLink(url);\n\n  let changeFeedStartFrom = cfOptions.changeFeedStartFrom;\n\n  if (changeFeedStartFrom === undefined) {\n    changeFeedStartFrom = ChangeFeedStartFrom.Now();\n  }\n\n  if (changeFeedStartFrom instanceof ChangeFeedStartFromContinuation) {\n    const continuationToken = changeFeedStartFrom.getCfResourceJson();\n    const resourceType = changeFeedStartFrom.getResourceType();\n    const internalCfOptions = buildInternalChangeFeedOptions(\n      cfOptions,\n      changeFeedStartFrom.getCfResource()\n    );\n\n    if (\n      resourceType === ChangeFeedResourceType.PartitionKey &&\n      isPartitionKey(continuationToken.partitionKey)\n    ) {\n      return new ChangeFeedForPartitionKey(\n        clientContext,\n        container,\n        id,\n        path,\n        continuationToken.partitionKey,\n        internalCfOptions\n      );\n    } else if (resourceType === ChangeFeedResourceType.FeedRange) {\n      return new ChangeFeedForEpkRange(\n        clientContext,\n        container,\n        partitionKeyRangeCache,\n        id,\n        path,\n        url,\n        internalCfOptions,\n        undefined\n      );\n    } else {\n      throw new ErrorResponse(\"Invalid continuation token.\");\n    }\n  } else if (\n    changeFeedStartFrom instanceof ChangeFeedStartFromNow ||\n    changeFeedStartFrom instanceof ChangeFeedStartFromTime ||\n    changeFeedStartFrom instanceof ChangeFeedStartFromBeginning\n  ) {\n    const startTime = fetchStartTime(changeFeedStartFrom);\n    const internalCfOptions = buildInternalChangeFeedOptions(cfOptions, undefined, startTime);\n    const cfResource = changeFeedStartFrom.getCfResource();\n    if (isPartitionKey(cfResource)) {\n      return new ChangeFeedForPartitionKey(\n        clientContext,\n        container,\n        id,\n        path,\n        cfResource as PartitionKey,\n        internalCfOptions\n      );\n    } else {\n      let internalCfResource: QueryRange;\n      if (cfResource === undefined) {\n        internalCfResource = new QueryRange(\n          Constants.EffectivePartitionKeyConstants.MinimumInclusiveEffectivePartitionKey,\n          Constants.EffectivePartitionKeyConstants.MaximumExclusiveEffectivePartitionKey,\n          true,\n          false\n        );\n      } else if (isEpkRange(cfResource)) {\n        internalCfResource = new QueryRange(\n          (cfResource as FeedRangeInternal).minInclusive,\n          (cfResource as FeedRangeInternal).maxExclusive,\n          true,\n          false\n        );\n      } else {\n        throw new ErrorResponse(\"Invalid feed range.\");\n      }\n      return new ChangeFeedForEpkRange(\n        clientContext,\n        container,\n        partitionKeyRangeCache,\n        id,\n        path,\n        url,\n        internalCfOptions,\n        internalCfResource\n      );\n    }\n  } else {\n    throw new ErrorResponse(\"Invalid change feed start location.\");\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { v4 } from \"uuid\";\nconst uuid = v4;\nimport { ChangeFeedIterator } from \"../../ChangeFeedIterator\";\nimport { ChangeFeedOptions } from \"../../ChangeFeedOptions\";\nimport { ClientContext } from \"../../ClientContext\";\nimport { getIdFromLink, getPathFromLink, isItemResourceValid, ResourceType } from \"../../common\";\nimport { extractPartitionKeys } from \"../../extractPartitionKey\";\nimport { FetchFunctionCallback, SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions, Response } from \"../../request\";\nimport { Container, PartitionKeyRange } from \"../Container\";\nimport { Item } from \"./Item\";\nimport { ItemDefinition } from \"./ItemDefinition\";\nimport { ItemResponse } from \"./ItemResponse\";\nimport {\n  Batch,\n  isKeyInRange,\n  prepareOperations,\n  OperationResponse,\n  OperationInput,\n  BulkOptions,\n  decorateBatchOperation,\n  splitBatchBasedOnBodySize,\n  BulkOperationResponse,\n} from \"../../utils/batch\";\nimport { readPartitionKeyDefinition } from \"../ClientUtils\";\nimport { assertNotUndefined, isPrimitivePartitionKeyValue } from \"../../utils/typeChecks\";\nimport { hashPartitionKey } from \"../../utils/hashing/hash\";\nimport { PartitionKey, PartitionKeyDefinition } from \"../../documents\";\nimport { PartitionKeyRangeCache } from \"../../routing\";\nimport {\n  ChangeFeedPullModelIterator,\n  ChangeFeedIteratorOptions,\n  changeFeedIteratorBuilder,\n} from \"../../client/ChangeFeed\";\nimport { validateChangeFeedIteratorOptions } from \"../../client/ChangeFeed/changeFeedUtils\";\nimport {\n  DiagnosticNodeInternal,\n  DiagnosticNodeType,\n} from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  getEmptyCosmosDiagnostics,\n  withDiagnostics,\n  addDignosticChild,\n} from \"../../utils/diagnostics\";\n\n/**\n * @hidden\n */\nfunction isChangeFeedOptions(options: unknown): options is ChangeFeedOptions {\n  return options && !(isPrimitivePartitionKeyValue(options) || Array.isArray(options));\n}\n\n/**\n * Operations for creating new items, and reading/querying all items\n *\n * @see {@link Item} for reading, replacing, or deleting an existing container; use `.item(id)`.\n */\nexport class Items {\n  private partitionKeyRangeCache: PartitionKeyRangeCache;\n  /**\n   * Create an instance of {@link Items} linked to the parent {@link Container}.\n   * @param container - The parent container.\n   * @hidden\n   */\n  constructor(public readonly container: Container, private readonly clientContext: ClientContext) {\n    this.partitionKeyRangeCache = new PartitionKeyRangeCache(this.clientContext);\n  }\n\n  /**\n   * Queries all items.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   * @example Read all items to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM Families f WHERE f.lastName = @lastName\",\n   *   parameters: [\n   *     {name: \"@lastName\", value: \"Hendricks\"}\n   *   ]\n   * };\n   * const {result: items} = await items.query(querySpec).fetchAll();\n   * ```\n   */\n  public query(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Queries all items.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   * @example Read all items to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT firstname FROM Families f WHERE f.lastName = @lastName\",\n   *   parameters: [\n   *     {name: \"@lastName\", value: \"Hendricks\"}\n   *   ]\n   * };\n   * const {result: items} = await items.query<{firstName: string}>(querySpec).fetchAll();\n   * ```\n   */\n  public query<T>(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: string | SqlQuerySpec, options: FeedOptions = {}): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.item);\n    const id = getIdFromLink(this.container.url);\n\n    const fetchFunction: FetchFunctionCallback = async (\n      diagnosticNode: DiagnosticNodeInternal,\n      innerOptions: FeedOptions\n    ) => {\n      const response = await this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        resultFn: (result) => (result ? result.Documents : []),\n        query,\n        options: innerOptions,\n        partitionKey: options.partitionKey,\n        diagnosticNode,\n      });\n      return response;\n    };\n\n    return new QueryIterator(\n      this.clientContext,\n      query,\n      options,\n      fetchFunction,\n      this.container.url,\n      ResourceType.item\n    );\n  }\n\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   *\n   * @deprecated Use `changeFeed` instead.\n   *\n   * @example Read from the beginning of the change feed.\n   * ```javascript\n   * const iterator = items.readChangeFeed({ startFromBeginning: true });\n   * const firstPage = await iterator.fetchNext();\n   * const firstPageResults = firstPage.result\n   * const secondPage = await iterator.fetchNext();\n   * ```\n   */\n  public readChangeFeed(\n    partitionKey: PartitionKey,\n    changeFeedOptions?: ChangeFeedOptions\n  ): ChangeFeedIterator<any>;\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   * @deprecated Use `changeFeed` instead.\n   *\n   */\n  public readChangeFeed(changeFeedOptions?: ChangeFeedOptions): ChangeFeedIterator<any>;\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   * @deprecated Use `changeFeed` instead.\n   */\n  public readChangeFeed<T>(\n    partitionKey: PartitionKey,\n    changeFeedOptions?: ChangeFeedOptions\n  ): ChangeFeedIterator<T>;\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   * @deprecated Use `changeFeed` instead.\n   */\n  public readChangeFeed<T>(changeFeedOptions?: ChangeFeedOptions): ChangeFeedIterator<T>;\n  public readChangeFeed<T>(\n    partitionKeyOrChangeFeedOptions?: PartitionKey | ChangeFeedOptions,\n    changeFeedOptions?: ChangeFeedOptions\n  ): ChangeFeedIterator<T> {\n    if (isChangeFeedOptions(partitionKeyOrChangeFeedOptions)) {\n      return this.changeFeed(partitionKeyOrChangeFeedOptions);\n    } else {\n      return this.changeFeed(partitionKeyOrChangeFeedOptions, changeFeedOptions);\n    }\n  }\n\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   *\n   * @example Read from the beginning of the change feed.\n   * ```javascript\n   * const iterator = items.readChangeFeed({ startFromBeginning: true });\n   * const firstPage = await iterator.fetchNext();\n   * const firstPageResults = firstPage.result\n   * const secondPage = await iterator.fetchNext();\n   * ```\n   */\n  public changeFeed(\n    partitionKey: PartitionKey,\n    changeFeedOptions?: ChangeFeedOptions\n  ): ChangeFeedIterator<any>;\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   */\n  public changeFeed(changeFeedOptions?: ChangeFeedOptions): ChangeFeedIterator<any>;\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   */\n  public changeFeed<T>(\n    partitionKey: PartitionKey,\n    changeFeedOptions?: ChangeFeedOptions\n  ): ChangeFeedIterator<T>;\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   */\n  public changeFeed<T>(changeFeedOptions?: ChangeFeedOptions): ChangeFeedIterator<T>;\n  public changeFeed<T>(\n    partitionKeyOrChangeFeedOptions?: PartitionKey | ChangeFeedOptions,\n    changeFeedOptions?: ChangeFeedOptions\n  ): ChangeFeedIterator<T> {\n    let partitionKey: PartitionKey;\n    if (!changeFeedOptions && isChangeFeedOptions(partitionKeyOrChangeFeedOptions)) {\n      partitionKey = undefined;\n      changeFeedOptions = partitionKeyOrChangeFeedOptions;\n    } else if (\n      partitionKeyOrChangeFeedOptions !== undefined &&\n      !isChangeFeedOptions(partitionKeyOrChangeFeedOptions)\n    ) {\n      partitionKey = partitionKeyOrChangeFeedOptions;\n    }\n\n    if (!changeFeedOptions) {\n      changeFeedOptions = {};\n    }\n\n    const path = getPathFromLink(this.container.url, ResourceType.item);\n    const id = getIdFromLink(this.container.url);\n    return new ChangeFeedIterator<T>(this.clientContext, id, path, partitionKey, changeFeedOptions);\n  }\n\n  /**\n   * Returns an iterator to iterate over pages of changes. The iterator returned can be used to fetch changes for a single partition key, feed range or an entire container.\n   */\n  public getChangeFeedIterator<T>(\n    changeFeedIteratorOptions?: ChangeFeedIteratorOptions\n  ): ChangeFeedPullModelIterator<T> {\n    const cfOptions = changeFeedIteratorOptions !== undefined ? changeFeedIteratorOptions : {};\n    validateChangeFeedIteratorOptions(cfOptions);\n    const iterator = changeFeedIteratorBuilder(\n      cfOptions,\n      this.clientContext,\n      this.container,\n      this.partitionKeyRangeCache\n    );\n    return iterator;\n  }\n\n  /**\n   * Read all items.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   * @example Read all items to array.\n   * ```typescript\n   * const {body: containerList} = await items.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<ItemDefinition>;\n  /**\n   * Read all items.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   * @example Read all items to array.\n   * ```typescript\n   * const {body: containerList} = await items.readAll().fetchAll();\n   * ```\n   */\n  public readAll<T extends ItemDefinition>(options?: FeedOptions): QueryIterator<T>;\n  public readAll<T extends ItemDefinition>(options?: FeedOptions): QueryIterator<T> {\n    return this.query<T>(\"SELECT * from c\", options);\n  }\n\n  /**\n   * Create an item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body - Represents the body of the item. Can contain any number of user defined properties.\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   */\n  public async create<T extends ItemDefinition = any>(\n    body: T,\n    options: RequestOptions = {}\n  ): Promise<ItemResponse<T>> {\n    // Generate random document id if the id is missing in the payload and\n    // options.disableAutomaticIdGeneration != true\n\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if ((body.id === undefined || body.id === \"\") && !options.disableAutomaticIdGeneration) {\n        body.id = uuid();\n      }\n      const partitionKeyDefinition = await readPartitionKeyDefinition(\n        diagnosticNode,\n        this.container\n      );\n      const partitionKey = extractPartitionKeys(body, partitionKeyDefinition);\n\n      const err = {};\n      if (!isItemResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.container.url, ResourceType.item);\n      const id = getIdFromLink(this.container.url);\n\n      const response = await this.clientContext.create<T>({\n        body,\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        diagnosticNode,\n        options,\n        partitionKey,\n      });\n\n      const ref = new Item(\n        this.container,\n        (response.result as any).id,\n        this.clientContext,\n        partitionKey\n      );\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        ref,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Upsert an item.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body - Represents the body of the item. Can contain any number of user defined properties.\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   */\n  public async upsert(\n    body: unknown,\n    options?: RequestOptions\n  ): Promise<ItemResponse<ItemDefinition>>;\n  /**\n   * Upsert an item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body - Represents the body of the item. Can contain any number of user defined properties.\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   */\n  public async upsert<T extends ItemDefinition>(\n    body: T,\n    options?: RequestOptions\n  ): Promise<ItemResponse<T>>;\n  public async upsert<T extends ItemDefinition>(\n    body: T,\n    options: RequestOptions = {}\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      // Generate random document id if the id is missing in the payload and\n      // options.disableAutomaticIdGeneration != true\n      if ((body.id === undefined || body.id === \"\") && !options.disableAutomaticIdGeneration) {\n        body.id = uuid();\n      }\n\n      const partitionKeyDefinition = await readPartitionKeyDefinition(\n        diagnosticNode,\n        this.container\n      );\n      const partitionKey = extractPartitionKeys(body, partitionKeyDefinition);\n\n      const err = {};\n      if (!isItemResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.container.url, ResourceType.item);\n      const id = getIdFromLink(this.container.url);\n\n      const response = await this.clientContext.upsert<T>({\n        body,\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        options,\n        partitionKey,\n        diagnosticNode,\n      });\n\n      const ref = new Item(\n        this.container,\n        (response.result as any).id,\n        this.clientContext,\n        partitionKey\n      );\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        ref,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Execute bulk operations on items.\n   *\n   * Bulk takes an array of Operations which are typed based on what the operation does.\n   * The choices are: Create, Upsert, Read, Replace, and Delete\n   *\n   * Usage example:\n   * ```typescript\n   * // partitionKey is optional at the top level if present in the resourceBody\n   * const operations: OperationInput[] = [\n   *    {\n   *       operationType: \"Create\",\n   *       resourceBody: { id: \"doc1\", name: \"sample\", key: \"A\" }\n   *    },\n   *    {\n   *       operationType: \"Upsert\",\n   *       partitionKey: 'A',\n   *       resourceBody: { id: \"doc2\", name: \"other\", key: \"A\" }\n   *    }\n   * ]\n   *\n   * await database.container.items.bulk(operations)\n   * ```\n   *\n   * @param operations - List of operations. Limit 100\n   * @param bulkOptions - Optional options object to modify bulk behavior. Pass \\{ continueOnError: true \\} to continue executing operations when one fails. (Defaults to false) ** NOTE: THIS WILL DEFAULT TO TRUE IN THE 4.0 RELEASE\n   * @param options - Used for modifying the request.\n   */\n  public async bulk(\n    operations: OperationInput[],\n    bulkOptions?: BulkOptions,\n    options?: RequestOptions\n  ): Promise<BulkOperationResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const { resources: partitionKeyRanges } = await this.container\n        .readPartitionKeyRanges()\n        .fetchAll();\n      const partitionKeyDefinition = await readPartitionKeyDefinition(\n        diagnosticNode,\n        this.container\n      );\n      const batches: Batch[] = partitionKeyRanges.map((keyRange: PartitionKeyRange) => {\n        return {\n          min: keyRange.minInclusive,\n          max: keyRange.maxExclusive,\n          rangeId: keyRange.id,\n          indexes: [],\n          operations: [],\n        };\n      });\n\n      this.groupOperationsBasedOnPartitionKey(operations, partitionKeyDefinition, options, batches);\n\n      const path = getPathFromLink(this.container.url, ResourceType.item);\n\n      const orderedResponses: OperationResponse[] = [];\n      await Promise.all(\n        batches\n          .filter((batch: Batch) => batch.operations.length)\n          .flatMap((batch: Batch) => splitBatchBasedOnBodySize(batch))\n          .map(async (batch: Batch) => {\n            if (batch.operations.length > 100) {\n              throw new Error(\n                \"Cannot run bulk request with more than 100 operations per partition\"\n              );\n            }\n            try {\n              const response = await addDignosticChild(\n                async (childNode: DiagnosticNodeInternal) =>\n                  this.clientContext.bulk({\n                    body: batch.operations,\n                    partitionKeyRangeId: batch.rangeId,\n                    path,\n                    resourceId: this.container.url,\n                    bulkOptions,\n                    options,\n                    diagnosticNode: childNode,\n                  }),\n                diagnosticNode,\n                DiagnosticNodeType.BATCH_REQUEST\n              );\n              response.result.forEach((operationResponse: OperationResponse, index: number) => {\n                orderedResponses[batch.indexes[index]] = operationResponse;\n              });\n            } catch (err: any) {\n              // In the case of 410 errors, we need to recompute the partition key ranges\n              // and redo the batch request, however, 410 errors occur for unsupported\n              // partition key types as well since we don't support them, so for now we throw\n              if (err.code === 410) {\n                throw new Error(\n                  \"Partition key error. Either the partitions have split or an operation has an unsupported partitionKey type\" +\n                    err.message\n                );\n              }\n              throw new Error(`Bulk request errored with: ${err.message}`);\n            }\n          })\n      );\n      const response: any = orderedResponses;\n      response.diagnostics = diagnosticNode.toDiagnostic(this.clientContext.getClientConfig());\n      return response;\n    }, this.clientContext);\n  }\n\n  /**\n   * Function to create batches based of partition key Ranges.\n   * @param operations - operations to group\n   * @param partitionDefinition - PartitionKey definition of container.\n   * @param options - Request options for bulk request.\n   * @param batches - Groups to be filled with operations.\n   */\n  private groupOperationsBasedOnPartitionKey(\n    operations: OperationInput[],\n    partitionDefinition: PartitionKeyDefinition,\n    options: RequestOptions | undefined,\n    batches: Batch[]\n  ) {\n    operations.forEach((operationInput, index: number) => {\n      const { operation, partitionKey } = prepareOperations(\n        operationInput,\n        partitionDefinition,\n        options\n      );\n      const hashed = hashPartitionKey(\n        assertNotUndefined(\n          partitionKey,\n          \"undefined value for PartitionKey is not expected during grouping of bulk operations.\"\n        ),\n        partitionDefinition\n      );\n      const batchForKey = assertNotUndefined(\n        batches.find((batch: Batch) => {\n          return isKeyInRange(batch.min, batch.max, hashed);\n        }),\n        \"No suitable Batch found.\"\n      );\n      batchForKey.operations.push(operation);\n      batchForKey.indexes.push(index);\n    });\n  }\n\n  /**\n   * Execute transactional batch operations on items.\n   *\n   * Batch takes an array of Operations which are typed based on what the operation does. Batch is transactional and will rollback all operations if one fails.\n   * The choices are: Create, Upsert, Read, Replace, and Delete\n   *\n   * Usage example:\n   * ```typescript\n   * // partitionKey is required as a second argument to batch, but defaults to the default partition key\n   * const operations: OperationInput[] = [\n   *    {\n   *       operationType: \"Create\",\n   *       resourceBody: { id: \"doc1\", name: \"sample\", key: \"A\" }\n   *    },\n   *    {\n   *       operationType: \"Upsert\",\n   *       partitionKey: 'A',\n   *       resourceBody: { id: \"doc2\", name: \"other\", key: \"A\" }\n   *    }\n   * ]\n   *\n   * await database.container.items.batch(operations)\n   * ```\n   *\n   * @param operations - List of operations. Limit 100\n   * @param options - Used for modifying the request\n   */\n  public async batch(\n    operations: OperationInput[],\n    partitionKey?: PartitionKey,\n    options?: RequestOptions\n  ): Promise<Response<OperationResponse[]>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      operations.map((operation) => decorateBatchOperation(operation, options));\n\n      const path = getPathFromLink(this.container.url, ResourceType.item);\n\n      if (operations.length > 100) {\n        throw new Error(\"Cannot run batch request with more than 100 operations per partition\");\n      }\n      try {\n        const response: Response<OperationResponse[]> = await this.clientContext.batch({\n          body: operations,\n          partitionKey,\n          path,\n          resourceId: this.container.url,\n          options,\n          diagnosticNode,\n        });\n        return response;\n      } catch (err: any) {\n        throw new Error(`Batch request error: ${err.message}`);\n      }\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request\";\nimport { Resource } from \"../Resource\";\nimport { StoredProcedure } from \"./StoredProcedure\";\nimport { StoredProcedureDefinition } from \"./StoredProcedureDefinition\";\n\nexport class StoredProcedureResponse extends ResourceResponse<\n  StoredProcedureDefinition & Resource\n> {\n  constructor(\n    resource: StoredProcedureDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    storedProcedure: StoredProcedure,\n    diagnostics: CosmosDiagnostics\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.storedProcedure = storedProcedure;\n  }\n  /**\n   * A reference to the {@link StoredProcedure} which the {@link StoredProcedureDefinition} corresponds to.\n   */\n  public readonly storedProcedure: StoredProcedure;\n\n  /**\n   * Alias for storedProcedure.\n   *\n   * A reference to the {@link StoredProcedure} which the {@link StoredProcedureDefinition} corresponds to.\n   */\n  public get sproc(): StoredProcedure {\n    return this.storedProcedure;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createStoredProcedureUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport { PartitionKey } from \"../../documents/PartitionKey\";\nimport { undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport { RequestOptions, ResourceResponse } from \"../../request\";\nimport { readPartitionKeyDefinition } from \"../ClientUtils\";\nimport { Container } from \"../Container\";\nimport { StoredProcedureDefinition } from \"./StoredProcedureDefinition\";\nimport { StoredProcedureResponse } from \"./StoredProcedureResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Operations for reading, replacing, deleting, or executing a specific, existing stored procedure by id.\n *\n * For operations to create, read all, or query Stored Procedures,\n */\nexport class StoredProcedure {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createStoredProcedureUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * Creates a new instance of {@link StoredProcedure} linked to the parent {@link Container}.\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link StoredProcedure}.\n   * @hidden\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Read the {@link StoredProcedureDefinition} for the given {@link StoredProcedure}.\n   */\n  public async read(options?: RequestOptions): Promise<StoredProcedureResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<StoredProcedureDefinition>({\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new StoredProcedureResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link StoredProcedure} with the specified {@link StoredProcedureDefinition}.\n   * @param body - The specified {@link StoredProcedureDefinition} to replace the existing definition.\n   */\n  public async replace(\n    body: StoredProcedureDefinition,\n    options?: RequestOptions\n  ): Promise<StoredProcedureResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<StoredProcedureDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new StoredProcedureResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link StoredProcedure}.\n   */\n  public async delete(options?: RequestOptions): Promise<StoredProcedureResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<StoredProcedureDefinition>({\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new StoredProcedureResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Execute the given {@link StoredProcedure}.\n   *\n   * The specified type, T, is not enforced by the client.\n   * Be sure to validate the response from the stored procedure matches the type, T, you provide.\n   *\n   * @param partitionKey - The partition key to use when executing the stored procedure\n   * @param params - Array of parameters to pass as arguments to the given {@link StoredProcedure}.\n   * @param options - Additional options, such as the partition key to invoke the {@link StoredProcedure} on.\n   */\n  public async execute<T = any>(\n    partitionKey: PartitionKey,\n    params?: any[],\n    options?: RequestOptions\n  ): Promise<ResourceResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (partitionKey === undefined) {\n        const partitionKeyResponse = await readPartitionKeyDefinition(\n          diagnosticNode,\n          this.container\n        );\n        partitionKey = undefinedPartitionKey(partitionKeyResponse);\n      }\n      const response = await this.clientContext.execute<T>({\n        sprocLink: this.url,\n        params,\n        options,\n        partitionKey,\n        diagnosticNode,\n      });\n      return new ResourceResponse<T>(\n        response.result,\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { Resource } from \"../Resource\";\nimport { StoredProcedure } from \"./StoredProcedure\";\nimport { StoredProcedureDefinition } from \"./StoredProcedureDefinition\";\nimport { StoredProcedureResponse } from \"./StoredProcedureResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Operations for creating, upserting, or reading/querying all Stored Procedures.\n *\n * For operations to read, replace, delete, or execute a specific, existing stored procedure by id, see `container.storedProcedure()`.\n */\nexport class StoredProcedures {\n  /**\n   * @param container - The parent {@link Container}.\n   * @hidden\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Query all Stored Procedures.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @example Read all stored procedures to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM root r WHERE r.id = @sproc\",\n   *   parameters: [\n   *     {name: \"@sproc\", value: \"Todo\"}\n   *   ]\n   * };\n   * const {body: sprocList} = await containers.storedProcedures.query(querySpec).fetchAll();\n   * ```\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all Stored Procedures.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @example Read all stored procedures to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM root r WHERE r.id = @sproc\",\n   *   parameters: [\n   *     {name: \"@sproc\", value: \"Todo\"}\n   *   ]\n   * };\n   * const {body: sprocList} = await containers.storedProcedures.query(querySpec).fetchAll();\n   * ```\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.sproc);\n    const id = getIdFromLink(this.container.url);\n\n    return new QueryIterator(this.clientContext, query, options, (diagNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        resultFn: (result) => result.StoredProcedures,\n        query,\n        options: innerOptions,\n        diagnosticNode: diagNode,\n      });\n    });\n  }\n\n  /**\n   * Read all stored procedures.\n   * @example Read all stored procedures to array.\n   * ```typescript\n   * const {body: sprocList} = await containers.storedProcedures.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<StoredProcedureDefinition & Resource> {\n    return this.query<StoredProcedureDefinition & Resource>(undefined, options);\n  }\n\n  /**\n   * Create a StoredProcedure.\n   *\n   * Azure Cosmos DB allows stored procedures to be executed in the storage tier,\n   * directly against an item container. The script\n   * gets executed under ACID transactions on the primary storage partition of the\n   * specified container. For additional details,\n   * refer to the server-side JavaScript API documentation.\n   */\n  public async create(\n    body: StoredProcedureDefinition,\n    options?: RequestOptions\n  ): Promise<StoredProcedureResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.container.url, ResourceType.sproc);\n      const id = getIdFromLink(this.container.url);\n\n      const response = await this.clientContext.create<StoredProcedureDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new StoredProcedure(this.container, response.result.id, this.clientContext);\n      return new StoredProcedureResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request\";\nimport { Resource } from \"../Resource\";\nimport { Trigger } from \"./index\";\nimport { TriggerDefinition } from \"./TriggerDefinition\";\n\nexport class TriggerResponse extends ResourceResponse<TriggerDefinition & Resource> {\n  constructor(\n    resource: TriggerDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    trigger: Trigger,\n    diagnostics: CosmosDiagnostics\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.trigger = trigger;\n  }\n  /** A reference to the {@link Trigger} corresponding to the returned {@link TriggerDefinition}. */\n  public readonly trigger: Trigger;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createTriggerUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport { RequestOptions } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { TriggerDefinition } from \"./TriggerDefinition\";\nimport { TriggerResponse } from \"./TriggerResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Operations to read, replace, or delete a {@link Trigger}.\n *\n * Use `container.triggers` to create, upsert, query, or read all.\n */\nexport class Trigger {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createTriggerUri(this.container.database.id, this.container.id, this.id);\n  }\n\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link Trigger}.\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Read the {@link TriggerDefinition} for the given {@link Trigger}.\n   */\n  public async read(options?: RequestOptions): Promise<TriggerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<TriggerDefinition>({\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new TriggerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link Trigger} with the specified {@link TriggerDefinition}.\n   * @param body - The specified {@link TriggerDefinition} to replace the existing definition with.\n   */\n  public async replace(\n    body: TriggerDefinition,\n    options?: RequestOptions\n  ): Promise<TriggerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<TriggerDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new TriggerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link Trigger}.\n   */\n  public async delete(options?: RequestOptions): Promise<TriggerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<TriggerDefinition>({\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new TriggerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { Resource } from \"../Resource\";\nimport { Trigger } from \"./Trigger\";\nimport { TriggerDefinition } from \"./TriggerDefinition\";\nimport { TriggerResponse } from \"./TriggerResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Operations to create, upsert, query, and read all triggers.\n *\n * Use `container.triggers` to read, replace, or delete a {@link Trigger}.\n */\nexport class Triggers {\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Query all Triggers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all Triggers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.trigger);\n    const id = getIdFromLink(this.container.url);\n\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        resultFn: (result) => result.Triggers,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all Triggers.\n   * @example Read all trigger to array.\n   * ```typescript\n   * const {body: triggerList} = await container.triggers.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<TriggerDefinition & Resource> {\n    return this.query<TriggerDefinition & Resource>(undefined, options);\n  }\n  /**\n   * Create a trigger.\n   *\n   * Azure Cosmos DB supports pre and post triggers defined in JavaScript to be executed\n   * on creates, updates and deletes.\n   *\n   * For additional details, refer to the server-side JavaScript API documentation.\n   */\n  public async create(body: TriggerDefinition, options?: RequestOptions): Promise<TriggerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.container.url, ResourceType.trigger);\n      const id = getIdFromLink(this.container.url);\n\n      const response = await this.clientContext.create<TriggerDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new Trigger(this.container, response.result.id, this.clientContext);\n      return new TriggerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request\";\nimport { Resource } from \"../Resource\";\nimport { UserDefinedFunction } from \"./UserDefinedFunction\";\nimport { UserDefinedFunctionDefinition } from \"./UserDefinedFunctionDefinition\";\n\nexport class UserDefinedFunctionResponse extends ResourceResponse<\n  UserDefinedFunctionDefinition & Resource\n> {\n  constructor(\n    resource: UserDefinedFunctionDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    udf: UserDefinedFunction,\n    diagnostics: CosmosDiagnostics\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.userDefinedFunction = udf;\n  }\n  /** A reference to the {@link UserDefinedFunction} corresponding to the returned {@link UserDefinedFunctionDefinition}. */\n  public readonly userDefinedFunction: UserDefinedFunction;\n  /**\n   * Alias for `userDefinedFunction(id)`.\n   *\n   * A reference to the {@link UserDefinedFunction} corresponding to the returned {@link UserDefinedFunctionDefinition}.\n   */\n  public get udf(): UserDefinedFunction {\n    return this.userDefinedFunction;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createUserDefinedFunctionUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport { RequestOptions } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { UserDefinedFunctionDefinition } from \"./UserDefinedFunctionDefinition\";\nimport { UserDefinedFunctionResponse } from \"./UserDefinedFunctionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Used to read, replace, or delete a specified User Definied Function by id.\n *\n * @see {@link UserDefinedFunction} to create, upsert, query, read all User Defined Functions.\n */\nexport class UserDefinedFunction {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createUserDefinedFunctionUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link UserDefinedFunction}.\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Read the {@link UserDefinedFunctionDefinition} for the given {@link UserDefinedFunction}.\n   */\n  public async read(options?: RequestOptions): Promise<UserDefinedFunctionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<UserDefinedFunctionDefinition>({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserDefinedFunctionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link UserDefinedFunction} with the specified {@link UserDefinedFunctionDefinition}.\n   * @param options -\n   */\n  public async replace(\n    body: UserDefinedFunctionDefinition,\n    options?: RequestOptions\n  ): Promise<UserDefinedFunctionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<UserDefinedFunctionDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserDefinedFunctionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link UserDefined}.\n   */\n  public async delete(options?: RequestOptions): Promise<UserDefinedFunctionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserDefinedFunctionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions } from \"../../request\";\nimport { Container } from \"../Container\";\nimport { Resource } from \"../Resource\";\nimport { UserDefinedFunction } from \"./UserDefinedFunction\";\nimport { UserDefinedFunctionDefinition } from \"./UserDefinedFunctionDefinition\";\nimport { UserDefinedFunctionResponse } from \"./UserDefinedFunctionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Used to create, upsert, query, or read all User Defined Functions.\n *\n * @see {@link UserDefinedFunction} to read, replace, or delete a given User Defined Function by id.\n */\nexport class UserDefinedFunctions {\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Query all User Defined Functions.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all User Defined Functions.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.udf);\n    const id = getIdFromLink(this.container.url);\n\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        resultFn: (result) => result.UserDefinedFunctions,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all User Defined Functions.\n   * @example Read all User Defined Functions to array.\n   * ```typescript\n   * const {body: udfList} = await container.userDefinedFunctions.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<UserDefinedFunctionDefinition & Resource> {\n    return this.query<UserDefinedFunctionDefinition & Resource>(undefined, options);\n  }\n\n  /**\n   * Create a UserDefinedFunction.\n   *\n   * Azure Cosmos DB supports JavaScript UDFs which can be used inside queries, stored procedures and triggers.\n   *\n   * For additional details, refer to the server-side JavaScript API documentation.\n   *\n   */\n  public async create(\n    body: UserDefinedFunctionDefinition,\n    options?: RequestOptions\n  ): Promise<UserDefinedFunctionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.container.url, ResourceType.udf);\n      const id = getIdFromLink(this.container.url);\n\n      const response = await this.clientContext.create<UserDefinedFunctionDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new UserDefinedFunction(this.container, response.result.id, this.clientContext);\n      return new UserDefinedFunctionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { StoredProcedures, StoredProcedure } from \"../StoredProcedure\";\nimport { Trigger, Triggers } from \"../Trigger\";\nimport { UserDefinedFunction, UserDefinedFunctions } from \"../UserDefinedFunction\";\nimport { ClientContext } from \"../../ClientContext\";\nimport { Container } from \"../Container/Container\";\n\nexport class Scripts {\n  /**\n   * @param container - The parent {@link Container}.\n   * @hidden\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link StoredProcedure} by id.\n   *\n   * Use `.storedProcedures` for creating new stored procedures, or querying/reading all stored procedures.\n   * @param id - The id of the {@link StoredProcedure}.\n   */\n  public storedProcedure(id: string): StoredProcedure {\n    return new StoredProcedure(this.container, id, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Trigger} by id.\n   *\n   * Use `.triggers` for creating new triggers, or querying/reading all triggers.\n   * @param id - The id of the {@link Trigger}.\n   */\n  public trigger(id: string): Trigger {\n    return new Trigger(this.container, id, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link UserDefinedFunction} by id.\n   *\n   * Use `.userDefinedFunctions` for creating new user defined functions, or querying/reading all user defined functions.\n   * @param id - The id of the {@link UserDefinedFunction}.\n   */\n  public userDefinedFunction(id: string): UserDefinedFunction {\n    return new UserDefinedFunction(this.container, id, this.clientContext);\n  }\n\n  private $sprocs: StoredProcedures;\n  /**\n   * Operations for creating new stored procedures, and reading/querying all stored procedures.\n   *\n   * For reading, replacing, or deleting an existing stored procedure, use `.storedProcedure(id)`.\n   */\n  public get storedProcedures(): StoredProcedures {\n    if (!this.$sprocs) {\n      this.$sprocs = new StoredProcedures(this.container, this.clientContext);\n    }\n    return this.$sprocs;\n  }\n\n  private $triggers: Triggers;\n  /**\n   * Operations for creating new triggers, and reading/querying all triggers.\n   *\n   * For reading, replacing, or deleting an existing trigger, use `.trigger(id)`.\n   */\n  public get triggers(): Triggers {\n    if (!this.$triggers) {\n      this.$triggers = new Triggers(this.container, this.clientContext);\n    }\n    return this.$triggers;\n  }\n\n  private $udfs: UserDefinedFunctions;\n  /**\n   * Operations for creating new user defined functions, and reading/querying all user defined functions.\n   *\n   * For reading, replacing, or deleting an existing user defined function, use `.userDefinedFunction(id)`.\n   */\n  public get userDefinedFunctions(): UserDefinedFunctions {\n    if (!this.$udfs) {\n      this.$udfs = new UserDefinedFunctions(this.container, this.clientContext);\n    }\n    return this.$udfs;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request/ResourceResponse\";\nimport { Resource } from \"../Resource\";\nimport { ContainerDefinition } from \"./ContainerDefinition\";\nimport { Container } from \"./index\";\n\n/** Response object for Container operations */\nexport class ContainerResponse extends ResourceResponse<ContainerDefinition & Resource> {\n  constructor(\n    resource: ContainerDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    container: Container,\n    diagnostics: CosmosDiagnostics\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.container = container;\n  }\n  /** A reference to the {@link Container} that the returned {@link ContainerDefinition} corresponds to. */\n  public readonly container: Container;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request\";\nimport { Resource } from \"../Resource\";\nimport { Offer } from \"./Offer\";\nimport { OfferDefinition } from \"./OfferDefinition\";\n\nexport class OfferResponse extends ResourceResponse<OfferDefinition & Resource> {\n  constructor(\n    resource: OfferDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    diagnostics: CosmosDiagnostics,\n    offer?: Offer\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.offer = offer;\n  }\n  /** A reference to the {@link Offer} corresponding to the returned {@link OfferDefinition}. */\n  public readonly offer: Offer;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { Constants, isResourceValid, ResourceType } from \"../../common\";\nimport { CosmosClient } from \"../../CosmosClient\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { RequestOptions } from \"../../request\";\nimport { OfferDefinition } from \"./OfferDefinition\";\nimport { OfferResponse } from \"./OfferResponse\";\n\n/**\n * Use to read or replace an existing {@link Offer} by id.\n *\n * @see {@link Offers} to query or read all offers.\n */\nexport class Offer {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return `/${Constants.Path.OffersPathSegment}/${this.id}`;\n  }\n  /**\n   * @hidden\n   * @param client - The parent {@link CosmosClient} for the Database Account.\n   * @param id - The id of the given {@link Offer}.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Read the {@link OfferDefinition} for the given {@link Offer}.\n   */\n  public async read(options?: RequestOptions): Promise<OfferResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const response = await this.clientContext.read<OfferDefinition>({\n        path: this.url,\n        resourceType: ResourceType.offer,\n        resourceId: this.id,\n        options,\n        diagnosticNode,\n      });\n      return new OfferResponse(\n        response.result,\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics(),\n        this\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link Offer} with the specified {@link OfferDefinition}.\n   * @param body - The specified {@link OfferDefinition}\n   */\n  public async replace(body: OfferDefinition, options?: RequestOptions): Promise<OfferResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const response = await this.clientContext.replace<OfferDefinition>({\n        body,\n        path: this.url,\n        resourceType: ResourceType.offer,\n        resourceId: this.id,\n        options,\n        diagnosticNode,\n      });\n      return new OfferResponse(\n        response.result,\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics(),\n        this\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { ResourceType } from \"../../common\";\nimport { CosmosClient } from \"../../CosmosClient\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions } from \"../../request\";\nimport { Resource } from \"../Resource\";\nimport { OfferDefinition } from \"./OfferDefinition\";\n\n/**\n * Use to query or read all Offers.\n *\n * @see {@link Offer} to read or replace an existing {@link Offer} by id.\n */\nexport class Offers {\n  /**\n   * @hidden\n   * @param client - The parent {@link CosmosClient} for the offers.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Query all offers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all offers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed<T>({\n        path: \"/offers\",\n        resourceType: ResourceType.offer,\n        resourceId: \"\",\n        resultFn: (result) => result.Offers,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all offers.\n   * @example Read all offers to array.\n   * ```typescript\n   * const {body: offerList} = await client.offers.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<OfferDefinition & Resource> {\n    return this.query<OfferDefinition & Resource>(undefined, options);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport {\n  createDocumentCollectionUri,\n  getIdFromLink,\n  getPathFromLink,\n  HTTPMethod,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport { PartitionKey, PartitionKeyDefinition } from \"../../documents\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions, ResourceResponse, Response } from \"../../request\";\nimport { PartitionedQueryExecutionInfo } from \"../../request/ErrorResponse\";\nimport { Conflict, Conflicts } from \"../Conflict\";\nimport { Database } from \"../Database\";\nimport { Item, Items } from \"../Item\";\nimport { Scripts } from \"../Script/Scripts\";\nimport { ContainerDefinition } from \"./ContainerDefinition\";\nimport { ContainerResponse } from \"./ContainerResponse\";\nimport { PartitionKeyRange } from \"./PartitionKeyRange\";\nimport { Offer, OfferDefinition } from \"../Offer\";\nimport { OfferResponse } from \"../Offer/OfferResponse\";\nimport { Resource } from \"../Resource\";\nimport { FeedRange, FeedRangeInternal } from \"../ChangeFeed\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  getEmptyCosmosDiagnostics,\n  withDiagnostics,\n  withMetadataDiagnostics,\n} from \"../../utils/diagnostics\";\nimport { MetadataLookUpType } from \"../../CosmosDiagnostics\";\n\n/**\n * Operations for reading, replacing, or deleting a specific, existing container by id.\n *\n * @see {@link Containers} for creating new containers, and reading/querying all containers; use `.containers`.\n *\n * Note: all these operations make calls against a fixed budget.\n * You should design your system such that these calls scale sublinearly with your application.\n * For instance, do not call `container(id).read()` before every single `item.read()` call, to ensure the container exists;\n * do this once on application start up.\n */\nexport class Container {\n  private $items: Items;\n  /**\n   * Operations for creating new items, and reading/querying all items\n   *\n   * For reading, replacing, or deleting an existing item, use `.item(id)`.\n   *\n   * @example Create a new item\n   * ```typescript\n   * const {body: createdItem} = await container.items.create({id: \"<item id>\", properties: {}});\n   * ```\n   */\n  public get items(): Items {\n    if (!this.$items) {\n      this.$items = new Items(this, this.clientContext);\n    }\n    return this.$items;\n  }\n\n  private $scripts: Scripts;\n  /**\n   * All operations for Stored Procedures, Triggers, and User Defined Functions\n   */\n  public get scripts(): Scripts {\n    if (!this.$scripts) {\n      this.$scripts = new Scripts(this, this.clientContext);\n    }\n    return this.$scripts;\n  }\n\n  private $conflicts: Conflicts;\n  /**\n   * Operations for reading and querying conflicts for the given container.\n   *\n   * For reading or deleting a specific conflict, use `.conflict(id)`.\n   */\n  public get conflicts(): Conflicts {\n    if (!this.$conflicts) {\n      this.$conflicts = new Conflicts(this, this.clientContext);\n    }\n    return this.$conflicts;\n  }\n\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createDocumentCollectionUri(this.database.id, this.id);\n  }\n\n  /**\n   * Returns a container instance. Note: You should get this from `database.container(id)`, rather than creating your own object.\n   * @param database - The parent {@link Database}.\n   * @param id - The id of the given container.\n   * @hidden\n   */\n  constructor(\n    public readonly database: Database,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Item} by id.\n   *\n   * Use `.items` for creating new items, or querying/reading all items.\n   *\n   * @param id - The id of the {@link Item}.\n   * @param partitionKeyValue - The value of the {@link Item} partition key\n   * @example Replace an item\n   * `const {body: replacedItem} = await container.item(\"<item id>\", \"<partition key value>\").replace({id: \"<item id>\", title: \"Updated post\", authorID: 5});`\n   */\n  public item(id: string, partitionKeyValue?: PartitionKey): Item {\n    return new Item(this, id, this.clientContext, partitionKeyValue);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Conflict} by id.\n   *\n   * Use `.conflicts` for creating new conflicts, or querying/reading all conflicts.\n   * @param id - The id of the {@link Conflict}.\n   */\n  public conflict(id: string, partitionKey?: PartitionKey): Conflict {\n    return new Conflict(this, id, this.clientContext, partitionKey);\n  }\n\n  /** Read the container's definition */\n  public async read(options?: RequestOptions): Promise<ContainerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.readInternal(diagnosticNode, options);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async readInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    options?: RequestOptions\n  ): Promise<ContainerResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.read<ContainerDefinition>({\n      path,\n      resourceType: ResourceType.container,\n      resourceId: id,\n      options,\n      diagnosticNode,\n    });\n    this.clientContext.partitionKeyDefinitionCache[this.url] = response.result.partitionKey;\n    return new ContainerResponse(\n      response.result,\n      response.headers,\n      response.code,\n      this,\n      getEmptyCosmosDiagnostics()\n    );\n  }\n\n  /** Replace the container's definition */\n  public async replace(\n    body: ContainerDefinition,\n    options?: RequestOptions\n  ): Promise<ContainerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<ContainerDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.container,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new ContainerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /** Delete the container */\n  public async delete(options?: RequestOptions): Promise<ContainerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<ContainerDefinition>({\n        path,\n        resourceType: ResourceType.container,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new ContainerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Gets the partition key definition first by looking into the cache otherwise by reading the collection.\n   * @deprecated This method has been renamed to readPartitionKeyDefinition.\n   */\n  public async getPartitionKeyDefinition(): Promise<ResourceResponse<PartitionKeyDefinition>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.readPartitionKeyDefinition(diagnosticNode);\n    }, this.clientContext);\n  }\n\n  /**\n   * Gets the partition key definition first by looking into the cache otherwise by reading the collection.\n   * @hidden\n   */\n  public async readPartitionKeyDefinition(\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<ResourceResponse<PartitionKeyDefinition>> {\n    // $ISSUE-felixfan-2016-03-17: Make name based path and link based path use the same key\n    // $ISSUE-felixfan-2016-03-17: Refresh partitionKeyDefinitionCache when necessary\n    if (this.url in this.clientContext.partitionKeyDefinitionCache) {\n      diagnosticNode.addData({ readFromCache: true });\n      return new ResourceResponse<PartitionKeyDefinition>(\n        this.clientContext.partitionKeyDefinitionCache[this.url],\n        {},\n        0,\n        getEmptyCosmosDiagnostics()\n      );\n    }\n\n    const { headers, statusCode, diagnostics } = await withMetadataDiagnostics(\n      async (node: DiagnosticNodeInternal) => {\n        return this.readInternal(node);\n      },\n      diagnosticNode,\n      MetadataLookUpType.ContainerLookUp\n    );\n\n    return new ResourceResponse<PartitionKeyDefinition>(\n      this.clientContext.partitionKeyDefinitionCache[this.url],\n      headers,\n      statusCode,\n      diagnostics\n    );\n  }\n\n  /**\n   * Gets offer on container. If none exists, returns an OfferResponse with undefined.\n   */\n  public async readOffer(options: RequestOptions = {}): Promise<OfferResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const { resource: container } = await this.read();\n      const path = \"/offers\";\n      const url = container._self;\n\n      const response = await this.clientContext.queryFeed<OfferDefinition & Resource[]>({\n        path,\n        resourceId: \"\",\n        resourceType: ResourceType.offer,\n        query: `SELECT * from root where root.resource = \"${url}\"`,\n        resultFn: (result) => result.Offers,\n        options,\n        diagnosticNode,\n      });\n      const offer = response.result[0]\n        ? new Offer(this.database.client, response.result[0].id, this.clientContext)\n        : undefined;\n      return new OfferResponse(\n        response.result[0],\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics(),\n        offer\n      );\n    }, this.clientContext);\n  }\n\n  public async getQueryPlan(\n    query: string | SqlQuerySpec\n  ): Promise<Response<PartitionedQueryExecutionInfo>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n\n      return this.clientContext.getQueryPlan(\n        path + \"/docs\",\n        ResourceType.item,\n        getIdFromLink(this.url),\n        query,\n        {},\n        diagnosticNode\n      );\n    }, this.clientContext);\n  }\n\n  public readPartitionKeyRanges(feedOptions?: FeedOptions): QueryIterator<PartitionKeyRange> {\n    feedOptions = feedOptions || {};\n    return this.clientContext.queryPartitionKeyRanges(this.url, undefined, feedOptions);\n  }\n  /**\n   *\n   * @returns all the feed ranges for which changefeed could be fetched.\n   */\n  public async getFeedRanges(): Promise<ReadonlyArray<FeedRange>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const { resources } = await this.readPartitionKeyRanges().fetchAllInternal(diagnosticNode);\n\n      const feedRanges: FeedRange[] = [];\n      for (const resource of resources) {\n        const feedRange = new FeedRangeInternal(resource.minInclusive, resource.maxExclusive);\n        Object.freeze(feedRange);\n        feedRanges.push(feedRange);\n      }\n      return feedRanges;\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete all documents belong to the container for the provided partition key value\n   * @param partitionKey - The partition key value of the items to be deleted\n   */\n  public async deleteAllItemsForPartitionKey(\n    partitionKey: PartitionKey,\n    options?: RequestOptions\n  ): Promise<ContainerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      let path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      path = path + \"/operations/partitionkeydelete\";\n      const response = await this.clientContext.delete<ContainerDefinition>({\n        path,\n        resourceType: ResourceType.container,\n        resourceId: id,\n        options,\n        partitionKey: partitionKey,\n        method: HTTPMethod.post,\n        diagnosticNode,\n      });\n      return new ContainerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ContainerRequest } from \"../client/Container/ContainerRequest\";\n\nexport function validateOffer(body: ContainerRequest): void {\n  if (body.throughput) {\n    if (body.maxThroughput) {\n      console.log(\"should be erroring\");\n      throw new Error(\"Cannot specify `throughput` with `maxThroughput`\");\n    }\n    if (body.autoUpgradePolicy) {\n      throw new Error(\n        \"Cannot specify autoUpgradePolicy with throughput. Use `maxThroughput` instead\"\n      );\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport {\n  Constants,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n  StatusCodes,\n} from \"../../common\";\nimport { DEFAULT_PARTITION_KEY_PATH } from \"../../common/partitionKeys\";\nimport { mergeHeaders, SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions } from \"../../request\";\nimport { Database } from \"../Database\";\nimport { Resource } from \"../Resource\";\nimport { Container } from \"./Container\";\nimport { ContainerDefinition } from \"./ContainerDefinition\";\nimport { ContainerRequest } from \"./ContainerRequest\";\nimport { ContainerResponse } from \"./ContainerResponse\";\nimport { validateOffer } from \"../../utils/offers\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Operations for creating new containers, and reading/querying all containers\n *\n * @see {@link Container} for reading, replacing, or deleting an existing container; use `.container(id)`.\n *\n * Note: all these operations make calls against a fixed budget.\n * You should design your system such that these calls scale sublinearly with your application.\n * For instance, do not call `containers.readAll()` before every single `item.read()` call, to ensure the container exists;\n * do this once on application start up.\n */\nexport class Containers {\n  constructor(public readonly database: Database, private readonly clientContext: ClientContext) {}\n\n  /**\n   * Queries all containers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return specific containers in an array or iterate over them one at a time.\n   * @example Read all containers to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM root r WHERE r.id = @container\",\n   *   parameters: [\n   *     {name: \"@container\", value: \"Todo\"}\n   *   ]\n   * };\n   * const {body: containerList} = await client.database(\"<db id>\").containers.query(querySpec).fetchAll();\n   * ```\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Queries all containers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return specific containers in an array or iterate over them one at a time.\n   * @example Read all containers to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM root r WHERE r.id = @container\",\n   *   parameters: [\n   *     {name: \"@container\", value: \"Todo\"}\n   *   ]\n   * };\n   * const {body: containerList} = await client.database(\"<db id>\").containers.query(querySpec).fetchAll();\n   * ```\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.database.url, ResourceType.container);\n    const id = getIdFromLink(this.database.url);\n\n    return new QueryIterator(\n      this.clientContext,\n      query,\n      options,\n      (diagNode: DiagnosticNodeInternal, innerOptions) => {\n        return this.clientContext.queryFeed<ContainerDefinition>({\n          path,\n          resourceType: ResourceType.container,\n          resourceId: id,\n          resultFn: (result) => result.DocumentCollections,\n          query,\n          options: innerOptions,\n          diagnosticNode: diagNode,\n        });\n      }\n    );\n  }\n\n  /**\n   * Creates a container.\n   *\n   * A container is a named logical container for items.\n   *\n   * A database may contain zero or more named containers and each container consists of\n   * zero or more JSON items.\n   *\n   * Being schema-free, the items in a container do not need to share the same structure or fields.\n   *\n   *\n   * Since containers are application resources, they can be authorized using either the\n   * master key or resource keys.\n   *\n   * @param body - Represents the body of the container.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   */\n  public async create(\n    body: ContainerRequest,\n    options: RequestOptions = {}\n  ): Promise<ContainerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.createInternal(diagnosticNode, body, options);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async createInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    body: ContainerRequest,\n    options: RequestOptions = {}\n  ): Promise<ContainerResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n    const path = getPathFromLink(this.database.url, ResourceType.container);\n    const id = getIdFromLink(this.database.url);\n\n    validateOffer(body);\n\n    if (body.maxThroughput) {\n      const autoscaleParams: {\n        maxThroughput: number;\n        autoUpgradePolicy?: {\n          throughputPolicy: {\n            incrementPercent: number;\n          };\n        };\n      } = {\n        maxThroughput: body.maxThroughput,\n      };\n      if (body.autoUpgradePolicy) {\n        autoscaleParams.autoUpgradePolicy = body.autoUpgradePolicy;\n      }\n      const autoscaleHeader = JSON.stringify(autoscaleParams);\n      options.initialHeaders = Object.assign({}, options.initialHeaders, {\n        [Constants.HttpHeaders.AutoscaleSettings]: autoscaleHeader,\n      });\n      delete body.maxThroughput;\n      delete body.autoUpgradePolicy;\n    }\n\n    if (body.throughput) {\n      options.initialHeaders = Object.assign({}, options.initialHeaders, {\n        [Constants.HttpHeaders.OfferThroughput]: body.throughput,\n      });\n      delete body.throughput;\n    }\n\n    if (typeof body.partitionKey === \"string\") {\n      if (!body.partitionKey.startsWith(\"/\")) {\n        throw new Error(\"Partition key must start with '/'\");\n      }\n      body.partitionKey = {\n        paths: [body.partitionKey],\n      };\n    }\n\n    // If they don't specify a partition key, use the default path\n    if (!body.partitionKey || !body.partitionKey.paths) {\n      body.partitionKey = {\n        paths: [DEFAULT_PARTITION_KEY_PATH],\n      };\n    }\n\n    const response = await this.clientContext.create<ContainerRequest, ContainerDefinition>({\n      body,\n      path,\n      resourceType: ResourceType.container,\n      resourceId: id,\n      diagnosticNode,\n      options,\n    });\n    const ref = new Container(this.database, response.result.id, this.clientContext);\n    return new ContainerResponse(\n      response.result,\n      response.headers,\n      response.code,\n      ref,\n      getEmptyCosmosDiagnostics()\n    );\n  }\n\n  /**\n   * Checks if a Container exists, and, if it doesn't, creates it.\n   * This will make a read operation based on the id in the `body`, then if it is not found, a create operation.\n   * You should confirm that the output matches the body you passed in for non-default properties (i.e. indexing policy/etc.)\n   *\n   * A container is a named logical container for items.\n   *\n   * A database may contain zero or more named containers and each container consists of\n   * zero or more JSON items.\n   *\n   * Being schema-free, the items in a container do not need to share the same structure or fields.\n   *\n   *\n   * Since containers are application resources, they can be authorized using either the\n   * master key or resource keys.\n   *\n   * @param body - Represents the body of the container.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   */\n  public async createIfNotExists(\n    body: ContainerRequest,\n    options?: RequestOptions\n  ): Promise<ContainerResponse> {\n    if (!body || body.id === null || body.id === undefined) {\n      throw new Error(\"body parameter must be an object with an id property\");\n    }\n    /*\n      1. Attempt to read the Container (based on an assumption that most containers will already exist, so its faster)\n      2. If it fails with NotFound error, attempt to create the container. Else, return the read results.\n    */\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      try {\n        const readResponse = await this.database\n          .container(body.id)\n          .readInternal(diagnosticNode, options);\n        return readResponse;\n      } catch (err: any) {\n        if (err.code === StatusCodes.NotFound) {\n          const createResponse = await this.createInternal(diagnosticNode, body, options);\n          // Must merge the headers to capture RU costskaty\n          mergeHeaders(createResponse.headers, err.headers);\n          return createResponse;\n        } else {\n          throw err;\n        }\n      }\n    }, this.clientContext);\n  }\n\n  /**\n   * Read all containers.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return all containers in an array or iterate over them one at a time.\n   * @example Read all containers to array.\n   * ```typescript\n   * const {body: containerList} = await client.database(\"<db id>\").containers.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<ContainerDefinition & Resource> {\n    return this.query(undefined, options);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request\";\nimport { Resource } from \"../Resource\";\nimport { Permission } from \"./Permission\";\nimport { PermissionBody } from \"./PermissionBody\";\nimport { PermissionDefinition } from \"./PermissionDefinition\";\n\nexport class PermissionResponse extends ResourceResponse<\n  PermissionDefinition & PermissionBody & Resource\n> {\n  constructor(\n    resource: PermissionDefinition & PermissionBody & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    permission: Permission,\n    diagnostics: CosmosDiagnostics\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.permission = permission;\n  }\n  /** A reference to the {@link Permission} corresponding to the returned {@link PermissionDefinition}. */\n  public readonly permission: Permission;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createPermissionUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport { RequestOptions } from \"../../request/RequestOptions\";\nimport { User } from \"../User\";\nimport { PermissionBody } from \"./PermissionBody\";\nimport { PermissionDefinition } from \"./PermissionDefinition\";\nimport { PermissionResponse } from \"./PermissionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Use to read, replace, or delete a given {@link Permission} by id.\n *\n * @see {@link Permissions} to create, upsert, query, or read all Permissions.\n */\nexport class Permission {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createPermissionUri(this.user.database.id, this.user.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param user - The parent {@link User}.\n   * @param id - The id of the given {@link Permission}.\n   */\n  constructor(\n    public readonly user: User,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Read the {@link PermissionDefinition} of the given {@link Permission}.\n   */\n  public async read(options?: RequestOptions): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<PermissionDefinition & PermissionBody>({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link Permission} with the specified {@link PermissionDefinition}.\n   * @param body - The specified {@link PermissionDefinition}.\n   */\n  public async replace(\n    body: PermissionDefinition,\n    options?: RequestOptions\n  ): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.replace<PermissionDefinition & PermissionBody>({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link Permission}.\n   */\n  public async delete(options?: RequestOptions): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.delete<PermissionDefinition & PermissionBody>({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions } from \"../../request\";\nimport { Resource } from \"../Resource\";\nimport { User } from \"../User\";\nimport { Permission } from \"./Permission\";\nimport { PermissionBody } from \"./PermissionBody\";\nimport { PermissionDefinition } from \"./PermissionDefinition\";\nimport { PermissionResponse } from \"./PermissionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Use to create, replace, query, and read all Permissions.\n *\n * @see {@link Permission} to read, replace, or delete a specific permission by id.\n */\nexport class Permissions {\n  /**\n   * @hidden\n   * @param user - The parent {@link User}.\n   */\n  constructor(public readonly user: User, private readonly clientContext: ClientContext) {}\n\n  /**\n   * Query all permissions.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all permissions.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.user.url, ResourceType.permission);\n    const id = getIdFromLink(this.user.url);\n\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        resultFn: (result) => result.Permissions,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all permissions.\n   * @example Read all permissions to array.\n   * ```typescript\n   * const {body: permissionList} = await user.permissions.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<PermissionDefinition & Resource> {\n    return this.query(undefined, options);\n  }\n\n  /**\n   * Create a permission.\n   *\n   * A permission represents a per-User Permission to access a specific resource\n   * e.g. Item or Container.\n   * @param body - Represents the body of the permission.\n   */\n  public async create(\n    body: PermissionDefinition,\n    options?: RequestOptions\n  ): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.user.url, ResourceType.permission);\n      const id = getIdFromLink(this.user.url);\n\n      const response = await this.clientContext.create<PermissionDefinition, PermissionBody>({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        diagnosticNode,\n        options,\n      });\n      const ref = new Permission(this.user, response.result.id, this.clientContext);\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Upsert a permission.\n   *\n   * A permission represents a per-User Permission to access a\n   * specific resource e.g. Item or Container.\n   */\n  public async upsert(\n    body: PermissionDefinition,\n    options?: RequestOptions\n  ): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.user.url, ResourceType.permission);\n      const id = getIdFromLink(this.user.url);\n\n      const response = await this.clientContext.upsert<PermissionDefinition, PermissionBody>({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new Permission(this.user, response.result.id, this.clientContext);\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request\";\nimport { Resource } from \"../Resource\";\nimport { User } from \"./User\";\nimport { UserDefinition } from \"./UserDefinition\";\n\nexport class UserResponse extends ResourceResponse<UserDefinition & Resource> {\n  constructor(\n    resource: UserDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    user: User,\n    diagnostics: CosmosDiagnostics\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.user = user;\n  }\n  /** A reference to the {@link User} corresponding to the returned {@link UserDefinition}. */\n  public readonly user: User;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createUserUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport { RequestOptions } from \"../../request\";\nimport { Database } from \"../Database\";\nimport { Permission, Permissions } from \"../Permission\";\nimport { UserDefinition } from \"./UserDefinition\";\nimport { UserResponse } from \"./UserResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Used to read, replace, and delete Users.\n *\n * Additionally, you can access the permissions for a given user via `user.permission` and `user.permissions`.\n *\n * @see {@link Users} to create, upsert, query, or read all.\n */\nexport class User {\n  /**\n   * Operations for creating, upserting, querying, or reading all operations.\n   *\n   * See `client.permission(id)` to read, replace, or delete a specific Permission by id.\n   */\n  public readonly permissions: Permissions;\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createUserUri(this.database.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param database - The parent {@link Database}.\n   */\n  constructor(\n    public readonly database: Database,\n    public readonly id: string,\n    private readonly clientContext: ClientContext\n  ) {\n    this.permissions = new Permissions(this, this.clientContext);\n  }\n\n  /**\n   * Operations to read, replace, or delete a specific Permission by id.\n   *\n   * See `client.permissions` for creating, upserting, querying, or reading all operations.\n   */\n  public permission(id: string): Permission {\n    return new Permission(this, id, this.clientContext);\n  }\n\n  /**\n   * Read the {@link UserDefinition} for the given {@link User}.\n   */\n  public async read(options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.read<UserDefinition>({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link User}'s definition with the specified {@link UserDefinition}.\n   * @param body - The specified {@link UserDefinition} to replace the definition.\n   */\n  public async replace(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<UserDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link User}.\n   */\n  public async delete(options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<UserDefinition>({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions } from \"../../request\";\nimport { Database } from \"../Database\";\nimport { Resource } from \"../Resource\";\nimport { User } from \"./User\";\nimport { UserDefinition } from \"./UserDefinition\";\nimport { UserResponse } from \"./UserResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Used to create, upsert, query, and read all users.\n *\n * @see {@link User} to read, replace, or delete a specific User by id.\n */\nexport class Users {\n  /**\n   * @hidden\n   * @param database - The parent {@link Database}.\n   */\n  constructor(public readonly database: Database, private readonly clientContext: ClientContext) {}\n\n  /**\n   * Query all users.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all users.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.database.url, ResourceType.user);\n    const id = getIdFromLink(this.database.url);\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        resultFn: (result) => result.Users,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all users.-\n   * @example Read all users to array.\n   * ```typescript\n   * const {body: usersList} = await database.users.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<UserDefinition & Resource> {\n    return this.query<UserDefinition & Resource>(undefined, options);\n  }\n\n  /**\n   * Create a database user with the specified {@link UserDefinition}.\n   * @param body - The specified {@link UserDefinition}.\n   */\n  public async create(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.database.url, ResourceType.user);\n      const id = getIdFromLink(this.database.url);\n      const response = await this.clientContext.create<UserDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new User(this.database, response.result.id, this.clientContext);\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Upsert a database user with a specified {@link UserDefinition}.\n   * @param body - The specified {@link UserDefinition}.\n   */\n  public async upsert(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.database.url, ResourceType.user);\n      const id = getIdFromLink(this.database.url);\n\n      const response = await this.clientContext.upsert<UserDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new User(this.database, response.result.id, this.clientContext);\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request/ResourceResponse\";\nimport { Resource } from \"../Resource\";\nimport { Database } from \"./Database\";\nimport { DatabaseDefinition } from \"./DatabaseDefinition\";\n\n/** Response object for Database operations */\nexport class DatabaseResponse extends ResourceResponse<DatabaseDefinition & Resource> {\n  constructor(\n    resource: DatabaseDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    database: Database,\n    diagnostics: CosmosDiagnostics\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.database = database;\n  }\n  /** A reference to the {@link Database} that the returned {@link DatabaseDefinition} corresponds to. */\n  public readonly database: Database;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { createDatabaseUri, getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport { CosmosClient } from \"../../CosmosClient\";\nimport { RequestOptions } from \"../../request\";\nimport { Container, Containers } from \"../Container\";\nimport { User, Users } from \"../User\";\nimport { DatabaseDefinition } from \"./DatabaseDefinition\";\nimport { DatabaseResponse } from \"./DatabaseResponse\";\nimport { OfferResponse, OfferDefinition, Offer } from \"../Offer\";\nimport { Resource } from \"../Resource\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  getEmptyCosmosDiagnostics,\n  withDiagnostics,\n  withMetadataDiagnostics,\n} from \"../../utils/diagnostics\";\nimport { MetadataLookUpType } from \"../../CosmosDiagnostics\";\n\n/**\n * Operations for reading or deleting an existing database.\n *\n * @see {@link Databases} for creating new databases, and reading/querying all databases; use `client.databases`.\n *\n * Note: all these operations make calls against a fixed budget.\n * You should design your system such that these calls scale sublinearly with your application.\n * For instance, do not call `database.read()` before every single `item.read()` call, to ensure the database exists;\n * do this once on application start up.\n */\nexport class Database {\n  /**\n   * Used for creating new containers, or querying/reading all containers.\n   *\n   * Use `.database(id)` to read, replace, or delete a specific, existing {@link Database} by id.\n   *\n   * @example Create a new container\n   * ```typescript\n   * const {body: containerDefinition, container} = await client.database(\"<db id>\").containers.create({id: \"<container id>\"});\n   * ```\n   */\n  public readonly containers: Containers;\n  /**\n   * Used for creating new users, or querying/reading all users.\n   *\n   * Use `.user(id)` to read, replace, or delete a specific, existing {@link User} by id.\n   */\n  public readonly users: Users;\n\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createDatabaseUri(this.id);\n  }\n\n  /** Returns a new {@link Database} instance.\n   *\n   * Note: the intention is to get this object from {@link CosmosClient} via `client.database(id)`, not to instantiate it yourself.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    public readonly id: string,\n    private clientContext: ClientContext\n  ) {\n    this.containers = new Containers(this, this.clientContext);\n    this.users = new Users(this, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Database} by id.\n   *\n   * Use `.containers` creating new containers, or querying/reading all containers.\n   *\n   * @example Delete a container\n   * ```typescript\n   * await client.database(\"<db id>\").container(\"<container id>\").delete();\n   * ```\n   */\n  public container(id: string): Container {\n    return new Container(this, id, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link User} by id.\n   *\n   * Use `.users` for creating new users, or querying/reading all users.\n   */\n  public user(id: string): User {\n    return new User(this, id, this.clientContext);\n  }\n\n  /** Read the definition of the given Database. */\n  public async read(options?: RequestOptions): Promise<DatabaseResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.readInternal(diagnosticNode, options);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async readInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    options?: RequestOptions\n  ): Promise<DatabaseResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.read<DatabaseDefinition>({\n      path,\n      resourceType: ResourceType.database,\n      resourceId: id,\n      options,\n      diagnosticNode,\n    });\n    return new DatabaseResponse(\n      response.result,\n      response.headers,\n      response.code,\n      this,\n      getEmptyCosmosDiagnostics()\n    );\n  }\n\n  /** Delete the given Database. */\n  public async delete(options?: RequestOptions): Promise<DatabaseResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<DatabaseDefinition>({\n        path,\n        resourceType: ResourceType.database,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new DatabaseResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics()\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Gets offer on database. If none exists, returns an OfferResponse with undefined.\n   */\n  public async readOffer(options: RequestOptions = {}): Promise<OfferResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const { resource: record } = await withMetadataDiagnostics(\n        async (node: DiagnosticNodeInternal) => {\n          return this.readInternal(node);\n        },\n        diagnosticNode,\n        MetadataLookUpType.DatabaseLookUp\n      );\n\n      const path = \"/offers\";\n      const url = record._self;\n\n      const response = await this.clientContext.queryFeed<OfferDefinition & Resource[]>({\n        path,\n        resourceId: \"\",\n        resourceType: ResourceType.offer,\n        query: `SELECT * from root where root.resource = \"${url}\"`,\n        resultFn: (result) => result.Offers,\n        options,\n        diagnosticNode,\n      });\n      const offer = response.result[0]\n        ? new Offer(this.client, response.result[0].id, this.clientContext)\n        : undefined;\n      return new OfferResponse(\n        response.result[0],\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics(),\n        offer\n      );\n    }, this.clientContext);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { Constants, isResourceValid, ResourceType, StatusCodes } from \"../../common\";\nimport { CosmosClient } from \"../../CosmosClient\";\nimport { FetchFunctionCallback, mergeHeaders, SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport { FeedOptions, RequestOptions } from \"../../request\";\nimport { Resource } from \"../Resource\";\nimport { Database } from \"./Database\";\nimport { DatabaseDefinition } from \"./DatabaseDefinition\";\nimport { DatabaseRequest } from \"./DatabaseRequest\";\nimport { DatabaseResponse } from \"./DatabaseResponse\";\nimport { validateOffer } from \"../../utils/offers\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Operations for creating new databases, and reading/querying all databases\n *\n * @see {@link Database} for reading or deleting an existing database; use `client.database(id)`.\n *\n * Note: all these operations make calls against a fixed budget.\n * You should design your system such that these calls scale sublinearly with your application.\n * For instance, do not call `databases.readAll()` before every single `item.read()` call, to ensure the database exists;\n * do this once on application start up.\n */\nexport class Databases {\n  /**\n   * @hidden\n   * @param client - The parent {@link CosmosClient} for the Database.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    private readonly clientContext: ClientContext\n  ) {}\n\n  /**\n   * Queries all databases.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return all databases in an array or iterate over them one at a time.\n   * @example Read all databases to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM root r WHERE r.id = @db\",\n   *   parameters: [\n   *     {name: \"@db\", value: \"Todo\"}\n   *   ]\n   * };\n   * const {body: databaseList} = await client.databases.query(querySpec).fetchAll();\n   * ```\n   */\n  public query(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Queries all databases.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return all databases in an array or iterate over them one at a time.\n   * @example Read all databases to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM root r WHERE r.id = @db\",\n   *   parameters: [\n   *     {name: \"@db\", value: \"Todo\"}\n   *   ]\n   * };\n   * const {body: databaseList} = await client.databases.query(querySpec).fetchAll();\n   * ```\n   */\n  public query<T>(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const cb: FetchFunctionCallback = (diagNode: DiagnosticNodeInternal, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path: \"/dbs\",\n        resourceType: ResourceType.database,\n        resourceId: \"\",\n        resultFn: (result) => result.Databases,\n        query,\n        options: innerOptions,\n        diagnosticNode: diagNode,\n      });\n    };\n    return new QueryIterator(this.clientContext, query, options, cb);\n  }\n\n  /**\n   * Send a request for creating a database.\n   *\n   * A database manages users, permissions and a set of containers.\n   * Each Azure Cosmos DB Database Account is able to support multiple independent named databases,\n   * with the database being the logical container for data.\n   *\n   * Each Database consists of one or more containers, each of which in turn contain one or more\n   * documents. Since databases are an administrative resource, the Service Master Key will be\n   * required in order to access and successfully complete any action using the User APIs.\n   *\n   * @param body - The {@link DatabaseDefinition} that represents the {@link Database} to be created.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   */\n  public async create(\n    body: DatabaseRequest,\n    options: RequestOptions = {}\n  ): Promise<DatabaseResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.createInternal(diagnosticNode, body, options);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async createInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    body: DatabaseRequest,\n    options: RequestOptions = {}\n  ): Promise<DatabaseResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    validateOffer(body);\n\n    if (body.maxThroughput) {\n      const autoscaleParams: {\n        maxThroughput: number;\n        autoUpgradePolicy?: {\n          throughputPolicy: {\n            incrementPercent: number;\n          };\n        };\n      } = {\n        maxThroughput: body.maxThroughput,\n      };\n      if (body.autoUpgradePolicy) {\n        autoscaleParams.autoUpgradePolicy = body.autoUpgradePolicy;\n      }\n      const autoscaleHeaders = JSON.stringify(autoscaleParams);\n      options.initialHeaders = Object.assign({}, options.initialHeaders, {\n        [Constants.HttpHeaders.AutoscaleSettings]: autoscaleHeaders,\n      });\n      delete body.maxThroughput;\n      delete body.autoUpgradePolicy;\n    }\n\n    if (body.throughput) {\n      options.initialHeaders = Object.assign({}, options.initialHeaders, {\n        [Constants.HttpHeaders.OfferThroughput]: body.throughput,\n      });\n      delete body.throughput;\n    }\n\n    const path = \"/dbs\"; // TODO: constant\n    const response = await this.clientContext.create<DatabaseRequest>({\n      body,\n      path,\n      resourceType: ResourceType.database,\n      resourceId: undefined,\n      diagnosticNode,\n      options,\n    });\n    const ref = new Database(this.client, body.id, this.clientContext);\n    return new DatabaseResponse(\n      response.result,\n      response.headers,\n      response.code,\n      ref,\n      getEmptyCosmosDiagnostics()\n    );\n  }\n\n  /**\n   * Check if a database exists, and if it doesn't, create it.\n   * This will make a read operation based on the id in the `body`, then if it is not found, a create operation.\n   *\n   * A database manages users, permissions and a set of containers.\n   * Each Azure Cosmos DB Database Account is able to support multiple independent named databases,\n   * with the database being the logical container for data.\n   *\n   * Each Database consists of one or more containers, each of which in turn contain one or more\n   * documents. Since databases are an an administrative resource, the Service Master Key will be\n   * required in order to access and successfully complete any action using the User APIs.\n   *\n   * @param body - The {@link DatabaseDefinition} that represents the {@link Database} to be created.\n   * @param options - Additional options for the request\n   */\n  public async createIfNotExists(\n    body: DatabaseRequest,\n    options?: RequestOptions\n  ): Promise<DatabaseResponse> {\n    if (!body || body.id === null || body.id === undefined) {\n      throw new Error(\"body parameter must be an object with an id property\");\n    }\n    /*\n      1. Attempt to read the Database (based on an assumption that most databases will already exist, so its faster)\n      2. If it fails with NotFound error, attempt to create the db. Else, return the read results.\n    */\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      try {\n        const readResponse = await this.client\n          .database(body.id)\n          .readInternal(diagnosticNode, options);\n        return readResponse;\n      } catch (err: any) {\n        if (err.code === StatusCodes.NotFound) {\n          const createResponse = await this.createInternal(diagnosticNode, body, options);\n          // Must merge the headers to capture RU costskaty\n          mergeHeaders(createResponse.headers, err.headers);\n          return createResponse;\n        } else {\n          throw err;\n        }\n      }\n    }, this.clientContext);\n  }\n\n  // TODO: DatabaseResponse for QueryIterator?\n  /**\n   * Reads all databases.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return all databases in an array or iterate over them one at a time.\n   * @example Read all databases to array.\n   * ```typescript\n   * const {body: databaseList} = await client.databases.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<DatabaseDefinition & Resource> {\n    return this.query<DatabaseDefinition & Resource>(undefined, options);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { HttpClient, PipelineRequest, PipelineResponse, SendRequest } from \"./interfaces\";\n\n/**\n * Policies are executed in phases.\n * The execution order is:\n * 1. Serialize Phase\n * 2. Policies not in a phase\n * 3. Deserialize Phase\n * 4. Retry Phase\n * 5. Sign Phase\n */\nexport type PipelinePhase = \"Deserialize\" | \"Serialize\" | \"Retry\" | \"Sign\";\n\nconst ValidPhaseNames = new Set<PipelinePhase>([\"Deserialize\", \"Serialize\", \"Retry\", \"Sign\"]);\n\n/**\n * Options when adding a policy to the pipeline.\n * Used to express dependencies on other policies.\n */\nexport interface AddPolicyOptions {\n  /**\n   * Policies that this policy must come before.\n   */\n  beforePolicies?: string[];\n  /**\n   * Policies that this policy must come after.\n   */\n  afterPolicies?: string[];\n  /**\n   * The phase that this policy must come after.\n   */\n  afterPhase?: PipelinePhase;\n  /**\n   * The phase this policy belongs to.\n   */\n  phase?: PipelinePhase;\n}\n\n/**\n * A pipeline policy manipulates a request as it travels through the pipeline.\n * It is conceptually a middleware that is allowed to modify the request before\n * it is made as well as the response when it is received.\n */\nexport interface PipelinePolicy {\n  /**\n   * The policy name. Must be a unique string in the pipeline.\n   */\n  name: string;\n  /**\n   * The main method to implement that manipulates a request/response.\n   * @param request - The request being performed.\n   * @param next - The next policy in the pipeline. Must be called to continue the pipeline.\n   */\n  sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse>;\n}\n\n/**\n * Represents a pipeline for making a HTTP request to a URL.\n * Pipelines can have multiple policies to manage manipulating each request\n * before and after it is made to the server.\n */\nexport interface Pipeline {\n  /**\n   * Add a new policy to the pipeline.\n   * @param policy - A policy that manipulates a request.\n   * @param options - A set of options for when the policy should run.\n   */\n  addPolicy(policy: PipelinePolicy, options?: AddPolicyOptions): void;\n  /**\n   * Remove a policy from the pipeline.\n   * @param options - Options that let you specify which policies to remove.\n   */\n  removePolicy(options: { name?: string; phase?: PipelinePhase }): PipelinePolicy[];\n  /**\n   * Uses the pipeline to make a HTTP request.\n   * @param httpClient - The HttpClient that actually performs the request.\n   * @param request - The request to be made.\n   */\n  sendRequest(httpClient: HttpClient, request: PipelineRequest): Promise<PipelineResponse>;\n  /**\n   * Returns the current set of policies in the pipeline in the order in which\n   * they will be applied to the request. Later in the list is closer to when\n   * the request is performed.\n   */\n  getOrderedPolicies(): PipelinePolicy[];\n  /**\n   * Duplicates this pipeline to allow for modifying an existing one without mutating it.\n   */\n  clone(): Pipeline;\n}\n\ninterface PipelineDescriptor {\n  policy: PipelinePolicy;\n  options: AddPolicyOptions;\n}\n\ninterface PolicyGraphNode {\n  policy: PipelinePolicy;\n  dependsOn: Set<PolicyGraphNode>;\n  dependants: Set<PolicyGraphNode>;\n  afterPhase?: Phase;\n}\n\ninterface Phase {\n  name: PipelinePhase | \"None\";\n  policies: Set<PolicyGraphNode>;\n  hasRun: boolean;\n  hasAfterPolicies: boolean;\n}\n\n/**\n * A private implementation of Pipeline.\n * Do not export this class from the package.\n * @internal\n */\nclass HttpPipeline implements Pipeline {\n  private _policies: PipelineDescriptor[] = [];\n  private _orderedPolicies?: PipelinePolicy[];\n\n  private constructor(policies?: PipelineDescriptor[]) {\n    this._policies = policies?.slice(0) ?? [];\n    this._orderedPolicies = undefined;\n  }\n\n  public addPolicy(policy: PipelinePolicy, options: AddPolicyOptions = {}): void {\n    if (options.phase && options.afterPhase) {\n      throw new Error(\"Policies inside a phase cannot specify afterPhase.\");\n    }\n    if (options.phase && !ValidPhaseNames.has(options.phase)) {\n      throw new Error(`Invalid phase name: ${options.phase}`);\n    }\n    if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {\n      throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);\n    }\n    this._policies.push({\n      policy,\n      options,\n    });\n    this._orderedPolicies = undefined;\n  }\n\n  public removePolicy(options: { name?: string; phase?: string }): PipelinePolicy[] {\n    const removedPolicies: PipelinePolicy[] = [];\n\n    this._policies = this._policies.filter((policyDescriptor) => {\n      if (\n        (options.name && policyDescriptor.policy.name === options.name) ||\n        (options.phase && policyDescriptor.options.phase === options.phase)\n      ) {\n        removedPolicies.push(policyDescriptor.policy);\n        return false;\n      } else {\n        return true;\n      }\n    });\n    this._orderedPolicies = undefined;\n\n    return removedPolicies;\n  }\n\n  public sendRequest(httpClient: HttpClient, request: PipelineRequest): Promise<PipelineResponse> {\n    const policies = this.getOrderedPolicies();\n\n    const pipeline = policies.reduceRight<SendRequest>(\n      (next, policy) => {\n        return (req: PipelineRequest) => {\n          return policy.sendRequest(req, next);\n        };\n      },\n      (req: PipelineRequest) => httpClient.sendRequest(req),\n    );\n\n    return pipeline(request);\n  }\n\n  public getOrderedPolicies(): PipelinePolicy[] {\n    if (!this._orderedPolicies) {\n      this._orderedPolicies = this.orderPolicies();\n    }\n    return this._orderedPolicies;\n  }\n\n  public clone(): Pipeline {\n    return new HttpPipeline(this._policies);\n  }\n\n  public static create(): Pipeline {\n    return new HttpPipeline();\n  }\n\n  private orderPolicies(): PipelinePolicy[] {\n    /**\n     * The goal of this method is to reliably order pipeline policies\n     * based on their declared requirements when they were added.\n     *\n     * Order is first determined by phase:\n     *\n     * 1. Serialize Phase\n     * 2. Policies not in a phase\n     * 3. Deserialize Phase\n     * 4. Retry Phase\n     * 5. Sign Phase\n     *\n     * Within each phase, policies are executed in the order\n     * they were added unless they were specified to execute\n     * before/after other policies or after a particular phase.\n     *\n     * To determine the final order, we will walk the policy list\n     * in phase order multiple times until all dependencies are\n     * satisfied.\n     *\n     * `afterPolicies` are the set of policies that must be\n     * executed before a given policy. This requirement is\n     * considered satisfied when each of the listed policies\n     * have been scheduled.\n     *\n     * `beforePolicies` are the set of policies that must be\n     * executed after a given policy. Since this dependency\n     * can be expressed by converting it into a equivalent\n     * `afterPolicies` declarations, they are normalized\n     * into that form for simplicity.\n     *\n     * An `afterPhase` dependency is considered satisfied when all\n     * policies in that phase have scheduled.\n     *\n     */\n    const result: PipelinePolicy[] = [];\n\n    // Track all policies we know about.\n    const policyMap: Map<string, PolicyGraphNode> = new Map<string, PolicyGraphNode>();\n\n    function createPhase(name: PipelinePhase | \"None\"): Phase {\n      return {\n        name,\n        policies: new Set<PolicyGraphNode>(),\n        hasRun: false,\n        hasAfterPolicies: false,\n      };\n    }\n\n    // Track policies for each phase.\n    const serializePhase = createPhase(\"Serialize\");\n    const noPhase = createPhase(\"None\");\n    const deserializePhase = createPhase(\"Deserialize\");\n    const retryPhase = createPhase(\"Retry\");\n    const signPhase = createPhase(\"Sign\");\n\n    // a list of phases in order\n    const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase];\n\n    // Small helper function to map phase name to each Phase\n    function getPhase(phase: PipelinePhase | undefined): Phase {\n      if (phase === \"Retry\") {\n        return retryPhase;\n      } else if (phase === \"Serialize\") {\n        return serializePhase;\n      } else if (phase === \"Deserialize\") {\n        return deserializePhase;\n      } else if (phase === \"Sign\") {\n        return signPhase;\n      } else {\n        return noPhase;\n      }\n    }\n\n    // First walk each policy and create a node to track metadata.\n    for (const descriptor of this._policies) {\n      const policy = descriptor.policy;\n      const options = descriptor.options;\n      const policyName = policy.name;\n      if (policyMap.has(policyName)) {\n        throw new Error(\"Duplicate policy names not allowed in pipeline\");\n      }\n      const node: PolicyGraphNode = {\n        policy,\n        dependsOn: new Set<PolicyGraphNode>(),\n        dependants: new Set<PolicyGraphNode>(),\n      };\n      if (options.afterPhase) {\n        node.afterPhase = getPhase(options.afterPhase);\n        node.afterPhase.hasAfterPolicies = true;\n      }\n      policyMap.set(policyName, node);\n      const phase = getPhase(options.phase);\n      phase.policies.add(node);\n    }\n\n    // Now that each policy has a node, connect dependency references.\n    for (const descriptor of this._policies) {\n      const { policy, options } = descriptor;\n      const policyName = policy.name;\n      const node = policyMap.get(policyName);\n      if (!node) {\n        throw new Error(`Missing node for policy ${policyName}`);\n      }\n\n      if (options.afterPolicies) {\n        for (const afterPolicyName of options.afterPolicies) {\n          const afterNode = policyMap.get(afterPolicyName);\n          if (afterNode) {\n            // Linking in both directions helps later\n            // when we want to notify dependants.\n            node.dependsOn.add(afterNode);\n            afterNode.dependants.add(node);\n          }\n        }\n      }\n      if (options.beforePolicies) {\n        for (const beforePolicyName of options.beforePolicies) {\n          const beforeNode = policyMap.get(beforePolicyName);\n          if (beforeNode) {\n            // To execute before another node, make it\n            // depend on the current node.\n            beforeNode.dependsOn.add(node);\n            node.dependants.add(beforeNode);\n          }\n        }\n      }\n    }\n\n    function walkPhase(phase: Phase): void {\n      phase.hasRun = true;\n      // Sets iterate in insertion order\n      for (const node of phase.policies) {\n        if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {\n          // If this node is waiting on a phase to complete,\n          // we need to skip it for now.\n          // Even if the phase is empty, we should wait for it\n          // to be walked to avoid re-ordering policies.\n          continue;\n        }\n        if (node.dependsOn.size === 0) {\n          // If there's nothing else we're waiting for, we can\n          // add this policy to the result list.\n          result.push(node.policy);\n          // Notify anything that depends on this policy that\n          // the policy has been scheduled.\n          for (const dependant of node.dependants) {\n            dependant.dependsOn.delete(node);\n          }\n          policyMap.delete(node.policy.name);\n          phase.policies.delete(node);\n        }\n      }\n    }\n\n    function walkPhases(): void {\n      for (const phase of orderedPhases) {\n        walkPhase(phase);\n        // if the phase isn't complete\n        if (phase.policies.size > 0 && phase !== noPhase) {\n          if (!noPhase.hasRun) {\n            // Try running noPhase to see if that unblocks this phase next tick.\n            // This can happen if a phase that happens before noPhase\n            // is waiting on a noPhase policy to complete.\n            walkPhase(noPhase);\n          }\n          // Don't proceed to the next phase until this phase finishes.\n          return;\n        }\n\n        if (phase.hasAfterPolicies) {\n          // Run any policies unblocked by this phase\n          walkPhase(noPhase);\n        }\n      }\n    }\n\n    // Iterate until we've put every node in the result list.\n    let iteration = 0;\n    while (policyMap.size > 0) {\n      iteration++;\n      const initialResultLength = result.length;\n      // Keep walking each phase in order until we can order every node.\n      walkPhases();\n      // The result list *should* get at least one larger each time\n      // after the first full pass.\n      // Otherwise, we're going to loop forever.\n      if (result.length <= initialResultLength && iteration > 1) {\n        throw new Error(\"Cannot satisfy policy dependencies due to requirements cycle.\");\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */\nexport function createEmptyPipeline(): Pipeline {\n  return HttpPipeline.create();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"core-rest-pipeline\");\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignal, AbortSignalLike, abortSignal } from \"./AbortSignal\";\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"AbortError\";\n  }\n}\n\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\nexport class AbortController {\n  private _signal: AbortSignal;\n\n  /**\n   * @param parentSignals - The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   */\n  constructor(parentSignals?: AbortSignalLike[]);\n  /**\n   * @param parentSignals - The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   */\n  constructor(...parentSignals: AbortSignalLike[]);\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(parentSignals?: any) {\n    this._signal = new AbortSignal();\n\n    if (!parentSignals) {\n      return;\n    }\n    // coerce parentSignals into an array\n    if (!Array.isArray(parentSignals)) {\n      // eslint-disable-next-line prefer-rest-params\n      parentSignals = arguments;\n    }\n    for (const parentSignal of parentSignals) {\n      // if the parent signal has already had abort() called,\n      // then call abort on this signal as well.\n      if (parentSignal.aborted) {\n        this.abort();\n      } else {\n        // when the parent signal aborts, this signal should as well.\n        parentSignal.addEventListener(\"abort\", () => {\n          this.abort();\n        });\n      }\n    }\n  }\n\n  /**\n   * The AbortSignal associated with this controller that will signal aborted\n   * when the abort method is called on this controller.\n   *\n   * @readonly\n   */\n  public get signal(): AbortSignal {\n    return this._signal;\n  }\n\n  /**\n   * Signal that any operations passed this controller's associated abort signal\n   * to cancel any remaining work and throw an `AbortError`.\n   */\n  abort(): void {\n    abortSignal(this._signal);\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will abort after the provided ms.\n   * @param ms - Elapsed time in milliseconds to trigger an abort.\n   */\n  public static timeout(ms: number): AbortSignal {\n    const signal = new AbortSignal();\n    const timer = setTimeout(abortSignal, ms, signal);\n    // Prevent the active Timer from keeping the Node.js event loop active.\n    if (typeof timer.unref === \"function\") {\n      timer.unref();\n    }\n    return signal;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * A generic shape for a plain JS object.\n */\nexport type UnknownObject = { [s: string]: unknown };\n\n/**\n * Helper to determine when an input is a generic JS object.\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nexport function isObject(input: unknown): input is UnknownObject {\n  return (\n    typeof input === \"object\" &&\n    input !== null &&\n    !Array.isArray(input) &&\n    !(input instanceof RegExp) &&\n    !(input instanceof Date)\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ndeclare global {\n  // stub these out for the browser\n  function btoa(input: string): string;\n  function atob(input: string): string;\n}\n\n/** The supported character encoding type */\nexport type EncodingType = \"utf-8\" | \"base64\" | \"base64url\" | \"hex\";\n\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes: Uint8Array, format: EncodingType): string {\n  switch (format) {\n    case \"utf-8\":\n      return uint8ArrayToUtf8String(bytes);\n    case \"base64\":\n      return uint8ArrayToBase64(bytes);\n    case \"base64url\":\n      return uint8ArrayToBase64Url(bytes);\n    case \"hex\":\n      return uint8ArrayToHexString(bytes);\n  }\n}\n\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value: string, format: EncodingType): Uint8Array {\n  switch (format) {\n    case \"utf-8\":\n      return utf8StringToUint8Array(value);\n    case \"base64\":\n      return base64ToUint8Array(value);\n    case \"base64url\":\n      return base64UrlToUint8Array(value);\n    case \"hex\":\n      return hexStringToUint8Array(value);\n  }\n}\n\n/**\n * Decodes a Uint8Array into a Base64 string.\n * @internal\n */\nexport function uint8ArrayToBase64(bytes: Uint8Array): string {\n  return btoa([...bytes].map((x) => String.fromCharCode(x)).join(\"\"));\n}\n\n/**\n * Decodes a Uint8Array into a Base64Url string.\n * @internal\n */\nexport function uint8ArrayToBase64Url(bytes: Uint8Array): string {\n  return uint8ArrayToBase64(bytes).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\n\n/**\n * Decodes a Uint8Array into a javascript string.\n * @internal\n */\nexport function uint8ArrayToUtf8String(bytes: Uint8Array): string {\n  const decoder = new TextDecoder();\n  const dataString = decoder.decode(bytes);\n  return dataString;\n}\n\n/**\n * Decodes a Uint8Array into a hex string\n * @internal\n */\nexport function uint8ArrayToHexString(bytes: Uint8Array): string {\n  return [...bytes].map((x) => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\n\n/**\n * Encodes a JavaScript string into a Uint8Array.\n * @internal\n */\nexport function utf8StringToUint8Array(value: string): Uint8Array {\n  return new TextEncoder().encode(value);\n}\n\n/**\n * Encodes a Base64 string into a Uint8Array.\n * @internal\n */\nexport function base64ToUint8Array(value: string): Uint8Array {\n  return new Uint8Array([...atob(value)].map((x) => x.charCodeAt(0)));\n}\n\n/**\n * Encodes a Base64Url string into a Uint8Array.\n * @internal\n */\nexport function base64UrlToUint8Array(value: string): Uint8Array {\n  const base64String = value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  return base64ToUint8Array(base64String);\n}\n\nconst hexDigits = new Set(\"0123456789abcdefABCDEF\");\n\n/**\n * Encodes a hex string into a Uint8Array\n * @internal\n */\nexport function hexStringToUint8Array(value: string): Uint8Array {\n  // If value has odd length, the last character will be ignored, consistent with NodeJS Buffer behavior\n  const bytes = new Uint8Array(value.length / 2);\n  for (let i = 0; i < value.length / 2; ++i) {\n    const highNibble = value[2 * i];\n    const lowNibble = value[2 * i + 1];\n    if (!hexDigits.has(highNibble) || !hexDigits.has(lowNibble)) {\n      // Replicate Node Buffer behavior by exiting early when we encounter an invalid byte\n      return bytes.slice(0, i);\n    }\n\n    bytes[i] = parseInt(`${highNibble}${lowNibble}`, 16);\n  }\n\n  return bytes;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * NOTE: When moving this file, please update \"react-native\" section in package.json.\n */\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function generateUUID(): string {\n  let uuid = \"\";\n  for (let i = 0; i < 32; i++) {\n    // Generate a random number between 0 and 15\n    const randomNumber = Math.floor(Math.random() * 16);\n    // Set the UUID version to 4 in the 13th position\n    if (i === 12) {\n      uuid += \"4\";\n    } else if (i === 16) {\n      // Set the UUID variant to \"10\" in the 17th position\n      uuid += (randomNumber & 0x3) | 0x8;\n    } else {\n      // Add a random hexadecimal digit to the UUID string\n      uuid += randomNumber.toString(16);\n    }\n    // Add hyphens to the UUID string at the appropriate positions\n    if (i === 7 || i === 11 || i === 15 || i === 19) {\n      uuid += \"-\";\n    }\n  }\n  return uuid;\n}\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID(): string {\n  return generateUUID();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { generateUUID } from \"./uuidUtils.native\";\n\ninterface Crypto {\n  randomUUID(): string;\n}\n\ndeclare const globalThis: {\n  crypto: Crypto;\n};\n\n// NOTE: This could be undefined if not used in a secure context\nconst uuidFunction =\n  typeof globalThis?.crypto?.randomUUID === \"function\"\n    ? globalThis.crypto.randomUUID.bind(globalThis.crypto)\n    : generateUUID;\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID(): string {\n  return uuidFunction();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ndeclare global {\n  interface Window {\n    document: unknown;\n  }\n\n  interface DedicatedWorkerGlobalScope {\n    constructor: {\n      name: string;\n    };\n\n    importScripts: (...paths: string[]) => void;\n  }\n\n  interface Navigator {\n    product: string;\n  }\n\n  interface DenoGlobal {\n    version: {\n      deno: string;\n    };\n  }\n\n  interface BunGlobal {\n    version: string;\n  }\n\n  // eslint-disable-next-line @azure/azure-sdk/ts-no-window\n  const window: Window;\n  const self: DedicatedWorkerGlobalScope;\n  const Deno: DenoGlobal;\n  const Bun: BunGlobal;\n  const navigator: Navigator;\n}\n\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-no-window\nexport const isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nexport const isWebWorker =\n  typeof self === \"object\" &&\n  typeof self?.importScripts === \"function\" &&\n  (self.constructor?.name === \"DedicatedWorkerGlobalScope\" ||\n    self.constructor?.name === \"ServiceWorkerGlobalScope\" ||\n    self.constructor?.name === \"SharedWorkerGlobalScope\");\n\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nexport const isDeno =\n  typeof Deno !== \"undefined\" &&\n  typeof Deno.version !== \"undefined\" &&\n  typeof Deno.version.deno !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nexport const isNode =\n  typeof process !== \"undefined\" &&\n  Boolean(process.version) &&\n  Boolean(process.versions?.node) &&\n  // Deno thought it was a good idea to spoof process.versions.node, see https://deno.land/std@0.177.0/node/process.ts?s=versions\n  !isDeno;\n\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nexport const isBun = typeof Bun !== \"undefined\" && typeof Bun.version !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */\n// https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Core/setUpNavigator.js\nexport const isReactNative =\n  typeof navigator !== \"undefined\" && navigator?.product === \"ReactNative\";\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { type UnknownObject, isObject } from \"@azure/core-util\";\n\n/**\n * @internal\n */\nexport interface SanitizerOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled.\n   * Defaults include a list of well-known safe headers. Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  additionalAllowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  additionalAllowedQueryParameters?: string[];\n}\n\nconst RedactedString = \"REDACTED\";\n\n// Make sure this list is up-to-date with the one under core/logger/Readme#Keyconcepts\nconst defaultAllowedHeaderNames = [\n  \"x-ms-client-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-useragent\",\n  \"x-ms-correlation-request-id\",\n  \"x-ms-request-id\",\n  \"client-request-id\",\n  \"ms-cv\",\n  \"return-client-request-id\",\n  \"traceparent\",\n\n  \"Access-Control-Allow-Credentials\",\n  \"Access-Control-Allow-Headers\",\n  \"Access-Control-Allow-Methods\",\n  \"Access-Control-Allow-Origin\",\n  \"Access-Control-Expose-Headers\",\n  \"Access-Control-Max-Age\",\n  \"Access-Control-Request-Headers\",\n  \"Access-Control-Request-Method\",\n  \"Origin\",\n\n  \"Accept\",\n  \"Accept-Encoding\",\n  \"Cache-Control\",\n  \"Connection\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"ETag\",\n  \"Expires\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"Last-Modified\",\n  \"Pragma\",\n  \"Request-Id\",\n  \"Retry-After\",\n  \"Server\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n  \"WWW-Authenticate\",\n];\n\nconst defaultAllowedQueryParameters: string[] = [\"api-version\"];\n\n/**\n * @internal\n */\nexport class Sanitizer {\n  private allowedHeaderNames: Set<string>;\n  private allowedQueryParameters: Set<string>;\n\n  constructor({\n    additionalAllowedHeaderNames: allowedHeaderNames = [],\n    additionalAllowedQueryParameters: allowedQueryParameters = [],\n  }: SanitizerOptions = {}) {\n    allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n    allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n  }\n\n  public sanitize(obj: unknown): string {\n    const seen = new Set<unknown>();\n    return JSON.stringify(\n      obj,\n      (key: string, value: unknown) => {\n        // Ensure Errors include their interesting non-enumerable members\n        if (value instanceof Error) {\n          return {\n            ...value,\n            name: value.name,\n            message: value.message,\n          };\n        }\n\n        if (key === \"headers\") {\n          return this.sanitizeHeaders(value as UnknownObject);\n        } else if (key === \"url\") {\n          return this.sanitizeUrl(value as string);\n        } else if (key === \"query\") {\n          return this.sanitizeQuery(value as UnknownObject);\n        } else if (key === \"body\") {\n          // Don't log the request body\n          return undefined;\n        } else if (key === \"response\") {\n          // Don't log response again\n          return undefined;\n        } else if (key === \"operationSpec\") {\n          // When using sendOperationRequest, the request carries a massive\n          // field with the autorest spec. No need to log it.\n          return undefined;\n        } else if (Array.isArray(value) || isObject(value)) {\n          if (seen.has(value)) {\n            return \"[Circular]\";\n          }\n          seen.add(value);\n        }\n\n        return value;\n      },\n      2,\n    );\n  }\n\n  private sanitizeHeaders(obj: UnknownObject): UnknownObject {\n    const sanitized: UnknownObject = {};\n    for (const key of Object.keys(obj)) {\n      if (this.allowedHeaderNames.has(key.toLowerCase())) {\n        sanitized[key] = obj[key];\n      } else {\n        sanitized[key] = RedactedString;\n      }\n    }\n    return sanitized;\n  }\n\n  private sanitizeQuery(value: UnknownObject): UnknownObject {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized: UnknownObject = {};\n\n    for (const k of Object.keys(value)) {\n      if (this.allowedQueryParameters.has(k.toLowerCase())) {\n        sanitized[k] = value[k];\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n\n  private sanitizeUrl(value: string): string {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n\n    const url = new URL(value);\n\n    if (!url.search) {\n      return value;\n    }\n\n    for (const [key] of url.searchParams) {\n      if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n        url.searchParams.set(key, RedactedString);\n      }\n    }\n\n    return url.toString();\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json.\n */\n\n/**\n * @internal\n */\nexport function getHeaderName(): string {\n  return \"x-ms-useragent\";\n}\n\ninterface NavigatorEx extends Navigator {\n  userAgentData?: {\n    platform?: string;\n  };\n}\n\n/**\n * @internal\n */\nexport function setPlatformSpecificData(map: Map<string, string>): void {\n  const localNavigator = globalThis.navigator as NavigatorEx;\n  map.set(\n    \"OS\",\n    (localNavigator?.userAgentData?.platform ?? localNavigator?.platform ?? \"unknown\").replace(\n      \" \",\n      \"\",\n    ),\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getHeaderName, setPlatformSpecificData } from \"./userAgentPlatform\";\nimport { SDK_VERSION } from \"../constants\";\n\nfunction getUserAgentString(telemetryInfo: Map<string, string>): string {\n  const parts: string[] = [];\n  for (const [key, value] of telemetryInfo) {\n    const token = value ? `${key}/${value}` : key;\n    parts.push(token);\n  }\n  return parts.join(\" \");\n}\n\n/**\n * @internal\n */\nexport function getUserAgentHeaderName(): string {\n  return getHeaderName();\n}\n\n/**\n * @internal\n */\nexport function getUserAgentValue(prefix?: string): string {\n  const runtimeInfo = new Map<string, string>();\n  runtimeInfo.set(\"core-rest-pipeline\", SDK_VERSION);\n  setPlatformSpecificData(runtimeInfo);\n  const defaultAgent = getUserAgentString(runtimeInfo);\n  const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n  return userAgentValue;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport type { PipelinePolicy } from \"../pipeline\";\nimport { getUserAgentHeaderName, getUserAgentValue } from \"../util/userAgent\";\n\nconst UserAgentHeaderName = getUserAgentHeaderName();\n\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nexport const userAgentPolicyName = \"userAgentPolicy\";\n\n/**\n * Options for adding user agent details to outgoing requests.\n */\nexport interface UserAgentPolicyOptions {\n  /**\n   * String prefix to add to the user agent for outgoing requests.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n}\n\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nexport function userAgentPolicy(options: UserAgentPolicyOptions = {}): PipelinePolicy {\n  const userAgentValue = getUserAgentValue(options.userAgentPrefix);\n  return {\n    name: userAgentPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.headers.has(UserAgentHeaderName)) {\n        request.headers.set(UserAgentHeaderName, userAgentValue);\n      }\n      return next(request);\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport function isNodeReadableStream(x: unknown): x is NodeJS.ReadableStream {\n  return Boolean(x && typeof (x as NodeJS.ReadableStream)[\"pipe\"] === \"function\");\n}\n\nexport function isWebReadableStream(x: unknown): x is ReadableStream {\n  return Boolean(\n    x &&\n      typeof (x as ReadableStream).getReader === \"function\" &&\n      typeof (x as ReadableStream).tee === \"function\",\n  );\n}\n\nexport function isReadableStream(x: unknown): x is ReadableStream | NodeJS.ReadableStream {\n  return isNodeReadableStream(x) || isWebReadableStream(x);\n}\n\nexport function isBlob(x: unknown): x is Blob {\n  return typeof (x as Blob).stream === \"function\";\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isNode } from \"@azure/core-util\";\nimport { isNodeReadableStream } from \"./typeGuards\";\n\n/**\n * Options passed into createFile specifying metadata about the file.\n */\nexport interface CreateFileOptions {\n  /**\n   * The MIME type of the file.\n   */\n  type?: string;\n\n  /**\n   * Last modified time of the file as a UNIX timestamp.\n   * This will default to the current date.\n   */\n  lastModified?: number;\n\n  /**\n   * relative path of this file when uploading a directory.\n   */\n  webkitRelativePath?: string;\n}\n\n/**\n * Extra options for createFile when a stream is being passed in.\n */\nexport interface CreateFileFromStreamOptions extends CreateFileOptions {\n  /**\n   * Size of the file represented by the stream in bytes.\n   *\n   * This will be used by the pipeline when calculating the Content-Length header\n   * for the overall request.\n   */\n  size?: number;\n}\n\nconst unimplementedMethods = {\n  arrayBuffer: () => {\n    throw new Error(\"Not implemented\");\n  },\n  slice: () => {\n    throw new Error(\"Not implemented\");\n  },\n  text: () => {\n    throw new Error(\"Not implemented\");\n  },\n};\n\n/**\n * Private symbol used as key on objects created using createFile containing the\n * original source of the file object.\n *\n * This is used in Node to access the original Node stream without using Blob#stream, which\n * returns a web stream. This is done to avoid a couple of bugs to do with Blob#stream and\n * Readable#to/fromWeb in Node versions we support:\n * - https://github.com/nodejs/node/issues/42694 (fixed in Node 18.14)\n * - https://github.com/nodejs/node/issues/48916 (fixed in Node 20.6)\n *\n * Once these versions are no longer supported, we may be able to stop doing this.\n *\n * @internal\n */\nconst rawContent: unique symbol = Symbol(\"rawContent\");\n\n/**\n * Type signature of a blob-like object with a raw content property.\n */\ninterface RawContent {\n  [rawContent](): Uint8Array | NodeJS.ReadableStream | ReadableStream<Uint8Array>;\n}\n\nfunction hasRawContent(x: unknown): x is RawContent {\n  return typeof (x as RawContent)[rawContent] === \"function\";\n}\n\n/**\n * Extract the raw content from a given blob-like object. If the input was created using createFile\n * or createFileFromStream, the exact content passed into createFile/createFileFromStream will be used.\n * For true instances of Blob and File, returns the blob's content as a Web ReadableStream<Uint8Array>.\n *\n * @internal\n */\nexport function getRawContent(\n  blob: Blob,\n): NodeJS.ReadableStream | ReadableStream<Uint8Array> | Uint8Array {\n  if (hasRawContent(blob)) {\n    return blob[rawContent]();\n  } else {\n    return blob.stream();\n  }\n}\n\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function to:\n * - Create a File object for use in RequestBodyType.formData in environments where the\n *   global File object is unavailable.\n * - Create a File-like object from a readable stream without reading the stream into memory.\n *\n * @param stream - the content of the file as a callback returning a stream. When a File object made using createFile is\n *                  passed in a request's form data map, the stream will not be read into memory\n *                  and instead will be streamed when the request is made. In the event of a retry, the\n *                  stream needs to be read again, so this callback SHOULD return a fresh stream if possible.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFileFromStream(\n  stream: () => ReadableStream<Uint8Array> | NodeJS.ReadableStream,\n  name: string,\n  options: CreateFileFromStreamOptions = {},\n): File {\n  return {\n    ...unimplementedMethods,\n    type: options.type ?? \"\",\n    lastModified: options.lastModified ?? new Date().getTime(),\n    webkitRelativePath: options.webkitRelativePath ?? \"\",\n    size: options.size ?? -1,\n    name,\n    stream: () => {\n      const s = stream();\n      if (isNodeReadableStream(s)) {\n        throw new Error(\n          \"Not supported: a Node stream was provided as input to createFileFromStream.\",\n        );\n      }\n\n      return s;\n    },\n    [rawContent]: stream,\n  } as File & RawContent;\n}\n\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function create a File object for use in RequestBodyType.formData in environments where the global File object is unavailable.\n *\n * @param content - the content of the file as a Uint8Array in memory.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFile(\n  content: Uint8Array,\n  name: string,\n  options: CreateFileOptions = {},\n): File {\n  if (isNode) {\n    return {\n      ...unimplementedMethods,\n      type: options.type ?? \"\",\n      lastModified: options.lastModified ?? new Date().getTime(),\n      webkitRelativePath: options.webkitRelativePath ?? \"\",\n      size: content.byteLength,\n      name,\n      arrayBuffer: async () => content.buffer,\n      stream: () => new Blob([content]).stream(),\n      [rawContent]: () => content,\n    } as File & RawContent;\n  } else {\n    return new File([content], name, options);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { randomUUID, stringToUint8Array } from \"@azure/core-util\";\nimport type { BodyPart, HttpHeaders, PipelineRequest, PipelineResponse } from \"../interfaces\";\nimport type { PipelinePolicy } from \"../pipeline\";\nimport { concat } from \"../util/concat\";\nimport { isBlob } from \"../util/typeGuards\";\n\nfunction generateBoundary(): string {\n  return `----AzSDKFormBoundary${randomUUID()}`;\n}\n\nfunction encodeHeaders(headers: HttpHeaders): string {\n  let result = \"\";\n  for (const [key, value] of headers) {\n    result += `${key}: ${value}\\r\\n`;\n  }\n  return result;\n}\n\nfunction getLength(\n  source:\n    | (() => ReadableStream<Uint8Array>)\n    | (() => NodeJS.ReadableStream)\n    | Uint8Array\n    | Blob\n    | ReadableStream\n    | NodeJS.ReadableStream,\n): number | undefined {\n  if (source instanceof Uint8Array) {\n    return source.byteLength;\n  } else if (isBlob(source)) {\n    // if was created using createFile then -1 means we have an unknown size\n    return source.size === -1 ? undefined : source.size;\n  } else {\n    return undefined;\n  }\n}\n\nfunction getTotalLength(\n  sources: (\n    | (() => ReadableStream<Uint8Array>)\n    | (() => NodeJS.ReadableStream)\n    | Uint8Array\n    | Blob\n    | ReadableStream\n    | NodeJS.ReadableStream\n  )[],\n): number | undefined {\n  let total = 0;\n  for (const source of sources) {\n    const partLength = getLength(source);\n    if (partLength === undefined) {\n      return undefined;\n    } else {\n      total += partLength;\n    }\n  }\n  return total;\n}\n\nasync function buildRequestBody(\n  request: PipelineRequest,\n  parts: BodyPart[],\n  boundary: string,\n): Promise<void> {\n  const sources = [\n    stringToUint8Array(`--${boundary}`, \"utf-8\"),\n    ...parts.flatMap((part) => [\n      stringToUint8Array(\"\\r\\n\", \"utf-8\"),\n      stringToUint8Array(encodeHeaders(part.headers), \"utf-8\"),\n      stringToUint8Array(\"\\r\\n\", \"utf-8\"),\n      part.body,\n      stringToUint8Array(`\\r\\n--${boundary}`, \"utf-8\"),\n    ]),\n    stringToUint8Array(\"--\\r\\n\\r\\n\", \"utf-8\"),\n  ];\n\n  const contentLength = getTotalLength(sources);\n  if (contentLength) {\n    request.headers.set(\"Content-Length\", contentLength);\n  }\n\n  request.body = await concat(sources);\n}\n\n/**\n * Name of multipart policy\n */\nexport const multipartPolicyName = \"multipartPolicy\";\n\nconst maxBoundaryLength = 70;\nconst validBoundaryCharacters = new Set(\n  `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'()+,-./:=?`,\n);\n\nfunction assertValidBoundary(boundary: string): void {\n  if (boundary.length > maxBoundaryLength) {\n    throw new Error(`Multipart boundary \"${boundary}\" exceeds maximum length of 70 characters`);\n  }\n\n  if (Array.from(boundary).some((x) => !validBoundaryCharacters.has(x))) {\n    throw new Error(`Multipart boundary \"${boundary}\" contains invalid characters`);\n  }\n}\n\n/**\n * Pipeline policy for multipart requests\n */\nexport function multipartPolicy(): PipelinePolicy {\n  return {\n    name: multipartPolicyName,\n    async sendRequest(request, next): Promise<PipelineResponse> {\n      if (!request.multipartBody) {\n        return next(request);\n      }\n\n      if (request.body) {\n        throw new Error(\"multipartBody and regular body cannot be set at the same time\");\n      }\n\n      let boundary = request.multipartBody.boundary;\n\n      const contentTypeHeader = request.headers.get(\"Content-Type\") ?? \"multipart/mixed\";\n      const parsedHeader = contentTypeHeader.match(/^(multipart\\/[^ ;]+)(?:; *boundary=(.+))?$/);\n      if (!parsedHeader) {\n        throw new Error(\n          `Got multipart request body, but content-type header was not multipart: ${contentTypeHeader}`,\n        );\n      }\n\n      const [, contentType, parsedBoundary] = parsedHeader;\n      if (parsedBoundary && boundary && parsedBoundary !== boundary) {\n        throw new Error(\n          `Multipart boundary was specified as ${parsedBoundary} in the header, but got ${boundary} in the request body`,\n        );\n      }\n\n      boundary ??= parsedBoundary;\n      if (boundary) {\n        assertValidBoundary(boundary);\n      } else {\n        boundary = generateBoundary();\n      }\n      request.headers.set(\"Content-Type\", `${contentType}; boundary=${boundary}`);\n      await buildRequestBody(request, request.multipartBody.parts, boundary);\n\n      request.multipartBody = undefined;\n\n      return next(request);\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"AbortError\";\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError, type AbortSignalLike } from \"@azure/abort-controller\";\nimport type { PipelineResponse } from \"../interfaces\";\n\nconst StandardAbortMessage = \"The operation was aborted.\";\n\n/**\n * A wrapper for setTimeout that resolves a promise after delayInMs milliseconds.\n * @param delayInMs - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @param options - The options for delay - currently abort options\n *                  - abortSignal - The abortSignal associated with containing operation.\n *                  - abortErrorMsg - The abort error message associated with containing operation.\n * @returns Resolved promise\n */\nexport function delay<T>(\n  delayInMs: number,\n  value?: T,\n  options?: {\n    abortSignal?: AbortSignalLike;\n    abortErrorMsg?: string;\n  },\n): Promise<T | void> {\n  return new Promise((resolve, reject) => {\n    let timer: ReturnType<typeof setTimeout> | undefined = undefined;\n    let onAborted: (() => void) | undefined = undefined;\n\n    const rejectOnAbort = (): void => {\n      return reject(\n        new AbortError(options?.abortErrorMsg ? options?.abortErrorMsg : StandardAbortMessage),\n      );\n    };\n\n    const removeListeners = (): void => {\n      if (options?.abortSignal && onAborted) {\n        options.abortSignal.removeEventListener(\"abort\", onAborted);\n      }\n    };\n\n    onAborted = (): void => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n      removeListeners();\n      return rejectOnAbort();\n    };\n\n    if (options?.abortSignal && options.abortSignal.aborted) {\n      return rejectOnAbort();\n    }\n\n    timer = setTimeout(() => {\n      removeListeners();\n      resolve(value);\n    }, delayInMs);\n\n    if (options?.abortSignal) {\n      options.abortSignal.addEventListener(\"abort\", onAborted);\n    }\n  });\n}\n\n/**\n * @internal\n * @returns the parsed value or undefined if the parsed value is invalid.\n */\nexport function parseHeaderValueAsNumber(\n  response: PipelineResponse,\n  headerName: string,\n): number | undefined {\n  const value = response.headers.get(headerName);\n  if (!value) return;\n  const valueAsNum = Number(value);\n  if (Number.isNaN(valueAsNum)) return;\n  return valueAsNum;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineResponse } from \"../interfaces\";\nimport type { RestError } from \"../restError\";\nimport { getRandomIntegerInclusive } from \"@azure/core-util\";\nimport type { RetryStrategy } from \"./retryStrategy\";\nimport { isThrottlingRetryResponse } from \"./throttlingRetryStrategy\";\n\n// intervals are in milliseconds\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\nexport function exponentialRetryStrategy(\n  options: {\n    /**\n     * The amount of delay in milliseconds between retry attempts. Defaults to 1000\n     * (1 second.) The delay increases exponentially with each retry up to a maximum\n     * specified by maxRetryDelayInMs.\n     */\n    retryDelayInMs?: number;\n\n    /**\n     * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n     * to 64000 (64 seconds).\n     */\n    maxRetryDelayInMs?: number;\n\n    /**\n     * If true it won't retry if it received a system error.\n     */\n    ignoreSystemErrors?: boolean;\n\n    /**\n     * If true it won't retry if it received a non-fatal HTTP status code.\n     */\n    ignoreHttpStatusCodes?: boolean;\n  } = {},\n): RetryStrategy {\n  const retryInterval = options.retryDelayInMs ?? DEFAULT_CLIENT_RETRY_INTERVAL;\n  const maxRetryInterval = options.maxRetryDelayInMs ?? DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n\n  let retryAfterInMs = retryInterval;\n\n  return {\n    name: \"exponentialRetryStrategy\",\n    retry({ retryCount, response, responseError }) {\n      const matchedSystemError = isSystemError(responseError);\n      const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n\n      const isExponential = isExponentialRetryResponse(response);\n      const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n      const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);\n\n      if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n        return { skipStrategy: true };\n      }\n\n      if (responseError && !matchedSystemError && !isExponential) {\n        return { errorToThrow: responseError };\n      }\n\n      // Exponentially increase the delay each time\n      const exponentialDelay = retryAfterInMs * Math.pow(2, retryCount);\n      // Don't let the delay exceed the maximum\n      const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n      // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n      // that retries across multiple clients don't occur simultaneously.\n      retryAfterInMs =\n        clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n      return { retryAfterInMs };\n    },\n  };\n}\n\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\nexport function isExponentialRetryResponse(response?: PipelineResponse): boolean {\n  return Boolean(\n    response &&\n      response.status !== undefined &&\n      (response.status >= 500 || response.status === 408) &&\n      response.status !== 501 &&\n      response.status !== 505,\n  );\n}\n\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\nexport function isSystemError(err?: RestError): boolean {\n  if (!err) {\n    return false;\n  }\n  return (\n    err.code === \"ETIMEDOUT\" ||\n    err.code === \"ESOCKETTIMEDOUT\" ||\n    err.code === \"ECONNREFUSED\" ||\n    err.code === \"ECONNRESET\" ||\n    err.code === \"ENOENT\" ||\n    err.code === \"ENOTFOUND\"\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport type { PipelinePolicy } from \"../pipeline\";\nimport { delay } from \"../util/helpers\";\nimport { createClientLogger } from \"@azure/logger\";\nimport type { RetryStrategy } from \"../retryStrategies/retryStrategy\";\nimport type { RestError } from \"../restError\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport type { AzureLogger } from \"@azure/logger\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants\";\n\nconst retryPolicyLogger = createClientLogger(\"core-rest-pipeline retryPolicy\");\n\n/**\n * The programmatic identifier of the retryPolicy.\n */\nconst retryPolicyName = \"retryPolicy\";\n\n/**\n * Options to the {@link retryPolicy}\n */\nexport interface RetryPolicyOptions {\n  /**\n   * Maximum number of retries. If not specified, it will limit to 3 retries.\n   */\n  maxRetries?: number;\n  /**\n   * Logger. If it's not provided, a default logger is used.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * retryPolicy is a generic policy to enable retrying requests when certain conditions are met\n */\nexport function retryPolicy(\n  strategies: RetryStrategy[],\n  options: RetryPolicyOptions = { maxRetries: DEFAULT_RETRY_POLICY_COUNT },\n): PipelinePolicy {\n  const logger = options.logger || retryPolicyLogger;\n  return {\n    name: retryPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      let response: PipelineResponse | undefined;\n      let responseError: RestError | undefined;\n      let retryCount = -1;\n\n      // eslint-disable-next-line no-constant-condition\n      retryRequest: while (true) {\n        retryCount += 1;\n        response = undefined;\n        responseError = undefined;\n\n        try {\n          logger.info(`Retry ${retryCount}: Attempting to send request`, request.requestId);\n          response = await next(request);\n          logger.info(`Retry ${retryCount}: Received a response from request`, request.requestId);\n        } catch (e: any) {\n          logger.error(`Retry ${retryCount}: Received an error from request`, request.requestId);\n\n          // RestErrors are valid targets for the retry strategies.\n          // If none of the retry strategies can work with them, they will be thrown later in this policy.\n          // If the received error is not a RestError, it is immediately thrown.\n          responseError = e as RestError;\n          if (!e || responseError.name !== \"RestError\") {\n            throw e;\n          }\n\n          response = responseError.response;\n        }\n\n        if (request.abortSignal?.aborted) {\n          logger.error(`Retry ${retryCount}: Request aborted.`);\n          const abortError = new AbortError();\n          throw abortError;\n        }\n\n        if (retryCount >= (options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT)) {\n          logger.info(\n            `Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`,\n          );\n          if (responseError) {\n            throw responseError;\n          } else if (response) {\n            return response;\n          } else {\n            throw new Error(\"Maximum retries reached with no response or error to throw\");\n          }\n        }\n\n        logger.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);\n\n        strategiesLoop: for (const strategy of strategies) {\n          const strategyLogger = strategy.logger || retryPolicyLogger;\n          strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);\n\n          const modifiers = strategy.retry({\n            retryCount,\n            response,\n            responseError,\n          });\n\n          if (modifiers.skipStrategy) {\n            strategyLogger.info(`Retry ${retryCount}: Skipped.`);\n            continue strategiesLoop;\n          }\n\n          const { errorToThrow, retryAfterInMs, redirectTo } = modifiers;\n\n          if (errorToThrow) {\n            strategyLogger.error(\n              `Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`,\n              errorToThrow,\n            );\n            throw errorToThrow;\n          }\n\n          if (retryAfterInMs || retryAfterInMs === 0) {\n            strategyLogger.info(\n              `Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`,\n            );\n            await delay(retryAfterInMs, undefined, { abortSignal: request.abortSignal });\n            continue retryRequest;\n          }\n\n          if (redirectTo) {\n            strategyLogger.info(\n              `Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`,\n            );\n            request.url = redirectTo;\n            continue retryRequest;\n          }\n        }\n\n        if (responseError) {\n          logger.info(\n            `None of the retry strategies could work with the received error. Throwing it.`,\n          );\n          throw responseError;\n        }\n        if (response) {\n          logger.info(\n            `None of the retry strategies could work with the received response. Returning it.`,\n          );\n          return response;\n        }\n\n        // If all the retries skip and there's no response,\n        // we're still in the retry loop, so a new request will be sent\n        // until `maxRetries` is reached.\n      }\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { TracingContext, TracingSpan } from \"./interfaces\";\n\n/** @internal */\nexport const knownContextKeys = {\n  span: Symbol.for(\"@azure/core-tracing span\"),\n  namespace: Symbol.for(\"@azure/core-tracing namespace\"),\n};\n\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */\nexport function createTracingContext(options: CreateTracingContextOptions = {}): TracingContext {\n  let context: TracingContext = new TracingContextImpl(options.parentContext);\n  if (options.span) {\n    context = context.setValue(knownContextKeys.span, options.span);\n  }\n  if (options.namespace) {\n    context = context.setValue(knownContextKeys.namespace, options.namespace);\n  }\n  return context;\n}\n\n/** @internal */\nexport class TracingContextImpl implements TracingContext {\n  private _contextMap: Map<symbol, unknown>;\n  constructor(initialContext?: TracingContext) {\n    this._contextMap =\n      initialContext instanceof TracingContextImpl\n        ? new Map<symbol, unknown>(initialContext._contextMap)\n        : new Map();\n  }\n\n  setValue(key: symbol, value: unknown): TracingContext {\n    const newContext = new TracingContextImpl(this);\n    newContext._contextMap.set(key, value);\n    return newContext;\n  }\n\n  getValue(key: symbol): unknown {\n    return this._contextMap.get(key);\n  }\n\n  deleteValue(key: symbol): TracingContext {\n    const newContext = new TracingContextImpl(this);\n    newContext._contextMap.delete(key);\n    return newContext;\n  }\n}\n\n/**\n * Represents a set of items that can be set when creating a new {@link TracingContext}.\n */\nexport interface CreateTracingContextOptions {\n  /** The {@link parentContext} - the newly created context will contain all the values of the parent context unless overridden. */\n  parentContext?: TracingContext;\n  /** An initial span to set on the context. */\n  span?: TracingSpan;\n  /** The namespace to set on any child spans. */\n  namespace?: string;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const custom = {};\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isError } from \"@azure/core-util\";\nimport type { PipelineRequest, PipelineResponse } from \"./interfaces\";\nimport { custom } from \"./util/inspect\";\nimport { Sanitizer } from \"./util/sanitizer\";\n\nconst errorSanitizer = new Sanitizer();\n\n/**\n * The options supported by RestError.\n */\nexport interface RestErrorOptions {\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  code?: string;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  statusCode?: number;\n  /**\n   * The request that was made.\n   */\n  request?: PipelineRequest;\n  /**\n   * The response received (if any.)\n   */\n  response?: PipelineResponse;\n}\n\n/**\n * A custom error type for failed pipeline requests.\n */\nexport class RestError extends Error {\n  /**\n   * Something went wrong when making the request.\n   * This means the actual request failed for some reason,\n   * such as a DNS issue or the connection being lost.\n   */\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  /**\n   * This means that parsing the response from the server failed.\n   * It may have been malformed.\n   */\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  public code?: string;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  public statusCode?: number;\n  /**\n   * The request that was made.\n   */\n  public request?: PipelineRequest;\n  /**\n   * The response received (if any.)\n   */\n  public response?: PipelineResponse;\n  /**\n   * Bonus property set by the throw site.\n   */\n  public details?: unknown;\n\n  constructor(message: string, options: RestErrorOptions = {}) {\n    super(message);\n    this.name = \"RestError\";\n    this.code = options.code;\n    this.statusCode = options.statusCode;\n    this.request = options.request;\n    this.response = options.response;\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n\n  /**\n   * Logging method for util.inspect in Node\n   */\n  [custom](): string {\n    return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n  }\n}\n\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e: unknown): e is RestError {\n  if (e instanceof RestError) {\n    return true;\n  }\n  return isError(e) && e.name === \"RestError\";\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { HttpHeaders, RawHttpHeaders, RawHttpHeadersInput } from \"./interfaces\";\n\ninterface HeaderEntry {\n  name: string;\n  value: string;\n}\n\nfunction normalizeName(name: string): string {\n  return name.toLowerCase();\n}\n\nfunction* headerIterator(map: Map<string, HeaderEntry>): IterableIterator<[string, string]> {\n  for (const entry of map.values()) {\n    yield [entry.name, entry.value];\n  }\n}\n\nclass HttpHeadersImpl implements HttpHeaders {\n  private readonly _headersMap: Map<string, HeaderEntry>;\n\n  constructor(rawHeaders?: RawHttpHeaders | RawHttpHeadersInput) {\n    this._headersMap = new Map<string, HeaderEntry>();\n    if (rawHeaders) {\n      for (const headerName of Object.keys(rawHeaders)) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   * @param value - The value of the header to set.\n   */\n  public set(name: string, value: string | number | boolean): void {\n    this._headersMap.set(normalizeName(name), { name, value: String(value).trim() });\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param name - The name of the header. This value is case-insensitive.\n   */\n  public get(name: string): string | undefined {\n    return this._headersMap.get(normalizeName(name))?.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   */\n  public has(name: string): boolean {\n    return this._headersMap.has(normalizeName(name));\n  }\n\n  /**\n   * Remove the header with the provided headerName.\n   * @param name - The name of the header to remove.\n   */\n  public delete(name: string): void {\n    this._headersMap.delete(normalizeName(name));\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJSON(options: { preserveCase?: boolean } = {}): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    if (options.preserveCase) {\n      for (const entry of this._headersMap.values()) {\n        result[entry.name] = entry.value;\n      }\n    } else {\n      for (const [normalizedName, entry] of this._headersMap) {\n        result[normalizedName] = entry.value;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJSON({ preserveCase: true }));\n  }\n\n  /**\n   * Iterate over tuples of header [name, value] pairs.\n   */\n  [Symbol.iterator](): Iterator<[string, string]> {\n    return headerIterator(this._headersMap);\n  }\n}\n\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nexport function createHttpHeaders(rawHeaders?: RawHttpHeadersInput): HttpHeaders {\n  return new HttpHeadersImpl(rawHeaders);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport type {\n  HttpClient,\n  HttpHeaders as PipelineHeaders,\n  PipelineRequest,\n  PipelineResponse,\n  TransferProgressEvent,\n} from \"./interfaces\";\nimport { RestError } from \"./restError\";\nimport { createHttpHeaders } from \"./httpHeaders\";\nimport { isNodeReadableStream, isWebReadableStream } from \"./util/typeGuards\";\n\n/**\n * Checks if the body is a Blob or Blob-like\n */\nfunction isBlob(body: unknown): body is Blob {\n  // File objects count as a type of Blob, so we want to use instanceof explicitly\n  return (typeof Blob === \"function\" || typeof Blob === \"object\") && body instanceof Blob;\n}\n\n/**\n * A HttpClient implementation that uses window.fetch to send HTTP requests.\n * @internal\n */\nclass FetchHttpClient implements HttpClient {\n  /**\n   * Makes a request over an underlying transport layer and returns the response.\n   * @param request - The request to be made.\n   */\n  public async sendRequest(request: PipelineRequest): Promise<PipelineResponse> {\n    const url = new URL(request.url);\n    const isInsecure = url.protocol !== \"https:\";\n\n    if (isInsecure && !request.allowInsecureConnection) {\n      throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);\n    }\n\n    if (request.proxySettings) {\n      throw new Error(\"HTTP proxy is not supported in browser environment\");\n    }\n\n    try {\n      return await makeRequest(request);\n    } catch (e: any) {\n      throw getError(e, request);\n    }\n  }\n}\n\n/**\n * Sends a request\n */\nasync function makeRequest(request: PipelineRequest): Promise<PipelineResponse> {\n  const { abortController, abortControllerCleanup } = setupAbortSignal(request);\n  try {\n    const headers = buildFetchHeaders(request.headers);\n    const { streaming, body: requestBody } = buildRequestBody(request);\n    const requestInit: RequestInit = {\n      body: requestBody,\n      method: request.method,\n      headers: headers,\n      signal: abortController.signal,\n      // Cloudflare doesn't implement the full Fetch API spec\n      // because of some of it doesn't make sense in the edge.\n      // See https://github.com/cloudflare/workerd/issues/902\n      ...(\"credentials\" in Request.prototype\n        ? { credentials: request.withCredentials ? \"include\" : \"same-origin\" }\n        : {}),\n      ...(\"cache\" in Request.prototype ? { cache: \"no-store\" } : {}),\n    };\n\n    // According to https://fetch.spec.whatwg.org/#fetch-method,\n    // init.duplex must be set when body is a ReadableStream object.\n    // currently \"half\" is the only valid value.\n    if (streaming) {\n      (requestInit as any).duplex = \"half\";\n    }\n    /**\n     * Developers of the future:\n     * Do not set redirect: \"manual\" as part\n     * of request options.\n     * It will not work as you expect.\n     */\n    const response = await fetch(request.url, requestInit);\n    // If we're uploading a blob, we need to fire the progress event manually\n    if (isBlob(request.body) && request.onUploadProgress) {\n      request.onUploadProgress({ loadedBytes: request.body.size });\n    }\n    return buildPipelineResponse(response, request, abortControllerCleanup);\n  } catch (e) {\n    abortControllerCleanup?.();\n    throw e;\n  }\n}\n\n/**\n * Creates a pipeline response from a Fetch response;\n */\nasync function buildPipelineResponse(\n  httpResponse: Response,\n  request: PipelineRequest,\n  abortControllerCleanup?: () => void,\n) {\n  const headers = buildPipelineHeaders(httpResponse);\n  const response: PipelineResponse = {\n    request,\n    headers,\n    status: httpResponse.status,\n  };\n\n  const bodyStream = isWebReadableStream(httpResponse.body)\n    ? buildBodyStream(httpResponse.body, {\n        onProgress: request.onDownloadProgress,\n        onEnd: abortControllerCleanup,\n      })\n    : httpResponse.body;\n\n  if (\n    // Value of POSITIVE_INFINITY in streamResponseStatusCodes is considered as any status code\n    request.streamResponseStatusCodes?.has(Number.POSITIVE_INFINITY) ||\n    request.streamResponseStatusCodes?.has(response.status)\n  ) {\n    if (request.enableBrowserStreams) {\n      response.browserStreamBody = bodyStream ?? undefined;\n    } else {\n      const responseStream = new Response(bodyStream);\n      response.blobBody = responseStream.blob();\n      abortControllerCleanup?.();\n    }\n  } else {\n    const responseStream = new Response(bodyStream);\n\n    response.bodyAsText = await responseStream.text();\n    abortControllerCleanup?.();\n  }\n\n  return response;\n}\n\nfunction setupAbortSignal(request: PipelineRequest): {\n  abortController: AbortController;\n  abortControllerCleanup: (() => void) | undefined;\n} {\n  const abortController = new AbortController();\n\n  // Cleanup function\n  let abortControllerCleanup: (() => void) | undefined;\n\n  /**\n   * Attach an abort listener to the request\n   */\n  let abortListener: ((event: any) => void) | undefined;\n  if (request.abortSignal) {\n    if (request.abortSignal.aborted) {\n      throw new AbortError(\"The operation was aborted.\");\n    }\n\n    abortListener = (event: Event) => {\n      if (event.type === \"abort\") {\n        abortController.abort();\n      }\n    };\n    request.abortSignal.addEventListener(\"abort\", abortListener);\n    abortControllerCleanup = () => {\n      if (abortListener) {\n        request.abortSignal?.removeEventListener(\"abort\", abortListener);\n      }\n    };\n  }\n\n  // If a timeout was passed, call the abort signal once the time elapses\n  if (request.timeout > 0) {\n    setTimeout(() => {\n      abortController.abort();\n    }, request.timeout);\n  }\n\n  return { abortController, abortControllerCleanup };\n}\n\n/**\n * Gets the specific error\n */\nfunction getError(e: RestError, request: PipelineRequest): RestError {\n  if (e && e?.name === \"AbortError\") {\n    return e;\n  } else {\n    return new RestError(`Error sending request: ${e.message}`, {\n      code: e?.code ?? RestError.REQUEST_SEND_ERROR,\n      request,\n    });\n  }\n}\n\n/**\n * Converts PipelineRequest headers to Fetch headers\n */\nfunction buildFetchHeaders(pipelineHeaders: PipelineHeaders) {\n  const headers = new Headers();\n  for (const [name, value] of pipelineHeaders) {\n    headers.append(name, value);\n  }\n\n  return headers;\n}\n\nfunction buildPipelineHeaders(httpResponse: Response): PipelineHeaders {\n  const responseHeaders = createHttpHeaders();\n  for (const [name, value] of httpResponse.headers) {\n    responseHeaders.set(name, value);\n  }\n\n  return responseHeaders;\n}\n\nfunction buildRequestBody(request: PipelineRequest) {\n  const body = typeof request.body === \"function\" ? request.body() : request.body;\n  if (isNodeReadableStream(body)) {\n    throw new Error(\"Node streams are not supported in browser environment.\");\n  }\n\n  return isWebReadableStream(body)\n    ? { streaming: true, body: buildBodyStream(body, { onProgress: request.onUploadProgress }) }\n    : { streaming: false, body };\n}\n\n/**\n * Reads the request/response original stream and stream it through a new\n * ReadableStream, this is done to be able to report progress in a way that\n * all modern browsers support. TransformStreams would be an alternative,\n * however they are not yet supported by all browsers i.e Firefox\n */\nfunction buildBodyStream(\n  readableStream: ReadableStream<Uint8Array>,\n  options: { onProgress?: (progress: TransferProgressEvent) => void; onEnd?: () => void } = {},\n): ReadableStream<Uint8Array> {\n  let loadedBytes = 0;\n  const { onProgress, onEnd } = options;\n\n  // If the current browser supports pipeThrough we use a TransformStream\n  // to report progress\n  if (isTransformStreamSupported(readableStream)) {\n    return readableStream.pipeThrough(\n      new TransformStream({\n        transform(chunk, controller) {\n          if (chunk === null) {\n            controller.terminate();\n            return;\n          }\n\n          controller.enqueue(chunk);\n          loadedBytes += chunk.length;\n          if (onProgress) {\n            onProgress({ loadedBytes });\n          }\n        },\n        flush() {\n          onEnd?.();\n        },\n      }),\n    );\n  } else {\n    // If we can't use transform streams, wrap the original stream in a new readable stream\n    // and use pull to enqueue each chunk and report progress.\n    const reader = readableStream.getReader();\n    return new ReadableStream({\n      async pull(controller) {\n        const { done, value } = await reader.read();\n        // When no more data needs to be consumed, break the reading\n        if (done || !value) {\n          onEnd?.();\n          // Close the stream\n          controller.close();\n          reader.releaseLock();\n          return;\n        }\n\n        loadedBytes += value?.length ?? 0;\n\n        // Enqueue the next data chunk into our target stream\n        controller.enqueue(value);\n\n        if (onProgress) {\n          onProgress({ loadedBytes });\n        }\n      },\n      cancel(reason?: string) {\n        onEnd?.();\n        return reader.cancel(reason);\n      },\n    });\n  }\n}\n\n/**\n * Create a new HttpClient instance for the browser environment.\n * @internal\n */\nexport function createFetchHttpClient(): HttpClient {\n  return new FetchHttpClient();\n}\n\nfunction isTransformStreamSupported(readableStream: ReadableStream): boolean {\n  return readableStream.pipeThrough !== undefined && self.TransformStream !== undefined;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { HttpClient } from \"./interfaces\";\nimport { createFetchHttpClient } from \"./fetchHttpClient\";\n\n/**\n * Create the correct HttpClient for the current environment.\n */\nexport function createDefaultHttpClient(): HttpClient {\n  return createFetchHttpClient();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type {\n  FormDataMap,\n  HttpHeaders,\n  HttpMethods,\n  MultipartRequestBody,\n  PipelineRequest,\n  ProxySettings,\n  RequestBodyType,\n  TransferProgressEvent,\n} from \"./interfaces\";\nimport { createHttpHeaders } from \"./httpHeaders\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport { randomUUID } from \"@azure/core-util\";\nimport type { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * Settings to initialize a request.\n * Almost equivalent to Partial<PipelineRequest>, but url is mandatory.\n */\nexport interface PipelineRequestOptions {\n  /**\n   * The URL to make the request to.\n   */\n  url: string;\n\n  /**\n   * The HTTP method to use when making the request.\n   */\n  method?: HttpMethods;\n\n  /**\n   * The HTTP headers to use when making the request.\n   */\n  headers?: HttpHeaders;\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   * If the request is terminated, an `AbortError` is thrown.\n   * Defaults to 0, which disables the timeout.\n   */\n  timeout?: number;\n\n  /**\n   * If credentials (cookies) should be sent along during an XHR.\n   * Defaults to false.\n   */\n  withCredentials?: boolean;\n\n  /**\n   * A unique identifier for the request. Used for logging and tracing.\n   */\n  requestId?: string;\n\n  /**\n   * The HTTP body content (if any)\n   */\n  body?: RequestBodyType;\n\n  /**\n   * Body for a multipart request.\n   */\n  multipartBody?: MultipartRequestBody;\n\n  /**\n   * To simulate a browser form post\n   */\n  formData?: FormDataMap;\n\n  /**\n   * A list of response status codes whose corresponding PipelineResponse body should be treated as a stream.\n   */\n  streamResponseStatusCodes?: Set<number>;\n\n  /**\n   * BROWSER ONLY\n   *\n   * A browser only option to enable use of the Streams API. If this option is set and streaming is used\n   * (see `streamResponseStatusCodes`), the response will have a property `browserStream` instead of\n   * `blobBody` which will be undefined.\n   *\n   * Default value is false\n   */\n  enableBrowserStreams?: boolean;\n\n  /**\n   * Proxy configuration.\n   */\n  proxySettings?: ProxySettings;\n\n  /**\n   * If the connection should not be reused.\n   */\n  disableKeepAlive?: boolean;\n\n  /**\n   * Used to abort the request later.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Options used to create a span when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Set to true if the request is sent over HTTP instead of HTTPS */\n  allowInsecureConnection?: boolean;\n}\n\nclass PipelineRequestImpl implements PipelineRequest {\n  public url: string;\n  public method: HttpMethods;\n  public headers: HttpHeaders;\n  public timeout: number;\n  public withCredentials: boolean;\n  public body?: RequestBodyType;\n  public multipartBody?: MultipartRequestBody;\n  public formData?: FormDataMap;\n  public streamResponseStatusCodes?: Set<number>;\n  public enableBrowserStreams: boolean;\n\n  public proxySettings?: ProxySettings;\n  public disableKeepAlive: boolean;\n  public abortSignal?: AbortSignalLike;\n  public requestId: string;\n  public tracingOptions?: OperationTracingOptions;\n  public allowInsecureConnection?: boolean;\n  public onUploadProgress?: (progress: TransferProgressEvent) => void;\n  public onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  constructor(options: PipelineRequestOptions) {\n    this.url = options.url;\n    this.body = options.body;\n    this.headers = options.headers ?? createHttpHeaders();\n    this.method = options.method ?? \"GET\";\n    this.timeout = options.timeout ?? 0;\n    this.multipartBody = options.multipartBody;\n    this.formData = options.formData;\n    this.disableKeepAlive = options.disableKeepAlive ?? false;\n    this.proxySettings = options.proxySettings;\n    this.streamResponseStatusCodes = options.streamResponseStatusCodes;\n    this.withCredentials = options.withCredentials ?? false;\n    this.abortSignal = options.abortSignal;\n    this.tracingOptions = options.tracingOptions;\n    this.onUploadProgress = options.onUploadProgress;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.requestId = options.requestId || randomUUID();\n    this.allowInsecureConnection = options.allowInsecureConnection ?? false;\n    this.enableBrowserStreams = options.enableBrowserStreams ?? false;\n  }\n}\n\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nexport function createPipelineRequest(options: PipelineRequestOptions): PipelineRequest {\n  return new PipelineRequestImpl(options);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { delay } from \"./helpers\";\n\n/**\n * A function that gets a promise of an access token and allows providing\n * options.\n *\n * @param options - the options to pass to the underlying token provider\n */\nexport type AccessTokenGetter = (\n  scopes: string | string[],\n  options: GetTokenOptions,\n) => Promise<AccessToken>;\n\nexport interface TokenCyclerOptions {\n  /**\n   * The window of time before token expiration during which the token will be\n   * considered unusable due to risk of the token expiring before sending the\n   * request.\n   *\n   * This will only become meaningful if the refresh fails for over\n   * (refreshWindow - forcedRefreshWindow) milliseconds.\n   */\n  forcedRefreshWindowInMs: number;\n  /**\n   * Interval in milliseconds to retry failed token refreshes.\n   */\n  retryIntervalInMs: number;\n  /**\n   * The window of time before token expiration during which\n   * we will attempt to refresh the token.\n   */\n  refreshWindowInMs: number;\n}\n\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS: TokenCyclerOptions = {\n  forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n  retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n  refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(\n  getAccessToken: () => Promise<AccessToken | null>,\n  retryIntervalInMs: number,\n  refreshTimeout: number,\n): Promise<AccessToken> {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken(): Promise<AccessToken | null> {\n    if (Date.now() < refreshTimeout) {\n      try {\n        return await getAccessToken();\n      } catch {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n\n      return finalToken;\n    }\n  }\n\n  let token: AccessToken | null = await tryGetAccessToken();\n\n  while (token === null) {\n    await delay(retryIntervalInMs);\n\n    token = await tryGetAccessToken();\n  }\n\n  return token;\n}\n\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nexport function createTokenCycler(\n  credential: TokenCredential,\n  tokenCyclerOptions?: Partial<TokenCyclerOptions>,\n): AccessTokenGetter {\n  let refreshWorker: Promise<AccessToken> | null = null;\n  let token: AccessToken | null = null;\n  let tenantId: string | undefined;\n\n  const options = {\n    ...DEFAULT_CYCLER_OPTIONS,\n    ...tokenCyclerOptions,\n  };\n\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing(): boolean {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh(): boolean {\n      return (\n        !cycler.isRefreshing &&\n        (token?.expiresOnTimestamp ?? 0) - options.refreshWindowInMs < Date.now()\n      );\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh(): boolean {\n      return (\n        token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now()\n      );\n    },\n  };\n\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(\n    scopes: string | string[],\n    getTokenOptions: GetTokenOptions,\n  ): Promise<AccessToken> {\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = (): Promise<AccessToken | null> =>\n        credential.getToken(scopes, getTokenOptions);\n\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(\n        tryGetAccessToken,\n        options.retryIntervalInMs,\n        // If we don't have a token, then we should timeout immediately\n        token?.expiresOnTimestamp ?? Date.now(),\n      )\n        .then((_token) => {\n          refreshWorker = null;\n          token = _token;\n          tenantId = getTokenOptions.tenantId;\n          return token;\n        })\n        .catch((reason) => {\n          // We also should reset the refresher if we enter a failed state.  All\n          // existing awaiters will throw, but subsequent requests will start a\n          // new retry chain.\n          refreshWorker = null;\n          token = null;\n          tenantId = undefined;\n          throw reason;\n        });\n    }\n\n    return refreshWorker as Promise<AccessToken>;\n  }\n\n  return async (scopes: string | string[], tokenOptions: GetTokenOptions): Promise<AccessToken> => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n\n    // If the tenantId passed in token options is different to the one we have\n    // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n    // refresh the token with the new tenantId or token.\n    const mustRefresh =\n      tenantId !== tokenOptions.tenantId || Boolean(tokenOptions.claims) || cycler.mustRefresh;\n\n    if (mustRefresh) return refresh(scopes, tokenOptions);\n\n    if (cycler.shouldRefresh) {\n      refresh(scopes, tokenOptions);\n    }\n\n    return token as AccessToken;\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport type { AzureLogger } from \"@azure/logger\";\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport type { PipelinePolicy } from \"../pipeline\";\nimport { createTokenCycler } from \"../util/tokenCycler\";\nimport { logger as coreLogger } from \"../log\";\n\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nexport const bearerTokenAuthenticationPolicyName = \"bearerTokenAuthenticationPolicy\";\n\n/**\n * Options sent to the authorizeRequest callback\n */\nexport interface AuthorizeRequestOptions {\n  /**\n   * The scopes for which the bearer token applies.\n   */\n  scopes: string[];\n  /**\n   * Function that retrieves either a cached access token or a new access token.\n   */\n  getAccessToken: (scopes: string[], options: GetTokenOptions) => Promise<AccessToken | null>;\n  /**\n   * Request that the policy is trying to fulfill.\n   */\n  request: PipelineRequest;\n  /**\n   * A logger, if one was sent through the HTTP pipeline.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * Options sent to the authorizeRequestOnChallenge callback\n */\nexport interface AuthorizeRequestOnChallengeOptions {\n  /**\n   * The scopes for which the bearer token applies.\n   */\n  scopes: string[];\n  /**\n   * Function that retrieves either a cached access token or a new access token.\n   */\n  getAccessToken: (scopes: string[], options: GetTokenOptions) => Promise<AccessToken | null>;\n  /**\n   * Request that the policy is trying to fulfill.\n   */\n  request: PipelineRequest;\n  /**\n   * Response containing the challenge.\n   */\n  response: PipelineResponse;\n  /**\n   * A logger, if one was sent through the HTTP pipeline.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * Options to override the processing of [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation) challenges.\n */\nexport interface ChallengeCallbacks {\n  /**\n   * Allows for the authorization of the main request of this policy before it's sent.\n   */\n  authorizeRequest?(options: AuthorizeRequestOptions): Promise<void>;\n  /**\n   * Allows to handle authentication challenges and to re-authorize the request.\n   * The response containing the challenge is `options.response`.\n   * If this method returns true, the underlying request will be sent once again.\n   * The request may be modified before being sent.\n   */\n  authorizeRequestOnChallenge?(options: AuthorizeRequestOnChallengeOptions): Promise<boolean>;\n}\n\n/**\n * Options to configure the bearerTokenAuthenticationPolicy\n */\nexport interface BearerTokenAuthenticationPolicyOptions {\n  /**\n   * The TokenCredential implementation that can supply the bearer token.\n   */\n  credential?: TokenCredential;\n  /**\n   * The scopes for which the bearer token applies.\n   */\n  scopes: string | string[];\n  /**\n   * Allows for the processing of [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation) challenges.\n   * If provided, it must contain at least the `authorizeRequestOnChallenge` method.\n   * If provided, after a request is sent, if it has a challenge, it can be processed to re-send the original request with the relevant challenge information.\n   */\n  challengeCallbacks?: ChallengeCallbacks;\n  /**\n   * A logger can be sent for debugging purposes.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * Default authorize request handler\n */\nasync function defaultAuthorizeRequest(options: AuthorizeRequestOptions): Promise<void> {\n  const { scopes, getAccessToken, request } = options;\n  const getTokenOptions: GetTokenOptions = {\n    abortSignal: request.abortSignal,\n    tracingOptions: request.tracingOptions,\n  };\n  const accessToken = await getAccessToken(scopes, getTokenOptions);\n\n  if (accessToken) {\n    options.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n  }\n}\n\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response: PipelineResponse): string | undefined {\n  const challenge = response.headers.get(\"WWW-Authenticate\");\n  if (response.status === 401 && challenge) {\n    return challenge;\n  }\n  return;\n}\n\n/**\n * A policy that can request a token from a TokenCredential implementation and\n * then apply it to the Authorization header of a request as a Bearer token.\n */\nexport function bearerTokenAuthenticationPolicy(\n  options: BearerTokenAuthenticationPolicyOptions,\n): PipelinePolicy {\n  const { credential, scopes, challengeCallbacks } = options;\n  const logger = options.logger || coreLogger;\n  const callbacks = {\n    authorizeRequest: challengeCallbacks?.authorizeRequest ?? defaultAuthorizeRequest,\n    authorizeRequestOnChallenge: challengeCallbacks?.authorizeRequestOnChallenge,\n    // keep all other properties\n    ...challengeCallbacks,\n  };\n\n  // This function encapsulates the entire process of reliably retrieving the token\n  // The options are left out of the public API until there's demand to configure this.\n  // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`\n  // in order to pass through the `options` object.\n  const getAccessToken = credential\n    ? createTokenCycler(credential /* , options */)\n    : () => Promise.resolve(null);\n\n  return {\n    name: bearerTokenAuthenticationPolicyName,\n    /**\n     * If there's no challenge parameter:\n     * - It will try to retrieve the token using the cache, or the credential's getToken.\n     * - Then it will try the next policy with or without the retrieved token.\n     *\n     * It uses the challenge parameters to:\n     * - Skip a first attempt to get the token from the credential if there's no cached token,\n     *   since it expects the token to be retrievable only after the challenge.\n     * - Prepare the outgoing request if the `prepareRequest` method has been provided.\n     * - Send an initial request to receive the challenge if it fails.\n     * - Process a challenge if the response contains it.\n     * - Retrieve a token with the challenge information, then re-send the request.\n     */\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.url.toLowerCase().startsWith(\"https://\")) {\n        throw new Error(\n          \"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\",\n        );\n      }\n\n      await callbacks.authorizeRequest({\n        scopes: Array.isArray(scopes) ? scopes : [scopes],\n        request,\n        getAccessToken,\n        logger,\n      });\n\n      let response: PipelineResponse;\n      let error: Error | undefined;\n      try {\n        response = await next(request);\n      } catch (err: any) {\n        error = err;\n        response = err.response;\n      }\n\n      if (\n        callbacks.authorizeRequestOnChallenge &&\n        response?.status === 401 &&\n        getChallenge(response)\n      ) {\n        // processes challenge\n        const shouldSendRequest = await callbacks.authorizeRequestOnChallenge({\n          scopes: Array.isArray(scopes) ? scopes : [scopes],\n          request,\n          response,\n          getAccessToken,\n          logger,\n        });\n\n        if (shouldSendRequest) {\n          return next(request);\n        }\n      }\n\n      if (error) {\n        throw error;\n      } else {\n        return response;\n      }\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { RequestContext } from \"../request/RequestContext\";\nimport { Response } from \"../request/Response\";\n\n/**\n * Used to specify which type of events to execute this plug in on.\n *\n * @hidden\n */\nexport enum PluginOn {\n  /**\n   * Will be executed per network request\n   */\n  request = \"request\",\n  /**\n   * Will be executed per API operation\n   */\n  operation = \"operation\",\n}\n\n/**\n * Specifies which event to run for the specified plugin\n *\n * @hidden\n */\nexport interface PluginConfig {\n  /**\n   * The event to run the plugin on\n   */\n  on: keyof typeof PluginOn;\n  /**\n   * The plugin to run\n   */\n  plugin: Plugin<any>;\n}\n\n/**\n * Plugins allow you to customize the behavior of the SDk with additional logging, retry, or additional functionality.\n *\n * A plugin is a function which returns a `Promise<Response<T>>`, and is passed a RequestContext and Next object.\n *\n * Next is a function which takes in requestContext returns a promise. You must await/then that promise which will contain the response from further plugins,\n * allowing you to log those results or handle errors.\n *\n * RequestContext is an object which controls what operation is happening, against which endpoint, and more. Modifying this and passing it along via next is how\n * you modify future SDK behavior.\n *\n * @hidden\n */\nexport type Plugin<T> = (\n  context: RequestContext,\n  diagnosticNode: DiagnosticNodeInternal,\n  next: Next<T>\n) => Promise<Response<T>>;\n\n/**\n * Next is a function which takes in requestContext returns a promise. You must await/then that promise which will contain the response from further plugins,\n * allowing you to log those results or handle errors.\n * @hidden\n */\nexport type Next<T> = (context: RequestContext) => Promise<Response<T>>;\n\n/**\n * @internal\n */\nexport async function executePlugins(\n  diagnosticNode: DiagnosticNodeInternal,\n  requestContext: RequestContext,\n  next: Plugin<any>,\n  on: PluginOn\n): Promise<Response<any>> {\n  if (!requestContext.plugins) {\n    return next(requestContext, diagnosticNode, undefined);\n  }\n  let level = 0;\n  const _: Next<any> = (inner: RequestContext): Promise<Response<any>> => {\n    if (++level >= inner.plugins.length) {\n      return next(requestContext, diagnosticNode, undefined);\n    } else if (inner.plugins[level].on !== on) {\n      return _(requestContext);\n    } else {\n      return inner.plugins[level].plugin(inner, diagnosticNode, _);\n    }\n  };\n  if (requestContext.plugins[level].on !== on) {\n    return _(requestContext);\n  } else {\n    return requestContext.plugins[level].plugin(requestContext, diagnosticNode, _);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortController } from \"node-abort-controller\";\nimport {\n  createPipelineRequest,\n  createHttpHeaders,\n  PipelineResponse,\n} from \"@azure/core-rest-pipeline\";\nimport { prepareURL } from \"../common\";\nimport { Constants } from \"../common/constants\";\nimport { executePlugins, PluginOn } from \"../plugins/Plugin\";\nimport * as RetryUtility from \"../retry/retryUtility\";\nimport { defaultHttpAgent, defaultHttpsAgent } from \"./defaultAgent\";\nimport { ErrorResponse } from \"./ErrorResponse\";\nimport { bodyFromData } from \"./request\";\nimport { RequestContext } from \"./RequestContext\";\nimport { Response as CosmosResponse } from \"./Response\";\nimport { TimeoutError } from \"./TimeoutError\";\nimport { getCachedDefaultHttpClient } from \"../utils/cachedClient\";\nimport { AzureLogger, createClientLogger } from \"@azure/logger\";\nimport { DiagnosticNodeInternal, DiagnosticNodeType } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { addDignosticChild } from \"../utils/diagnostics\";\nimport { getCurrentTimestampInMs } from \"../utils/time\";\n\nconst logger: AzureLogger = createClientLogger(\"RequestHandler\");\n\nasync function executeRequest(\n  diagnosticNode: DiagnosticNodeInternal,\n  requestContext: RequestContext\n): Promise<CosmosResponse<any>> {\n  return executePlugins(diagnosticNode, requestContext, httpRequest, PluginOn.request);\n}\n\n/**\n * @hidden\n */\nasync function httpRequest(\n  requestContext: RequestContext,\n  diagnosticNode: DiagnosticNodeInternal\n): Promise<{\n  headers: any;\n  result: any;\n  code: number;\n  substatus: number;\n}> {\n  const controller = new AbortController();\n  const signal = controller.signal;\n\n  // Wrap users passed abort events and call our own internal abort()\n  const userSignal = requestContext.options && requestContext.options.abortSignal;\n  if (userSignal) {\n    if (userSignal.aborted) {\n      controller.abort();\n    } else {\n      userSignal.addEventListener(\"abort\", () => {\n        controller.abort();\n      });\n    }\n  }\n\n  const timeout = setTimeout(() => {\n    controller.abort();\n  }, requestContext.connectionPolicy.requestTimeout);\n\n  let response: PipelineResponse;\n\n  if (requestContext.body) {\n    requestContext.body = bodyFromData(requestContext.body);\n  }\n\n  const httpsClient = getCachedDefaultHttpClient();\n  const url = prepareURL(requestContext.endpoint, requestContext.path);\n  const reqHeaders = createHttpHeaders(requestContext.headers as any);\n  const pipelineRequest = createPipelineRequest({\n    url,\n    headers: reqHeaders,\n    method: requestContext.method,\n    abortSignal: signal,\n    body: requestContext.body,\n  });\n  if (requestContext.requestAgent) {\n    pipelineRequest.agent = requestContext.requestAgent;\n  } else {\n    const parsedUrl = new URL(url);\n    pipelineRequest.agent = parsedUrl.protocol === \"http\" ? defaultHttpAgent : defaultHttpsAgent;\n  }\n\n  const startTimeUTCInMs = getCurrentTimestampInMs();\n  try {\n    if (requestContext.pipeline) {\n      response = await requestContext.pipeline.sendRequest(httpsClient, pipelineRequest);\n    } else {\n      response = await httpsClient.sendRequest(pipelineRequest);\n    }\n  } catch (error: any) {\n    if (error.name === \"AbortError\") {\n      // If the user passed signal caused the abort, cancel the timeout and rethrow the error\n      if (userSignal && userSignal.aborted === true) {\n        clearTimeout(timeout);\n        throw error;\n      }\n      // If the user didn't cancel, it must be an abort we called due to timeout\n      throw new TimeoutError(\n        `Timeout Error! Request took more than ${requestContext.connectionPolicy.requestTimeout} ms`\n      );\n    }\n    throw error;\n  }\n\n  clearTimeout(timeout);\n  const result =\n    response.status === 204 || response.status === 304 || response.bodyAsText === \"\"\n      ? null\n      : JSON.parse(response.bodyAsText);\n  const responseHeaders = response.headers.toJSON();\n\n  const substatus = responseHeaders[Constants.HttpHeaders.SubStatus]\n    ? parseInt(responseHeaders[Constants.HttpHeaders.SubStatus], 10)\n    : undefined;\n\n  diagnosticNode.recordSuccessfulNetworkCall(\n    startTimeUTCInMs,\n    requestContext,\n    response,\n    substatus,\n    url\n  );\n\n  if (response.status >= 400) {\n    const errorResponse: ErrorResponse = new ErrorResponse(result.message);\n    logger.warning(\n      response.status +\n        \" \" +\n        requestContext.endpoint +\n        \" \" +\n        requestContext.path +\n        \" \" +\n        result.message\n    );\n\n    errorResponse.code = response.status;\n    errorResponse.body = result;\n    errorResponse.headers = responseHeaders;\n\n    if (Constants.HttpHeaders.ActivityId in responseHeaders) {\n      errorResponse.activityId = responseHeaders[Constants.HttpHeaders.ActivityId];\n    }\n\n    if (Constants.HttpHeaders.SubStatus in responseHeaders) {\n      errorResponse.substatus = substatus;\n    }\n\n    if (Constants.HttpHeaders.RetryAfterInMs in responseHeaders) {\n      errorResponse.retryAfterInMs = parseInt(\n        responseHeaders[Constants.HttpHeaders.RetryAfterInMs],\n        10\n      );\n      Object.defineProperty(errorResponse, \"retryAfterInMilliseconds\", {\n        get: () => {\n          return errorResponse.retryAfterInMs;\n        },\n      });\n    }\n\n    throw errorResponse;\n  }\n  return {\n    headers: responseHeaders,\n    result,\n    code: response.status,\n    substatus,\n  };\n}\n\n/**\n * @hidden\n */\nasync function request<T>(\n  requestContext: RequestContext,\n  diagnosticNode: DiagnosticNodeInternal\n): Promise<CosmosResponse<T>> {\n  if (requestContext.body) {\n    requestContext.body = bodyFromData(requestContext.body);\n    if (!requestContext.body) {\n      throw new Error(\"parameter data must be a javascript object, string, or Buffer\");\n    }\n  }\n\n  return addDignosticChild(\n    async (childNode: DiagnosticNodeInternal) => {\n      return RetryUtility.execute({\n        diagnosticNode: childNode,\n        requestContext,\n        executeRequest,\n      });\n    },\n    diagnosticNode,\n    DiagnosticNodeType.REQUEST_ATTEMPTS\n  );\n}\n\nexport const RequestHandler = {\n  request,\n};\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { OperationType } from \"../common\";\nimport { ErrorResponse } from \"../request\";\nimport { TimeoutErrorCode } from \"../request/TimeoutError\";\nimport { RetryPolicy } from \"./RetryPolicy\";\n\n/**\n * @hidden\n */\n// Windows Socket Error Codes\nconst WindowsInterruptedFunctionCall = 10004;\n/**\n * @hidden\n */\nconst WindowsFileHandleNotValid = 10009;\n/**\n * @hidden\n */\nconst WindowsPermissionDenied = 10013;\n/**\n * @hidden\n */\nconst WindowsBadAddress = 10014;\n/**\n * @hidden\n */\nconst WindowsInvalidArgumnet = 10022;\n/**\n * @hidden\n */\nconst WindowsResourceTemporarilyUnavailable = 10035;\n/**\n * @hidden\n */\nconst WindowsOperationNowInProgress = 10036;\n/**\n * @hidden\n */\nconst WindowsAddressAlreadyInUse = 10048;\n/**\n * @hidden\n */\nconst WindowsConnectionResetByPeer = 10054;\n/**\n * @hidden\n */\nconst WindowsCannotSendAfterSocketShutdown = 10058;\n/**\n * @hidden\n */\nconst WindowsConnectionTimedOut = 10060;\n/**\n * @hidden\n */\nconst WindowsConnectionRefused = 10061;\n/**\n * @hidden\n */\nconst WindowsNameTooLong = 10063;\n/**\n * @hidden\n */\nconst WindowsHostIsDown = 10064;\n/**\n * @hidden\n */\nconst WindowsNoRouteTohost = 10065;\n/**\n * @hidden\n */\n\n// Linux Error Codes\n/**\n * @hidden\n */\nconst LinuxConnectionReset = \"ECONNRESET\";\n\n// Node Error Codes\n/**\n * @hidden\n */\nconst BrokenPipe = \"EPIPE\";\n\n/**\n * @hidden\n */\nconst CONNECTION_ERROR_CODES = [\n  WindowsInterruptedFunctionCall,\n  WindowsFileHandleNotValid,\n  WindowsPermissionDenied,\n  WindowsBadAddress,\n  WindowsInvalidArgumnet,\n  WindowsResourceTemporarilyUnavailable,\n  WindowsOperationNowInProgress,\n  WindowsAddressAlreadyInUse,\n  WindowsConnectionResetByPeer,\n  WindowsCannotSendAfterSocketShutdown,\n  WindowsConnectionTimedOut,\n  WindowsConnectionRefused,\n  WindowsNameTooLong,\n  WindowsHostIsDown,\n  WindowsNoRouteTohost,\n  LinuxConnectionReset,\n  TimeoutErrorCode,\n  BrokenPipe,\n];\n\n/**\n * @hidden\n */\nfunction needsRetry(operationType: OperationType, code: number | string): boolean {\n  if (\n    (operationType === OperationType.Read || operationType === OperationType.Query) &&\n    CONNECTION_ERROR_CODES.indexOf(code) !== -1\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * This class implements the default connection retry policy for requests.\n * @hidden\n */\nexport class DefaultRetryPolicy implements RetryPolicy {\n  private maxTries: number = 10;\n  private currentRetryAttemptCount: number = 0;\n  public retryAfterInMs: number = 1000;\n\n  constructor(private operationType: OperationType) {}\n  /**\n   * Determines whether the request should be retried or not.\n   * @param err - Error returned by the request.\n   */\n  public async shouldRetry(\n    err: ErrorResponse,\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<boolean> {\n    if (err) {\n      if (\n        this.currentRetryAttemptCount < this.maxTries &&\n        needsRetry(this.operationType, err.code)\n      ) {\n        diagnosticNode.addData({ successfulRetryPolicy: \"default\" });\n        this.currentRetryAttemptCount++;\n        return true;\n      }\n    }\n    return false;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { OperationType } from \"../common\";\nimport { isReadRequest } from \"../common/helper\";\nimport { GlobalEndpointManager } from \"../globalEndpointManager\";\nimport { ErrorResponse } from \"../request\";\nimport { RetryContext } from \"./RetryContext\";\nimport { RetryPolicy } from \"./RetryPolicy\";\n\n/**\n * This class implements the retry policy for endpoint discovery.\n * @hidden\n */\nexport class EndpointDiscoveryRetryPolicy implements RetryPolicy {\n  /** Current retry attempt count. */\n  public currentRetryAttemptCount: number;\n  /** Retry interval in milliseconds. */\n  public retryAfterInMs: number;\n\n  /** Max number of retry attempts to perform. */\n  private maxTries: number;\n  private static readonly maxTries = 120; // TODO: Constant?\n  private static readonly retryAfterInMs = 1000;\n\n  /**\n   * @param globalEndpointManager - The GlobalEndpointManager instance.\n   */\n  constructor(\n    private globalEndpointManager: GlobalEndpointManager,\n    private operationType: OperationType\n  ) {\n    this.maxTries = EndpointDiscoveryRetryPolicy.maxTries;\n    this.currentRetryAttemptCount = 0;\n    this.retryAfterInMs = EndpointDiscoveryRetryPolicy.retryAfterInMs;\n  }\n\n  /**\n   * Determines whether the request should be retried or not.\n   * @param err - Error returned by the request.\n   */\n  public async shouldRetry(\n    err: ErrorResponse,\n    diagnosticNode: DiagnosticNodeInternal,\n    retryContext?: RetryContext,\n    locationEndpoint?: string\n  ): Promise<boolean | [boolean, string]> {\n    if (!err) {\n      return false;\n    }\n\n    if (!retryContext || !locationEndpoint) {\n      return false;\n    }\n\n    if (!this.globalEndpointManager.enableEndpointDiscovery) {\n      return false;\n    }\n\n    if (this.currentRetryAttemptCount >= this.maxTries) {\n      return false;\n    }\n\n    this.currentRetryAttemptCount++;\n\n    if (isReadRequest(this.operationType)) {\n      await this.globalEndpointManager.markCurrentLocationUnavailableForRead(\n        diagnosticNode,\n        locationEndpoint\n      );\n    } else {\n      await this.globalEndpointManager.markCurrentLocationUnavailableForWrite(\n        diagnosticNode,\n        locationEndpoint\n      );\n    }\n\n    retryContext.retryCount = this.currentRetryAttemptCount;\n    retryContext.clearSessionTokenNotAvailable = false;\n    retryContext.retryRequestOnPreferredLocations = false;\n    diagnosticNode.addData({ successfulRetryPolicy: \"endpointDiscovery\" });\n    return true;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { ErrorResponse } from \"../request\";\n\n/**\n * This class implements the resource throttle retry policy for requests.\n * @hidden\n */\nexport class ResourceThrottleRetryPolicy {\n  /** Current retry attempt count. */\n  public currentRetryAttemptCount: number = 0;\n  /** Cummulative wait time in milliseconds for a request while the retries are happening. */\n  public cummulativeWaitTimeinMs: number = 0;\n  /** Retry interval in milliseconds to wait before the next request will be sent. */\n  public retryAfterInMs: number = 0;\n\n  /** Max wait time in milliseconds to wait for a request while the retries are happening. */\n  private timeoutInMs: number;\n  /**\n   * @param maxTries - Max number of retries to be performed for a request.\n   * @param fixedRetryIntervalInMs - Fixed retry interval in milliseconds to wait between each\n   * retry ignoring the retryAfter returned as part of the response.\n   * @param timeoutInSeconds - Max wait time in seconds to wait for a request while the\n   * retries are happening.\n   */\n  constructor(\n    private maxTries: number = 9,\n    private fixedRetryIntervalInMs: number = 0,\n    timeoutInSeconds: number = 30\n  ) {\n    this.timeoutInMs = timeoutInSeconds * 1000;\n    this.currentRetryAttemptCount = 0;\n    this.cummulativeWaitTimeinMs = 0;\n  }\n  /**\n   * Determines whether the request should be retried or not.\n   * @param err - Error returned by the request.\n   */\n  public async shouldRetry(\n    err: ErrorResponse,\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<boolean> {\n    // TODO: any custom error object\n    if (err) {\n      if (this.currentRetryAttemptCount < this.maxTries) {\n        this.currentRetryAttemptCount++;\n        this.retryAfterInMs = 0;\n\n        if (this.fixedRetryIntervalInMs) {\n          this.retryAfterInMs = this.fixedRetryIntervalInMs;\n        } else if (err.retryAfterInMs) {\n          this.retryAfterInMs = err.retryAfterInMs;\n        }\n\n        if (this.cummulativeWaitTimeinMs < this.timeoutInMs) {\n          this.cummulativeWaitTimeinMs += this.retryAfterInMs;\n          diagnosticNode.addData({ successfulRetryPolicy: \"resourceThrottle\" });\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { isReadRequest, OperationType, ResourceType } from \"../common\";\nimport { ConnectionPolicy } from \"../documents\";\nimport { GlobalEndpointManager } from \"../globalEndpointManager\";\nimport { ErrorResponse } from \"../request\";\nimport { RetryContext } from \"./RetryContext\";\nimport { RetryPolicy } from \"./RetryPolicy\";\n\n/**\n * This class implements the retry policy for session consistent reads.\n * @hidden\n */\nexport class SessionRetryPolicy implements RetryPolicy {\n  /** Current retry attempt count. */\n  public currentRetryAttemptCount = 0;\n  /** Retry interval in milliseconds. */\n  public retryAfterInMs = 0;\n\n  /**\n   * @param globalEndpointManager - The GlobalEndpointManager instance.\n   */\n  constructor(\n    private globalEndpointManager: GlobalEndpointManager,\n    private resourceType: ResourceType,\n    private operationType: OperationType,\n    private connectionPolicy: ConnectionPolicy\n  ) {}\n\n  /**\n   * Determines whether the request should be retried or not.\n   * @param err - Error returned by the request.\n   * @param callback - The callback function which takes bool argument which specifies whether the request\n   * will be retried or not.\n   */\n  public async shouldRetry(\n    err: ErrorResponse,\n    diagnosticNode: DiagnosticNodeInternal,\n    retryContext?: RetryContext\n  ): Promise<boolean> {\n    if (!err) {\n      return false;\n    }\n\n    if (!retryContext) {\n      return false;\n    }\n\n    if (!this.connectionPolicy.enableEndpointDiscovery) {\n      return false;\n    }\n\n    if (\n      this.globalEndpointManager.canUseMultipleWriteLocations(this.resourceType, this.operationType)\n    ) {\n      // If we can write to multiple locations, we should against every write endpoint until we succeed\n      const endpoints = isReadRequest(this.operationType)\n        ? await this.globalEndpointManager.getReadEndpoints()\n        : await this.globalEndpointManager.getWriteEndpoints();\n      if (this.currentRetryAttemptCount > endpoints.length) {\n        return false;\n      } else {\n        this.currentRetryAttemptCount++;\n        retryContext.retryCount++;\n        retryContext.retryRequestOnPreferredLocations = this.currentRetryAttemptCount > 1;\n        retryContext.clearSessionTokenNotAvailable =\n          this.currentRetryAttemptCount === endpoints.length;\n        diagnosticNode.addData({ successfulRetryPolicy: \"session\" });\n        return true;\n      }\n    } else {\n      if (this.currentRetryAttemptCount > 1) {\n        return false;\n      } else {\n        this.currentRetryAttemptCount++;\n        retryContext.retryCount++;\n        retryContext.retryRequestOnPreferredLocations = false; // Forces all operations to primary write endpoint\n        retryContext.clearSessionTokenNotAvailable = true;\n        diagnosticNode.addData({ successfulRetryPolicy: \"session\" });\n        return true;\n      }\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { RetryPolicy } from \"./RetryPolicy\";\nimport { StatusCodes } from \"../common/statusCodes\";\nimport { GlobalEndpointManager } from \"../globalEndpointManager\";\nimport { HTTPMethod, isReadRequest } from \"../common\";\nimport { Constants, OperationType, ResourceType } from \"../common/constants\";\nimport { RetryContext } from \"./RetryContext\";\nimport { CosmosHeaders } from \"../queryExecutionContext/CosmosHeaders\";\nimport { TimeoutErrorCode } from \"../request/TimeoutError\";\nimport { ErrorResponse } from \"../request\";\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\n\n/**\n * This class TimeoutFailoverRetryPolicy handles retries for read operations\n * (including data plane,metadata, and query plan) in case of request timeouts\n * (TimeoutError) or service unavailability (503 status code) by performing failover\n * and retrying on other regions.\n * @hidden\n */\nexport class TimeoutFailoverRetryPolicy implements RetryPolicy {\n  private maxRetryAttemptCount = 120;\n  private maxServiceUnavailableRetryCount = 1;\n  public retryAfterInMs = 0;\n  public failoverRetryCount = 0;\n  public request: any;\n  public locationEndpoint: any;\n\n  constructor(\n    private globalEndpointManager: GlobalEndpointManager,\n    private headers: CosmosHeaders,\n    private methodType: HTTPMethod,\n    private resourceType: ResourceType,\n    private operationType: OperationType,\n    private enableEndPointDiscovery: boolean\n  ) {}\n\n  /**\n   * Checks if a timeout request is valid for the timeout failover retry policy.\n   * A valid request should be a data plane, metadata, or query plan request.\n   * @returns\n   */\n  private isValidRequestForTimeoutError(): boolean {\n    const isQuery = Constants.HttpHeaders.IsQuery in this.headers;\n    const isQueryPlan = Constants.HttpHeaders.IsQueryPlan in this.headers;\n    if (this.methodType === HTTPMethod.get || isQuery || isQueryPlan) {\n      return true;\n    }\n    return false;\n  }\n\n  public async shouldRetry(\n    err: ErrorResponse,\n    diagnosticNode: DiagnosticNodeInternal,\n    retryContext?: RetryContext,\n    locationEndpoint?: string\n  ): Promise<boolean> {\n    if (!err) {\n      return false;\n    }\n    if (!retryContext || !locationEndpoint) {\n      return false;\n    }\n    // Check if the error is a timeout error (TimeoutErrorCode) and if it is not a valid HTTP network timeout request\n    if (err.code === TimeoutErrorCode && !this.isValidRequestForTimeoutError()) {\n      return false;\n    }\n    if (!this.enableEndPointDiscovery) {\n      return false;\n    }\n    if (\n      err.code === StatusCodes.ServiceUnavailable &&\n      this.failoverRetryCount >= this.maxServiceUnavailableRetryCount\n    ) {\n      return false;\n    }\n    if (this.failoverRetryCount >= this.maxRetryAttemptCount) {\n      return false;\n    }\n    const canUseMultipleWriteLocations = this.globalEndpointManager.canUseMultipleWriteLocations(\n      this.resourceType,\n      this.operationType\n    );\n    const readRequest = isReadRequest(this.operationType);\n\n    if (!canUseMultipleWriteLocations && !readRequest) {\n      // Write requests on single master cannot be retried, no other regions available\n      return false;\n    }\n    this.failoverRetryCount++;\n    // Setting the retryLocationIndex to the next available location for retry.\n    // The retryLocationIndex is determined based on the failoverRetryCount, starting from zero.\n    retryContext.retryLocationServerIndex = await this.findEndpointIndex(this.failoverRetryCount);\n    diagnosticNode.addData({ successfulRetryPolicy: \"timeout-failover\" });\n    return true;\n  }\n\n  /**\n   * Determines index of endpoint to be used for retry based upon failoverRetryCount and avalable locations\n   * @param failoverRetryCount - count of failovers\n   * @returns\n   */\n  private async findEndpointIndex(failoverRetryCount: number): Promise<number> {\n    // count of preferred locations specified by user\n    const preferredLocationsCount = this.globalEndpointManager.preferredLocationsCount;\n    const readRequest = isReadRequest(this.operationType);\n    let endpointIndex = 0;\n    // If preferredLocationsCount is not zero, it indicates that the user has specified preferred locations.\n    if (preferredLocationsCount !== 0) {\n      // The endpointIndex is set based on the preferred location and the failover retry count.\n      endpointIndex = failoverRetryCount % preferredLocationsCount;\n    } else {\n      // In the absence of preferred locations, the endpoint selection is based on the failover count and the number of available locations.\n      if (readRequest) {\n        const getReadEndpoints = await this.globalEndpointManager.getReadEndpoints();\n        if (getReadEndpoints && getReadEndpoints.length > 0) {\n          endpointIndex = failoverRetryCount % getReadEndpoints.length;\n        }\n      } else {\n        const getWriteEndpoints = await this.globalEndpointManager.getWriteEndpoints();\n        if (getWriteEndpoints && getWriteEndpoints.length > 0) {\n          endpointIndex = failoverRetryCount % getWriteEndpoints.length;\n        }\n      }\n    }\n    return endpointIndex;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"../common/constants\";\nimport { sleep } from \"../common/helper\";\nimport { StatusCodes, SubStatusCodes } from \"../common/statusCodes\";\nimport { DiagnosticNodeInternal, DiagnosticNodeType } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { Response } from \"../request\";\nimport { RequestContext } from \"../request/RequestContext\";\nimport { TimeoutErrorCode } from \"../request/TimeoutError\";\nimport { addDignosticChild } from \"../utils/diagnostics\";\nimport { getCurrentTimestampInMs } from \"../utils/time\";\nimport { DefaultRetryPolicy } from \"./defaultRetryPolicy\";\nimport { EndpointDiscoveryRetryPolicy } from \"./endpointDiscoveryRetryPolicy\";\nimport { ResourceThrottleRetryPolicy } from \"./resourceThrottleRetryPolicy\";\nimport { RetryContext } from \"./RetryContext\";\nimport { RetryPolicy } from \"./RetryPolicy\";\nimport { SessionRetryPolicy } from \"./sessionRetryPolicy\";\nimport { TimeoutFailoverRetryPolicy } from \"./timeoutFailoverRetryPolicy\";\n\n/**\n * @hidden\n */\ninterface ExecuteArgs {\n  retryContext?: RetryContext;\n  diagnosticNode: DiagnosticNodeInternal;\n  retryPolicies?: RetryPolicies;\n  requestContext: RequestContext;\n  executeRequest: (\n    diagnosticNode: DiagnosticNodeInternal,\n    requestContext: RequestContext\n  ) => Promise<Response<any>>;\n}\n\n/**\n * @hidden\n */\ninterface RetryPolicies {\n  endpointDiscoveryRetryPolicy: EndpointDiscoveryRetryPolicy;\n  resourceThrottleRetryPolicy: ResourceThrottleRetryPolicy;\n  sessionReadRetryPolicy: SessionRetryPolicy;\n  defaultRetryPolicy: DefaultRetryPolicy;\n  timeoutFailoverRetryPolicy: TimeoutFailoverRetryPolicy;\n}\n\n/**\n * @hidden\n */\nexport async function execute({\n  diagnosticNode,\n  retryContext = { retryCount: 0 },\n  retryPolicies,\n  requestContext,\n  executeRequest,\n}: ExecuteArgs): Promise<Response<any>> {\n  // TODO: any response\n  return addDignosticChild(\n    async (localDiagnosticNode: DiagnosticNodeInternal) => {\n      localDiagnosticNode.addData({ requestAttempNumber: retryContext.retryCount });\n      if (!retryPolicies) {\n        retryPolicies = {\n          endpointDiscoveryRetryPolicy: new EndpointDiscoveryRetryPolicy(\n            requestContext.globalEndpointManager,\n            requestContext.operationType\n          ),\n          resourceThrottleRetryPolicy: new ResourceThrottleRetryPolicy(\n            requestContext.connectionPolicy.retryOptions.maxRetryAttemptCount,\n            requestContext.connectionPolicy.retryOptions.fixedRetryIntervalInMilliseconds,\n            requestContext.connectionPolicy.retryOptions.maxWaitTimeInSeconds\n          ),\n          sessionReadRetryPolicy: new SessionRetryPolicy(\n            requestContext.globalEndpointManager,\n            requestContext.resourceType,\n            requestContext.operationType,\n            requestContext.connectionPolicy\n          ),\n          defaultRetryPolicy: new DefaultRetryPolicy(requestContext.operationType),\n          timeoutFailoverRetryPolicy: new TimeoutFailoverRetryPolicy(\n            requestContext.globalEndpointManager,\n            requestContext.headers,\n            requestContext.method,\n            requestContext.resourceType,\n            requestContext.operationType,\n            requestContext.connectionPolicy.enableEndpointDiscovery\n          ),\n        };\n      }\n      if (retryContext && retryContext.clearSessionTokenNotAvailable) {\n        requestContext.client.clearSessionToken(requestContext.path);\n        delete requestContext.headers[\"x-ms-session-token\"];\n      }\n      if (retryContext && retryContext.retryLocationServerIndex) {\n        requestContext.endpoint = await requestContext.globalEndpointManager.resolveServiceEndpoint(\n          localDiagnosticNode,\n          requestContext.resourceType,\n          requestContext.operationType,\n          retryContext.retryLocationServerIndex\n        );\n      } else {\n        requestContext.endpoint = await requestContext.globalEndpointManager.resolveServiceEndpoint(\n          localDiagnosticNode,\n          requestContext.resourceType,\n          requestContext.operationType\n        );\n      }\n      const startTimeUTCInMs = getCurrentTimestampInMs();\n      try {\n        const response = await executeRequest(localDiagnosticNode, requestContext);\n        response.headers[Constants.ThrottleRetryCount] =\n          retryPolicies.resourceThrottleRetryPolicy.currentRetryAttemptCount;\n        response.headers[Constants.ThrottleRetryWaitTimeInMs] =\n          retryPolicies.resourceThrottleRetryPolicy.cummulativeWaitTimeinMs;\n        return response;\n      } catch (err: any) {\n        // TODO: any error\n        let retryPolicy: RetryPolicy = null;\n        const headers = err.headers || {};\n        if (\n          err.code === StatusCodes.ENOTFOUND ||\n          err.code === \"REQUEST_SEND_ERROR\" ||\n          (err.code === StatusCodes.Forbidden &&\n            (err.substatus === SubStatusCodes.DatabaseAccountNotFound ||\n              err.substatus === SubStatusCodes.WriteForbidden))\n        ) {\n          retryPolicy = retryPolicies.endpointDiscoveryRetryPolicy;\n        } else if (err.code === StatusCodes.TooManyRequests) {\n          retryPolicy = retryPolicies.resourceThrottleRetryPolicy;\n        } else if (\n          err.code === StatusCodes.NotFound &&\n          err.substatus === SubStatusCodes.ReadSessionNotAvailable\n        ) {\n          retryPolicy = retryPolicies.sessionReadRetryPolicy;\n        } else if (err.code === StatusCodes.ServiceUnavailable || err.code === TimeoutErrorCode) {\n          retryPolicy = retryPolicies.timeoutFailoverRetryPolicy;\n        } else {\n          retryPolicy = retryPolicies.defaultRetryPolicy;\n        }\n        const results = await retryPolicy.shouldRetry(\n          err,\n          localDiagnosticNode,\n          retryContext,\n          requestContext.endpoint\n        );\n        if (!results) {\n          headers[Constants.ThrottleRetryCount] =\n            retryPolicies.resourceThrottleRetryPolicy.currentRetryAttemptCount;\n          headers[Constants.ThrottleRetryWaitTimeInMs] =\n            retryPolicies.resourceThrottleRetryPolicy.cummulativeWaitTimeinMs;\n          err.headers = { ...err.headers, ...headers };\n          throw err;\n        } else {\n          requestContext.retryCount++;\n          const newUrl = (results as any)[1]; // TODO: any hack\n          if (newUrl !== undefined) {\n            requestContext.endpoint = newUrl;\n          }\n          localDiagnosticNode.recordFailedNetworkCall(\n            startTimeUTCInMs,\n            requestContext,\n            retryContext.retryCount,\n            err.code,\n            err.subsstatusCode,\n            headers\n          );\n          await sleep(retryPolicy.retryAfterInMs);\n          return execute({\n            diagnosticNode,\n            executeRequest,\n            requestContext,\n            retryContext,\n            retryPolicies,\n          });\n        }\n      }\n    },\n    diagnosticNode,\n    DiagnosticNodeType.HTTP_REQUEST\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Agent } from \"http\";\n/**\n * @hidden\n */\nexport let defaultHttpAgent: Agent;\n/**\n * @hidden\n */\nexport let defaultHttpsAgent: Agent;\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpClient, createDefaultHttpClient } from \"@azure/core-rest-pipeline\";\n\nlet cachedHttpClient: HttpClient | undefined;\n\nexport function getCachedDefaultHttpClient(): HttpClient {\n  if (!cachedHttpClient) {\n    cachedHttpClient = createDefaultHttpClient();\n  }\n\n  return cachedHttpClient;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Models vector clock bases session token. Session token has the following format:\n * `{Version}#{GlobalLSN}#{RegionId1}={LocalLsn1}#{RegionId2}={LocalLsn2}....#{RegionIdN}={LocalLsnN}`\n * 'Version' captures the configuration number of the partition which returned this session token.\n * 'Version' is incremented everytime topology of the partition is updated (say due to Add/Remove/Failover).\n *\n * The choice of separators '#' and '=' is important. Separators ';' and ',' are used to delimit\n * per-partitionKeyRange session token\n * @hidden\n *\n */\nexport class VectorSessionToken {\n  private static readonly SEGMENT_SEPARATOR = \"#\";\n  private static readonly REGION_PROGRESS_SEPARATOR = \"=\";\n\n  constructor(\n    private readonly version: number,\n    private readonly globalLsn: number,\n    private readonly localLsnByregion: Map<number, string>,\n    private readonly sessionToken?: string\n  ) {\n    if (!this.sessionToken) {\n      const regionAndLocalLsn = [];\n      for (const [key, value] of this.localLsnByregion.entries()) {\n        regionAndLocalLsn.push(`${key}${VectorSessionToken.REGION_PROGRESS_SEPARATOR}${value}`);\n      }\n      const regionProgress = regionAndLocalLsn.join(VectorSessionToken.SEGMENT_SEPARATOR);\n      if (regionProgress === \"\") {\n        this.sessionToken = `${this.version}${VectorSessionToken.SEGMENT_SEPARATOR}${this.globalLsn}`;\n      } else {\n        this.sessionToken = `${this.version}${VectorSessionToken.SEGMENT_SEPARATOR}${this.globalLsn}${VectorSessionToken.SEGMENT_SEPARATOR}${regionProgress}`;\n      }\n    }\n  }\n\n  public static create(sessionToken: string): VectorSessionToken | null {\n    const [versionStr, globalLsnStr, ...regionSegments] = sessionToken.split(\n      VectorSessionToken.SEGMENT_SEPARATOR\n    );\n\n    const version = parseInt(versionStr, 10);\n    const globalLsn = parseFloat(globalLsnStr);\n\n    if (typeof version !== \"number\" || typeof globalLsn !== \"number\") {\n      return null;\n    }\n\n    const lsnByRegion = new Map<number, string>();\n    for (const regionSegment of regionSegments) {\n      const [regionIdStr, localLsnStr] = regionSegment.split(\n        VectorSessionToken.REGION_PROGRESS_SEPARATOR\n      );\n\n      if (!regionIdStr || !localLsnStr) {\n        return null;\n      }\n\n      const regionId = parseInt(regionIdStr, 10);\n      let localLsn: string;\n      try {\n        localLsn = localLsnStr;\n      } catch (err: any) {\n        // TODO: log error\n        return null;\n      }\n      if (typeof regionId !== \"number\") {\n        return null;\n      }\n\n      lsnByRegion.set(regionId, localLsn);\n    }\n\n    return new VectorSessionToken(version, globalLsn, lsnByRegion, sessionToken);\n  }\n\n  public equals(other: VectorSessionToken): boolean {\n    return !other\n      ? false\n      : this.version === other.version &&\n          this.globalLsn === other.globalLsn &&\n          this.areRegionProgressEqual(other.localLsnByregion);\n  }\n\n  public merge(other: VectorSessionToken): VectorSessionToken {\n    if (other == null) {\n      throw new Error(\"other (Vector Session Token) must not be null\");\n    }\n\n    if (\n      this.version === other.version &&\n      this.localLsnByregion.size !== other.localLsnByregion.size\n    ) {\n      throw new Error(\n        `Compared session tokens ${this.sessionToken} and ${other.sessionToken} have unexpected regions`\n      );\n    }\n\n    const [higherVersionSessionToken, lowerVersionSessionToken]: [\n      VectorSessionToken,\n      VectorSessionToken\n    ] = this.version < other.version ? [other, this] : [this, other];\n\n    const highestLocalLsnByRegion = new Map<number, string>();\n\n    for (const [regionId, highLocalLsn] of higherVersionSessionToken.localLsnByregion.entries()) {\n      const lowLocalLsn = lowerVersionSessionToken.localLsnByregion.get(regionId);\n      if (lowLocalLsn) {\n        highestLocalLsnByRegion.set(regionId, max(highLocalLsn, lowLocalLsn));\n      } else if (this.version === other.version) {\n        throw new Error(\n          `Compared session tokens have unexpected regions. Session 1: ${this.sessionToken} - Session 2: ${this.sessionToken}`\n        );\n      } else {\n        highestLocalLsnByRegion.set(regionId, highLocalLsn);\n      }\n    }\n\n    return new VectorSessionToken(\n      Math.max(this.version, other.version),\n      Math.max(this.globalLsn, other.globalLsn),\n      highestLocalLsnByRegion\n    );\n  }\n\n  public toString(): string | undefined {\n    return this.sessionToken;\n  }\n\n  private areRegionProgressEqual(other: Map<number, string>): boolean {\n    if (this.localLsnByregion.size !== other.size) {\n      return false;\n    }\n\n    for (const [regionId, localLsn] of this.localLsnByregion.entries()) {\n      const otherLocalLsn = other.get(regionId);\n\n      if (localLsn !== otherLocalLsn) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n/**\n * @hidden\n */\nfunction max(int1: string, int2: string): string {\n  // NOTE: This only works for positive numbers\n  if (int1.length === int2.length) {\n    return int1 > int2 ? int1 : int2;\n  } else if (int1.length > int2.length) {\n    return int1;\n  } else {\n    return int2;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport atob from \"../utils/atob\";\nimport { Constants, getContainerLink, OperationType, ResourceType, trimSlashes } from \"../common\";\nimport { CosmosHeaders } from \"../queryExecutionContext\";\nimport { SessionContext } from \"./SessionContext\";\nimport { VectorSessionToken } from \"./VectorSessionToken\";\n\n/** @hidden */\nexport class SessionContainer {\n  private static readonly EMPTY_SESSION_TOKEN = \"\";\n  private static readonly SESSION_TOKEN_SEPARATOR = \",\";\n  private static readonly SESSION_TOKEN_PARTITION_SPLITTER = \":\";\n  constructor(\n    private collectionNameToCollectionResourceId = new Map<string, string>(),\n    private collectionResourceIdToSessionTokens = new Map<string, Map<string, VectorSessionToken>>()\n  ) {}\n\n  public get(request: SessionContext): string {\n    if (!request) {\n      throw new Error(\"request cannot be null\");\n    }\n    const collectionName = getContainerLink(trimSlashes(request.resourceAddress));\n    const rangeIdToTokenMap = this.getPartitionKeyRangeIdToTokenMap(collectionName);\n    return SessionContainer.getCombinedSessionTokenString(rangeIdToTokenMap);\n  }\n\n  public remove(request: SessionContext): void {\n    let collectionResourceId: string;\n    const resourceAddress = trimSlashes(request.resourceAddress);\n    const collectionName = getContainerLink(resourceAddress);\n    if (collectionName) {\n      collectionResourceId = this.collectionNameToCollectionResourceId.get(collectionName);\n      this.collectionNameToCollectionResourceId.delete(collectionName);\n    }\n    if (collectionResourceId !== undefined) {\n      this.collectionResourceIdToSessionTokens.delete(collectionResourceId);\n    }\n  }\n\n  public set(request: SessionContext, resHeaders: CosmosHeaders): void {\n    // TODO: we check the master logic a few different places. Might not need it.\n    if (\n      !resHeaders ||\n      SessionContainer.isReadingFromMaster(request.resourceType, request.operationType)\n    ) {\n      return;\n    }\n\n    const sessionTokenString = resHeaders[Constants.HttpHeaders.SessionToken];\n    if (!sessionTokenString) {\n      return;\n    }\n\n    const containerName = this.getContainerName(request, resHeaders);\n\n    const ownerId = !request.isNameBased\n      ? request.resourceId\n      : resHeaders[Constants.HttpHeaders.OwnerId] || request.resourceId;\n\n    if (!ownerId) {\n      return;\n    }\n\n    if (containerName && this.validateOwnerID(ownerId)) {\n      if (!this.collectionResourceIdToSessionTokens.has(ownerId)) {\n        this.collectionResourceIdToSessionTokens.set(ownerId, new Map());\n      }\n\n      if (!this.collectionNameToCollectionResourceId.has(containerName)) {\n        this.collectionNameToCollectionResourceId.set(containerName, ownerId);\n      }\n\n      const containerSessionContainer = this.collectionResourceIdToSessionTokens.get(ownerId);\n      SessionContainer.compareAndSetToken(sessionTokenString, containerSessionContainer);\n    }\n  }\n\n  private validateOwnerID(ownerId: string): boolean {\n    // If ownerId contains exactly 8 bytes it represents a unique database+collection identifier. Otherwise it represents another resource\n    // The first 4 bytes are the database. The last 4 bytes are the collection.\n    // Cosmos rids potentially contain \"-\" which is an invalid character in the browser atob implementation\n    // See https://en.wikipedia.org/wiki/Base64#Filenames\n    return atob(ownerId.replace(/-/g, \"/\")).length === 8;\n  }\n\n  private getPartitionKeyRangeIdToTokenMap(\n    collectionName: string\n  ): Map<string, VectorSessionToken> {\n    let rangeIdToTokenMap: Map<string, VectorSessionToken> = null;\n    if (collectionName && this.collectionNameToCollectionResourceId.has(collectionName)) {\n      rangeIdToTokenMap = this.collectionResourceIdToSessionTokens.get(\n        this.collectionNameToCollectionResourceId.get(collectionName)\n      );\n    }\n\n    return rangeIdToTokenMap;\n  }\n\n  private static getCombinedSessionTokenString(tokens: Map<string, VectorSessionToken>): string {\n    if (!tokens || tokens.size === 0) {\n      return SessionContainer.EMPTY_SESSION_TOKEN;\n    }\n\n    let result = \"\";\n    for (const [range, token] of tokens.entries()) {\n      result +=\n        range +\n        SessionContainer.SESSION_TOKEN_PARTITION_SPLITTER +\n        token.toString() +\n        SessionContainer.SESSION_TOKEN_SEPARATOR;\n    }\n    return result.slice(0, -1);\n  }\n\n  private static compareAndSetToken(\n    newTokenString: string,\n    containerSessionTokens: Map<string, VectorSessionToken>\n  ): void {\n    if (!newTokenString) {\n      return;\n    }\n\n    const partitionsParts = newTokenString.split(SessionContainer.SESSION_TOKEN_SEPARATOR);\n    for (const partitionPart of partitionsParts) {\n      const newTokenParts = partitionPart.split(SessionContainer.SESSION_TOKEN_PARTITION_SPLITTER);\n      if (newTokenParts.length !== 2) {\n        return;\n      }\n\n      const range = newTokenParts[0];\n      const newToken = VectorSessionToken.create(newTokenParts[1]);\n      const tokenForRange = !containerSessionTokens.get(range)\n        ? newToken\n        : containerSessionTokens.get(range).merge(newToken);\n      containerSessionTokens.set(range, tokenForRange);\n    }\n  }\n\n  // TODO: have a assert if the type doesn't mastch known types\n  private static isReadingFromMaster(\n    resourceType: ResourceType,\n    operationType: OperationType\n  ): boolean {\n    if (\n      resourceType === Constants.Path.OffersPathSegment ||\n      resourceType === Constants.Path.DatabasesPathSegment ||\n      resourceType === Constants.Path.UsersPathSegment ||\n      resourceType === Constants.Path.PermissionsPathSegment ||\n      resourceType === Constants.Path.TopologyPathSegment ||\n      resourceType === Constants.Path.DatabaseAccountPathSegment ||\n      resourceType === Constants.Path.PartitionKeyRangesPathSegment ||\n      (resourceType === Constants.Path.CollectionsPathSegment &&\n        operationType === OperationType.Query)\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private getContainerName(request: SessionContext, headers: CosmosHeaders): string {\n    let ownerFullName = headers[Constants.HttpHeaders.OwnerFullName];\n    if (!ownerFullName) {\n      ownerFullName = trimSlashes(request.resourceAddress);\n    }\n\n    return getContainerLink(ownerFullName as string);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport function checkURL(testString: string): URL {\n  return new URL(testString);\n}\n\nexport function sanitizeEndpoint(url: string): string {\n  return new URL(url).href.replace(/\\/$/, \"\");\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureLogger, createClientLogger } from \"@azure/logger\";\n\n/**\n * Interface for a Diagnostic Writer.\n * @hidden\n */\nexport interface DiagnosticWriter {\n  write(message: string): Promise<void>;\n}\n\n/**\n * Implementation of DiagnosticWriter, which uses \\@azure/logger to write\n * diagnostics.\n * @hidden\n */\nexport class LogDiagnosticWriter implements DiagnosticWriter {\n  private logger: AzureLogger = createClientLogger(\"CosmosDBDiagnostics\");\n  public async write(diagnosticsData: string): Promise<void> {\n    this.logger.verbose(diagnosticsData);\n  }\n}\n\n/**\n * Implementation of a no-op DiagnosticWriter.\n * @hidden\n */\nexport class NoOpDiagnosticWriter implements DiagnosticWriter {\n  public async write(_diagnosticsData: string): Promise<void> {\n    // No op\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CosmosDiagnostics } from \"../CosmosDiagnostics\";\n\nexport interface DiagnosticFormatter {\n  format(cosmosDiagnostic: CosmosDiagnostics): string;\n}\n\nexport class DefaultDiagnosticFormatter implements DiagnosticFormatter {\n  format(cosmosDiagnostic: CosmosDiagnostics): string {\n    return JSON.stringify(cosmosDiagnostic);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { v4 } from \"uuid\";\nconst uuid = v4;\nimport {\n  Pipeline,\n  bearerTokenAuthenticationPolicy,\n  createEmptyPipeline,\n} from \"@azure/core-rest-pipeline\";\nimport { PartitionKeyRange } from \"./client/Container/PartitionKeyRange\";\nimport { Resource } from \"./client/Resource\";\nimport { Constants, HTTPMethod, OperationType, ResourceType } from \"./common/constants\";\nimport { getIdFromLink, getPathFromLink, parseLink } from \"./common/helper\";\nimport { StatusCodes, SubStatusCodes } from \"./common/statusCodes\";\nimport { Agent, CosmosClientOptions } from \"./CosmosClientOptions\";\nimport {\n  ConnectionPolicy,\n  ConsistencyLevel,\n  DatabaseAccount,\n  PartitionKey,\n  convertToInternalPartitionKey,\n} from \"./documents\";\nimport { GlobalEndpointManager } from \"./globalEndpointManager\";\nimport { PluginConfig, PluginOn, executePlugins } from \"./plugins/Plugin\";\nimport { FetchFunctionCallback, SqlQuerySpec } from \"./queryExecutionContext\";\nimport { CosmosHeaders } from \"./queryExecutionContext/CosmosHeaders\";\nimport { QueryIterator } from \"./queryIterator\";\nimport { ErrorResponse } from \"./request\";\nimport { FeedOptions, RequestOptions, Response } from \"./request\";\nimport { PartitionedQueryExecutionInfo } from \"./request/ErrorResponse\";\nimport { getHeaders } from \"./request/request\";\nimport { RequestContext } from \"./request/RequestContext\";\nimport { RequestHandler } from \"./request/RequestHandler\";\nimport { SessionContainer } from \"./session/sessionContainer\";\nimport { SessionContext } from \"./session/SessionContext\";\nimport { BulkOptions } from \"./utils/batch\";\nimport { sanitizeEndpoint } from \"./utils/checkURL\";\nimport { AzureLogger, createClientLogger } from \"@azure/logger\";\nimport { ClientConfigDiagnostic, CosmosDiagnostics } from \"./CosmosDiagnostics\";\nimport { DiagnosticNodeInternal } from \"./diagnostics/DiagnosticNodeInternal\";\nimport {\n  DiagnosticWriter,\n  LogDiagnosticWriter,\n  NoOpDiagnosticWriter,\n} from \"./diagnostics/DiagnosticWriter\";\nimport { DefaultDiagnosticFormatter, DiagnosticFormatter } from \"./diagnostics/DiagnosticFormatter\";\nimport { CosmosDbDiagnosticLevel } from \"./diagnostics/CosmosDbDiagnosticLevel\";\n\nconst logger: AzureLogger = createClientLogger(\"ClientContext\");\n\nconst QueryJsonContentType = \"application/query+json\";\nconst HttpHeaders = Constants.HttpHeaders;\n/**\n * @hidden\n * @hidden\n */\nexport class ClientContext {\n  private readonly sessionContainer: SessionContainer;\n  private connectionPolicy: ConnectionPolicy;\n  private pipeline: Pipeline;\n  private diagnosticWriter: DiagnosticWriter;\n  private diagnosticFormatter: DiagnosticFormatter;\n  public partitionKeyDefinitionCache: { [containerUrl: string]: any }; // TODO: PartitionKeyDefinitionCache\n  public constructor(\n    private cosmosClientOptions: CosmosClientOptions,\n    private globalEndpointManager: GlobalEndpointManager,\n    private clientConfig: ClientConfigDiagnostic,\n    public diagnosticLevel: CosmosDbDiagnosticLevel\n  ) {\n    this.connectionPolicy = cosmosClientOptions.connectionPolicy;\n    this.sessionContainer = new SessionContainer();\n    this.partitionKeyDefinitionCache = {};\n    this.pipeline = null;\n    if (cosmosClientOptions.aadCredentials) {\n      this.pipeline = createEmptyPipeline();\n      const hrefEndpoint = sanitizeEndpoint(cosmosClientOptions.endpoint);\n      const scope = `${hrefEndpoint}/.default`;\n      this.pipeline.addPolicy(\n        bearerTokenAuthenticationPolicy({\n          credential: cosmosClientOptions.aadCredentials,\n          scopes: scope,\n          challengeCallbacks: {\n            async authorizeRequest({ request, getAccessToken }) {\n              const tokenResponse = await getAccessToken([scope], {});\n              const AUTH_PREFIX = `type=aad&ver=1.0&sig=`;\n              const authorizationToken = `${AUTH_PREFIX}${tokenResponse.token}`;\n              request.headers.set(\"Authorization\", authorizationToken);\n            },\n          },\n        })\n      );\n    }\n    this.initializeDiagnosticSettings(diagnosticLevel);\n  }\n  /** @hidden */\n  public async read<T>({\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.get,\n        path,\n        operationType: OperationType.Read,\n        resourceId,\n        options,\n        resourceType,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Read,\n        resourceType,\n      });\n\n      request.headers = await this.buildHeaders(request);\n      this.applySessionToken(request);\n\n      // read will use ReadEndpoint since it uses GET operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation\n      );\n      this.captureSessionToken(undefined, path, OperationType.Read, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async queryFeed<T>({\n    path,\n    resourceType,\n    resourceId,\n    resultFn,\n    query,\n    options,\n    diagnosticNode,\n    partitionKeyRangeId,\n    partitionKey,\n    startEpk,\n    endEpk,\n  }: {\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    resultFn: (result: { [key: string]: any }) => any[];\n    query: SqlQuerySpec | string;\n    options: FeedOptions;\n    diagnosticNode: DiagnosticNodeInternal;\n    partitionKeyRangeId?: string;\n    partitionKey?: PartitionKey;\n    startEpk?: string | undefined;\n    endEpk?: string | undefined;\n  }): Promise<Response<T & Resource>> {\n    // Query operations will use ReadEndpoint even though it uses\n    // GET(for queryFeed) and POST(for regular query operations)\n\n    const request: RequestContext = {\n      ...this.getContextDerivedPropsForRequestCreation(),\n      method: HTTPMethod.get,\n      path,\n      operationType: OperationType.Query,\n      partitionKeyRangeId,\n      resourceId,\n      resourceType,\n      options,\n      body: query,\n      partitionKey,\n    };\n    diagnosticNode.addData({\n      operationType: OperationType.Query,\n      resourceType,\n    });\n    const requestId = uuid();\n    if (query !== undefined) {\n      request.method = HTTPMethod.post;\n    }\n    request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n      diagnosticNode,\n      request.resourceType,\n      request.operationType\n    );\n    request.headers = await this.buildHeaders(request);\n\n    if (startEpk !== undefined && endEpk !== undefined) {\n      request.headers[HttpHeaders.StartEpk] = startEpk;\n      request.headers[HttpHeaders.EndEpk] = endEpk;\n      request.headers[HttpHeaders.ReadFeedKeyType] = \"EffectivePartitionKeyRange\";\n    }\n\n    if (query !== undefined) {\n      request.headers[HttpHeaders.IsQuery] = \"true\";\n      request.headers[HttpHeaders.ContentType] = QueryJsonContentType;\n      if (typeof query === \"string\") {\n        request.body = { query }; // Converts query text to query object.\n      }\n    }\n    this.applySessionToken(request);\n    logger.info(\n      \"query \" +\n        requestId +\n        \" started\" +\n        (request.partitionKeyRangeId ? \" pkrid: \" + request.partitionKeyRangeId : \"\")\n    );\n    logger.verbose(request);\n    const start = Date.now();\n    const response = await RequestHandler.request(request, diagnosticNode);\n    logger.info(\"query \" + requestId + \" finished - \" + (Date.now() - start) + \"ms\");\n    this.captureSessionToken(undefined, path, OperationType.Query, response.headers);\n    return this.processQueryFeedResponse(response, !!query, resultFn);\n  }\n\n  public async getQueryPlan(\n    path: string,\n    resourceType: ResourceType,\n    resourceId: string,\n    query: SqlQuerySpec | string,\n    options: FeedOptions = {},\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<Response<PartitionedQueryExecutionInfo>> {\n    const request: RequestContext = {\n      ...this.getContextDerivedPropsForRequestCreation(),\n      method: HTTPMethod.post,\n      path,\n      operationType: OperationType.Read,\n      resourceId,\n      resourceType,\n      options,\n      body: query,\n    };\n    diagnosticNode.addData({\n      operationType: OperationType.Read,\n      resourceType,\n    });\n    request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n      diagnosticNode,\n      request.resourceType,\n      request.operationType\n    );\n    request.headers = await this.buildHeaders(request);\n    request.headers[HttpHeaders.IsQueryPlan] = \"True\";\n    request.headers[HttpHeaders.QueryVersion] = \"1.4\";\n    request.headers[HttpHeaders.SupportedQueryFeatures] =\n      \"NonValueAggregate, Aggregate, Distinct, MultipleOrderBy, OffsetAndLimit, OrderBy, Top, CompositeAggregate, GroupBy, MultipleAggregates\";\n    request.headers[HttpHeaders.ContentType] = QueryJsonContentType;\n    if (typeof query === \"string\") {\n      request.body = { query }; // Converts query text to query object.\n    }\n\n    this.applySessionToken(request);\n    const response = await RequestHandler.request(request, diagnosticNode);\n    this.captureSessionToken(undefined, path, OperationType.Query, response.headers);\n    return response as any;\n  }\n\n  public queryPartitionKeyRanges(\n    collectionLink: string,\n    query?: string | SqlQuerySpec,\n    options?: FeedOptions\n  ): QueryIterator<PartitionKeyRange> {\n    const path = getPathFromLink(collectionLink, ResourceType.pkranges);\n    const id = getIdFromLink(collectionLink);\n    const cb: FetchFunctionCallback = async (diagNode, innerOptions) => {\n      const response = await this.queryFeed({\n        path,\n        resourceType: ResourceType.pkranges,\n        resourceId: id,\n        resultFn: (result) => result.PartitionKeyRanges,\n        query,\n        options: innerOptions,\n        diagnosticNode: diagNode,\n      });\n      return response;\n    };\n    return new QueryIterator<PartitionKeyRange>(this, query, options, cb);\n  }\n\n  public async delete<T>({\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    method = HTTPMethod.delete,\n    diagnosticNode,\n  }: {\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    method?: HTTPMethod;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: method,\n        operationType: OperationType.Delete,\n        path,\n        resourceType,\n        options,\n        resourceId,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Delete,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      this.applySessionToken(request);\n      // deleteResource will use WriteEndpoint since it uses DELETE operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation\n      );\n      if (parseLink(path).type !== \"colls\") {\n        this.captureSessionToken(undefined, path, OperationType.Delete, response.headers);\n      } else {\n        this.clearSessionToken(path);\n      }\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async patch<T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    body: any;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.patch,\n        operationType: OperationType.Patch,\n        path,\n        resourceType,\n        body,\n        resourceId,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Patch,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      this.applySessionToken(request);\n\n      // patch will use WriteEndpoint\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation\n      );\n      this.captureSessionToken(undefined, path, OperationType.Patch, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async create<T, U = T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    diagnosticNode,\n    options = {},\n    partitionKey,\n  }: {\n    body: T;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    diagnosticNode: DiagnosticNodeInternal;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n  }): Promise<Response<T & U & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.post,\n        operationType: OperationType.Create,\n        path,\n        resourceType,\n        resourceId,\n        body,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Create,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      // create will use WriteEndpoint since it uses POST operation\n      this.applySessionToken(request);\n\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation\n      );\n      this.captureSessionToken(undefined, path, OperationType.Create, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  private processQueryFeedResponse(\n    res: Response<any>,\n    isQuery: boolean,\n    resultFn: (result: { [key: string]: any }) => any[]\n  ): Response<any> {\n    if (isQuery) {\n      return {\n        result: resultFn(res.result),\n        headers: res.headers,\n        code: res.code,\n      };\n    } else {\n      const newResult = resultFn(res.result).map((body: any) => body);\n      return {\n        result: newResult,\n        headers: res.headers,\n        code: res.code,\n      };\n    }\n  }\n\n  private applySessionToken(requestContext: RequestContext): void {\n    const request = this.getSessionParams(requestContext.path);\n\n    if (requestContext.headers && requestContext.headers[HttpHeaders.SessionToken]) {\n      return;\n    }\n\n    const sessionConsistency: ConsistencyLevel = requestContext.headers[\n      HttpHeaders.ConsistencyLevel\n    ] as ConsistencyLevel;\n    if (!sessionConsistency) {\n      return;\n    }\n\n    if (sessionConsistency !== ConsistencyLevel.Session) {\n      return;\n    }\n\n    if (request.resourceAddress) {\n      const sessionToken = this.sessionContainer.get(request);\n      if (sessionToken) {\n        requestContext.headers[HttpHeaders.SessionToken] = sessionToken;\n      }\n    }\n  }\n\n  public async replace<T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    body: any;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.put,\n        operationType: OperationType.Replace,\n        path,\n        resourceType,\n        body,\n        resourceId,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Replace,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      this.applySessionToken(request);\n\n      // replace will use WriteEndpoint since it uses PUT operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation\n      );\n      this.captureSessionToken(undefined, path, OperationType.Replace, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async upsert<T, U = T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    body: T;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & U & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.post,\n        operationType: OperationType.Upsert,\n        path,\n        resourceType,\n        body,\n        resourceId,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Upsert,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      request.headers[HttpHeaders.IsUpsert] = true;\n      this.applySessionToken(request);\n\n      // upsert will use WriteEndpoint since it uses POST operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation\n      );\n      this.captureSessionToken(undefined, path, OperationType.Upsert, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async execute<T>({\n    sprocLink,\n    params,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    sprocLink: string;\n    params?: any[];\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T>> {\n    // Accept a single parameter or an array of parameters.\n    // Didn't add type annotation for this because we should legacy this behavior\n    if (params !== null && params !== undefined && !Array.isArray(params)) {\n      params = [params];\n    }\n    const path = getPathFromLink(sprocLink);\n    const id = getIdFromLink(sprocLink);\n\n    const request: RequestContext = {\n      ...this.getContextDerivedPropsForRequestCreation(),\n      method: HTTPMethod.post,\n      operationType: OperationType.Execute,\n      path,\n      resourceType: ResourceType.sproc,\n      options,\n      resourceId: id,\n      body: params,\n      partitionKey,\n    };\n    diagnosticNode.addData({\n      operationType: OperationType.Execute,\n      resourceType: ResourceType.sproc,\n    });\n    request.headers = await this.buildHeaders(request);\n    // executeStoredProcedure will use WriteEndpoint since it uses POST operation\n    request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n      diagnosticNode,\n      request.resourceType,\n      request.operationType\n    );\n    const response = await executePlugins(\n      diagnosticNode,\n      request,\n      RequestHandler.request,\n      PluginOn.operation\n    );\n    return response;\n  }\n\n  /**\n   * Gets the Database account information.\n   * @param options - `urlConnection` in the options is the endpoint url whose database account needs to be retrieved.\n   * If not present, current client's url will be used.\n   */\n  public async getDatabaseAccount(\n    diagnosticNode: DiagnosticNodeInternal,\n    options: RequestOptions = {}\n  ): Promise<Response<DatabaseAccount>> {\n    const endpoint = options.urlConnection || this.cosmosClientOptions.endpoint;\n    const request: RequestContext = {\n      ...this.getContextDerivedPropsForRequestCreation(),\n      endpoint,\n      method: HTTPMethod.get,\n      operationType: OperationType.Read,\n      path: \"\",\n      resourceType: ResourceType.none,\n      options,\n    };\n    diagnosticNode.addData({\n      operationType: OperationType.Read,\n      resourceType: ResourceType.none,\n    });\n    request.headers = await this.buildHeaders(request);\n    // await options.beforeOperation({ endpoint, request, headers: requestHeaders });\n    const { result, headers, code, substatus, diagnostics } = await executePlugins(\n      diagnosticNode,\n      request,\n      RequestHandler.request,\n      PluginOn.operation\n    );\n\n    const databaseAccount = new DatabaseAccount(result, headers);\n    return {\n      result: databaseAccount,\n      headers,\n      diagnostics,\n      code: code,\n      substatus: substatus,\n    };\n  }\n\n  public getWriteEndpoint(diagnosticNode: DiagnosticNodeInternal): Promise<string> {\n    return this.globalEndpointManager.getWriteEndpoint(diagnosticNode);\n  }\n\n  public getReadEndpoint(diagnosticNode: DiagnosticNodeInternal): Promise<string> {\n    return this.globalEndpointManager.getReadEndpoint(diagnosticNode);\n  }\n\n  public getWriteEndpoints(): Promise<readonly string[]> {\n    return this.globalEndpointManager.getWriteEndpoints();\n  }\n\n  public getReadEndpoints(): Promise<readonly string[]> {\n    return this.globalEndpointManager.getReadEndpoints();\n  }\n\n  public async batch<T>({\n    body,\n    path,\n    partitionKey,\n    resourceId,\n    options = {},\n    diagnosticNode,\n  }: {\n    body: T;\n    path: string;\n    partitionKey: PartitionKey;\n    resourceId: string;\n    options?: RequestOptions;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<any>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.post,\n        operationType: OperationType.Batch,\n        path,\n        body,\n        resourceType: ResourceType.item,\n        resourceId,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Batch,\n        resourceType: ResourceType.item,\n      });\n      request.headers = await this.buildHeaders(request);\n      request.headers[HttpHeaders.IsBatchRequest] = true;\n      request.headers[HttpHeaders.IsBatchAtomic] = true;\n\n      this.applySessionToken(request);\n\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation\n      );\n      this.captureSessionToken(undefined, path, OperationType.Batch, response.headers);\n      response.diagnostics = diagnosticNode.toDiagnostic(this.getClientConfig());\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async bulk<T>({\n    body,\n    path,\n    partitionKeyRangeId,\n    resourceId,\n    bulkOptions = {},\n    options = {},\n    diagnosticNode,\n  }: {\n    body: T;\n    path: string;\n    partitionKeyRangeId: string;\n    resourceId: string;\n    bulkOptions?: BulkOptions;\n    options?: RequestOptions;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<any>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.post,\n        operationType: OperationType.Batch,\n        path,\n        body,\n        resourceType: ResourceType.item,\n        resourceId,\n        options,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Batch,\n        resourceType: ResourceType.item,\n      });\n      request.headers = await this.buildHeaders(request);\n      request.headers[HttpHeaders.IsBatchRequest] = true;\n      request.headers[HttpHeaders.PartitionKeyRangeID] = partitionKeyRangeId;\n      request.headers[HttpHeaders.IsBatchAtomic] = false;\n      request.headers[HttpHeaders.BatchContinueOnError] = bulkOptions.continueOnError || false;\n\n      this.applySessionToken(request);\n\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation\n      );\n      this.captureSessionToken(undefined, path, OperationType.Batch, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  private captureSessionToken(\n    err: ErrorResponse,\n    path: string,\n    operationType: OperationType,\n    resHeaders: CosmosHeaders\n  ): void {\n    const request = this.getSessionParams(path);\n    request.operationType = operationType;\n    if (\n      !err ||\n      (!this.isMasterResource(request.resourceType) &&\n        (err.code === StatusCodes.PreconditionFailed ||\n          err.code === StatusCodes.Conflict ||\n          (err.code === StatusCodes.NotFound &&\n            err.substatus !== SubStatusCodes.ReadSessionNotAvailable)))\n    ) {\n      this.sessionContainer.set(request, resHeaders);\n    }\n  }\n\n  public clearSessionToken(path: string): void {\n    const request = this.getSessionParams(path);\n    this.sessionContainer.remove(request);\n  }\n\n  public recordDiagnostics(diagnostic: CosmosDiagnostics): void {\n    const formatted = this.diagnosticFormatter.format(diagnostic);\n    this.diagnosticWriter.write(formatted);\n  }\n\n  public initializeDiagnosticSettings(diagnosticLevel: CosmosDbDiagnosticLevel): void {\n    this.diagnosticFormatter = new DefaultDiagnosticFormatter();\n    switch (diagnosticLevel) {\n      case CosmosDbDiagnosticLevel.info:\n        this.diagnosticWriter = new NoOpDiagnosticWriter();\n        break;\n      default:\n        this.diagnosticWriter = new LogDiagnosticWriter();\n    }\n  }\n\n  // TODO: move\n  private getSessionParams(resourceLink: string): SessionContext {\n    const resourceId: string = null;\n    let resourceAddress: string = null;\n    const parserOutput = parseLink(resourceLink);\n\n    resourceAddress = parserOutput.objectBody.self;\n\n    const resourceType = parserOutput.type;\n    return {\n      resourceId,\n      resourceAddress,\n      resourceType,\n      isNameBased: true,\n    };\n  }\n\n  private isMasterResource(resourceType: string): boolean {\n    if (\n      resourceType === Constants.Path.OffersPathSegment ||\n      resourceType === Constants.Path.DatabasesPathSegment ||\n      resourceType === Constants.Path.UsersPathSegment ||\n      resourceType === Constants.Path.PermissionsPathSegment ||\n      resourceType === Constants.Path.TopologyPathSegment ||\n      resourceType === Constants.Path.DatabaseAccountPathSegment ||\n      resourceType === Constants.Path.PartitionKeyRangesPathSegment ||\n      resourceType === Constants.Path.CollectionsPathSegment\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private buildHeaders(requestContext: RequestContext): Promise<CosmosHeaders> {\n    return getHeaders({\n      clientOptions: this.cosmosClientOptions,\n      defaultHeaders: {\n        ...this.cosmosClientOptions.defaultHeaders,\n        ...requestContext.options.initialHeaders,\n      },\n      verb: requestContext.method,\n      path: requestContext.path,\n      resourceId: requestContext.resourceId,\n      resourceType: requestContext.resourceType,\n      options: requestContext.options,\n      partitionKeyRangeId: requestContext.partitionKeyRangeId,\n      useMultipleWriteLocations: this.connectionPolicy.useMultipleWriteLocations,\n      partitionKey:\n        requestContext.partitionKey !== undefined\n          ? convertToInternalPartitionKey(requestContext.partitionKey)\n          : undefined, // TODO: Move this check from here to PartitionKey\n    });\n  }\n\n  /**\n   * Returns collection of properties which are derived from the context for Request Creation.\n   * These properties have client wide scope, as opposed to request specific scope.\n   * @returns\n   */\n  private getContextDerivedPropsForRequestCreation(): {\n    globalEndpointManager: GlobalEndpointManager;\n    connectionPolicy: ConnectionPolicy;\n    requestAgent: Agent;\n    client?: ClientContext;\n    pipeline?: Pipeline;\n    plugins: PluginConfig[];\n  } {\n    return {\n      globalEndpointManager: this.globalEndpointManager,\n      requestAgent: this.cosmosClientOptions.agent,\n      connectionPolicy: this.connectionPolicy,\n      client: this,\n      plugins: this.cosmosClientOptions.plugins,\n      pipeline: this.pipeline,\n    };\n  }\n\n  public getClientConfig(): ClientConfigDiagnostic {\n    return this.clientConfig;\n  }\n}\n", "export function getUserAgent() {\n    if (typeof navigator === \"object\" && \"userAgent\" in navigator) {\n        return navigator.userAgent;\n    }\n    if (typeof process === \"object\" && process.version !== undefined) {\n        return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;\n    }\n    return \"<environment undetectable>\";\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getUserAgent as userAgent } from \"universal-user-agent\";\nimport { Constants } from \"./constants\";\n\n/**\n * @hidden\n */\nexport function getUserAgent(suffix?: string): string {\n  const ua = `${userAgent()} ${Constants.SDKName}/${Constants.SDKVersion}`;\n  if (suffix) {\n    return ua + \" \" + suffix;\n  }\n  return ua;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport function isNonEmptyString(variable: unknown): boolean {\n  return typeof variable === \"string\" && variable.trim().length > 0;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Constants } from \"../common\";\nimport { isNonEmptyString } from \"../utils/strings\";\nimport { CosmosDbDiagnosticLevel } from \"./CosmosDbDiagnosticLevel\";\n\nexport * from \"./DiagnosticWriter\";\nexport * from \"./DiagnosticFormatter\";\n\nexport const DefaultDiagnosticLevelValue = CosmosDbDiagnosticLevel.info;\n\nconst diagnosticLevelFromEnv =\n  (typeof process !== \"undefined\" &&\n    process.env &&\n    process.env[Constants.CosmosDbDiagnosticLevelEnvVarName]) ||\n  undefined;\n\nconst acceptableDiagnosticLevelValues = Object.values(CosmosDbDiagnosticLevel).map((x) =>\n  x.toString()\n);\n\nlet cosmosDiagnosticLevel: CosmosDbDiagnosticLevel | undefined;\n\nif (isNonEmptyString(diagnosticLevelFromEnv)) {\n  // avoid calling setDiagnosticLevel because we don't want a mis-set environment variable to crash\n  if (isCosmosDiagnosticLevel(diagnosticLevelFromEnv)) {\n    setDiagnosticLevel(diagnosticLevelFromEnv as CosmosDbDiagnosticLevel);\n  } else {\n    console.error(\n      `${\n        Constants.CosmosDbDiagnosticLevelEnvVarName\n      } set to unknown diagnostic level '${diagnosticLevelFromEnv}'; Setting Cosmos Db diagnostic level to info. Acceptable values: ${acceptableDiagnosticLevelValues.join(\n        \", \"\n      )}.`\n    );\n  }\n}\n\nexport function setDiagnosticLevel(level?: CosmosDbDiagnosticLevel): void {\n  if (level && !isCosmosDiagnosticLevel(level)) {\n    throw new Error(\n      `Unknown diagnostic level '${level}'. Acceptable values: ${acceptableDiagnosticLevelValues.join(\n        \",\"\n      )}`\n    );\n  }\n  cosmosDiagnosticLevel = level;\n}\n\nexport function getDiagnosticLevelFromEnvironment(): CosmosDbDiagnosticLevel | undefined {\n  return cosmosDiagnosticLevel;\n}\n\nfunction isCosmosDiagnosticLevel(\n  diagnosticLevel: string\n): diagnosticLevel is CosmosDbDiagnosticLevel {\n  return acceptableDiagnosticLevelValues.includes(diagnosticLevel);\n}\n\nexport function determineDiagnosticLevel(\n  diagnosticLevelFromClientConfig: CosmosDbDiagnosticLevel,\n  diagnosticLevelFromEnvironment: CosmosDbDiagnosticLevel\n): CosmosDbDiagnosticLevel {\n  const diagnosticLevelFromEnvOrClient =\n    diagnosticLevelFromEnvironment ?? diagnosticLevelFromClientConfig; // Diagnostic Setting from environment gets first priority.\n  return diagnosticLevelFromEnvOrClient ?? DefaultDiagnosticLevelValue; // Diagnostic Setting supplied in Client config gets second priority.\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { OperationType, ResourceType, isReadRequest } from \"./common\";\nimport { CosmosClientOptions } from \"./CosmosClientOptions\";\nimport { Location, DatabaseAccount } from \"./documents\";\nimport { RequestOptions } from \"./index\";\nimport { Constants } from \"./common/constants\";\nimport { ResourceResponse } from \"./request\";\nimport { MetadataLookUpType } from \"./CosmosDiagnostics\";\nimport { DiagnosticNodeInternal } from \"./diagnostics/DiagnosticNodeInternal\";\nimport { withMetadataDiagnostics } from \"./utils/diagnostics\";\n\n/**\n * @hidden\n * This internal class implements the logic for endpoint management for geo-replicated database accounts.\n */\nexport class GlobalEndpointManager {\n  /**\n   * The endpoint used to create the client instance.\n   */\n  private defaultEndpoint: string;\n  /**\n   * Flag to enable/disable automatic redirecting of requests based on read/write operations.\n   */\n  public enableEndpointDiscovery: boolean;\n  private isRefreshing: boolean;\n  private options: CosmosClientOptions;\n  /**\n   * List of azure regions to be used as preferred locations for read requests.\n   */\n  private preferredLocations: string[];\n  private writeableLocations: Location[] = [];\n  private readableLocations: Location[] = [];\n  private unavailableReadableLocations: Location[] = [];\n  private unavailableWriteableLocations: Location[] = [];\n\n  public preferredLocationsCount: number;\n  /**\n   * @param options - The document client instance.\n   * @internal\n   */\n  constructor(\n    options: CosmosClientOptions,\n    private readDatabaseAccount: (\n      diagnosticNode: DiagnosticNodeInternal,\n      opts: RequestOptions\n    ) => Promise<ResourceResponse<DatabaseAccount>>\n  ) {\n    this.options = options;\n    this.defaultEndpoint = options.endpoint;\n    this.enableEndpointDiscovery = options.connectionPolicy.enableEndpointDiscovery;\n    this.isRefreshing = false;\n    this.preferredLocations = this.options.connectionPolicy.preferredLocations;\n    this.preferredLocationsCount = this.preferredLocations ? this.preferredLocations.length : 0;\n  }\n\n  /**\n   * Gets the current read endpoint from the endpoint cache.\n   */\n  public async getReadEndpoint(diagnosticNode: DiagnosticNodeInternal): Promise<string> {\n    return this.resolveServiceEndpoint(diagnosticNode, ResourceType.item, OperationType.Read);\n  }\n\n  /**\n   * Gets the current write endpoint from the endpoint cache.\n   */\n  public async getWriteEndpoint(diagnosticNode: DiagnosticNodeInternal): Promise<string> {\n    return this.resolveServiceEndpoint(diagnosticNode, ResourceType.item, OperationType.Replace);\n  }\n\n  public async getReadEndpoints(): Promise<ReadonlyArray<string>> {\n    return this.readableLocations.map((loc) => loc.databaseAccountEndpoint);\n  }\n\n  public async getWriteEndpoints(): Promise<ReadonlyArray<string>> {\n    return this.writeableLocations.map((loc) => loc.databaseAccountEndpoint);\n  }\n\n  public async markCurrentLocationUnavailableForRead(\n    diagnosticNode: DiagnosticNodeInternal,\n    endpoint: string\n  ): Promise<void> {\n    await this.refreshEndpointList(diagnosticNode);\n    const location = this.readableLocations.find((loc) => loc.databaseAccountEndpoint === endpoint);\n    if (location) {\n      location.unavailable = true;\n      location.lastUnavailabilityTimestampInMs = Date.now();\n      this.unavailableReadableLocations.push(location);\n    }\n  }\n\n  public async markCurrentLocationUnavailableForWrite(\n    diagnosticNode: DiagnosticNodeInternal,\n    endpoint: string\n  ): Promise<void> {\n    await this.refreshEndpointList(diagnosticNode);\n    const location = this.writeableLocations.find(\n      (loc) => loc.databaseAccountEndpoint === endpoint\n    );\n    if (location) {\n      location.unavailable = true;\n      location.lastUnavailabilityTimestampInMs = Date.now();\n      this.unavailableWriteableLocations.push(location);\n    }\n  }\n\n  public canUseMultipleWriteLocations(\n    resourceType?: ResourceType,\n    operationType?: OperationType\n  ): boolean {\n    let canUse = this.options.connectionPolicy.useMultipleWriteLocations;\n\n    if (resourceType) {\n      canUse =\n        canUse &&\n        (resourceType === ResourceType.item ||\n          (resourceType === ResourceType.sproc && operationType === OperationType.Execute));\n    }\n\n    return canUse;\n  }\n\n  public async resolveServiceEndpoint(\n    diagnosticNode: DiagnosticNodeInternal,\n    resourceType: ResourceType,\n    operationType: OperationType,\n    startServiceEndpointIndex: number = 0 // Represents the starting index for selecting servers.\n  ): Promise<string> {\n    // If endpoint discovery is disabled, always use the user provided endpoint\n\n    if (!this.options.connectionPolicy.enableEndpointDiscovery) {\n      diagnosticNode.addData({ readFromCache: true }, \"default_endpoint\");\n      diagnosticNode.recordEndpointResolution(this.defaultEndpoint);\n      return this.defaultEndpoint;\n    }\n\n    // If getting the database account, always use the user provided endpoint\n    if (resourceType === ResourceType.none) {\n      diagnosticNode.addData({ readFromCache: true }, \"none_resource\");\n      diagnosticNode.recordEndpointResolution(this.defaultEndpoint);\n      return this.defaultEndpoint;\n    }\n\n    if (this.readableLocations.length === 0 || this.writeableLocations.length === 0) {\n      const resourceResponse = await withMetadataDiagnostics(\n        async (metadataNode: DiagnosticNodeInternal) => {\n          return this.readDatabaseAccount(metadataNode, {\n            urlConnection: this.defaultEndpoint,\n          });\n        },\n        diagnosticNode,\n        MetadataLookUpType.DatabaseAccountLookUp\n      );\n\n      this.writeableLocations = resourceResponse.resource.writableLocations;\n      this.readableLocations = resourceResponse.resource.readableLocations;\n    }\n\n    const locations = isReadRequest(operationType)\n      ? this.readableLocations\n      : this.writeableLocations;\n\n    let location;\n    // If we have preferred locations, try each one in order and use the first available one\n    if (\n      this.preferredLocations &&\n      this.preferredLocations.length > 0 &&\n      startServiceEndpointIndex < this.preferredLocations.length\n    ) {\n      for (let i = startServiceEndpointIndex; i < this.preferredLocations.length; i++) {\n        const preferredLocation = this.preferredLocations[i];\n        location = locations.find(\n          (loc) =>\n            loc.unavailable !== true &&\n            normalizeEndpoint(loc.name) === normalizeEndpoint(preferredLocation)\n        );\n        if (location) {\n          break;\n        }\n      }\n    }\n\n    // If no preferred locations or one did not match, just grab the first one that is available\n    if (!location) {\n      const startIndexValid =\n        startServiceEndpointIndex >= 0 && startServiceEndpointIndex < locations.length;\n      const locationsToSearch = startIndexValid\n        ? locations.slice(startServiceEndpointIndex)\n        : locations;\n      location = locationsToSearch.find((loc) => {\n        return loc.unavailable !== true;\n      });\n    }\n\n    location = location ? location : { name: \"\", databaseAccountEndpoint: this.defaultEndpoint };\n    diagnosticNode.recordEndpointResolution(location.databaseAccountEndpoint);\n    return location.databaseAccountEndpoint;\n  }\n\n  /**\n   * Refreshes the endpoint list by clearning stale unavailability and then\n   *  retrieving the writable and readable locations from the geo-replicated database account\n   *  and then updating the locations cache.\n   *  We skip the refreshing if enableEndpointDiscovery is set to False\n   */\n  public async refreshEndpointList(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    if (!this.isRefreshing && this.enableEndpointDiscovery) {\n      this.isRefreshing = true;\n      const databaseAccount = await this.getDatabaseAccountFromAnyEndpoint(diagnosticNode);\n      if (databaseAccount) {\n        this.refreshStaleUnavailableLocations();\n        this.refreshEndpoints(databaseAccount);\n      }\n      this.isRefreshing = false;\n    }\n  }\n\n  private refreshEndpoints(databaseAccount: DatabaseAccount): void {\n    for (const location of databaseAccount.writableLocations) {\n      const existingLocation = this.writeableLocations.find((loc) => loc.name === location.name);\n      if (!existingLocation) {\n        this.writeableLocations.push(location);\n      }\n    }\n    for (const location of databaseAccount.readableLocations) {\n      const existingLocation = this.readableLocations.find((loc) => loc.name === location.name);\n      if (!existingLocation) {\n        this.readableLocations.push(location);\n      }\n    }\n  }\n\n  private refreshStaleUnavailableLocations(): void {\n    const now = Date.now();\n    this.updateLocation(now, this.unavailableReadableLocations, this.readableLocations);\n    this.unavailableReadableLocations = this.cleanUnavailableLocationList(\n      now,\n      this.unavailableReadableLocations\n    );\n\n    this.updateLocation(now, this.unavailableWriteableLocations, this.writeableLocations);\n    this.unavailableWriteableLocations = this.cleanUnavailableLocationList(\n      now,\n      this.unavailableWriteableLocations\n    );\n  }\n\n  /**\n   * update the locationUnavailability to undefined if the location is available again\n   * @param now - current time\n   * @param unavailableLocations - list of unavailable locations\n   * @param allLocations - list of all locations\n   */\n  private updateLocation(\n    now: number,\n    unavailableLocations: Location[],\n    allLocations: Location[]\n  ): void {\n    for (const location of unavailableLocations) {\n      const unavaialableLocation = allLocations.find((loc) => loc.name === location.name);\n      if (\n        unavaialableLocation &&\n        now - unavaialableLocation.lastUnavailabilityTimestampInMs >\n          Constants.LocationUnavailableExpirationTimeInMs\n      ) {\n        unavaialableLocation.unavailable = false;\n      }\n    }\n  }\n\n  private cleanUnavailableLocationList(now: number, unavailableLocations: Location[]): Location[] {\n    return unavailableLocations.filter((loc) => {\n      if (\n        loc &&\n        now - loc.lastUnavailabilityTimestampInMs >= Constants.LocationUnavailableExpirationTimeInMs\n      ) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  /**\n   * Gets the database account first by using the default endpoint, and if that doesn't returns\n   * use the endpoints for the preferred locations in the order they are specified to get\n   * the database account.\n   */\n  private async getDatabaseAccountFromAnyEndpoint(\n    diagnosticNode: DiagnosticNodeInternal\n  ): Promise<DatabaseAccount> {\n    try {\n      const options = { urlConnection: this.defaultEndpoint };\n      const { resource: databaseAccount } = await this.readDatabaseAccount(diagnosticNode, options);\n      return databaseAccount;\n      // If for any reason(non - globaldb related), we are not able to get the database\n      // account from the above call to readDatabaseAccount,\n      // we would try to get this information from any of the preferred locations that the user\n      // might have specified (by creating a locational endpoint)\n      // and keeping eating the exception until we get the database account and return None at the end,\n      // if we are not able to get that info from any endpoints\n    } catch (err: any) {\n      // TODO: Tracing\n    }\n\n    if (this.preferredLocations) {\n      for (const location of this.preferredLocations) {\n        try {\n          const locationalEndpoint = GlobalEndpointManager.getLocationalEndpoint(\n            this.defaultEndpoint,\n            location\n          );\n          const options = { urlConnection: locationalEndpoint };\n          const { resource: databaseAccount } = await this.readDatabaseAccount(\n            diagnosticNode,\n            options\n          );\n          if (databaseAccount) {\n            return databaseAccount;\n          }\n        } catch (err: any) {\n          // TODO: Tracing\n        }\n      }\n    }\n  }\n\n  /**\n   * Gets the locational endpoint using the location name passed to it using the default endpoint.\n   *\n   * @param defaultEndpoint - The default endpoint to use for the endpoint.\n   * @param locationName    - The location name for the azure region like \"East US\".\n   */\n  private static getLocationalEndpoint(defaultEndpoint: string, locationName: string): string {\n    // For defaultEndpoint like 'https://contoso.documents.azure.com:443/' parse it to generate URL format\n    // This defaultEndpoint should be global endpoint(and cannot be a locational endpoint)\n    // and we agreed to document that\n    const endpointUrl = new URL(defaultEndpoint);\n\n    // hostname attribute in endpointUrl will return 'contoso.documents.azure.com'\n    if (endpointUrl.hostname) {\n      const hostnameParts = endpointUrl.hostname.toString().toLowerCase().split(\".\");\n      if (hostnameParts) {\n        // globalDatabaseAccountName will return 'contoso'\n        const globalDatabaseAccountName = hostnameParts[0];\n\n        // Prepare the locationalDatabaseAccountName as contoso-EastUS for location_name 'East US'\n        const locationalDatabaseAccountName =\n          globalDatabaseAccountName + \"-\" + locationName.replace(\" \", \"\");\n\n        // Replace 'contoso' with 'contoso-EastUS' and\n        // return locationalEndpoint as https://contoso-EastUS.documents.azure.com:443/\n        const locationalEndpoint = defaultEndpoint\n          .toLowerCase()\n          .replace(globalDatabaseAccountName, locationalDatabaseAccountName);\n        return locationalEndpoint;\n      }\n    }\n\n    return null;\n  }\n}\n\nfunction normalizeEndpoint(endpoint: string): string {\n  return endpoint.split(\" \").join(\"\").toLowerCase();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Database, Databases } from \"./client/Database\";\nimport { Offer, Offers } from \"./client/Offer\";\nimport { ClientContext } from \"./ClientContext\";\nimport { parseConnectionString } from \"./common\";\nimport { Constants } from \"./common/constants\";\nimport { getUserAgent } from \"./common/platform\";\nimport { CosmosClientOptions } from \"./CosmosClientOptions\";\nimport { ClientConfigDiagnostic } from \"./CosmosDiagnostics\";\nimport { determineDiagnosticLevel, getDiagnosticLevelFromEnvironment } from \"./diagnostics\";\nimport { DiagnosticNodeInternal, DiagnosticNodeType } from \"./diagnostics/DiagnosticNodeInternal\";\nimport { DatabaseAccount, defaultConnectionPolicy } from \"./documents\";\nimport { GlobalEndpointManager } from \"./globalEndpointManager\";\nimport { RequestOptions, ResourceResponse } from \"./request\";\nimport { checkURL } from \"./utils/checkURL\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"./utils/diagnostics\";\n\n/**\n * Provides a client-side logical representation of the Azure Cosmos DB database account.\n * This client is used to configure and execute requests in the Azure Cosmos DB database service.\n * @example Instantiate a client and create a new database\n * ```typescript\n * const client = new CosmosClient({endpoint: \"<URL HERE>\", auth: {masterKey: \"<KEY HERE>\"}});\n * await client.databases.create({id: \"<datbase name here>\"});\n * ```\n * @example Instantiate a client with custom Connection Policy\n * ```typescript\n * const connectionPolicy = new ConnectionPolicy();\n * connectionPolicy.RequestTimeout = 10000;\n * const client = new CosmosClient({\n *    endpoint: \"<URL HERE>\",\n *    auth: {masterKey: \"<KEY HERE>\"},\n *    connectionPolicy\n * });\n * ```\n */\nexport class CosmosClient {\n  /**\n   * Used for creating new databases, or querying/reading all databases.\n   *\n   * Use `.database(id)` to read, replace, or delete a specific, existing database by id.\n   *\n   * @example Create a new database\n   * ```typescript\n   * const {resource: databaseDefinition, database} = await client.databases.create({id: \"<name here>\"});\n   * ```\n   */\n  public readonly databases: Databases;\n  /**\n   * Used for querying & reading all offers.\n   *\n   * Use `.offer(id)` to read, or replace existing offers.\n   */\n  public readonly offers: Offers;\n  private clientContext: ClientContext;\n  private endpointRefresher: NodeJS.Timer;\n  /**\n   * Creates a new {@link CosmosClient} object from a connection string. Your database connection string can be found in the Azure Portal\n   */\n  constructor(connectionString: string);\n  /**\n   * Creates a new {@link CosmosClient} object. See {@link CosmosClientOptions} for more details on what options you can use.\n   * @param options - bag of options; require at least endpoint and auth to be configured\n   */\n  constructor(options: CosmosClientOptions);\n  constructor(optionsOrConnectionString: string | CosmosClientOptions) {\n    if (typeof optionsOrConnectionString === \"string\") {\n      optionsOrConnectionString = parseConnectionString(optionsOrConnectionString);\n    }\n\n    const endpoint = checkURL(optionsOrConnectionString.endpoint);\n    if (!endpoint) {\n      throw new Error(\"Invalid endpoint specified\");\n    }\n\n    const clientConfig: ClientConfigDiagnostic =\n      this.initializeClientConfigDiagnostic(optionsOrConnectionString);\n\n    optionsOrConnectionString.connectionPolicy = Object.assign(\n      {},\n      defaultConnectionPolicy,\n      optionsOrConnectionString.connectionPolicy\n    );\n\n    optionsOrConnectionString.defaultHeaders = optionsOrConnectionString.defaultHeaders || {};\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.CacheControl] = \"no-cache\";\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.Version] =\n      Constants.CurrentVersion;\n    if (optionsOrConnectionString.consistencyLevel !== undefined) {\n      optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.ConsistencyLevel] =\n        optionsOrConnectionString.consistencyLevel;\n    }\n\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.UserAgent] = getUserAgent(\n      optionsOrConnectionString.userAgentSuffix\n    );\n\n    const globalEndpointManager = new GlobalEndpointManager(\n      optionsOrConnectionString,\n      async (diagnosticNode: DiagnosticNodeInternal, opts: RequestOptions) =>\n        this.getDatabaseAccountInternal(diagnosticNode, opts)\n    );\n\n    this.clientContext = new ClientContext(\n      optionsOrConnectionString,\n      globalEndpointManager,\n      clientConfig,\n      determineDiagnosticLevel(\n        optionsOrConnectionString.diagnosticLevel,\n        getDiagnosticLevelFromEnvironment()\n      )\n    );\n    if (\n      optionsOrConnectionString.connectionPolicy?.enableEndpointDiscovery &&\n      optionsOrConnectionString.connectionPolicy?.enableBackgroundEndpointRefreshing\n    ) {\n      this.backgroundRefreshEndpointList(\n        globalEndpointManager,\n        optionsOrConnectionString.connectionPolicy.endpointRefreshRateInMs ||\n          defaultConnectionPolicy.endpointRefreshRateInMs\n      );\n    }\n\n    this.databases = new Databases(this, this.clientContext);\n    this.offers = new Offers(this, this.clientContext);\n  }\n\n  private initializeClientConfigDiagnostic(\n    optionsOrConnectionString: CosmosClientOptions\n  ): ClientConfigDiagnostic {\n    return {\n      endpoint: optionsOrConnectionString.endpoint,\n      resourceTokensConfigured: optionsOrConnectionString.resourceTokens !== undefined,\n      tokenProviderConfigured: optionsOrConnectionString.tokenProvider !== undefined,\n      aadCredentialsConfigured: optionsOrConnectionString.aadCredentials !== undefined,\n      connectionPolicyConfigured: optionsOrConnectionString.connectionPolicy !== undefined,\n      consistencyLevel: optionsOrConnectionString.consistencyLevel,\n      defaultHeaders: optionsOrConnectionString.defaultHeaders,\n      agentConfigured: optionsOrConnectionString.agent !== undefined,\n      userAgentSuffix: optionsOrConnectionString.userAgentSuffix,\n      diagnosticLevel: optionsOrConnectionString.diagnosticLevel,\n      pluginsConfigured: optionsOrConnectionString.plugins !== undefined,\n      sDKVersion: Constants.SDKVersion,\n    };\n  }\n\n  /**\n   * Get information about the current {@link DatabaseAccount} (including which regions are supported, etc.)\n   */\n  public async getDatabaseAccount(\n    options?: RequestOptions\n  ): Promise<ResourceResponse<DatabaseAccount>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.getDatabaseAccountInternal(diagnosticNode, options);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async getDatabaseAccountInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    options?: RequestOptions\n  ): Promise<ResourceResponse<DatabaseAccount>> {\n    const response = await this.clientContext.getDatabaseAccount(diagnosticNode, options);\n    return new ResourceResponse<DatabaseAccount>(\n      response.result,\n      response.headers,\n      response.code,\n      getEmptyCosmosDiagnostics(),\n      response.substatus\n    );\n  }\n\n  /**\n   * Gets the currently used write endpoint url. Useful for troubleshooting purposes.\n   *\n   * The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n  public async getWriteEndpoint(): Promise<string> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.clientContext.getWriteEndpoint(diagnosticNode);\n    }, this.clientContext);\n  }\n\n  /**\n   * Gets the currently used read endpoint. Useful for troubleshooting purposes.\n   *\n   * The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n  public async getReadEndpoint(): Promise<string> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.clientContext.getReadEndpoint(diagnosticNode);\n    }, this.clientContext);\n  }\n\n  /**\n   * Gets the known write endpoints. Useful for troubleshooting purposes.\n   *\n   * The urls may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n  public getWriteEndpoints(): Promise<readonly string[]> {\n    return this.clientContext.getWriteEndpoints();\n  }\n\n  /**\n   * Gets the currently used read endpoint. Useful for troubleshooting purposes.\n   *\n   * The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n  public getReadEndpoints(): Promise<readonly string[]> {\n    return this.clientContext.getReadEndpoints();\n  }\n\n  /**\n   * Used for reading, updating, or deleting a existing database by id or accessing containers belonging to that database.\n   *\n   * This does not make a network call. Use `.read` to get info about the database after getting the {@link Database} object.\n   *\n   * @param id - The id of the database.\n   * @example Create a new container off of an existing database\n   * ```typescript\n   * const container = client.database(\"<database id>\").containers.create(\"<container id>\");\n   * ```\n   *\n   * @example Delete an existing database\n   * ```typescript\n   * await client.database(\"<id here>\").delete();\n   * ```\n   */\n  public database(id: string): Database {\n    return new Database(this, id, this.clientContext);\n  }\n\n  /**\n   * Used for reading, or updating a existing offer by id.\n   * @param id - The id of the offer.\n   */\n  public offer(id: string): Offer {\n    return new Offer(this, id, this.clientContext);\n  }\n\n  /**\n   * Clears background endpoint refresher. Use client.dispose() when destroying the CosmosClient within another process.\n   */\n  public dispose(): void {\n    clearTimeout(this.endpointRefresher);\n  }\n\n  private async backgroundRefreshEndpointList(\n    globalEndpointManager: GlobalEndpointManager,\n    refreshRate: number\n  ) {\n    this.endpointRefresher = setInterval(() => {\n      try {\n        return withDiagnostics(\n          async (diagnosticNode: DiagnosticNodeInternal) => {\n            return globalEndpointManager.refreshEndpointList(diagnosticNode);\n          },\n          this.clientContext,\n          DiagnosticNodeType.BACKGROUND_REFRESH_THREAD\n        );\n      } catch (e: any) {\n        console.warn(\"Failed to refresh endpoints\", e);\n      }\n    }, refreshRate);\n    if (this.endpointRefresher.unref && typeof this.endpointRefresher.unref === \"function\") {\n      this.endpointRefresher.unref();\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CosmosContainerChildResourceKind } from \"../../common/constants\";\nimport { CosmosKeyType } from \"../../common/constants\";\n\nexport class SasTokenProperties {\n  user: string;\n  userTag: string;\n  databaseName: string;\n  containerName: string;\n  resourceName: string;\n  resourcePath: string;\n  resourceKind: CosmosContainerChildResourceKind;\n  partitionKeyValueRanges: string[];\n  startTime: Date;\n  expiryTime: Date;\n  keyType: CosmosKeyType | number;\n  controlPlaneReaderScope: number;\n  controlPlaneWriterScope: number;\n  dataPlaneReaderScope: number;\n  dataPlaneWriterScope: number;\n  cosmosContainerChildResourceKind: CosmosContainerChildResourceKind;\n  cosmosKeyType: CosmosKeyType;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SasTokenProperties } from \"../client/SasToken/SasTokenProperties\";\nimport { Constants, CosmosKeyType, SasTokenPermissionKind } from \"../common\";\nimport { encodeUTF8 } from \"./encode\";\nimport { hmac } from \"./hmac\";\n\n/**\n * Experimental internal only\n * Generates the payload representing the permission configuration for the sas token.\n */\n\nexport async function createAuthorizationSasToken(\n  masterKey: string,\n  sasTokenProperties: SasTokenProperties\n): Promise<string> {\n  let resourcePrefixPath = \"\";\n  if (\n    typeof sasTokenProperties.databaseName === \"string\" &&\n    sasTokenProperties.databaseName !== \"\"\n  ) {\n    resourcePrefixPath += `/${Constants.Path.DatabasesPathSegment}/${sasTokenProperties.databaseName}`;\n  }\n\n  if (\n    typeof sasTokenProperties.containerName === \"string\" &&\n    sasTokenProperties.containerName !== \"\"\n  ) {\n    if (sasTokenProperties.databaseName === \"\") {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.databaseName} \\\n                          is an invalid database name`);\n    }\n    resourcePrefixPath += `/${Constants.Path.CollectionsPathSegment}/${sasTokenProperties.containerName}`;\n  }\n\n  if (\n    typeof sasTokenProperties.resourceName === \"string\" &&\n    sasTokenProperties.resourceName !== \"\"\n  ) {\n    if (sasTokenProperties.containerName === \"\") {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.containerName} \\\n                          is an invalid container name`);\n    }\n    switch (sasTokenProperties.resourceKind) {\n      case \"ITEM\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.DocumentsPathSegment}`;\n        break;\n      case \"STORED_PROCEDURE\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.StoredProceduresPathSegment}`;\n        break;\n      case \"USER_DEFINED_FUNCTION\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.UserDefinedFunctionsPathSegment}`;\n        break;\n      case \"TRIGGER\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.TriggersPathSegment}`;\n        break;\n      default:\n        throw new Error(`illegalArgumentException : ${sasTokenProperties.resourceKind} \\\n                          is an invalid resource kind`);\n        break;\n    }\n    resourcePrefixPath += `${Constants.Path.Root}${sasTokenProperties.resourceName}${Constants.Path.Root}`;\n  }\n  sasTokenProperties.resourcePath = resourcePrefixPath.toString();\n\n  let partitionRanges = \"\";\n\n  if (\n    sasTokenProperties.partitionKeyValueRanges !== undefined &&\n    sasTokenProperties.partitionKeyValueRanges.length > 0\n  ) {\n    if (\n      typeof sasTokenProperties.resourceKind !== \"string\" &&\n      sasTokenProperties.resourceKind !== \"ITEM\"\n    ) {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.resourceKind} \\\n                          is an invalid partition key value range`);\n    }\n    sasTokenProperties.partitionKeyValueRanges.forEach((range) => {\n      partitionRanges += `${encodeUTF8(range)},`;\n    });\n  }\n\n  if (sasTokenProperties.controlPlaneReaderScope === 0) {\n    sasTokenProperties.controlPlaneReaderScope += SasTokenPermissionKind.ContainerReadAny;\n    sasTokenProperties.controlPlaneWriterScope += SasTokenPermissionKind.ContainerReadAny;\n  }\n\n  if (\n    sasTokenProperties.dataPlaneReaderScope === 0 &&\n    sasTokenProperties.dataPlaneWriterScope === 0\n  ) {\n    sasTokenProperties.dataPlaneReaderScope = SasTokenPermissionKind.ContainerFullAccess;\n    sasTokenProperties.dataPlaneWriterScope = SasTokenPermissionKind.ContainerFullAccess;\n  }\n\n  if (\n    typeof sasTokenProperties.keyType !== \"number\" ||\n    typeof sasTokenProperties.keyType === undefined\n  ) {\n    switch (sasTokenProperties.keyType) {\n      case CosmosKeyType.PrimaryMaster:\n        sasTokenProperties.keyType = 1;\n        break;\n      case CosmosKeyType.SecondaryMaster:\n        sasTokenProperties.keyType = 2;\n        break;\n      case CosmosKeyType.PrimaryReadOnly:\n        sasTokenProperties.keyType = 3;\n        break;\n      case CosmosKeyType.SecondaryReadOnly:\n        sasTokenProperties.keyType = 4;\n        break;\n      default:\n        throw new Error(`illegalArgumentException : ${sasTokenProperties.keyType} \\\n                          is an invalid key type`);\n        break;\n    }\n  }\n\n  const payload =\n    sasTokenProperties.user +\n    \"\\n\" +\n    sasTokenProperties.userTag +\n    \"\\n\" +\n    sasTokenProperties.resourcePath +\n    \"\\n\" +\n    partitionRanges +\n    \"\\n\" +\n    utcsecondsSinceEpoch(sasTokenProperties.startTime).toString(16) +\n    \"\\n\" +\n    utcsecondsSinceEpoch(sasTokenProperties.expiryTime).toString(16) +\n    \"\\n\" +\n    sasTokenProperties.keyType +\n    \"\\n\" +\n    sasTokenProperties.controlPlaneReaderScope.toString(16) +\n    \"\\n\" +\n    sasTokenProperties.controlPlaneWriterScope.toString(16) +\n    \"\\n\" +\n    sasTokenProperties.dataPlaneReaderScope.toString(16) +\n    \"\\n\" +\n    sasTokenProperties.dataPlaneWriterScope.toString(16) +\n    \"\\n\";\n\n  const signedPayload = await hmac(masterKey, Buffer.from(payload).toString(\"base64\"));\n  return \"type=sas&ver=1.0&sig=\" + signedPayload + \";\" + Buffer.from(payload).toString(\"base64\");\n}\n/**\n * @hidden\n */\n// TODO: utcMilllisecondsSinceEpoch\nexport function utcsecondsSinceEpoch(date: Date): number {\n  return Math.round(date.getTime() / 1000);\n}\n"],
  "mappings": ";;;;;;;;;;AAAA;AAAA;AAGA,WAAO,UAAUA;AAajB,aAASA,eAAc,YAAY;AACjC,WAAK,cAAc,cAAcA,eAAc;AAC/C,WAAK,YAAY,CAAC;AAAA,IACpB;AAWA,IAAAA,eAAc,qBAAqB,SAAS,GAAG,GAAG;AAChD,UAAI,OAAO,MAAM,YAAY,OAAO,MAAM,UAAU;AAClD,eAAO,IAAI;AAAA,MACb,OAAO;AACL,YAAI,EAAE,SAAS;AACf,YAAI,EAAE,SAAS;AAEf,YAAI,KAAK;AAAG,iBAAO;AAEnB,eAAQ,IAAI,IAAK,IAAI;AAAA,MACvB;AAAA,IACF;AAQA,IAAAA,eAAc,UAAU,UAAU,WAAW;AAC3C,aAAO,KAAK,KAAK,MAAM;AAAA,IACzB;AASA,IAAAA,eAAc,UAAU,OAAO,WAAW;AACxC,UAAI,KAAK,QAAQ;AAAG,cAAM,IAAI,MAAM,wBAAwB;AAE5D,aAAO,KAAK,UAAU,CAAC;AAAA,IACzB;AASA,IAAAA,eAAc,UAAU,MAAM,WAAW;AACvC,UAAI,QAAQ,KAAK,KAAK;AACtB,UAAI,OAAO,KAAK,UAAU,IAAI;AAC9B,UAAI,OAAO,KAAK,KAAK;AAErB,UAAI,SAAS;AAAG,eAAO;AAEvB,WAAK,UAAU,CAAC,IAAI;AACpB,UAAI,UAAU;AAEd,aAAO,UAAU,MAAM;AACrB,YAAI,UAAU;AACd,YAAI,OAAQ,IAAI,UAAW;AAC3B,YAAI,QAAS,IAAI,UAAW;AAE5B,YAAI,OAAO,QAAQ,KAAK,SAAS,MAAM,OAAO,KAAK,GAAG;AACpD,oBAAU;AAAA,QACZ;AAEA,YAAI,QAAQ,QAAQ,KAAK,SAAS,OAAO,OAAO,KAAK,GAAG;AACtD,oBAAU;AAAA,QACZ;AAEA,YAAI,YAAY;AAAS;AAEzB,aAAK,MAAM,SAAS,OAAO;AAC3B,kBAAU;AAAA,MACZ;AAEA,aAAO;AAAA,IACT;AASA,IAAAA,eAAc,UAAU,MAAM,SAAS,SAAS;AAC9C,UAAI,OAAO,KAAK,UAAU,KAAK,OAAO;AACtC,UAAI,UAAU,OAAO;AAErB,aAAO,UAAU,GAAG;AAClB,YAAI,SAAS,KAAK,OAAO,UAAU,KAAK,CAAC;AAEzC,YAAI,KAAK,SAAS,SAAS,MAAM,KAAK;AAAG;AAEzC,aAAK,MAAM,QAAQ,OAAO;AAC1B,kBAAU;AAAA,MACZ;AAEA,aAAO;AAAA,IACT;AAQA,IAAAA,eAAc,UAAU,OAAO,WAAW;AACxC,aAAO,KAAK,UAAU;AAAA,IACxB;AAOA,IAAAA,eAAc,UAAU,UAAU,SAAS,IAAI;AAC7C,aAAO,KAAK,UAAU,QAAQ,EAAE;AAAA,IAClC;AAWA,IAAAA,eAAc,UAAU,WAAW,SAAS,GAAG,GAAG;AAChD,aAAO,KAAK,YAAY,KAAK,UAAU,CAAC,GAAG,KAAK,UAAU,CAAC,CAAC;AAAA,IAC9D;AASA,IAAAA,eAAc,UAAU,QAAQ,SAAS,GAAG,GAAG;AAC7C,UAAI,MAAM,KAAK,UAAU,CAAC;AAC1B,WAAK,UAAU,CAAC,IAAI,KAAK,UAAU,CAAC;AACpC,WAAK,UAAU,CAAC,IAAI;AAAA,IACtB;AAAA;AAAA;;;AC3KA;AAAA;AAAC,KAAC,SAAS,QAAQ;AAEnB;AAEA,UAAI,WAAW,SAAU,IAAI;AAAE,mBAAW,IAAI,CAAC;AAAA,MAAG;AAClD,UAAI,OAAO,WAAW,eAAe,WAAW,OAAO,QAAQ,YAAY,YAAY;AAEtF,mBAAW,QAAQ;AAAA,MACpB;AAEA,eAASC,WAAU,UAAU;AAC5B,YAAIA,aAAY;AAAA,UACf,UAAU,YAAY;AAAA,UACtB,SAAS;AAAA,UACT,OAAO,CAAC;AAAA,UACR,WAAW;AAAA,UAEX,MAAM,WAAW;AAChB,gBAAIA,WAAU,cAAc,OAAO;AAC3B,cAAAA,WAAU;AACV,cAAAA,WAAU,YAAY;AACtB,kBAAI,UAAU;AAAA,YAChB,OAAO;AACL,kBAAI,UAAU;AAAA,YAChB;AACN,gBAAI,OAAO,EAAE,GAAG,EAAE;AAElB,gBAAI,OAAO,UAAU,CAAC,KAAK,YAAY;AACtC,mBAAK,OAAO,UAAU,CAAC;AAAA,YACxB,OAAO;AACN,mBAAK,IAAI,UAAU,CAAC;AAAA,YACrB;AAEA,gBAAI,UAAU,UAAU,GAAI;AAC3B,kBAAI,OAAO,UAAU,CAAC,KAAK;AAAY,qBAAK,OAAO,UAAU,CAAC;AAAA;AACzD,qBAAK,IAAI,UAAU,CAAC;AAAA,YAC1B;AAEA,gBAAI,OAAO,KAAK;AAChB,iBAAK,OAAO,WAAW;AAAE,mBAAKA,WAAU,KAAK;AAAA,YAAG;AAEhD,gBAAIA,WAAU,UAAU,KAAK,IAAI,UAAUA,WAAU,UAAU;AACvD,kBAAI,YAAY,GAAG;AAClB,gBAAAA,WAAU;AACV,gBAAAA,WAAU,YAAY;AAAA,cACvB;AACP,qBAAOA,WAAU,MAAM,KAAK,IAAI;AAAA,YACjC;AAEA,YAAAA,WAAU,WAAW,KAAK,IAAI;AAC9B,iBAAK,KAAKA,WAAU,KAAK;AACnB,gBAAI,YAAY;AAAG,cAAAA,WAAU,YAAY;AAAA,UAChD;AAAA,UAEA,OAAO,SAAS,GAAG;AAClB,gBAAI,KAAK;AAET,YAAAA,WAAU,WAAW;AAErB,gBAAI,CAACA,WAAU,MAAM,QAAQ;AAC5B,kBAAIA,WAAU,UAAU,GAAG;AAC1B,sBAAM,IAAI,MAAM,8BAA8B;AAAA,cAC/C;AAEA;AAAA,YACD;AAEA,gBAAI,OAAOA,WAAU,MAAM,CAAC;AAE5B,gBAAI,KAAK,IAAIA,WAAU,UAAUA,WAAU,UAAU;AACpD;AAAA,YACD;AAEA,YAAAA,WAAU,MAAM,MAAM;AACtB,YAAAA,WAAU,WAAW,KAAK;AAE1B,qBAAS,KAAK,IAAI;AAAA,UACnB;AAAA,UAEA,WAAW,SAAS,GAAG;AACtB,gBAAI,KAAK;AACT,mBAAOA,WAAU,UAAU,KAAKA,WAAU;AAAA,UAC3C;AAAA,QACD;AAEA,eAAOA;AAAA,MACR;AAAC;AAED,UAAI,OAAO,YAAY,UAAU;AAE7B,eAAO,UAAUA;AAAA,MACrB,WAAW,OAAO,WAAW,cAAc,OAAO,KAAK;AAEnD,eAAO,WAAY;AACf,iBAAOA;AAAA,QACX,CAAC;AAAA,MACL,OAAO;AAEH,eAAO,YAAYA;AAAA,MACvB;AAAA,IACA,GAAE,OAAI;AAAA;AAAA;;;ACpGN;AAAA;AAAA;AAEA,WAAO,UAAU,SAAU,MAAM,MAAM;AACnC,UAAI,CAAC;AAAM,eAAO,CAAC;AACnB,UAAI,OAAO,SAAS;AAAY,eAAO,EAAE,KAAK,KAAK;AACnD,UAAI,SAAU,OAAO,KAAK,WAAW,YAAa,KAAK,SAAS;AAEhE,UAAI,MAAM,KAAK,OAAQ,SAAUC,IAAG;AAChC,eAAO,SAAU,MAAM;AACnB,iBAAO,SAAU,GAAG,GAAG;AACnB,gBAAI,OAAO,EAAE,KAAK,GAAG,OAAO,KAAK,CAAC,EAAE;AACpC,gBAAI,OAAO,EAAE,KAAK,GAAG,OAAO,KAAK,CAAC,EAAE;AACpC,mBAAOA,GAAE,MAAM,IAAI;AAAA,UACvB;AAAA,QACJ;AAAA,MACJ,EAAG,KAAK,GAAG;AAEX,UAAI,OAAO,CAAC;AACZ,aAAQ,SAASC,WAAW,MAAM;AAC9B,YAAI,QAAQ,KAAK,UAAU,OAAO,KAAK,WAAW,YAAY;AAC1D,iBAAO,KAAK,OAAO;AAAA,QACvB;AAEA,YAAI,SAAS;AAAW;AACxB,YAAI,OAAO,QAAQ;AAAU,iBAAO,SAAS,IAAI,IAAI,KAAK,OAAO;AACjE,YAAI,OAAO,SAAS;AAAU,iBAAO,KAAK,UAAU,IAAI;AAExD,YAAI,GAAG;AACP,YAAI,MAAM,QAAQ,IAAI,GAAG;AACrB,gBAAM;AACN,eAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAC9B,gBAAI;AAAG,qBAAO;AACd,mBAAOA,WAAU,KAAK,CAAC,CAAC,KAAK;AAAA,UACjC;AACA,iBAAO,MAAM;AAAA,QACjB;AAEA,YAAI,SAAS;AAAM,iBAAO;AAE1B,YAAI,KAAK,QAAQ,IAAI,MAAM,IAAI;AAC3B,cAAI;AAAQ,mBAAO,KAAK,UAAU,WAAW;AAC7C,gBAAM,IAAI,UAAU,uCAAuC;AAAA,QAC/D;AAEA,YAAI,YAAY,KAAK,KAAK,IAAI,IAAI;AAClC,YAAI,OAAO,OAAO,KAAK,IAAI,EAAE,KAAK,OAAO,IAAI,IAAI,CAAC;AAClD,cAAM;AACN,aAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAC9B,cAAI,MAAM,KAAK,CAAC;AAChB,cAAI,QAAQA,WAAU,KAAK,GAAG,CAAC;AAE/B,cAAI,CAAC;AAAO;AACZ,cAAI;AAAK,mBAAO;AAChB,iBAAO,KAAK,UAAU,GAAG,IAAI,MAAM;AAAA,QACvC;AACA,aAAK,OAAO,WAAW,CAAC;AACxB,eAAO,MAAM,MAAM;AAAA,MACvB,EAAG,IAAI;AAAA,IACX;AAAA;AAAA;;;AC1DA;AAAA;AAAA;AAEA,QAAM,UACJ,OAAO,SAAS,cACZ,OACA,OAAO,WAAW,cAClB;AAAA;AAAA,MACgB;AAAA;AAEtB,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,QAAQ,iBAAiB;AAC5B,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,WAAO,QAAQ,kBAAkB,QAAQ;AAAA;AAAA;;;ACnBlC,IAAM,6BAA6B;;;ACWnC,IAAM,YAAY;EACvB,aAAa;IACX,eAAe;IACf,MAAM;IACN,gBAAgB;IAChB,MAAM;IACN,aAAa;IACb,cAAc;IACd,iBAAiB;IACjB,cAAc;IACd,WAAW;IACX,iBAAiB;IACjB,SAAS;IACT,aAAa;IACb,eAAe;IACf,gBAAgB;IAChB,WAAW;IACX,cAAc;IACd,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;IACjB,YAAY;IACZ,cAAc;IACd,QAAQ;IACR,eAAe;IACf,gBAAgB;IAChB,SAAS;IACT,mBAAmB;IACnB,aAAa;IACb,oBAAoB;IACpB,cAAc;IACd,mBAAmB;IACnB,YAAY;IACZ,WAAW;IACX,iBAAiB;IACjB,QAAQ;IACR,MAAM;IACN,0BAA0B;IAC1B,2BAA2B;IAC3B,wBAAwB;IACxB,qBAAqB;IACrB,eAAe;IACf,WAAW;IACX,aAAa;IACb,UAAU;IACV,QAAQ;IACR,UAAU;IACV,SAAS;IACT,MAAM;;IAGN,OAAO;IACP,SAAS;IACT,aAAa;IACb,wBAAwB;IACxB,cAAc;;IAGd,cAAc;IACd,mBAAmB;IACnB,UAAU;IACV,WAAW;;IAGX,YAAY;IACZ,mBAAmB;IACnB,mBAAmB;IACnB,oBAAoB;IACpB,oBAAoB;IACpB,mBAAmB;IACnB,cAAc;IACd,kBAAkB;IAClB,OAAO;IACP,yBAAyB;IACzB,uBAAuB;;IAEvB,0BAA0B;IAC1B,gBAAgB;IAChB,kBAAkB;IAClB,qBAAqB;IACrB,mBAAmB;IACnB,0BAA0B;IAC1B,2BAA2B;IAC3B,gCAAgC;IAChC,oCAAoC;;;IAIpC,sBAAsB;;IAEtB,cAAc;;;IAId,sBAAsB;;IAEtB,kBAAkB;;IAElB,SAAS;;IAGT,eAAe;;IAGf,SAAS;;IAGT,cAAc;IACd,qBAAqB;;IAGrB,UAAU;IACV,QAAQ;;IAGR,iBAAiB;;IAGjB,gBAAgB;IAChB,oBAAoB;IACpB,qBAAqB;IACrB,4BAA4B;IAC5B,0BAA0B;IAC1B,8BAA8B;IAC9B,eAAe;IACf,mBAAmB;IACnB,kBAAkB;;IAGlB,WAAW;IACX,iBAAiB;IACjB,mBAAmB;;IAGnB,yBAAyB;IACzB,mBAAmB;IACnB,qCAAqC;;IAGrC,6BAA6B;IAC7B,sBAAsB;;IAGtB,UAAU;;IAGV,WAAW;;IAGX,qBAAqB;IACrB,kBAAkB;;IAGlB,uBAAuB;;IAGvB,gBAAgB;IAChB,eAAe;IACf,sBAAsB;;IAGtB,0CAA0C;;IAG1C,cAAc;;IAGd,eAAe;;;EAIjB,mBAAmB;EACnB,mBAAmB;EACnB,uCAAuC,IAAI,KAAK;;EAGhD,oCAAoC;;EAGpC,4CAA4C,IAAI,KAAK;;EAGrD,oBAAoB;EACpB,2BAA2B;;EAG3B,gBAAgB;EAChB,gBAAgB;EAChB,kBAAkB;EAClB,SAAS;EACT,YAAY;;EAGZ,mCAAmC;;EAGnC,sCAAsC;EAEtC,OAAO;IACL,gBAAgB;;EAGlB,MAAM;IACJ,MAAM;IACN,sBAAsB;IACtB,wBAAwB;IACxB,kBAAkB;IAClB,sBAAsB;IACtB,wBAAwB;IACxB,6BAA6B;IAC7B,qBAAqB;IACrB,iCAAiC;IACjC,sBAAsB;IACtB,wBAAwB;IACxB,+BAA+B;IAC/B,oBAAoB;IACpB,mBAAmB;IACnB,qBAAqB;IACrB,4BAA4B;;EAG9B,mBAAmB;;IAEjB,cAAc;IACd,cAAc;IACd,IAAI;;EAGN,qBAAqB;;IAEnB,cAAc;IACd,cAAc;IACd,KAAK;;;;;EAMP,+BAA+B;IAC7B,uCAAuC;IACvC,uCAAuC;;EAGzC,gCAAgC;IAC9B,uCAAuC;IACvC,uCAAuC;;;AAO3C,IAAY;CAAZ,SAAYC,eAAY;AACtB,EAAAA,cAAA,MAAA,IAAA;AACA,EAAAA,cAAA,UAAA,IAAA;AACA,EAAAA,cAAA,OAAA,IAAA;AACA,EAAAA,cAAA,MAAA,IAAA;AACA,EAAAA,cAAA,YAAA,IAAA;AACA,EAAAA,cAAA,WAAA,IAAA;AACA,EAAAA,cAAA,WAAA,IAAA;AACA,EAAAA,cAAA,OAAA,IAAA;AACA,EAAAA,cAAA,KAAA,IAAA;AACA,EAAAA,cAAA,SAAA,IAAA;AACA,EAAAA,cAAA,MAAA,IAAA;AACA,EAAAA,cAAA,UAAA,IAAA;AACA,EAAAA,cAAA,cAAA,IAAA;AACF,GAdY,iBAAA,eAAY,CAAA,EAAA;AAmBxB,IAAY;CAAZ,SAAYC,aAAU;AACpB,EAAAA,YAAA,KAAA,IAAA;AACA,EAAAA,YAAA,OAAA,IAAA;AACA,EAAAA,YAAA,MAAA,IAAA;AACA,EAAAA,YAAA,KAAA,IAAA;AACA,EAAAA,YAAA,QAAA,IAAA;AACF,GANY,eAAA,aAAU,CAAA,EAAA;AAWtB,IAAY;CAAZ,SAAYC,gBAAa;AACvB,EAAAA,eAAA,QAAA,IAAA;AACA,EAAAA,eAAA,SAAA,IAAA;AACA,EAAAA,eAAA,QAAA,IAAA;AACA,EAAAA,eAAA,QAAA,IAAA;AACA,EAAAA,eAAA,MAAA,IAAA;AACA,EAAAA,eAAA,OAAA,IAAA;AACA,EAAAA,eAAA,SAAA,IAAA;AACA,EAAAA,eAAA,OAAA,IAAA;AACA,EAAAA,eAAA,OAAA,IAAA;AACF,GAVY,kBAAA,gBAAa,CAAA,EAAA;AAezB,IAAY;CAAZ,SAAYC,gBAAa;AACvB,EAAAA,eAAA,eAAA,IAAA;AACA,EAAAA,eAAA,iBAAA,IAAA;AACA,EAAAA,eAAA,iBAAA,IAAA;AACA,EAAAA,eAAA,mBAAA,IAAA;AACF,GALY,kBAAA,gBAAa,CAAA,EAAA;AAUzB,IAAY;CAAZ,SAAYC,mCAAgC;AAC1C,EAAAA,kCAAA,MAAA,IAAA;AACA,EAAAA,kCAAA,iBAAA,IAAA;AACA,EAAAA,kCAAA,qBAAA,IAAA;AACA,EAAAA,kCAAA,SAAA,IAAA;AACF,GALY,qCAAA,mCAAgC,CAAA,EAAA;AAS5C,IAAY;CAAZ,SAAYC,wBAAqB;AAI/B,EAAAA,uBAAAA,uBAAA,uBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,gCAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,wBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,6BAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,iCAAA,IAAA,EAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,yBAAA,IAAA,EAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,8BAAA,IAAA,EAAA,IAAA;AAEA,EAAAA,uBAAAA,uBAAA,kCAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,kCAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,0BAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,gCAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,mCAAA,IAAA,EAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,mCAAA,IAAA,EAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,4BAAA,IAAA,EAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,2BAAA,IAAA,GAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,iCAAA,IAAA,GAAA,IAAA;AAEA,EAAAA,uBAAAA,uBAAA,gCAAA,IAAA,KAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,iCAAA,IAAA,GAAA,IAAA;AAMA,EAAAA,uBAAAA,uBAAA,mCAAA,IAAA,EAAA,IAAA;AAGA,EAAAA,uBAAAA,uBAAA,iCAAA,IAAA,KAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,kCAAA,IAAA,GAAA,IAAA;AAQA,EAAAA,uBAAAA,uBAAA,oCAAA,IAAA,GAAA,IAAA;AAOA,EAAAA,uBAAAA,uBAAA,mCAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,8BAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,yCAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,6CAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,iCAAA,IAAA,EAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,kCAAA,IAAA,EAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,oBAAA,IAAA,EAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,+BAAA,IAAA,GAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,mCAAA,IAAA,GAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,uBAAA,IAAA,GAAA,IAAA;AAEA,EAAAA,uBAAAA,uBAAA,gCAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,iCAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,gCAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,gCAAA,IAAA,CAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,2CAAA,IAAA,EAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,4CAAA,IAAA,EAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,2CAAA,IAAA,EAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,4CAAA,IAAA,GAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,mCAAA,IAAA,GAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,oCAAA,IAAA,GAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,mCAAA,IAAA,IAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,+CAAA,IAAA,IAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,gDAAA,IAAA,IAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,+CAAA,IAAA,IAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,oCAAA,IAAA,KAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,uBAAA,IAAA,KAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,sBAAA,IAAA,MAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,sBAAA,IAAA,MAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,kCAAA,IAAA,OAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,iCAAA,IAAA,OAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,kCAAA,IAAA,OAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,sCAAA,IAAA,OAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,qCAAA,IAAA,QAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,0BAAA,IAAA,QAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,yBAAA,IAAA,QAAA,IAAA;AAEA,EAAAA,uBAAAA,uBAAA,kCAAA,IAAA,UAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,6BAAA,IAAA,EAAA,IAAA;AAEA,EAAAA,uBAAAA,uBAAA,mCAAA,IAAA,UAAA,IAAA;AACA,EAAAA,uBAAAA,uBAAA,8BAAA,IAAA,MAAA,IAAA;AAQA,EAAAA,uBAAAA,uBAAA,WAAA,IAAA,CAAA,IAAA;AACF,GAlGY,0BAAA,wBAAqB,CAAA,EAAA;AAsGjC,IAAY;CAAZ,SAAYC,yBAAsB;AAChC,EAAAA,wBAAAA,wBAAA,sBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,uBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,sBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,sBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,yBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,oBAAA,IAAA,CAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,+BAAA,IAAA,EAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,6BAAA,IAAA,CAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,gCAAA,IAAA,EAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,+BAAA,IAAA,EAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,yBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,uBAAA,IAAA,EAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,0BAAA,IAAA,GAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,yBAAA,IAAA,IAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,qCAAA,IAAA,IAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,mCAAA,IAAA,CAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,sCAAA,IAAA,IAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,qCAAA,IAAA,IAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,iCAAA,IAAA,GAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,wBAAA,IAAA,EAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,0BAAA,IAAA,KAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,kBAAA,IAAA,EAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,qBAAA,IAAA,UAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,aAAA,IAAA,KAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,gBAAA,IAAA,EAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,UAAA,IAAA,EAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,aAAA,IAAA,KAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,YAAA,IAAA,MAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,YAAA,IAAA,MAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,oBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,uBAAA,IAAA,OAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,sBAAA,IAAA,OAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,uBAAA,IAAA,OAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,wBAAA,IAAA,GAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,2BAAA,IAAA,OAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,0BAAA,IAAA,QAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,aAAA,IAAA,GAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,gBAAA,IAAA,QAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,eAAA,IAAA,QAAA,IAAA;AACF,GAxCY,2BAAA,yBAAsB,CAAA,EAAA;;;AC1alC,IAAM,kBAAkB,IAAI,OAAO,OAAO;AAC1C,IAAM,mBAAmB,IAAI,OAAO,OAAO;AAC3C,IAAM,8BAA8B,IAAI,OAAO,WAAW;AAC1D,IAAM,kCAAkC,IAAI,OAAO,UAAU;AAGvD,SAAU,+BAA+B,KAAY;AAGzD,SAAO,KAAK,UAAU,GAAG,EAAE,QAAQ,oBAAoB,CAAC,MAAK;AAC3D,WAAO,SAAS,SAAS,EAAE,WAAW,CAAC,EAAE,SAAS,EAAE,GAAG,MAAM,EAAE;EACjE,CAAC;AACH;AAKM,SAAU,UAAU,cAAoB;AAO5C,MAAI,aAAa,WAAW,GAAG;AAE7B,WAAO;MACL,MAAM;MACN,YAAY;;;AAIhB,MAAI,aAAa,aAAa,SAAS,CAAC,MAAM,KAAK;AACjD,mBAAe,eAAe;;AAGhC,MAAI,aAAa,CAAC,MAAM,KAAK;AAC3B,mBAAe,MAAM;;AAcvB,QAAM,YAAY,aAAa,MAAM,GAAG;AACxC,MAAI;AACJ,MAAI;AACJ,MAAI,UAAU,SAAS,MAAM,GAAG;AAE9B,SAAK,UAAU,UAAU,SAAS,CAAC;AACnC,WAAO,UAAU,UAAU,SAAS,CAAC;SAChC;AAEL,SAAK,UAAU,UAAU,SAAS,CAAC;AACnC,WAAO,UAAU,UAAU,SAAS,CAAC;;AAGvC,QAAM,SAAS;IACb;IACA,YAAY;MACV;MACA,MAAM;;;AAIV,SAAO;AACT;AAKM,SAAU,cAAc,eAA4B;AACxD,SAAO,kBAAkB,cAAc,QAAQ,kBAAkB,cAAc;AACjF;AAKM,SAAU,MAAM,MAAY;AAChC,SAAO,IAAI,QAAQ,CAAC,YAAW;AAC7B,eAAW,MAAK;AACd,cAAO;IACT,GAAG,IAAI;EACT,CAAC;AACH;AAKM,SAAU,iBAAiB,MAAY;AAC3C,SAAO,KAAK,MAAM,GAAG,EAAE,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG;AAC7C;AAKM,SAAU,WAAW,UAAkB,MAAY;AACvD,SAAO,YAAY,QAAQ,IAAI;AACjC;AAKM,SAAU,YAAY,QAAc;AACxC,SAAO,OAAO,QAAQ,iBAAiB,EAAE,EAAE,QAAQ,kBAAkB,EAAE;AACzE;AAYM,SAAU,UAAU,MAAY;AACpC,QAAM,YAAY,CAAA;AAClB,MAAI,eAAe;AAEnB,QAAM,aAAa,MAAY;AAC7B,UAAM,IAAI,MAAM,UAAU,OAAO,0BAA0B,YAAY;EACzE;AAEA,QAAM,kBAAkB,MAAa;AACnC,UAAM,QAAQ,KAAK,YAAY;AAC/B,QAAI,WAAW,EAAE;AAEjB,eAAS;AACP,iBAAW,KAAK,QAAQ,OAAO,QAAQ;AACvC,UAAI,aAAa,IAAI;AACnB,mBAAU;;AAGZ,UAAI,KAAK,WAAW,CAAC,MAAM,MAAM;AAC/B;;AAGF,QAAE;;AAGJ,UAAM,QAAQ,KAAK,OAAO,cAAc,WAAW,YAAY;AAC/D,mBAAe,WAAW;AAC1B,WAAO;EACT;AAEA,QAAM,WAAW,MAAa;AAC5B,UAAM,WAAW,KAAK,QAAQ,KAAK,YAAY;AAC/C,QAAI,QAAQ;AACZ,QAAI,aAAa,IAAI;AACnB,cAAQ,KAAK,OAAO,YAAY;AAChC,qBAAe,KAAK;WACf;AACL,cAAQ,KAAK,OAAO,cAAc,WAAW,YAAY;AACzD,qBAAe;;AAGjB,YAAQ,MAAM,KAAI;AAClB,WAAO;EACT;AAEA,SAAO,eAAe,KAAK,QAAQ;AACjC,QAAI,KAAK,YAAY,MAAM,KAAK;AAC9B,iBAAU;;AAGZ,QAAI,EAAE,iBAAiB,KAAK,QAAQ;AAClC;;AAGF,QAAI,KAAK,YAAY,MAAM,OAAO,KAAK,YAAY,MAAM,KAAK;AAC5D,gBAAU,KAAK,gBAAe,CAAE;WAC3B;AACL,gBAAU,KAAK,SAAQ,CAAE;;;AAI7B,SAAO;AACT;AAKM,SAAU,gBAAgB,UAA2B,KAAyB;AAElF,MAAI,SAAS,IAAI;AACf,QAAI,OAAO,SAAS,OAAO,UAAU;AACnC,UAAI,UAAU;AACd,aAAO;;AAGT,QACE,SAAS,GAAG,QAAQ,GAAG,MAAM,MAC7B,SAAS,GAAG,QAAQ,IAAI,MAAM,MAC9B,SAAS,GAAG,QAAQ,GAAG,MAAM,MAC7B,SAAS,GAAG,QAAQ,GAAG,MAAM,IAC7B;AACA,UAAI,UAAU;AACd,aAAO;;AAGT,QAAI,SAAS,GAAG,SAAS,GAAG,SAAS,CAAC,MAAM,KAAK;AAC/C,UAAI,UAAU;AACd,aAAO;;;AAGX,SAAO;AACT;AAKM,SAAU,oBAAoB,UAA2B,KAAyB;AAEtF,MAAI,SAAS,IAAI;AACf,QAAI,OAAO,SAAS,OAAO,UAAU;AACnC,UAAI,UAAU;AACd,aAAO;;AAGT,QACE,SAAS,GAAG,QAAQ,GAAG,MAAM,MAC7B,SAAS,GAAG,QAAQ,IAAI,MAAM,MAC9B,SAAS,GAAG,QAAQ,GAAG,MAAM,IAC7B;AACA,UAAI,UAAU;AACd,aAAO;;;AAGX,SAAO;AACT;AAGM,SAAU,cAAc,cAAoB;AAChD,iBAAe,YAAY,YAAY;AACvC,SAAO;AACT;AAGM,SAAU,gBAAgB,cAAsB,cAAqB;AACzE,iBAAe,YAAY,YAAY;AACvC,MAAI,cAAc;AAChB,WAAO,MAAM,UAAU,YAAY,IAAI,MAAM;SACxC;AACL,WAAO,MAAM,UAAU,YAAY;;AAEvC;AAKM,SAAU,oBAAoB,aAAmB;AAErD,SAAO,CAAC,eAAe,QAAQ,KAAK,WAAW;AACjD;AAKM,SAAU,0BAA0B,aAAmB;AAC3D,MAAI,OAAO,gBAAgB,UAAU;AACnC,UAAM,IAAI,MAAM,oCAAoC;;AAGtD,SAAO,YAAY,QAAQ,iBAAiB,EAAE,EAAE,QAAQ,kBAAkB,EAAE;AAC9E;AAKM,SAAU,mBAAmB,YAAkB;AAEnD,MAAI,OAAO,eAAe,YAAY,oBAAoB,UAAU,GAAG;AACrE,UAAM,IAAI,MAAM,qEAAqE;;AAIvF,MAAI,4BAA4B,KAAK,UAAU,GAAG;AAChD,UAAM,IAAI,MAAM,wEAAwE;;AAG1F,SAAO;AACT;AAKM,SAAU,uBAAuB,YAAkB;AAEvD,MAAI,OAAO,eAAe,YAAY,oBAAoB,UAAU,GAAG;AACrE,UAAM,IAAI,MAAM,qEAAqE;;AAIvF,MAAI,gCAAgC,KAAK,UAAU,GAAG;AACpD,UAAM,IAAI,MAAM,mEAAmE;;AAGrF,SAAO;AACT;AAKM,SAAU,sBAAsB,cAAoB;AACxD,MAAI,CAAC,gBAAgB,OAAO,iBAAiB,UAAU;AACrD,WAAO;;AAGT,QAAM,cAAc,0BAA0B,YAAY;AAC1D,QAAM,eAAe,YAAY,MAAM,GAAG;AAG1C,MAAI,aAAa,SAAS,MAAM,GAAG;AACjC,WAAO;;AAGT,SAAO,aAAa,aAAa,SAAS,CAAC;AAC7C;AAaM,SAAU,sBAAsB,kBAAwB;AAC5D,QAAM,kBAAkB,iBAAiB,MAAM,GAAG;AAClD,QAAM,EAAE,iBAAiB,WAAU,IAAK,gBAAgB,OACtD,CAAC,kBAAkB,mBAA0B;AAC3C,UAAM,CAAC,KAAK,GAAG,KAAK,IAAI,eAAe,MAAM,GAAG;AAC/C,qBAAyB,GAAG,IAAI,MAAM,KAAK,GAAG;AAC/C,WAAO;EACT,GACA,CAAA,CAAsB;AAExB,MAAI,CAAC,mBAAmB,CAAC,YAAY;AACnC,UAAM,IAAI,MAAM,gDAAgD;;AAElE,SAAO;IACL,UAAU;IACV,KAAK;;AAET;;;AC9TO,IAAM,cAA+B;;EAE1C,IAAI;EACJ,SAAS;EACT,UAAU;EACV,WAAW;EACX,aAAa;;EAGb,YAAY;EACZ,cAAc;EACd,WAAW;EACX,UAAU;EACV,kBAAkB;EAClB,gBAAgB;EAChB,UAAU;EACV,MAAM;EACN,oBAAoB;EACpB,uBAAuB;EACvB,iBAAiB;EACjB,WAAW;;EAGX,qBAAqB;EACrB,oBAAoB;;EAGpB,WAAW;;EAGX,iBAAiB;EACjB,oBAAoB;;AA2Bf,IAAM,iBAAqC;EAChD,SAAS;;EAGT,gCAAgC;;EAGhC,uBAAuB;EACvB,iBAAiB;;EAEjB,yBAAyB;;EAGzB,gBAAgB;EAChB,yBAAyB;;;;ACrGrB,SAAU,kBAAkB,YAAkB;AAClD,eAAa,0BAA0B,UAAU;AACjD,qBAAmB,UAAU;AAE7B,SAAO,UAAU,KAAK,uBAAuB,MAAM;AACrD;AAaM,SAAU,4BAA4B,YAAoB,cAAoB;AAClF,iBAAe,0BAA0B,YAAY;AACrD,qBAAmB,YAAY;AAE/B,SACE,kBAAkB,UAAU,IAAI,MAAM,UAAU,KAAK,yBAAyB,MAAM;AAExF;AAYM,SAAU,cAAc,YAAoB,QAAc;AAC9D,WAAS,0BAA0B,MAAM;AACzC,qBAAmB,MAAM;AAEzB,SAAO,kBAAkB,UAAU,IAAI,MAAM,UAAU,KAAK,mBAAmB,MAAM;AACvF;AAcM,SAAU,kBACd,YACA,cACA,YAAkB;AAElB,eAAa,0BAA0B,UAAU;AACjD,yBAAuB,UAAU;AAEjC,SACE,4BAA4B,YAAY,YAAY,IACpD,MACA,UAAU,KAAK,uBACf,MACA;AAEJ;AAYM,SAAU,oBACd,YACA,QACA,cAAoB;AAEpB,iBAAe,0BAA0B,YAAY;AACrD,qBAAmB,YAAY;AAE/B,SACE,cAAc,YAAY,MAAM,IAChC,MACA,UAAU,KAAK,yBACf,MACA;AAEJ;AAcM,SAAU,yBACd,YACA,cACA,mBAAyB;AAEzB,sBAAoB,0BAA0B,iBAAiB;AAC/D,qBAAmB,iBAAiB;AAEpC,SACE,4BAA4B,YAAY,YAAY,IACpD,MACA,UAAU,KAAK,8BACf,MACA;AAEJ;AAaM,SAAU,iBACd,YACA,cACA,WAAiB;AAEjB,cAAY,0BAA0B,SAAS;AAC/C,qBAAmB,SAAS;AAE5B,SACE,4BAA4B,YAAY,YAAY,IACpD,MACA,UAAU,KAAK,sBACf,MACA;AAEJ;AAaM,SAAU,6BACd,YACA,cACA,OAAa;AAEb,UAAQ,0BAA0B,KAAK;AACvC,qBAAmB,KAAK;AAExB,SACE,4BAA4B,YAAY,YAAY,IACpD,MACA,UAAU,KAAK,kCACf,MACA;AAEJ;;;AChMM,SAAU,WAAW,KAAW;AACpC,QAAM,QAAQ,IAAI,WAAW,IAAI,MAAM;AACvC,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,UAAM,CAAC,IAAI,IAAI,WAAW,CAAC;;AAE7B,SAAO;AACT;AAEM,SAAU,aAAa,OAAkB;AAC7C,MAAI,eAAe,OAAO,MAAM;AAC9B,UAAM,IAAI,MAAM,gEAAgE;;AAGlF,MAAI,SAAS;AACb,QAAM,QAAQ,IAAI,WAAW,KAAK;AAClC,QAAM,MAAM,MAAM;AAClB,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,cAAU,OAAO,aAAa,MAAM,CAAC,CAAC;;AAExC,SAAO,KAAK,MAAM;AACpB;;;ACtBA,IAAI;AAGJ,IAAM,MAAM;AAEZ,IAAM,QAAQ;AAEd,IAAI,eAAe,OAAO,MAAM;AAE9B,aAAW,CAAC,QAAuB;AAGjC,UAAM,OAAO,GAAG,EAAE,QAAQ,iBAAiB,EAAE;AAC7C,QAAI,CAAC,MAAM,KAAK,GAAG,GAAG;AACpB,YAAM,IAAI,UACR,0FAA0F;;AAK9F,WAAO,KAAK,MAAM,KAAK,IAAI,SAAS,EAAE;AACtC,QAAI;AACJ,QAAI,SAAS;AACb,QAAI;AACJ,QAAI;AACJ,QAAI,IAAI;AACR,WAAO,IAAI,IAAI,UAAU;AACvB,eACG,IAAI,QAAQ,IAAI,OAAO,GAAG,CAAC,KAAK,KAChC,IAAI,QAAQ,IAAI,OAAO,GAAG,CAAC,KAAK,MAC/B,KAAK,IAAI,QAAQ,IAAI,OAAO,GAAG,CAAC,MAAM,KACvC,KAAK,IAAI,QAAQ,IAAI,OAAO,GAAG,CAAC;AAEnC,gBACE,OAAO,KACH,OAAO,aAAc,UAAU,KAAM,GAAG,IACxC,OAAO,KACP,OAAO,aAAc,UAAU,KAAM,KAAM,UAAU,IAAK,GAAG,IAC7D,OAAO,aAAc,UAAU,KAAM,KAAM,UAAU,IAAK,KAAK,SAAS,GAAG;;AAEnF,WAAO;EACT;OACK;AACL,aAAW;;AAGb,IAAA,uBAAe;;;AC7Cf,IAAM,YAAiB,OAAO,SAAS,cAAc,SAAS;AAE9D,IAAI,CAAC,WAAW;AACd,QAAM,IAAI,MAAM,uBAAuB;;AAGzC,IAAM,eAAuB,UAAU,UAAU,UAAU;AAE3D,IAAI,CAAC,gBAAgB,CAAC,aAAa,QAAQ;AACzC,QAAM,IAAI,MAAM,iDAAiD;;;;ACNnE,eAAsB,KAAK,KAAa,SAAe;AACrD,QAAM,eAAiC,EAAE,MAAM,QAAQ,MAAM,EAAE,MAAM,UAAS,EAAE;AAChF,QAAM,iBAAiB,IAAI,WACzB,CAAC,GAAG,SAAS,mBAAmB,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;AAExE,QAAM,aAAa,WAAW,qBAAK,GAAG,CAAC;AACvC,QAAM,YAAY,MAAM,aAAa,OAAO,UAAU,OAAO,YAAY,cAAc,OAAO;IAC5F;GACD;AACD,QAAMC,aAAY,MAAM,aAAa,OAAO,KAAK,cAAc,WAAW,cAAc;AAExF,SAAO,aAAaA,UAAS;AAC/B;;;ACbA,eAAsB,gBACpB,WACA,QACA,eAA6B,aAAa,MAC1C,aAAqB,IACrB,OAAO,oBAAI,KAAI,GAAE;AAIjB,MAAI,UAAU,WAAW,WAAW,GAAG;AACrC,WAAO;MACL,CAAC,UAAU,YAAY,aAAa,GAAG,mBAAmB,SAAS;MACnE,CAAC,UAAU,YAAY,KAAK,GAAG,KAAK,YAAW;;;AAGnD,QAAM,MAAM,MAAM,UAAU,WAAW,QAAQ,cAAc,YAAY,IAAI;AAE7E,SAAO;IACL,CAAC,UAAU,YAAY,aAAa,GAAG;IACvC,CAAC,UAAU,YAAY,KAAK,GAAG,KAAK,YAAW;;AAEnD;AAEA,eAAe,UACb,WACA,QACA,cACA,aAAqB,IACrB,OAAO,oBAAI,KAAI,GAAE;AAEjB,QAAM,OAAO;AACb,QAAM,UAAU;AAChB,QAAM,OACJ,OAAO,YAAW,IAClB,OACA,aAAa,YAAW,IACxB,OACA,aACA,OACA,KAAK,YAAW,EAAG,YAAW,IAC9B;AAIF,QAAM,SAAS,MAAM,KAAK,WAAW,IAAI;AAEzC,SAAO,mBAAmB,UAAU,OAAO,UAAU,UAAU,UAAU,MAAM;AACjF;;;AC1BA,eAAsB,uBACpB,eACA,MACA,MACA,YACA,cACA,SAAsB;AAEtB,MAAI,cAAc,gBAAgB;AAChC,kBAAc,iBAAiB,CAAA;AAC/B,eAAW,cAAc,cAAc,gBAAgB;AACrD,YAAM,KAAK,sBAAsB,WAAW,QAAQ;AACpD,UAAI,CAAC,IAAI;AACP,cAAM,IAAI,MAAM,wBAAwB,EAAE,uEACmB;;AAG/D,oBAAc,eAAe,EAAE,IAAK,WAAmB;;;AAI3D,MAAI,cAAc,KAAK;AACrB,UAAM,0CACJ,MACA,YACA,cACA,SACA,cAAc,GAAG;aAEV,cAAc,gBAAgB;AACvC,YAAQ,UAAU,YAAY,aAAa,IAAI,mBAC7C,yCAAyC,cAAc,gBAAgB,MAAM,UAAU,CAAC;aAEjF,cAAc,eAAe;AACtC,YAAQ,UAAU,YAAY,aAAa,IAAI,mBAC7C,MAAM,cAAc,cAAc,EAAE,MAAM,MAAM,YAAY,cAAc,QAAO,CAAE,CAAC;;AAG1F;AAMA,eAAsB,0CACpB,MACA,YACA,cACA,SACA,WAAiB;AAGjB,MAAI,iBAAiB,aAAa,OAAO;AACvC,iBAAa,cAAc,WAAW,YAAW;;AAEnD,YAAU,OAAO,OACf,SACA,MAAM,gBAAgB,WAAW,MAAM,cAAc,UAAU,CAAC;AAEpE;AAMM,SAAU,yCACd,gBACA,MACA,YAAkB;AAElB,MAAI,kBAAkB,OAAO,KAAK,cAAc,EAAE,SAAS,GAAG;AAI5D,QAAI,CAAC,QAAQ,CAAC,YAAY;AACxB,aAAO,eAAe,OAAO,KAAK,cAAc,EAAE,CAAC,CAAC;;AAItD,QAAI,cAAc,eAAe,UAAU,GAAG;AAC5C,aAAO,eAAe,UAAU;;AAIlC,QAAI,CAAC,QAAQ,KAAK,SAAS,GAAG;AAE5B,aAAO;;AAGT,WAAO,0BAA0B,IAAI;AACrC,UAAM,eAAgB,QAAQ,KAAK,MAAM,GAAG,KAAM,CAAA;AAGlD,QAAI,aAAa,WAAW,GAAG;AAE7B,YAAM,gBAAgB,aAAa,MAAM,GAAG,CAAC,EAAE,IAAI,kBAAkB,EAAE,KAAK,GAAG;AAC/E,UAAI,eAAe,aAAa,GAAG;AACjC,eAAO,eAAe,aAAa;;;AAQvC,QAAI,QAAQ,aAAa,SAAS,MAAM,IAAI,aAAa,SAAS,IAAI,aAAa,SAAS;AAC5F,WAAO,QAAQ,GAAG,SAAS,GAAG;AAC5B,YAAM,KAAK,UAAU,aAAa,KAAK,CAAC;AACxC,UAAI,eAAe,EAAE,GAAG;AACtB,eAAO,eAAe,EAAE;;;;AAM9B,SAAO;AACT;;;AC5IM,SAAU,OAAO,MAAW;AAChC,MAAI,KAAK,SAAS,GAAG;AACnB,UAAM,WAAW,OAAO,KAAK,CAAC,CAAC;AAC/B,QAAI,SAAS,SAAS,QAAQ,GAAG;AAC/B,cAAQ,MAAM,GAAG,IAAI;eACZ,SAAS,SAAS,UAAU,GAAG;AACxC,cAAQ,KAAK,GAAG,IAAI;eACX,SAAS,SAAS,OAAO,GAAG;AACrC,cAAQ,KAAK,GAAG,IAAI;eACX,SAAS,SAAS,UAAU,GAAG;AACxC,cAAQ,MAAM,GAAG,IAAI;WAChB;AACL,cAAQ,MAAM,GAAG,IAAI;;;AAG3B;;;ACiDA,IAAM,mBACH,OAAO,YAAY,eAAe,QAAQ,OAAO,QAAQ,IAAI,SAAU;AAE1E,IAAI;AACJ,IAAI,oBAA8B,CAAA;AAClC,IAAI,oBAA8B,CAAA;AAClC,IAAM,YAAwB,CAAA;AAE9B,IAAI,kBAAkB;AACpB,SAAO,gBAAgB;;AAGzB,IAAM,WAAkB,OAAO,OAC7B,CAAC,cAA+B;AAC9B,SAAO,eAAe,SAAS;AACjC,GACA;EACE;EACA;EACA;EACA;CACD;AAGH,SAAS,OAAO,YAAkB;AAChC,kBAAgB;AAChB,sBAAoB,CAAA;AACpB,sBAAoB,CAAA;AACpB,QAAM,WAAW;AACjB,QAAM,gBAAgB,WAAW,MAAM,GAAG,EAAE,IAAI,CAAC,OAAO,GAAG,KAAI,EAAG,QAAQ,UAAU,KAAK,CAAC;AAC1F,aAAW,MAAM,eAAe;AAC9B,QAAI,GAAG,WAAW,GAAG,GAAG;AACtB,wBAAkB,KAAK,IAAI,OAAO,IAAI,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC;WACjD;AACL,wBAAkB,KAAK,IAAI,OAAO,IAAI,EAAE,GAAG,CAAC;;;AAGhD,aAAW,YAAY,WAAW;AAChC,aAAS,UAAU,QAAQ,SAAS,SAAS;;AAEjD;AAEA,SAAS,QAAQ,WAAiB;AAChC,MAAI,UAAU,SAAS,GAAG,GAAG;AAC3B,WAAO;;AAGT,aAAW,WAAW,mBAAmB;AACvC,QAAI,QAAQ,KAAK,SAAS,GAAG;AAC3B,aAAO;;;AAGX,aAAW,oBAAoB,mBAAmB;AAChD,QAAI,iBAAiB,KAAK,SAAS,GAAG;AACpC,aAAO;;;AAGX,SAAO;AACT;AAEA,SAAS,UAAO;AACd,QAAM,SAAS,iBAAiB;AAChC,SAAO,EAAE;AACT,SAAO;AACT;AAEA,SAAS,eAAe,WAAiB;AACvC,QAAM,cAAwB,OAAO,OAAO,OAAO;IACjD,SAAS,QAAQ,SAAS;IAC1B;IACA,KAAK,SAAS;IACd;IACA;GACD;AAED,WAAS,SAAS,MAAW;AAC3B,QAAI,CAAC,YAAY,SAAS;AACxB;;AAEF,QAAI,KAAK,SAAS,GAAG;AACnB,WAAK,CAAC,IAAI,GAAG,SAAS,IAAI,KAAK,CAAC,CAAC;;AAEnC,gBAAY,IAAI,GAAG,IAAI;EACzB;AAEA,YAAU,KAAK,WAAW;AAE1B,SAAO;AACT;AAEA,SAAS,UAAO;AACd,QAAM,QAAQ,UAAU,QAAQ,IAAI;AACpC,MAAI,SAAS,GAAG;AACd,cAAU,OAAO,OAAO,CAAC;AACzB,WAAO;;AAET,SAAO;AACT;AAEA,SAAS,OAAuB,WAAiB;AAC/C,QAAM,cAAc,eAAe,GAAG,KAAK,SAAS,IAAI,SAAS,EAAE;AACnE,cAAY,MAAM,KAAK;AACvB,SAAO;AACT;AAEA,IAAA,gBAAe;;;ACtKf,IAAM,oBAAoB,oBAAI,IAAG;AACjC,IAAM,kBACH,OAAO,YAAY,eAAe,QAAQ,OAAO,QAAQ,IAAI,mBAAoB;AAEpF,IAAI;AAOG,IAAM,cAAiC,cAAM,OAAO;AAC3D,YAAY,MAAM,IAAI,SAAQ;AAC5B,gBAAM,IAAI,GAAG,IAAI;AACnB;AAWA,IAAM,mBAAmB,CAAC,WAAW,QAAQ,WAAW,OAAO;AAS/D,IAAI,iBAAiB;AAEnB,MAAI,gBAAgB,eAAe,GAAG;AACpC,gBAAY,eAAe;SACtB;AACL,YAAQ,MACN,6CAA6C,eAAe,iDAAiD,iBAAiB,KAC5H,IAAI,CACL,GAAG;;;AAcJ,SAAU,YAAY,OAAqB;AAC/C,MAAI,SAAS,CAAC,gBAAgB,KAAK,GAAG;AACpC,UAAM,IAAI,MACR,sBAAsB,KAAK,yBAAyB,iBAAiB,KAAK,GAAG,CAAC,EAAE;;AAGpF,kBAAgB;AAEhB,QAAMC,qBAAoB,CAAA;AAC1B,aAAWC,WAAU,mBAAmB;AACtC,QAAI,aAAaA,OAAM,GAAG;AACxB,MAAAD,mBAAkB,KAAKC,QAAO,SAAS;;;AAI3C,gBAAM,OAAOD,mBAAkB,KAAK,GAAG,CAAC;AAC1C;AASA,IAAM,WAAW;EACf,SAAS;EACT,MAAM;EACN,SAAS;EACT,OAAO;;AAoCH,SAAU,mBAAmB,WAAiB;AAClD,QAAM,mBAAsC,YAAY,OAAO,SAAS;AACxE,iBAAe,aAAa,gBAAgB;AAC5C,SAAO;IACL,OAAO,aAAa,kBAAkB,OAAO;IAC7C,SAAS,aAAa,kBAAkB,SAAS;IACjD,MAAM,aAAa,kBAAkB,MAAM;IAC3C,SAAS,aAAa,kBAAkB,SAAS;;AAErD;AAEA,SAAS,eAAe,QAA2B,OAAwC;AACzF,QAAM,MAAM,IAAI,SAAQ;AACtB,WAAO,IAAI,GAAG,IAAI;EACpB;AACF;AAEA,SAAS,aAAa,QAA2B,OAAoB;AACnE,QAAME,UAAwB,OAAO,OAAO,OAAO,OAAO,KAAK,GAAG;IAChE;GACD;AAED,iBAAe,QAAQA,OAAM;AAE7B,MAAI,aAAaA,OAAM,GAAG;AACxB,UAAMC,qBAAoB,cAAM,QAAO;AACvC,kBAAM,OAAOA,qBAAoB,MAAMD,QAAO,SAAS;;AAGzD,oBAAkB,IAAIA,OAAM;AAE5B,SAAOA;AACT;AAEA,SAAS,aAAaA,SAAqB;AACzC,SAAO,QAAQ,iBAAiB,SAASA,QAAO,KAAK,KAAK,SAAS,aAAa,CAAC;AACnF;AAEA,SAAS,gBAAgB,UAAgB;AACvC,SAAO,iBAAiB,SAAS,QAAe;AAClD;;;ACpKA,IAAY;CAAZ,SAAYE,iBAAc;AAExB,EAAAA,gBAAAA,gBAAA,SAAA,IAAA,CAAA,IAAA;AACF,GAHY,mBAAA,iBAAc,CAAA,EAAA;;;ACiCnB,IAAM,0BAA4C,OAAO,OAAO;EACrE,gBAAgB,eAAe;EAC/B,gBAAgB;EAChB,yBAAyB;EACzB,oBAAoB,CAAA;EACpB,cAAc;IACZ,sBAAsB;IACtB,kCAAkC;IAClC,sBAAsB;;EAExB,2BAA2B;EAC3B,yBAAyB;EACzB,oCAAoC;CACrC;;;ACtCD,IAAY;CAAZ,SAAYC,mBAAgB;AAI1B,EAAAA,kBAAA,QAAA,IAAA;AAKA,EAAAA,kBAAA,kBAAA,IAAA;AAMA,EAAAA,kBAAA,SAAA,IAAA;AAKA,EAAAA,kBAAA,UAAA,IAAA;AAKA,EAAAA,kBAAA,kBAAA,IAAA;AACF,GA1BY,qBAAA,mBAAgB,CAAA,EAAA;;;ACFtB,IAAO,kBAAP,MAAsB;;;;;EAS1B,IAAW,gBAAa;AACtB,WAAO,KAAK;EACd;;;;;EAOA,IAAW,YAAS;AAClB,WAAO,KAAK;EACd;;;;;EAOA,IAAW,2BAAwB;AACjC,WAAO,KAAK;EACd;;;;;;;;;EAWA,IAAW,+BAA4B;AACrC,WAAO,KAAK;EACd;;;;;EAYA,IAAW,oBAAiB;AAC1B,WAAO,KAAK;EACd;;EAMA,YAAmB,MAA8B,SAAsB;AA5DvD,SAAA,oBAAgC,CAAA;AAEhC,SAAA,oBAAgC,CAAA;AA2D9C,SAAK,gBAAgB;AACrB,SAAK,YAAY;AACjB,SAAK,2BAA2B,QAAQ,UAAU,YAAY,wBAAwB;AACtF,SAAK,+BAA+B,QAAQ,UAAU,YAAY,4BAA4B;AAC9F,SAAK,oBAAoB,KAAK,wBACzB,KAAK,sBAAsB,0BAC5B,iBAAiB;AACrB,QAAI,KAAK,UAAU,iBAAiB,KAAK,KAAK,OAAO,aAAa;AAChE,WAAK,oBAAoB,KAAK,UAAU,iBAAiB;;AAE3D,QAAI,KAAK,UAAU,iBAAiB,KAAK,KAAK,OAAO,aAAa;AAChE,WAAK,oBAAoB,KAAK,UAAU,iBAAiB;;AAE3D,QAAI,KAAK,UAAU,kCAAkC,GAAG;AACtD,WAAK,kCACH,KAAK,UAAU,kCAAkC,MAAM,QACvD,KAAK,UAAU,kCAAkC,MAAM;;EAE7D;;;;ACvFF,IAAY;CAAZ,SAAYC,WAAQ;AAElB,EAAAA,UAAA,QAAA,IAAA;AAEA,EAAAA,UAAA,QAAA,IAAA;AAEA,EAAAA,UAAA,OAAA,IAAA;AAEA,EAAAA,UAAA,YAAA,IAAA;AAEA,EAAAA,UAAA,SAAA,IAAA;AAEA,EAAAA,UAAA,cAAA,IAAA;AACF,GAbY,aAAA,WAAQ,CAAA,EAAA;;;ACEpB,IAAY;CAAZ,SAAYC,eAAY;AAOtB,EAAAA,cAAA,YAAA,IAAA;AAMA,EAAAA,cAAA,MAAA,IAAA;AAEA,EAAAA,cAAA,MAAA,IAAA;AACF,GAhBY,iBAAA,eAAY,CAAA,EAAA;;;ACWxB,IAAY;CAAZ,SAAYC,cAAW;AACrB,EAAAA,aAAA,YAAA,IAAA;AACA,EAAAA,aAAA,cAAA,IAAA;AACA,EAAAA,aAAA,OAAA,IAAA;AACA,EAAAA,aAAA,SAAA,IAAA;AACF,GALY,gBAAA,cAAW,CAAA,EAAA;;;ACXvB,IAAY;CAAZ,SAAYC,YAAS;AAInB,EAAAA,WAAA,OAAA,IAAA;AAIA,EAAAA,WAAA,SAAA,IAAA;AACF,GATY,cAAA,YAAS,CAAA,EAAA;;;ACcd,IAAM,0BAAgD,CAAA;AAKtD,IAAM,0BAAgD;AAOvD,SAAU,8BAA8B,cAA0B;AACtE,MAAI,MAAM,QAAQ,YAAY,GAAG;AAC/B,WAAO,aAAa,IAAI,CAAC,QAAS,QAAQ,SAAY,0BAA0B,GAAI;;AAC/E,WAAO,CAAC,YAAY;AAC7B;;;ACKM,IAAO,sBAAP,MAA0B;EAAhC,cAAA;AACW,SAAA,SAAuC,CAAA;EAgBlD;EAfS,SAAS,OAAgC;AAC9C,SAAK,OAAO,KAAK,KAAK;AACtB,WAAO;EACT;EACO,eAAY;AACjB,SAAK,OAAO,KAAK,uBAAuB;AACxC,WAAO;EACT;EACO,eAAY;AACjB,SAAK,OAAO,KAAK,uBAAuB;AACxC,WAAO;EACT;EACO,QAAK;AACV,WAAO,CAAC,GAAG,KAAK,MAAM;EACxB;;;;ACnDF,IAAY;CAAZ,SAAYC,gCAA6B;AACvC,EAAAA,+BAAAA,+BAAA,IAAA,IAAA,CAAA,IAAA;AACA,EAAAA,+BAAAA,+BAAA,IAAA,IAAA,CAAA,IAAA;AACF,GAHY,kCAAA,gCAA6B,CAAA,EAAA;;;ACAzC,IAAY;CAAZ,SAAYC,mBAAgB;AAC1B,EAAAA,kBAAA,MAAA,IAAA;AACA,EAAAA,kBAAA,WAAA,IAAA;AACF,GAHY,qBAAA,mBAAgB,CAAA,EAAA;;;ACA5B,IAAY;CAAZ,SAAYC,iBAAc;AAExB,EAAAA,gBAAA,MAAA,IAAA;AAEA,EAAAA,gBAAA,MAAA,IAAA;AAEA,EAAAA,gBAAA,KAAA,IAAA;AACF,GAPY,mBAAA,iBAAc,CAAA,EAAA;;;ACK1B,IAAY;CAAZ,SAAYC,gBAAa;AAIvB,EAAAA,eAAA,MAAA,IAAA;AAIA,EAAAA,eAAA,KAAA,IAAA;AACF,GATY,kBAAA,gBAAa,CAAA,EAAA;;;ACJzB,IAAY;CAAZ,SAAYC,mBAAgB;AAE1B,EAAAA,kBAAA,KAAA,IAAA;AAEA,EAAAA,kBAAA,QAAA,IAAA;AAEA,EAAAA,kBAAA,QAAA,IAAA;AAEA,EAAAA,kBAAA,QAAA,IAAA;AAEA,EAAAA,kBAAA,SAAA,IAAA;AACF,GAXY,qBAAA,mBAAgB,CAAA,EAAA;;;ACA5B,IAAY;CAAZ,SAAYC,cAAW;AAErB,EAAAA,aAAA,KAAA,IAAA;AAEA,EAAAA,aAAA,MAAA,IAAA;AACF,GALY,gBAAA,cAAW,CAAA,EAAA;;;ACAvB,IAAY;CAAZ,SAAYC,0BAAuB;AAEjC,EAAAA,yBAAA,YAAA,IAAA;AACF,GAHY,4BAAA,0BAAuB,CAAA,EAAA;;;ACHnC,IAAY;CAAZ,SAAYC,iBAAc;AAExB,EAAAA,gBAAA,WAAA,IAAA;AAEA,EAAAA,gBAAA,UAAA,IAAA;AACF,GALY,mBAAA,iBAAc,CAAA,EAAA;;;ACU1B,IAAM,SAAsB,mBAAmB,qBAAqB;AAW9D,SAAU,qBACd,UACA,wBAA+C;AAE/C,MACE,0BACA,uBAAuB,SACvB,uBAAuB,MAAM,SAAS,GACtC;AACA,QAAI,uBAAuB,cAAc,MAAM;AAC7C,aAAO,CAAA;;AAGT,QACE,uBAAuB,MAAM,WAAW,KACxC,uBAAuB,MAAM,CAAC,MAAM,4BACpC;AACA,aAAO,CAAC,oBAAoB,4BAA4B,QAAQ,CAAC;;AAGnE,UAAM,gBAA8C,CAAA;AACpD,2BAAuB,MAAM,QAAQ,CAAC,SAAgB;AACpD,YAAM,MAAM,oBAAoB,MAAM,QAAQ;AAC9C,UAAI,QAAQ,QAAW;AACrB,eAAO,QAAQ,iCAAiC;AAChD,eAAO;;AAET,oBAAc,KAAK,GAAG;IACxB,CAAC;AACD,WAAO;;AAET,SAAO,MAAM,4CAA4C;AACzD,SAAO;AACT;AAEA,SAAS,oBAAoB,MAAc,KAAY;AACrD,QAAM,YAAsB,UAAU,IAAI;AAC1C,aAAW,QAAQ,WAAW;AAC5B,QAAI,OAAO,QAAQ,YAAY,QAAQ,QAAQ,QAAQ,KAAK;AAC1D,YAAO,IAAgC,IAAI;WACtC;AACL,YAAM;AACN;;;AAGJ,MAAI,OAAO,QAAQ,YAAY,OAAO,QAAQ,YAAY,OAAO,QAAQ,WAAW;AAClF,WAAO;aACE,QAAQ,yBAAyB;AAC1C,WAAO;aACE,QAAQ,UAAa,KAAK,UAAU,GAAG,MAAM,KAAK,UAAU,uBAAuB,GAAG;AAC/F,WAAO;;AAET,SAAO;AACT;AAKM,SAAU,sBACd,wBAA8C;AAE9C,MAAI,uBAAuB,cAAc,MAAM;AAC7C,WAAO,CAAA;SACF;AACL,WAAO,uBAAuB,MAAM,IAAI,MAAM,uBAAuB;;AAEzE;;;ACvFA,IAAI;AACJ,IAAI,QAAQ,IAAI,WAAW,EAAE;AACd,SAAR,MAAuB;AAE5B,MAAI,CAAC,iBAAiB;AAGpB,sBAAkB,OAAO,WAAW,eAAe,OAAO,mBAAmB,OAAO,gBAAgB,KAAK,MAAM,KAAK,OAAO,aAAa,eAAe,OAAO,SAAS,oBAAoB,cAAc,SAAS,gBAAgB,KAAK,QAAQ;AAE/O,QAAI,CAAC,iBAAiB;AACpB,YAAM,IAAI,MAAM,0GAA0G;AAAA,IAC5H;AAAA,EACF;AAEA,SAAO,gBAAgB,KAAK;AAC9B;;;AClBA,IAAO,gBAAQ;;;ACEf,SAAS,SAASC,OAAM;AACtB,SAAO,OAAOA,UAAS,YAAY,cAAM,KAAKA,KAAI;AACpD;AAEA,IAAO,mBAAQ;;;ACAf,IAAI,YAAY,CAAC;AAEjB,KAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC5B,YAAU,MAAM,IAAI,KAAO,SAAS,EAAE,EAAE,OAAO,CAAC,CAAC;AACnD;AAFS;AAIT,SAAS,UAAU,KAAK;AACtB,MAAI,SAAS,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI;AAGjF,MAAIC,SAAQ,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,GAAG,YAAY;AAMrgB,MAAI,CAAC,iBAASA,KAAI,GAAG;AACnB,UAAM,UAAU,6BAA6B;AAAA,EAC/C;AAEA,SAAOA;AACT;AAEA,IAAO,oBAAQ;;;AC3Bf,SAAS,MAAMC,OAAM;AACnB,MAAI,CAAC,iBAASA,KAAI,GAAG;AACnB,UAAM,UAAU,cAAc;AAAA,EAChC;AAEA,MAAI;AACJ,MAAI,MAAM,IAAI,WAAW,EAAE;AAE3B,MAAI,CAAC,KAAK,IAAI,SAASA,MAAK,MAAM,GAAG,CAAC,GAAG,EAAE,OAAO;AAClD,MAAI,CAAC,IAAI,MAAM,KAAK;AACpB,MAAI,CAAC,IAAI,MAAM,IAAI;AACnB,MAAI,CAAC,IAAI,IAAI;AAEb,MAAI,CAAC,KAAK,IAAI,SAASA,MAAK,MAAM,GAAG,EAAE,GAAG,EAAE,OAAO;AACnD,MAAI,CAAC,IAAI,IAAI;AAEb,MAAI,CAAC,KAAK,IAAI,SAASA,MAAK,MAAM,IAAI,EAAE,GAAG,EAAE,OAAO;AACpD,MAAI,CAAC,IAAI,IAAI;AAEb,MAAI,CAAC,KAAK,IAAI,SAASA,MAAK,MAAM,IAAI,EAAE,GAAG,EAAE,OAAO;AACpD,MAAI,CAAC,IAAI,IAAI;AAGb,MAAI,EAAE,KAAK,IAAI,SAASA,MAAK,MAAM,IAAI,EAAE,GAAG,EAAE,KAAK,gBAAgB;AACnE,MAAI,EAAE,IAAI,IAAI,aAAc;AAC5B,MAAI,EAAE,IAAI,MAAM,KAAK;AACrB,MAAI,EAAE,IAAI,MAAM,KAAK;AACrB,MAAI,EAAE,IAAI,MAAM,IAAI;AACpB,MAAI,EAAE,IAAI,IAAI;AACd,SAAO;AACT;AAEA,IAAO,gBAAQ;;;AC/Bf,SAAS,cAAc,KAAK;AAC1B,QAAM,SAAS,mBAAmB,GAAG,CAAC;AAEtC,MAAI,QAAQ,CAAC;AAEb,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,UAAM,KAAK,IAAI,WAAW,CAAC,CAAC;AAAA,EAC9B;AAEA,SAAO;AACT;AAEO,IAAI,MAAM;AACV,IAAIC,OAAM;AACF,SAAR,YAAkB,MAAM,SAAS,UAAU;AAChD,WAASC,cAAa,OAAO,WAAW,KAAK,QAAQ;AACnD,QAAI,OAAO,UAAU,UAAU;AAC7B,cAAQ,cAAc,KAAK;AAAA,IAC7B;AAEA,QAAI,OAAO,cAAc,UAAU;AACjC,kBAAY,cAAM,SAAS;AAAA,IAC7B;AAEA,QAAI,UAAU,WAAW,IAAI;AAC3B,YAAM,UAAU,kEAAkE;AAAA,IACpF;AAKA,QAAI,QAAQ,IAAI,WAAW,KAAK,MAAM,MAAM;AAC5C,UAAM,IAAI,SAAS;AACnB,UAAM,IAAI,OAAO,UAAU,MAAM;AACjC,YAAQ,SAAS,KAAK;AACtB,UAAM,CAAC,IAAI,MAAM,CAAC,IAAI,KAAO;AAC7B,UAAM,CAAC,IAAI,MAAM,CAAC,IAAI,KAAO;AAE7B,QAAI,KAAK;AACP,eAAS,UAAU;AAEnB,eAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,YAAI,SAAS,CAAC,IAAI,MAAM,CAAC;AAAA,MAC3B;AAEA,aAAO;AAAA,IACT;AAEA,WAAO,kBAAU,KAAK;AAAA,EACxB;AAGA,MAAI;AACF,IAAAA,cAAa,OAAO;AAAA,EACtB,SAAS,KAAK;AAAA,EAAC;AAGf,EAAAA,cAAa,MAAM;AACnB,EAAAA,cAAa,MAAMD;AACnB,SAAOC;AACT;;;AC3CA,SAAS,IAAI,OAAO;AAClB,MAAI,OAAO,UAAU,UAAU;AAC7B,QAAI,MAAM,SAAS,mBAAmB,KAAK,CAAC;AAE5C,YAAQ,IAAI,WAAW,IAAI,MAAM;AAEjC,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,YAAM,CAAC,IAAI,IAAI,WAAW,CAAC;AAAA,IAC7B;AAAA,EACF;AAEA,SAAO,qBAAqB,WAAW,aAAa,KAAK,GAAG,MAAM,SAAS,CAAC,CAAC;AAC/E;AAMA,SAAS,qBAAqB,OAAO;AACnC,MAAI,SAAS,CAAC;AACd,MAAI,WAAW,MAAM,SAAS;AAC9B,MAAI,SAAS;AAEb,WAAS,IAAI,GAAG,IAAI,UAAU,KAAK,GAAG;AACpC,QAAI,IAAI,MAAM,KAAK,CAAC,MAAM,IAAI,KAAK;AACnC,QAAI,MAAM,SAAS,OAAO,OAAO,MAAM,IAAI,EAAI,IAAI,OAAO,OAAO,IAAI,EAAI,GAAG,EAAE;AAC9E,WAAO,KAAK,GAAG;AAAA,EACjB;AAEA,SAAO;AACT;AAMA,SAAS,gBAAgB,cAAc;AACrC,UAAQ,eAAe,OAAO,KAAK,KAAK,KAAK;AAC/C;AAMA,SAAS,WAAW,GAAG,KAAK;AAE1B,IAAE,OAAO,CAAC,KAAK,OAAQ,MAAM;AAC7B,IAAE,gBAAgB,GAAG,IAAI,CAAC,IAAI;AAC9B,MAAI,IAAI;AACR,MAAI,IAAI;AACR,MAAI,IAAI;AACR,MAAI,IAAI;AAER,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK,IAAI;AACrC,QAAI,OAAO;AACX,QAAI,OAAO;AACX,QAAI,OAAO;AACX,QAAI,OAAO;AACX,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,UAAU;AACzC,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,SAAS;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,SAAS;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,MAAM;AAC3C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,WAAW;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,UAAU;AAC1C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,QAAQ;AAC5C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,SAAS;AAC5C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,SAAS;AAC5C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,OAAO;AAC1C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,WAAW;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,SAAS;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,UAAU;AAC1C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,QAAQ;AAC5C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,GAAG,UAAU;AACzC,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,SAAS;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,UAAU;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,QAAQ;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS;AAC9C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,WAAW;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,UAAU;AAC/C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,UAAU;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,WAAW;AAChD,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,SAAS;AAC7C,QAAI,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,UAAU;AAC9C,QAAI,QAAQ,GAAG,IAAI;AACnB,QAAI,QAAQ,GAAG,IAAI;AACnB,QAAI,QAAQ,GAAG,IAAI;AACnB,QAAI,QAAQ,GAAG,IAAI;AAAA,EACrB;AAEA,SAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AACpB;AAOA,SAAS,aAAa,OAAO;AAC3B,MAAI,MAAM,WAAW,GAAG;AACtB,WAAO,CAAC;AAAA,EACV;AAEA,MAAI,UAAU,MAAM,SAAS;AAC7B,MAAI,SAAS,IAAI,YAAY,gBAAgB,OAAO,CAAC;AAErD,WAAS,IAAI,GAAG,IAAI,SAAS,KAAK,GAAG;AACnC,WAAO,KAAK,CAAC,MAAM,MAAM,IAAI,CAAC,IAAI,QAAS,IAAI;AAAA,EACjD;AAEA,SAAO;AACT;AAOA,SAAS,QAAQ,GAAG,GAAG;AACrB,MAAI,OAAO,IAAI,UAAW,IAAI;AAC9B,MAAI,OAAO,KAAK,OAAO,KAAK,OAAO,OAAO;AAC1C,SAAO,OAAO,KAAK,MAAM;AAC3B;AAMA,SAAS,cAAc,KAAK,KAAK;AAC/B,SAAO,OAAO,MAAM,QAAQ,KAAK;AACnC;AAMA,SAAS,OAAO,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAChC,SAAO,QAAQ,cAAc,QAAQ,QAAQ,GAAG,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;AAC3E;AAEA,SAAS,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAClC,SAAO,OAAO,IAAI,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7C;AAEA,SAAS,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAClC,SAAO,OAAO,IAAI,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7C;AAEA,SAAS,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAClC,SAAO,OAAO,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACxC;AAEA,SAAS,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAClC,SAAO,OAAO,KAAK,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3C;AAEA,IAAO,cAAQ;;;ACpNf,IAAI,KAAK,YAAI,MAAM,IAAM,WAAG;;;ACC5B,SAAS,GAAG,SAAS,KAAK,QAAQ;AAChC,YAAU,WAAW,CAAC;AACtB,MAAI,OAAO,QAAQ,WAAW,QAAQ,OAAO,KAAK;AAElD,OAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAO;AAC3B,OAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAO;AAE3B,MAAI,KAAK;AACP,aAAS,UAAU;AAEnB,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,UAAI,SAAS,CAAC,IAAI,KAAK,CAAC;AAAA,IAC1B;AAEA,WAAO;AAAA,EACT;AAEA,SAAO,kBAAU,IAAI;AACvB;AAEA,IAAO,aAAQ;;;ACrBf,SAAS,EAAE,GAAG,GAAG,GAAG,GAAG;AACrB,UAAQ,GAAG;AAAA,IACT,KAAK;AACH,aAAO,IAAI,IAAI,CAAC,IAAI;AAAA,IAEtB,KAAK;AACH,aAAO,IAAI,IAAI;AAAA,IAEjB,KAAK;AACH,aAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAAA,IAE7B,KAAK;AACH,aAAO,IAAI,IAAI;AAAA,EACnB;AACF;AAEA,SAAS,KAAK,GAAG,GAAG;AAClB,SAAO,KAAK,IAAI,MAAM,KAAK;AAC7B;AAEA,SAAS,KAAK,OAAO;AACnB,MAAI,IAAI,CAAC,YAAY,YAAY,YAAY,UAAU;AACvD,MAAI,IAAI,CAAC,YAAY,YAAY,YAAY,WAAY,UAAU;AAEnE,MAAI,OAAO,UAAU,UAAU;AAC7B,QAAI,MAAM,SAAS,mBAAmB,KAAK,CAAC;AAE5C,YAAQ,CAAC;AAET,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,YAAM,KAAK,IAAI,WAAW,CAAC,CAAC;AAAA,IAC9B;AAAA,EACF,WAAW,CAAC,MAAM,QAAQ,KAAK,GAAG;AAEhC,YAAQ,MAAM,UAAU,MAAM,KAAK,KAAK;AAAA,EAC1C;AAEA,QAAM,KAAK,GAAI;AACf,MAAI,IAAI,MAAM,SAAS,IAAI;AAC3B,MAAI,IAAI,KAAK,KAAK,IAAI,EAAE;AACxB,MAAI,IAAI,IAAI,MAAM,CAAC;AAEnB,WAAS,KAAK,GAAG,KAAK,GAAG,EAAE,IAAI;AAC7B,QAAI,MAAM,IAAI,YAAY,EAAE;AAE5B,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,UAAI,CAAC,IAAI,MAAM,KAAK,KAAK,IAAI,CAAC,KAAK,KAAK,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,MAAM,KAAK,KAAK,IAAI,IAAI,CAAC;AAAA,IACxI;AAEA,MAAE,EAAE,IAAI;AAAA,EACV;AAEA,IAAE,IAAI,CAAC,EAAE,EAAE,KAAK,MAAM,SAAS,KAAK,IAAI,KAAK,IAAI,GAAG,EAAE;AACtD,IAAE,IAAI,CAAC,EAAE,EAAE,IAAI,KAAK,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC;AACtC,IAAE,IAAI,CAAC,EAAE,EAAE,KAAK,MAAM,SAAS,KAAK,IAAI;AAExC,WAAS,MAAM,GAAG,MAAM,GAAG,EAAE,KAAK;AAChC,QAAI,IAAI,IAAI,YAAY,EAAE;AAE1B,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,QAAE,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;AAAA,IACjB;AAEA,aAAS,KAAK,IAAI,KAAK,IAAI,EAAE,IAAI;AAC/B,QAAE,EAAE,IAAI,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;AAAA,IACjE;AAEA,QAAI,IAAI,EAAE,CAAC;AACX,QAAI,IAAI,EAAE,CAAC;AACX,QAAI,IAAI,EAAE,CAAC;AACX,QAAI,IAAI,EAAE,CAAC;AACX,QAAI,IAAI,EAAE,CAAC;AAEX,aAAS,MAAM,GAAG,MAAM,IAAI,EAAE,KAAK;AACjC,UAAI,IAAI,KAAK,MAAM,MAAM,EAAE;AAC3B,UAAI,IAAI,KAAK,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,EAAE,GAAG,MAAM;AAC3D,UAAI;AACJ,UAAI;AACJ,UAAI,KAAK,GAAG,EAAE,MAAM;AACpB,UAAI;AACJ,UAAI;AAAA,IACN;AAEA,MAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AACpB,MAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AACpB,MAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AACpB,MAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AACpB,MAAE,CAAC,IAAI,EAAE,CAAC,IAAI,MAAM;AAAA,EACtB;AAEA,SAAO,CAAC,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,KAAK,KAAM,EAAE,CAAC,KAAK,IAAI,KAAM,EAAE,CAAC,IAAI,GAAI;AACjW;AAEA,IAAO,eAAQ;;;AC7Ff,IAAI,KAAK,YAAI,MAAM,IAAM,YAAI;;;ACqBvB,SAAU,mBAAsB,OAAU,KAAY;AAC1D,MAAI,UAAU,QAAW;AACvB,WAAO;;AAET,QAAM,IAAI,MAAM,OAAO,0CAA0C;AACnE;AAMM,SAAU,6BAA6B,OAAc;AACzD,SACE,+BAA+B,KAAK,KACpC,wBAAwB,KAAK,KAC7B,wBAAwB,KAAK;AAEjC;AAMM,SAAU,+BAA+B,OAAc;AAC3D,SAAO,OAAO,UAAU,YAAY,OAAO,UAAU,aAAa,OAAO,UAAU;AACrF;AAMM,SAAU,wBAAwB,OAAc;AACpD,SAAO,UAAU,UAAa,KAAK,UAAU,KAAK,MAAM,KAAK,UAAU,uBAAuB;AAChG;AAMM,SAAU,wBAAwB,OAAc;AACpD,SAAO,UAAU;AACnB;AAKM,SAAU,eAAe,cAAqB;AAClD,SAAO,6BAA6B,YAAY,KAAK,MAAM,QAAQ,YAAY;AACjF;;;AChEO,IAAM,gBAA6B,mBAAmB,UAAU;;;ACOvE,SAAS,gCAAgC,GAAU;AAGjD,SAAO,KAAK,UAAU,CAAC,EACpB,QAAQ,WAAW,SAAS,EAC5B,QAAQ,WAAW,SAAS;AACjC;AAGM,SAAU,aAAa,MAA+C;AAC1E,MAAI,OAAO,SAAS,UAAU;AAC5B,WAAO,gCAAgC,IAAI;;AAE7C,SAAO;AACT;AAkBA,IAAM,kBAAkB;AAKxB,eAAsB,WAAW,EAC/B,eACA,gBACA,MACA,MACA,YACA,cACA,UAAU,CAAA,GACV,qBACA,2BACA,aAAY,GACM;AAClB,QAAM,UAAO,OAAA,OAAA,EACX,CAAC,UAAU,YAAY,kCAAkC,GAAG,GAC5D,CAAC,UAAU,YAAY,yBAAyB,GAAG,KAAI,GACpD,cAAc;AAGnB,MAAI,2BAA2B;AAC7B,YAAQ,UAAU,YAAY,qBAAqB,IAAI;;AAGzD,MAAI,QAAQ,4BAA4B;AACtC,YAAQ,UAAU,YAAY,kCAAkC,IAC9D,QAAQ;;AAEZ,MAAI,QAAQ,mBAAmB;AAC7B,YAAQ,UAAU,YAAY,YAAY,IAAI,QAAQ;aAC7C,QAAQ,cAAc;AAC/B,YAAQ,UAAU,YAAY,YAAY,IAAI,QAAQ;;AAGxD,MAAI,QAAQ,mBAAmB;AAC7B,YAAQ,UAAU,YAAY,iBAAiB,IAC7C,QAAQ,kBAAkB,gBAAgB,QACrC,QAAQ,kBAA+B,KAAK,GAAG,IAC/C,QAAQ;;AAGjB,MAAI,QAAQ,oBAAoB;AAC9B,YAAQ,UAAU,YAAY,kBAAkB,IAC9C,QAAQ,mBAAmB,gBAAgB,QACtC,QAAQ,mBAAgC,KAAK,GAAG,IAChD,QAAQ;;AAGjB,MAAI,QAAQ,WAAW;AACrB,YAAQ,UAAU,YAAY,SAAS,IAAI,QAAQ;;AAGrD,MAAI,QAAQ,iBAAiB;AAC3B,YAAQ,UAAU,YAAY,eAAe,IAAI,QAAQ;;AAG3D,MAAI,QAAQ,cAAc;AACxB,YAAQ,UAAU,YAAY,QAAQ,IAAI,QAAQ;;AAGpD,MAAI,QAAQ,iBAAiB;AAC3B,QAAI,QAAQ,gBAAgB,SAAS,WAAW;AAC9C,cAAQ,UAAU,YAAY,OAAO,IAAI,QAAQ,gBAAgB;WAC5D;AACL,cAAQ,UAAU,YAAY,WAAW,IAAI,QAAQ,gBAAgB;;;AAIzE,MAAI,QAAQ,oBAAoB;AAC9B,YAAQ,UAAU,YAAY,IAAI,IAAI;;AAGxC,MAAI,QAAQ,mBAAmB;AAC7B,YAAQ,UAAU,YAAY,iBAAiB,IAAI,QAAQ;;AAG7D,MAAI,QAAQ,kBAAkB;AAC5B,YAAQ,UAAU,YAAY,gBAAgB,IAAI,QAAQ;;AAG5D,MAAI,QAAQ,eAAe;AACzB,YAAQ,UAAU,YAAY,aAAa,IAAI,QAAQ;;AAGzD,MAAI,QAAQ,mCAAmC,iBAAiB,aAAa,MAAM;AACjF,QAAI,OAAO,QAAQ,oCAAoC,UAAU;AAC/D,cAAQ,UAAU,YAAY,wCAAwC,IACpE,QAAQ,gCAAgC,SAAQ;WAC7C;AACL,oBAAc,MACZ,gDAAgD,QAAQ,+BAA+B,6BAA6B;AAEtH,cAAQ,UAAU,YAAY,wCAAwC,IAAI;;;AAI9E,MAAI,QAAQ,4BAA4B;AACtC,YAAQ,UAAU,YAAY,mBAAmB,IAAI,QAAQ;;AAG/D,MAAI,QAAQ,cAAc;AACxB,YAAQ,UAAU,YAAY,YAAY,IAAI,QAAQ;;AAGxD,MAAI,QAAQ,mBAAmB;AAC7B,YAAQ,UAAU,YAAY,iBAAiB,IAAI,QAAQ;;AAG7D,MAAI,QAAQ,mBAAmB;AAC7B,YAAQ,UAAU,YAAY,iBAAiB,IAAI,QAAQ;;AAG7D,MAAI,QAAQ,sBAAsB;AAChC,YAAQ,UAAU,YAAY,oBAAoB,IAAI,QAAQ;;AAGhE,MAAI,QAAQ,2BAA2B,QAAW;AAChD,YAAQ,UAAU,YAAY,8BAA8B,IAAI;;AAGlE,MAAI,QAAQ,mBAAmB;AAC7B,YAAQ,UAAU,YAAY,iBAAiB,IAAI;;AAGrD,MAAI,iBAAiB,UAAa,CAAC,QAAQ,UAAU,YAAY,YAAY,GAAG;AAC9E,YAAQ,UAAU,YAAY,YAAY,IAAI,+BAA+B,YAAY;;AAG3F,MAAI,cAAc,OAAO,cAAc,eAAe;AACpD,YAAQ,UAAU,YAAY,KAAK,KAAI,oBAAI,KAAI,GAAG,YAAW;;AAG/D,MAAI,SAAS,WAAW,QAAQ,SAAS,WAAW,KAAK;AACvD,QAAI,CAAC,QAAQ,UAAU,YAAY,WAAW,GAAG;AAC/C,cAAQ,UAAU,YAAY,WAAW,IAAI;;;AAIjD,MAAI,CAAC,QAAQ,UAAU,YAAY,MAAM,GAAG;AAC1C,YAAQ,UAAU,YAAY,MAAM,IAAI;;AAG1C,MAAI,wBAAwB,QAAW;AACrC,YAAQ,UAAU,YAAY,mBAAmB,IAAI;;AAGvD,MAAI,QAAQ,qBAAqB;AAC/B,YAAQ,UAAU,YAAY,mBAAmB,IAAI,QAAQ;;AAG/D,MAAI,QAAQ,yBAAyB;AACnC,YAAQ,UAAU,YAAY,uBAAuB,IAAI;;AAG3D,MAAI,QAAQ,sBAAsB;AAChC,YAAQ,UAAU,YAAY,oBAAoB,IAAI,QAAQ;;AAGhE,MACE,cAAc,OACd,cAAc,kBACd,cAAc,iBACd,cAAc,gBACd;AACA,UAAM,uBAAuB,eAAe,MAAM,MAAM,YAAY,cAAc,OAAO;;AAE3F,SAAO;AACT;;;ACtMA,IAAM,OAAO;AAmCP,SAAU,aAAa,KAAaC,MAAa,KAAW;AAChE,QAAM,sBAAsB,IAAI,cAAc,GAAG,KAAK;AACtD,QAAM,cAAc,IAAI,cAAcA,IAAG,IAAI;AAC7C,SAAO,uBAAuB;AAChC;AAQO,IAAM,oBAAoB;EAC/B,QAAQ;EACR,QAAQ;EACR,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;;AAgHH,SAAU,kBACd,gBACA,YACA,UAA0B,CAAA,GAAE;AAK5B,sBAAoB,gBAAgB,OAAO;AAE3C,MAAI;AACJ,MAAI,OAAO,UAAU,eAAe,KAAK,gBAAgB,cAAc,GAAG;AACxE,QAAI,eAAe,iBAAiB,QAAW;AAC7C,qBAAe,WAAW,MAAM,IAAI,MAAM,uBAAuB;WAC5D;AACL,qBAAe,8BAA8B,eAAe,YAAY;;SAErE;AACL,YAAQ,eAAe,eAAe;MACpC,KAAK,kBAAkB;MACvB,KAAK,kBAAkB;MACvB,KAAK,kBAAkB;AACrB,uBAAe,mBACb,qBAAqB,eAAe,cAAc,UAAU,GAC5D,2CAA2C;AAE7C;MACF,KAAK,kBAAkB;MACvB,KAAK,kBAAkB;MACvB,KAAK,kBAAkB;AACrB,uBAAe,WAAW,MAAM,IAAI,MAAM,uBAAuB;;;AAGvE,SAAO;IACL,WAAW,OAAA,OAAA,OAAA,OAAA,CAAA,GAAK,cAAc,GAAA,EAAE,cAAc,KAAK,UAAU,YAAY,EAAC,CAAA;IAC1E;;AAEJ;AAOA,SAAS,oBAAoB,gBAAgC,SAAuB;AAClF,MACE,eAAe,kBAAkB,kBAAkB,UACnD,eAAe,kBAAkB,kBAAkB,QACnD;AACA,SACG,eAAe,aAAa,OAAO,UAAa,eAAe,aAAa,OAAO,OACpF,CAAC,QAAQ,8BACT;AACA,qBAAe,aAAa,KAAK,KAAI;;;AAG3C;AAWM,SAAU,0BAA0B,eAAoB;AAC5D,OAAI,kBAAa,QAAb,kBAAa,SAAA,SAAb,cAAe,gBAAe,UAAa,cAAc,WAAW,SAAS;AAAG,WAAO,CAAA;AAC3F,MAAI,mBAAmB,2BAA2B,cAAc,WAAW,CAAC,CAAC;AAC7E,MAAI,eAAY,OAAA,OAAA,OAAA,OAAA,CAAA,GACX,aAAa,GAAA,EAChB,YAAY,CAAC,cAAc,WAAW,CAAC,CAAC,GACxC,SAAS,CAAC,cAAc,QAAQ,CAAC,CAAC,EAAC,CAAA;AAErC,QAAM,mBAA4B,CAAA;AAClC,mBAAiB,KAAK,YAAY;AAElC,WAAS,QAAQ,GAAG,QAAQ,cAAc,WAAW,QAAQ,SAAS;AACpE,UAAM,YAAY,cAAc,WAAW,KAAK;AAChD,UAAM,gBAAgB,2BAA2B,SAAS;AAC1D,QAAI,mBAAmB,gBAAgB,UAAU,sCAAsC;AACrF,qBAAY,OAAA,OAAA,OAAA,OAAA,CAAA,GACP,aAAa,GAAA,EAChB,YAAY,CAAA,GACZ,SAAS,CAAA,EAAE,CAAA;AAEb,uBAAiB,KAAK,YAAY;AAClC,yBAAmB;;AAErB,iBAAa,WAAW,KAAK,SAAS;AACtC,iBAAa,QAAQ,KAAK,cAAc,QAAQ,KAAK,CAAC;AACtD,wBAAoB;;AAEtB,SAAO;AACT;AAMM,SAAU,2BAA2B,KAAY;AACrD,SAAO,IAAI,YAAW,EAAG,OAAO,aAAa,GAAU,CAAC,EAAE;AAC5D;AAEM,SAAU,uBACd,WACA,UAA0B,CAAA,GAAE;AAE5B,MACE,UAAU,kBAAkB,kBAAkB,UAC9C,UAAU,kBAAkB,kBAAkB,QAC9C;AACA,SACG,UAAU,aAAa,OAAO,UAAa,UAAU,aAAa,OAAO,OAC1E,CAAC,QAAQ,8BACT;AACA,gBAAU,aAAa,KAAK,KAAI;;;AAGpC,SAAO;AACT;;;AC3SO,IAAM,qBAAqB;EAChC,KAAK;EACL,SAAS;EACT,QAAQ;EACR,KAAK;EACL,MAAM;;;;AC+CF,IAAO,gBAAP,cAA6B,MAAK;;;;AClDlC,IAAO,mBAAP,MAAuB;EAC3B,YACkB,UACA,SACA,YACA,aACA,WAAyB;AAJzB,SAAA,WAAA;AACA,SAAA,UAAA;AACA,SAAA,aAAA;AACA,SAAA,cAAA;AACA,SAAA,YAAA;EACf;EACH,IAAW,gBAAa;AACtB,WAAO,OAAO,KAAK,QAAQ,UAAU,YAAY,aAAa,CAAC,KAAK;EACtE;EACA,IAAW,aAAU;AACnB,WAAO,KAAK,QAAQ,UAAU,YAAY,UAAU;EACtD;EACA,IAAW,OAAI;AACb,WAAO,KAAK,QAAQ,UAAU,YAAY,IAAI;EAChD;;;;ACpBF,IAAa,oBAAb,MAAa,mBAAiB;EAC5B,YAA4B,eAAqB;AAArB,SAAA,gBAAA;EAAwB;;;;EAK7C,OAAO,wBAA2C;AACvD,QAAI,gBAAgB,KAAK;AACzB,eAAW,qBAAqB,wBAAwB;AACtD,UAAI,qBAAqB,MAAM;AAC7B,cAAM,IAAI,MAAM,iDAAiD;;AAGnE,uBAAiB,kBAAkB;;AAGrC,WAAO,IAAI,mBAAkB,aAAa;EAC5C;EAIO,OAAO,mBAAmB,wBAA2C;AAC1E,QAAI,0BAA0B,MAAM;AAClC,YAAM,IAAI,MAAM,qDAAqD;;AAGvE,WAAO,KAAK,KAAK,IAAI,GAAG,sBAAsB;EAChD;;AARuB,kBAAA,OAAO,IAAI,kBAAkB,CAAC;;;ACpBvD,IAAA,gCAAe;;EAEb,wBAAwB;EACxB,uBAAuB;EACvB,qBAAqB;EACrB,oBAAoB;EACpB,eAAe;EACf,uBAAuB;EACvB,6BAA6B;;EAG7B,sBAAsB;EACtB,0BAA0B;EAC1B,2BAA2B;EAC3B,2BAA2B;;EAG3B,qBAAqB;EACrB,sBAAsB;EACtB,qBAAqB;EACrB,uBAAuB;;EAGvB,kBAAkB;EAClB,+BAA+B;EAC/B,sCAAsC;;EAGtC,4BAA4B;EAC5B,2BAA2B;EAC3B,yBAAyB;EACzB,wBAAwB;EACxB,sBAAsB;EACtB,6BAA6B;;EAG7B,2BAA2B;EAC3B,sBAAsB;EACtB,0BAA0B;EAC1B,2BAA2B;EAC3B,2BAA2B;;EAG3B,sBAAsB;EACtB,qBAAqB;EACrB,sBAAsB;EACtB,qBAAqB;;EAGrB,2BAA2B;EAC3B,wBAAwB;EACxB,+BAA+B;EAC/B,sCAAsC;;EAGtC,4BAA4B;EAC5B,aAAa;EACb,mBAAmB;EACnB,0BAA0B;EAC1B,uBAAuB;;;;ACrDzB,IAAM,sBAAsB;AAE5B,IAAM,sBAAsB,IAAM;AAGlC,IAAM,iBAAiB,sBAAsB;AAE7C,IAAM,iBAAiB,IAAM;AAG7B,IAAM,iBAAiB,iBAAiB;AAExC,IAAM,iBAAiB,IAAM;AAG7B,IAAM,eAAe,iBAAiB;AAEtC,IAAM,eAAe,IAAM;AAG3B,IAAM,cAAc,eAAe;AAEnC,IAAM,cAAc,IAAM;AAG1B,IAAM,kBAAkB;AAExB,IAAM,kBAAkB,kBAAkB;AAE1C,IAAM,gBAAgB,kBAAkB;AAExC,IAAM,eAAe,gBAAgB;AAGrC,IAAM,kBAAkB,OAAO,mBAAmB;AAElD,IAAM,kBAAkB,OAAO,mBAAmB;AAYlD,IAAa,WAAb,MAAa,UAAQ;EAEnB,YAAY,MAAc,OAAe,SAAiB,SAAiB,cAAoB;AAE7F,QAAI,CAAC,OAAO,UAAU,IAAI,GAAG;AAC3B,YAAM,IAAI,MAAM,wBAAwB;;AAG1C,QAAI,CAAC,OAAO,UAAU,KAAK,GAAG;AAC5B,YAAM,IAAI,MAAM,yBAAyB;;AAG3C,QAAI,CAAC,OAAO,UAAU,OAAO,GAAG;AAC9B,YAAM,IAAI,MAAM,2BAA2B;;AAG7C,QAAI,CAAC,OAAO,UAAU,OAAO,GAAG;AAC9B,YAAM,IAAI,MAAM,2BAA2B;;AAG7C,QAAI,CAAC,OAAO,UAAU,YAAY,GAAG;AACnC,YAAM,IAAI,MAAM,gCAAgC;;AAGlD,UAAM,qBACH,OAAO,OAAO,KAAK,QAAQ,OAAO,UAAU,KAAK,WAAW,MAAO;AACtE,QAAI,oBAAoB,mBAAmB,oBAAoB,iBAAiB;AAC9E,YAAM,IAAI,MAAM,gEAAgE;;AAGlF,SAAK,SAAS,oBAAoB;EACpC;;;;;EAMO,IAAI,IAAY;AACrB,QAAI,UAAS,qBAAqB,KAAK,QAAQ,GAAG,MAAM,GAAG;AACzD,YAAM,IAAI,MAAM,+CAA+C;;AAGjE,UAAM,UAAU,KAAK,SAAS,GAAG;AACjC,WAAO,UAAS,UAAU,OAAO;EACnC;;;;;EAMO,SAAS,IAAY;AAC1B,QAAI,UAAS,yBAAyB,KAAK,QAAQ,GAAG,MAAM,GAAG;AAC7D,YAAM,IAAI,MAAM,qDAAqD;;AAGvE,UAAM,UAAU,KAAK,SAAS,GAAG;AACjC,WAAO,UAAS,UAAU,OAAO;EACnC;;;;;;EAOO,UAAU,OAAe;AAC9B,QAAI,SAAS,MAAM;AACjB,aAAO;;AAGT,QAAI,CAAC,UAAS,WAAW,KAAK,GAAG;AAC/B,YAAM,IAAI,MAAM,oCAAoC;;AAGtD,WAAO,UAAS,QAAQ,MAAM,KAAK;EACrC;;;;EAKO,WAAQ;AACb,WAAO,UAAS,UAAU,KAAK,UAAU,IAAI,KAAK,SAAS,CAAC,KAAK,MAAM;EACzE;;;;;EAMO,OAAO,OAAe;AAC3B,QAAI,UAAS,WAAW,KAAK,GAAG;AAC9B,aAAO,KAAK,WAAW,MAAM;;AAG/B,WAAO;EACT;;;;;EAMO,SAAM;AACX,WAAO,UAAS,UAAU,CAAC,KAAK,MAAM;EACxC;EAEO,OAAI;AACT,WAAO,KAAK,MAAM,KAAK,SAAS,WAAW;EAC7C;EAEO,QAAK;AACV,WAAO,KAAK,MAAM,KAAK,SAAS,YAAY;EAC9C;EAEO,eAAY;AACjB,WAAO,KAAK,MAAM,KAAK,SAAS,mBAAmB;EACrD;EAEO,UAAO;AACZ,WAAO,KAAK,MAAM,KAAK,SAAS,cAAc;EAChD;EAEO,QAAK;AACV,WAAO,KAAK;EACd;EAEO,YAAS;AACd,WAAO,KAAK,SAAS;EACvB;EACO,aAAU;AACf,WAAO,KAAK,SAAS;EACvB;EAEO,oBAAiB;AACtB,WAAO,KAAK,SAAS;EACvB;EAEO,eAAY;AACjB,WAAO,KAAK,SAAS;EACvB;EAEO,eAAY;AACjB,WAAO,KAAK,SAAS;EACvB;EAEO,OAAO,UAAU,OAAa;AACnC,UAAM,WAAW,IAAI,UAAS,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3C,aAAS,SAAS;AAClB,WAAO;EACT;EAMO,OAAO,WAAW,UAAkB;AACzC,WAAO,SAAS;EAClB;EAEO,OAAO,qBAAqB,GAAW,GAAS;AACrD,UAAM,IAAI,IAAI;AACd,WAAO,MAAM,IAAI,KAAK,MAAM,IAAI;EAClC;EAEO,OAAO,yBAAyB,GAAW,GAAS;AACzD,UAAM,IAAI,IAAI;AACd,WAAO,MAAM,IAAI,KAAK,MAAM,IAAI;EAClC;EAEO,OAAO,QAAQ,IAAc,IAAY;AAC9C,QAAI,GAAG,SAAS,GAAG,QAAQ;AACzB,aAAO;;AAET,QAAI,GAAG,SAAS,GAAG,QAAQ;AACzB,aAAO;;AAET,WAAO;EACT;EAEO,OAAO,SAAS,OAAe,OAAa;AACjD,QAAI,MAAM,KAAK,GAAG;AAChB,YAAM,IAAI,MAAM,wBAAwB;;AAG1C,UAAM,eAAe,QAAQ;AAC7B,QAAI,eAAe,mBAAmB,eAAe,iBAAiB;AACpE,YAAM,IAAI,MAAM,mBAAmB;;AAGrC,WAAO,UAAS,UAAU,KAAK,MAAM,eAAe,mBAAmB,CAAC;EAC1E;EAEO,OAAO,iBAAiB,OAAa;AAC1C,WAAO,UAAS,SAAS,OAAO,CAAC;EACnC;EAEO,OAAO,YAAY,OAAa;AACrC,WAAO,UAAS,SAAS,OAAO,eAAe;EACjD;EAEO,OAAO,YAAY,OAAa;AACrC,WAAO,UAAS,SAAS,OAAO,eAAe;EACjD;EAEO,OAAO,UAAU,OAAa;AACnC,WAAO,UAAS,SAAS,OAAO,aAAa;EAC/C;EAEO,OAAO,SAAS,OAAa;AAClC,WAAO,UAAS,SAAS,OAAO,YAAY;EAC9C;;AA3DuB,SAAA,OAAO,IAAI,SAAS,GAAG,GAAG,GAAG,GAAG,CAAC;AACjC,SAAA,WAAW,SAAS,UAAU,OAAO,gBAAgB;AACrD,SAAA,WAAW,SAAS,UAAU,OAAO,gBAAgB;;;ACvMxE,SAAU,qBAAqB,iBAAuB;AAG1D,MAAI,mBAAmB,MAAM;AAC3B,UAAM,IAAI,MAAM,sCAAsC;;AAGxD,QAAM,UAAkC,CAAA;AAExC,QAAM,mBAAmB,gBAAgB,MAAM,GAAG;AAClD,aAAW,aAAa,kBAAkB;AACxC,UAAM,oBAAoB,UAAU,MAAM,GAAG;AAE7C,QAAI,kBAAkB,WAAW,GAAG;AAClC,YAAM,IAAI,MAAM,uCAAuC;;AAGzD,UAAM,eAAe,kBAAkB,CAAC;AACxC,UAAM,iBAAiB,WAAW,kBAAkB,CAAC,CAAC;AAEtD,YAAQ,YAAY,IAAI;;AAG1B,SAAO;AACT;AAKM,SAAU,oBACd,SACA,KAAW;AAEX,MAAI,OAAO,SAAS;AAClB,WAAO,SAAS,iBAAiB,QAAQ,GAAG,CAAC;;AAG/C,SAAO,SAAS;AAClB;;;ACvCA,IAAa,wBAAb,MAAa,uBAAqB;EAChC,YACkB,sBACA,sBACA,uBACA,uBAA+B;AAH/B,SAAA,uBAAA;AACA,SAAA,uBAAA;AACA,SAAA,wBAAA;AACA,SAAA,wBAAA;EACf;;;;EAKI,OAAO,4BAAmD;AAC/D,QAAI,uBAAuB,KAAK;AAChC,QAAI,uBAAuB,KAAK;AAChC,QAAI,wBAAwB,KAAK;AACjC,QAAI,wBAAwB,KAAK;AAEjC,eAAW,yBAAyB,4BAA4B;AAC9D,UAAI,yBAAyB,MAAM;AACjC,cAAM,IAAI,MAAM,0DAA0D;;AAG5E,6BAAuB,qBAAqB,IAAI,sBAAsB,oBAAoB;AAC1F,6BAAuB,qBAAqB,IAAI,sBAAsB,oBAAoB;AAC1F,8BAAwB,sBAAsB,IAC5C,sBAAsB,qBAAqB;AAE7C,8BAAwB,sBAAsB,IAC5C,sBAAsB,qBAAqB;;AAI/C,WAAO,IAAI,uBACT,sBACA,sBACA,uBACA,qBAAqB;EAEzB;;;;EAKO,oBAAiB;AACtB,WACE,GACE,8BAAsB,oBACxB,IAAI,KAAK,qBAAqB,kBAAiB,CAAE,IAE/C,8BAAsB,wBACxB,IAAI,KAAK,qBAAqB,kBAAiB,CAAE,IAE/C,8BAAsB,yBACxB,IAAI,KAAK,sBAAsB,kBAAiB,CAAE,IAEhD,8BAAsB,yBACxB,IAAI,KAAK,sBAAsB,kBAAiB,CAAE;EAEtD;;;;;EAaO,OAAO,gBACZ,4BAAmD;AAEnD,QAAI,8BAA8B,MAAM;AACtC,YAAM,IAAI,MAAM,yDAAyD;;AAG3E,WAAO,uBAAsB,KAAK,IAAI,GAAG,0BAA0B;EACrE;;;;EAKO,OAAO,0BAA0B,iBAAuB;AAC7D,UAAM,UAAU,qBAAqB,eAAe;AAEpD,WAAO,IAAI,uBACT,oBAAoB,SAAS,8BAAsB,oBAAoB,GACvE,oBAAoB,SAAS,8BAAsB,wBAAwB,GAC3E,oBAAoB,SAAS,8BAAsB,yBAAyB,GAC5E,oBAAoB,SAAS,8BAAsB,yBAAyB,CAAC;EAEjF;;AAjCuB,sBAAA,OAAO,IAAI,sBAChC,SAAS,MACT,SAAS,MACT,SAAS,MACT,SAAS,IAAI;;;AChEjB,IAAa,wBAAb,MAAa,uBAAqB;EAChC,YACkB,0BACA,6BACA,kCAA0C;AAF1C,SAAA,2BAAA;AACA,SAAA,8BAAA;AACA,SAAA,mCAAA;EACf;;;;EAKI,OAAO,4BAAmD;AAC/D,QAAI,2BAA2B,KAAK;AACpC,QAAI,8BAA8B,KAAK;AACvC,QAAI,mCAAmC,KAAK;AAE5C,eAAW,yBAAyB,4BAA4B;AAC9D,UAAI,yBAAyB,MAAM;AACjC,cAAM,IAAI,MAAM,qDAAqD;;AAGvE,iCAA2B,yBAAyB,IAClD,sBAAsB,wBAAwB;AAEhD,oCAA8B,4BAA4B,IACxD,sBAAsB,2BAA2B;AAEnD,yCAAmC,iCAAiC,IAClE,sBAAsB,gCAAgC;;AAI1D,WAAO,IAAI,uBACT,0BACA,6BACA,gCAAgC;EAEpC;;;;EAKO,oBAAiB;AACtB,WACE,GACE,8BAAsB,6BACxB,IAAI,KAAK,4BAA4B,kBAAiB,CAAE,IAEtD,8BAAsB,oCACxB,IAAI,KAAK,iCAAiC,kBAAiB,CAAE;EAEjE;;;;;EAYO,OAAO,gBACZ,4BAAmD;AAEnD,QAAI,8BAA8B,MAAM;AACtC,YAAM,IAAI,MAAM,yDAAyD;;AAG3E,WAAO,uBAAsB,KAAK,IAAI,GAAG,0BAA0B;EACrE;;;;EAKO,OAAO,0BAA0B,iBAAuB;AAC7D,UAAM,UAAU,qBAAqB,eAAe;AAEpD,UAAM,kBAAkB,oBAAoB,SAAS,8BAAsB,mBAAmB;AAC9F,UAAM,kBAAkB,oBAAoB,SAAS,8BAAsB,mBAAmB;AAC9F,UAAM,mBAAmB,oBACvB,SACA,8BAAsB,oBAAoB;AAE5C,UAAM,oBAAoB,oBACxB,SACA,8BAAsB,qBAAqB;AAG7C,QAAI,2BAA2B,SAAS;AACxC,+BAA2B,yBAAyB,IAAI,eAAe;AACvE,+BAA2B,yBAAyB,SAAS,eAAe;AAC5E,+BAA2B,yBAAyB,SAAS,gBAAgB;AAC7E,+BAA2B,yBAAyB,SAAS,iBAAiB;AAC9E,WAAO,IAAI,uBACT,0BACA,oBAAoB,SAAS,8BAAsB,6BAA6B,GAChF,oBAAoB,SAAS,8BAAsB,oCAAoC,CAAC;EAE5F;;AA/CuB,sBAAA,OAAO,IAAI,sBAChC,SAAS,MACT,SAAS,MACT,SAAS,IAAI;;;ACpDjB,IAAa,eAAb,MAAa,cAAY;EACvB,YACkB,wBACA,uBACA,qBACA,oBACA,uBACA,yBACA,uBACA,iBACA,kBACA,iBACA,uBACA,mBACA,mBAAoC;AAZpC,SAAA,yBAAA;AACA,SAAA,wBAAA;AACA,SAAA,sBAAA;AACA,SAAA,qBAAA;AACA,SAAA,wBAAA;AACA,SAAA,0BAAA;AACA,SAAA,wBAAA;AACA,SAAA,kBAAA;AACA,SAAA,mBAAA;AACA,SAAA,kBAAA;AACA,SAAA,wBAAA;AACA,SAAA,oBAAA;AACA,SAAA,oBAAA;EACf;;;;;EAMH,IAAW,gBAAa;AACtB,WAAO,KAAK,2BAA2B,IACnC,IACA,KAAK,wBAAwB,KAAK;EACxC;;;;EAKO,IAAI,mBAAiC;AAC1C,QAAI,yBAAyB;AAC7B,QAAI,wBAAwB;AAC5B,QAAI,sBAAsB;AAC1B,QAAI,qBAAqB;AACzB,QAAI,wBAAwB;AAC5B,QAAI,0BAA0B,SAAS;AACvC,UAAM,6BAA6B,CAAA;AACnC,QAAI,kBAAkB,SAAS;AAC/B,QAAI,mBAAmB,SAAS;AAChC,QAAI,kBAAkB,SAAS;AAC/B,UAAM,6BAA6B,CAAA;AACnC,QAAI,oBAAoB,SAAS;AACjC,UAAM,8BAA8B,CAAA;AAEpC,sBAAkB,KAAK,IAAI;AAE3B,eAAW,gBAAgB,mBAAmB;AAC5C,UAAI,cAAc;AAChB,kCAA0B,aAAa;AACvC,iCAAyB,aAAa;AACtC,+BAAuB,aAAa;AACpC,8BAAsB,aAAa;AACnC,iCAAyB,aAAa;AACtC,kCAA0B,wBAAwB,IAAI,aAAa,uBAAuB;AAC1F,mCAA2B,KAAK,aAAa,qBAAqB;AAClE,0BAAkB,gBAAgB,IAAI,aAAa,eAAe;AAClE,2BAAmB,iBAAiB,IAAI,aAAa,gBAAgB;AACrE,0BAAkB,gBAAgB,IAAI,aAAa,eAAe;AAClE,mCAA2B,KAAK,aAAa,qBAAqB;AAClE,4BAAoB,kBAAkB,IAAI,aAAa,iBAAiB;AACxE,oCAA4B,KAAK,aAAa,iBAAiB;;;AAInE,WAAO,IAAI,cACT,wBACA,uBACA,qBACA,oBACA,uBACA,yBACA,sBAAsB,gBAAgB,0BAA0B,GAChE,iBACA,kBACA,iBACA,sBAAsB,gBAAgB,0BAA0B,GAChE,mBACA,kBAAkB,gBAAgB,GAAG,2BAA2B,CAAC;EAErE;;;;;EAMO,oBAAiB;AACtB,WACE,8BAAsB,yBACtB,MACA,KAAK,yBACL,MACA,8BAAsB,wBACtB,MACA,KAAK,wBACL,MACA,8BAAsB,sBACtB,MACA,KAAK,sBACL,MACA,8BAAsB,qBACtB,MACA,KAAK,qBACL,MACA,8BAAsB,gBACtB,MACA,KAAK,gBACL,MACA,8BAAsB,8BACtB,MACA,KAAK,wBAAwB,kBAAiB,IAC9C,MACA,KAAK,sBAAsB,kBAAiB,IAC5C,MACA,8BAAsB,sBACtB,MACA,KAAK,gBAAgB,kBAAiB,IACtC,MACA,8BAAsB,uBACtB,MACA,KAAK,iBAAiB,kBAAiB,IACvC,MACA,8BAAsB,sBACtB,MACA,KAAK,gBAAgB,kBAAiB,IACtC,MACA,KAAK,sBAAsB,kBAAiB,IAC5C,MACA,8BAAsB,wBACtB,MACA,KAAK,kBAAkB,kBAAiB;EAE5C;;;;EAqBO,OAAO,gBAAgB,mBAAiC;AAC7D,QAAI,CAAC,mBAAmB;AACtB,YAAM,IAAI,MAAM,gDAAgD;;AAGlE,WAAO,cAAa,KAAK,IAAI,iBAAiB;EAChD;;;;EAKO,OAAO,0BACZ,iBACA,mBAAqC;AAErC,UAAM,UAAU,qBAAqB,eAAe;AAEpD,UAAM,gBAAgB,QAAQ,8BAAsB,aAAa,KAAK;AACtE,UAAM,yBAAyB,QAAQ,8BAAsB,sBAAsB,KAAK;AACxF,UAAM,gBAAgB,gBAAgB;AACtC,UAAM,sBAAsB,QAAQ,8BAAsB,mBAAmB,KAAK;AAClF,UAAM,qBAAqB,QAAQ,8BAAsB,kBAAkB,KAAK;AAChF,UAAM,wBAAwB,QAAQ,8BAAsB,qBAAqB,KAAK;AACtF,UAAM,0BAA0B,oBAC9B,SACA,8BAAsB,2BAA2B;AAEnD,WAAO,IAAI,cACT,wBACA,uBACA,qBACA,oBACA,eACA,yBACA,sBAAsB,0BAA0B,eAAe,GAC/D,oBAAoB,SAAS,8BAAsB,mBAAmB,GACtE,oBAAoB,SAAS,8BAAsB,oBAAoB,GACvE,oBAAoB,SAAS,8BAAsB,mBAAmB,GACtE,sBAAsB,0BAA0B,eAAe,GAC/D,oBAAoB,SAAS,8BAAsB,qBAAqB,GACxE,qBAAqB,kBAAkB,IAAI;EAE/C;;AA7DuB,aAAA,OAAO,IAAI,aAChC,GACA,GACA,GACA,GACA,GACA,SAAS,MACT,sBAAsB,MACtB,SAAS,MACT,SAAS,MACT,SAAS,MACT,sBAAsB,MACtB,SAAS,MACT,kBAAkB,IAAI;;;ACjJpB,SAAU,sBAAsB,SAA+B;AACnE,MAAI,OAAO,YAAY,UAAU;AAC/B,WAAO;aACE,OAAO,YAAY,UAAU;AACtC,WAAO,WAAW,OAAO;;AAG3B,MAAI,SAAS;AACX,UAAM,KAAK,QAAQ,UAAU,YAAY,aAAa;AACtD,QAAI,IAAI;AACN,aAAO,WAAW,EAAY;WACzB;AACL,aAAO;;SAEJ;AACL,WAAO;;AAEX;AAKM,SAAU,mBAAgB;AAC9B,QAAM,UAAyB,CAAA;AAC/B,UAAQ,UAAU,YAAY,aAAa,IAAI;AAC/C,UAAQ,UAAU,YAAY,YAAY,IAAI,CAAA;AAC9C,SAAO;AACT;AAMM,SAAU,aAAa,SAAwB,mBAAgC;AACnF,MAAI,QAAQ,UAAU,YAAY,aAAa,MAAM,QAAW;AAC9D,YAAQ,UAAU,YAAY,aAAa,IAAI;;AAGjD,MAAI,QAAQ,UAAU,YAAY,YAAY,MAAM,QAAW;AAC7D,YAAQ,UAAU,YAAY,YAAY,IAAI,aAAa;;AAG7D,MAAI,CAAC,mBAAmB;AACtB;;AAGF,UAAQ,UAAU,YAAY,aAAa,KAAK,sBAAsB,iBAAiB;AACvF,MAAI,kBAAkB,UAAU,YAAY,iBAAiB,GAAG;AAC9D,YAAQ,UAAU,YAAY,iBAAiB,IAC7C,kBAAkB,UAAU,YAAY,iBAAiB;;AAG7D,MAAI,UAAU,YAAY,gBAAgB,mBAAmB;AAC3D,UAAM,qBAAqB,QAAQ,UAAU,YAAY,YAAY;AACrE,UAAM,+BAA+B,kBAAkB,UAAU,YAAY,YAAY;AAEzF,eAAW,eAAe,8BAA8B;AACtD,UAAI,mBAAmB,WAAW,GAAG;AACnC,cAAM,uBAAuB,mBAAmB,WAAW,EAAE,IAAI;UAC/D,6BAA6B,WAAW;SACzC;AACD,2BAAmB,WAAW,IAAI;aAC7B;AACL,2BAAmB,WAAW,IAAI,6BAA6B,WAAW;;;;AAKhF,MAAI,UAAU,YAAY,oBAAoB,mBAAmB;AAC/D,YAAQ,UAAU,YAAY,gBAAgB,IAC5C,kBAAkB,UAAU,YAAY,gBAAgB;;AAE9D;;;AC9EA,IAAa,uBAAb,MAAa,sBAAoB;EAG/B,YACkB,uBACA,wBACA,0BACA,2BAA4D;AAH5D,SAAA,wBAAA;AACA,SAAA,yBAAA;AACA,SAAA,2BAAA;AACA,SAAA,4BAAA;EACf;EAEI,OAAO,mCACZ,iBACA,KAAsC;AAEtC,QAAI,mBAAmB,MAAM;AAC3B,UAAI,SAAS,sBAAqB;AAClC,aAAO;;AAGT,WAAO,sBAAqB,6BAC1B,OAAO,KAAK,iBAAiB,QAAQ,EAAE,SAAQ,GAC/C,GAAG;EAEP;EAEO,OAAO,6BACZ,iBACA,KAAsC;AAEtC,QAAI,mBAAmB,MAAM;AAC3B,UAAI,SAAS,sBAAqB;AAClC,aAAO;;AAGT,QAAI;AACF,UAAI,SAAS,KAAK,MAAM,eAAe,KAAK,sBAAqB;AACjE,aAAO;aACA,OAAO;AACd,UAAI,SAAS,sBAAqB;AAClC,aAAO;;EAEX;EAEO,OAAO,iBACZ,iBACA,iBAAwB;;AAExB,UAAM,SAA4C,EAAE,QAAQ,OAAS;AAErE,QAAI,iBAAiB;AACnB,4BAAqB,mCAAmC,iBAAiB,MAAM;WAC1E;AACL,4BAAqB,6BAA6B,iBAAiB,MAAM;;AAG3E,YAAOC,MAAA,OAAO,YAAM,QAAAA,QAAA,SAAAA,MAAI,sBAAqB;EAC/C;;AAvDuB,qBAAA,QAAQ,IAAI,qBAAqB,CAAA,GAAI,CAAA,GAAI,CAAA,GAAI,CAAA,CAAE;;;ACHxE,IAAA,oBAAe;EACb,sBAAsB;EACtB,uBAAuB;EACvB,wBAAwB;EACxB,0BAA0B;EAC1B,2BAA2B;EAC3B,iBAAiB;EACjB,kBAAkB;EAClB,2BAA2B;;;;ACHvB,IAAO,oBAAP,MAAwB;EACrB,kBAAkB,sBAA0C;AACjE,QAAI,SAAS;AACb,aAAS,KAAK,gCAAgC,MAAM;AACpD,aAAS,KAAK,0BAA0B,QAAQ,oBAAoB;AACpE,aAAS,KAAK,+BAA+B,MAAM;AACnD,WAAO;EACT;EAEU,gCAAgC,QAAc;AACtD,aAAS,KAAK,sBAAsB,MAAM;AAC1C,aAAS,KAAK,qBAAqB,QAAQ,kBAAU,sBAAsB,CAAC;AAC5E,WAAO;EACT;EAEU,0BACR,QACA,sBAA0C;AAE1C,aAAS,KAAK,qBAAqB,QAAQ,kBAAU,uBAAuB,CAAC;AAE7E,eAAW,0BAA0B,qBAAqB,uBAAuB;AAC/E,eAAS,KAAK,kCAAkC,QAAQ,sBAAsB;;AAEhF,aAAS,KAAK,qBAAqB,QAAQ,kBAAU,wBAAwB,CAAC;AAE9E,eAAW,0BAA0B,qBAAqB,wBAAwB;AAChF,eAAS,KAAK,kCAAkC,QAAQ,sBAAsB;;AAGhF,aAAS,KAAK,qBAAqB,QAAQ,kBAAU,0BAA0B,CAAC;AAEhF,eAAW,0BAA0B,qBAAqB,0BAA0B;AAClF,eAAS,KAAK,qCAAqC,QAAQ,sBAAsB;;AAGnF,aAAS,KAAK,qBAAqB,QAAQ,kBAAU,2BAA2B,CAAC;AAEjF,eAAW,0BAA0B,qBAAqB,2BAA2B;AACnF,eAAS,KAAK,qCAAqC,QAAQ,sBAAsB;;AAEnF,WAAO;EACT;EAEU,+BAA+B,QAAc;AACrD,WAAO;EACT;EAEQ,kCACN,QACA,wBAAoD;AAEpD,aAAS,KAAK,qBACZ,QACA,GAAG,kBAAU,eAAe,KAAK,uBAAuB,SAAS,IACjE,CAAC;AAEH,aAAS,KAAK,qBACZ,QACA,GAAG,kBAAU,gBAAgB,KAAK,uBAAuB,gBAAgB,IACzE,CAAC;AAEH,aAAS,KAAK,qBAAqB,QAAQ,kBAAU,2BAA2B,CAAC;AACjF,WAAO;EACT;EAEQ,qCACN,QACA,wBAAuD;AAEvD,aAAS,KAAK,qBACZ,QACA,GAAG,kBAAU,eAAe,KAAK,uBAAuB,WAAW,KAAK,IAAI,CAAC,IAC7E,CAAC;AAEH,aAAS,KAAK,qBACZ,QACA,GAAG,kBAAU,gBAAgB,KAAK,uBAAuB,gBAAgB,IACzE,CAAC;AAEH,aAAS,KAAK,qBAAqB,QAAQ,kBAAU,2BAA2B,CAAC;AACjF,WAAO;EACT;EAEQ,sBAAsB,QAAc;AAC1C,WAAO,KAAK,qBAAqB,QAAQ,IAAI,CAAC;EAChD;EAEQ,qBAAqB,QAAgB,aAAqB,aAAmB;AACnF,UAAM,SAAS;AACf,UAAM,SAAS,GAAG,OAAO,OAAO,WAAW,CAAC,GAAG,WAAW;;AAC1D,cAAU;AACV,WAAO;EACT;;;;AC9FI,IAAO,eAAP,MAAmB;EACvB,YACkB,WACC,SACD,gBACA,aAA8B;AAH9B,SAAA,YAAA;AACC,SAAA,UAAA;AACD,SAAA,iBAAA;AACA,SAAA,cAAA;EACf;EAEH,IAAW,eAAY;AACrB,WAAO,KAAK;EACd;EACA,IAAW,oBAAiB;AAC1B,WAAO,KAAK,QAAQ,UAAU,YAAY,YAAY;EACxD;EACA,IAAW,eAAY;AACrB,WAAO,KAAK,QAAQ,UAAU,YAAY,YAAY;EACxD;EACA,IAAW,gBAAa;AACtB,WAAO,sBAAsB,KAAK,OAAO;EAC3C;EACA,IAAW,aAAU;AACnB,WAAO,KAAK,QAAQ,UAAU,YAAY,UAAU;EACtD;EACA,IAAW,eAAY;AACrB,UAAM,SAAS,IAAI,kBAAiB;AACpC,UAAM,uBAAuB,qBAAqB,iBAChD,KAAK,QAAQ,UAAU,YAAY,gBAAgB,GACnD,IAAI;AAEN,WAAO,OAAO,kBAAkB,oBAAoB;EACtD;;;;AChCK,IAAM,mBAAmB;AAE1B,IAAO,eAAP,cAA4B,MAAK;EAErC,YAAY,UAAkB,iBAAe;AAC3C,UAAM,OAAO;AAFC,SAAA,OAAe;AAG7B,SAAK,OAAO;EACd;;;;ACHI,SAAU,0BAAuB;AACrC,SAAO,KAAK,IAAG;AACjB;;;ACUM,IAAO,0BAAP,MAA8B;EAOlC,cAAA;AALQ,SAAA,iBAAmD,CAAA;AACnD,SAAA,kBAA8C,CAAA;AAC9C,SAAA,qBAA0C,CAAA;AAC3C,SAAA,6BAA0C,oBAAI,IAAG;AAGtD,SAAK,0BAA0B,wBAAuB;EACxD;EAEO,oBACL,oBACA,oBAA0B;AAE1B,UAAM,UAA0C;MAC9C,eAAe;MACf,kBAAkB,mBAAmB;MACrC,cAAc,mBAAmB;MACjC,YAAY,mBAAmB;MAC/B,eAAe,mBAAmB;MAClC,6BAA6B,mBAAmB;MAChD,8BAA8B,mBAAmB;MACjD,YAAY,mBAAmB;MAC/B,eAAe,mBAAmB;MAClC,cAAc,mBAAmB;;AAEnC,SAAK,eAAe,KAAK,OAAO;EAClC;EAEO,kBAAkB,oBAAqC;AAC5D,SAAK,mBAAmB,KAAK,kBAAkB;EACjD;;;;;EAMO,iBACL,kBACA,cAAgC;AAGhC,qBAAiB,2BAA2B,QAAQ,CAAC,aACnD,KAAK,2BAA2B,IAAI,QAAQ,CAAC;AAI/C,qBAAiB,mBAAmB,QAAQ,CAAC,YAC3C,KAAK,gBAAgB,KAAK;MACxB,YAAY,QAAQ;MACpB,6BAA6B,QAAQ;MACrC,8BAA8B,QAAQ;MACtC,kBAAkB,QAAQ;MAC1B,eAAe,QAAQ;MACvB,cAAc,QAAQ;MACtB,cAAc,QAAQ;MACtB,cAAc;KACf,CAAC;AAIJ,qBAAiB,gBAAgB,QAAQ,CAAC,WAAW,KAAK,gBAAgB,KAAK,MAAM,CAAC;AAGtF,qBAAiB,eAAe,QAAQ,CAAC,WAAW,KAAK,eAAe,KAAK,MAAM,CAAC;EACtF;EAEO,mBACL,iBAAyB,wBAAuB,GAAE;AAElD,WAAO;MACL,yBAAyB,KAAK;MAC9B,qBAAqB,iBAAiB,KAAK;MAC3C,kCAAkC,KAAK,6BAA4B;MACnE,mCAAmC,KAAK,8BAA6B;MACrE,4BAA4B,CAAC,GAAG,KAAK,2BAA2B,OAAM,CAAE;MACxE,qBAAqB;QACnB,iBAAiB,CAAC,GAAG,KAAK,eAAe;;MAE3C,kBAAkB;QAChB,gBAAgB,CAAC,GAAG,KAAK,cAAc;;MAEzC,mBAAmB,KAAK;;EAE5B;EAEO,+BAA4B;AACjC,QAAI,4BAA4B;AAChC,SAAK,mBAAmB,QACtB,CAAC,QAAS,6BAA6B,IAAI,2BAA4B;AAEzE,SAAK,gBAAgB,QACnB,CAAC,QAAS,6BAA6B,IAAI,2BAA4B;AAEzE,SAAK,eAAe,QAClB,CAAC,QAAS,6BAA6B,IAAI,2BAA4B;AAEzE,WAAO;EACT;EAEO,gCAA6B;AAClC,QAAI,6BAA6B;AACjC,SAAK,mBAAmB,QACtB,CAAC,QAAS,8BAA8B,IAAI,4BAA6B;AAE3E,SAAK,gBAAgB,QACnB,CAAC,QAAS,8BAA8B,IAAI,4BAA6B;AAE3E,SAAK,eAAe,QAClB,CAAC,QAAS,8BAA8B,IAAI,4BAA6B;AAE3E,WAAO;EACT;EAEO,yBAAyB,UAAgB;AAC9C,SAAK,2BAA2B,IAAI,QAAQ;EAC9C;;;;AC7GI,IAAO,oBAAP,MAAwB;;;;EAO5B,YACE,6BACA,gBACA,cAAqC;AAErC,SAAK,8BAA8B;AACnC,SAAK,iBAAiB;AACtB,SAAK,eAAe;EACtB;;AAwHF,IAAY;CAAZ,SAAYC,qBAAkB;AAC5B,EAAAA,oBAAA,yBAAA,IAAA;AACA,EAAAA,oBAAA,uBAAA,IAAA;AACA,EAAAA,oBAAA,iBAAA,IAAA;AACA,EAAAA,oBAAA,gBAAA,IAAA;AACA,EAAAA,oBAAA,iBAAA,IAAA;AACF,GANY,uBAAA,qBAAkB,CAAA,EAAA;AA8CxB,SAAU,YAAY,MAA4B;AACtD,MAAI,KAAK;AAAQ,WAAO,YAAY,KAAK,MAAM;;AAC1C,WAAO;AACd;;;AC/MA,IAAY;CAAZ,SAAYC,0BAAuB;AACjC,EAAAA,yBAAA,MAAA,IAAA;AACA,EAAAA,yBAAA,OAAA,IAAA;AACA,EAAAA,yBAAA,aAAA,IAAA;AACF,GAJY,4BAAA,0BAAuB,CAAA,EAAA;;;ACE5B,IAAM,+BAA+B;EAC1C,wBAAwB;EACxB,wBAAwB;EACxB,wBAAwB;;AAMpB,SAAU,aACd,cACA,uBAA8C;AAE9C,QAAM,gCAAgC,6BAA6B,QAAQ,YAAY;AACvF,QAAM,+BAA+B,6BAA6B,QAAQ,qBAAqB;AAC/F,MAAI,kCAAkC,MAAM,iCAAiC,IAAI;AAC/E,WAAO;;AAET,SAAO,iCAAiC;AAC1C;;;ACDM,IAAO,yBAAP,MAAO,wBAAsB;;;;EAcjC,YACE,iBACA,MACA,QACA,OAAqC,CAAA,GACrC,mBAA2B,wBAAuB,GAClD,MAA+B,IAAI,wBAAuB,GAAE;AAE5D,SAAK,KAAK,WAAE;AACZ,SAAK,WAAW;AAChB,SAAK,mBAAmB;AACxB,SAAK,OAAO;AACZ,SAAK,WAAW,CAAA;AAChB,SAAK,eAAe;AACpB,SAAK,SAAS;AACd,SAAK,gBAAgB;AACrB,SAAK,kBAAkB;EACzB;;;;EAKQ,OAAO,KAAW;AACxB,QAAI,CAAC,KAAK,KAAK,KAAK;AAClB,WAAK,KAAK,MAAM,CAAA;;AAElB,SAAK,KAAK,IAAI,KAAK,GAAG;EACxB;;;;EAKQ,gBAAgB,SAAqC;AAC3D,WAAO;EACT;;;;;EAMO,gBAAgB,iBAAyB,wBAAuB,GAAE;AACvE,SAAK,eAAe,iBAAiB,KAAK;EAC5C;;;;EAKO,4BACL,kBACA,gBACA,kBACA,WACA,KAAW;AAEX,UAAM,kBAAkB,iBAAiB,QAAQ,OAAM;AACvD,UAAM,iBAAiB;MACrB,YAAY,gBAAgB,UAAU,YAAY,UAAU;MAC5D;MACA,cAAc,wBAAuB,IAAK;MAC1C,YAAY,iBAAiB;MAC7B,eAAe;MACf,6BAA6B,8BAA8B,cAAc;MACzE,8BAA8B,+BAA+B,gBAAgB;MAC7E,eAAe,eAAe;MAC9B,cAAc,eAAe;MAC7B,qBAAqB,eAAe;;AAEtC,QAAI,cAAmB;MACrB,eAAe,eAAe;MAC9B,cAAc,eAAe;MAC7B,6BAA6B,eAAe;;AAG9C,QAAI,aAAa,wBAAwB,aAAa,KAAK,eAAe,GAAG;AAC3E,oBAAW,OAAA,OAAA,OAAA,OAAA,CAAA,GACN,WAAW,GAAA,EACd,SAAS,KAAK,gBAAgB,eAAe,OAAO,GACpD,aAAa,eAAe,MAC5B,cAAc,iBAAiB,YAC/B,IAAQ,CAAA;;AAGZ,SAAK,QAAQ;MACX,6BAA6B,eAAe;MAC5C,8BAA8B,eAAe;MAC7C,kBAAkB,eAAe;MACjC,cAAc,eAAe;MAC7B;KACD;AACD,SAAK,cAAc,kBAAkB,cAAc;EACrD;;;;EAKO,wBACL,kBACA,gBACA,oBACA,YACA,eACA,iBAA8B;AAE9B,SAAK,QAAQ,EAAE,gBAAgB,KAAI,CAAE;AACrC,UAAM,8BAA8B,8BAA8B,cAAc;AAChF,SAAK,cAAc,oBACjB;MACE,YAAY,gBAAgB,UAAU,YAAY,UAAU;MAC5D;MACA,cAAc,wBAAuB,IAAK;MAC1C;MACA,eAAe;MACf;MACA,8BAA8B;MAC9B,eAAe,eAAe;MAC9B,cAAc,eAAe;OAE/B,kBAAkB;AAEpB,QAAI,cAAmB;MACrB,eAAe,eAAe;MAC9B,cAAc,eAAe;MAC7B;;AAEF,QAAI,aAAa,wBAAwB,aAAa,KAAK,eAAe,GAAG;AAC3E,oBAAW,OAAA,OAAA,OAAA,OAAA,CAAA,GACN,WAAW,GAAA,EACd,SAAS,KAAK,gBAAgB,eAAe,OAAO,GACpD,aAAa,eAAe,MAC5B,KAAK,WAAW,eAAe,UAAU,eAAe,IAAI,EAAC,CAAA;;AAGjE,SAAK,QAAQ;MACX,gBAAgB;MAChB;KACD;EACH;;;;EAKO,yBAAyB,UAAgB;AAC9C,SAAK,QAAQ,EAAE,kBAAkB,SAAQ,CAAE;AAC3C,SAAK,cAAc,yBAAyB,QAAQ;EACtD;;;;EAKO,QACL,MACA,KACA,QAAiC,KAAK,iBAAe;AAErD,QAAI,UAAU,wBAAwB,MAAM;AAC1C,WAAK,OAAI,OAAA,OAAA,OAAA,OAAA,CAAA,GAAQ,KAAK,IAAI,GAAK,IAAI;AACnC,UAAI,KAAK;AACP,aAAK,OAAO,GAAG;;;EAGrB;;;;;;EAOO,aACL,OACA,OACA,cAAiC;AAEjC,SAAK,cAAc,iBAAiB,MAAM,eAAe,YAAY;AACrE,QAAI,aAAa,OAAO,KAAK,eAAe,GAAG;AAC7C,YAAM,SAAS;AACf,WAAK,SAAS,KAAK,KAAK;;AAE1B,WAAO;EACT;;;;EAKO,oBACL,MACA,OACA,OAAqC,CAAA,GAAE;AAEvC,QAAI,aAAa,OAAO,KAAK,eAAe,GAAG;AAC7C,YAAM,QAAQ,IAAI,wBAChB,KAAK,iBACL,MACA,MACA,MACA,wBAAuB,GACvB,KAAK,aAAa;AAEpB,WAAK,SAAS,KAAK,KAAK;AACxB,aAAO;WACF;AACL,aAAO;;EAEX;;;;EAKO,kBAAkB,WAAoB,OAA8B;;AACzE,QAAI,aAAa,OAAO,KAAK,eAAe,GAAG;AAC7C,YAAM,iBAAgBC,MAAA,KAAK,KAAK,sBAAgB,QAAAA,QAAA,SAAAA,MAAI;AACpD,UAAI,MAAM,QAAQ,SAAS,GAAG;AAC5B,aAAK,KAAK,mBAAmB,gBAAgB,UAAU;;;EAG7D;;;;;EAMO,mBAAgB;AACrB,WAAO;MACL,IAAI,KAAK;MACT,UAAU,KAAK;MACf,UAAU,KAAK,SAAS,IAAI,CAAC,UAAU,MAAM,iBAAgB,CAAE;MAC/D,MAAM,KAAK;MACX,kBAAkB,KAAK;MACvB,cAAc,KAAK;;EAEvB;;;;;EAMO,aAAa,wBAA8C;AAChE,UAAM,WAAW,YAAY,IAAI;AACjC,UAAM,gBAAgB,aAAa,wBAAwB,OAAO,KAAK,eAAe,IAClF,SAAS,iBAAgB,IACzB;AACJ,UAAM,eAAe,aAAa,wBAAwB,OAAO,KAAK,eAAe,IACjF,yBACA;AACJ,UAAM,mBAAmB,IAAI,kBAC3B,KAAK,cAAc,mBAAkB,GACrC,eACA,YAAY;AAEd,WAAO;EACT;;AA0CF,IAAY;CAAZ,SAAYC,qBAAkB;AAC5B,EAAAA,oBAAA,qBAAA,IAAA;AACA,EAAAA,oBAAA,uBAAA,IAAA;AACA,EAAAA,oBAAA,cAAA,IAAA;AACA,EAAAA,oBAAA,eAAA,IAAA;AACA,EAAAA,oBAAA,qBAAA,IAAA;AACA,EAAAA,oBAAA,oBAAA,IAAA;AACA,EAAAA,oBAAA,mBAAA,IAAA;AACA,EAAAA,oBAAA,2BAAA,IAAA;AACA,EAAAA,oBAAA,kBAAA,IAAA;AACF,GAVY,uBAAA,qBAAkB,CAAA,EAAA;AAY9B,SAAS,+BAA+B,UAA0B;;AAChE,WAAOD,MAAA,aAAQ,QAAR,aAAQ,SAAA,SAAR,SAAU,gBAAU,QAAAA,QAAA,SAAA,SAAAA,IAAE,WAAU;AACzC;AAEA,SAAS,8BAA8B,gBAA8B;AACnE,SAAO,eAAe,OAAO,eAAe,KAAK,SAAS;AAC5D;;;AC3UM,SAAU,4BAAyB;AACvC,SAAO,IAAI,kBACT;IACE,qBAAqB;IACrB,yBAAyB,wBAAuB;IAChD,kCAAkC;IAClC,mCAAmC;IACnC,4BAA4B,CAAA;IAC5B,kBAAkB;MAChB,gBAAgB,CAAA;;IAElB,qBAAqB;MACnB,iBAAiB,CAAA;;IAEnB,mBAAmB,CAAA;KAErB;IACE,IAAI,WAAE;IACN,UAAU,mBAAmB;IAC7B,UAAU,CAAA;IACV,MAAM,CAAA;IACN,kBAAkB,wBAAuB;IACzC,cAAc;GACf;AAEL;AAaA,eAAsB,kBAGpB,UACA,MACA,MACA,OAAqC,CAAA,GAAE;AAEvC,QAAM,YAAY,KAAK,oBAAoB,MAAM,wBAAwB,OAAO,IAAI;AACpF,MAAI;AACF,UAAM,WAAW,MAAM,SAAS,SAAS;AACzC,cAAU,gBAAe;AACzB,WAAO;WACA,GAAQ;AACf,cAAU,QAAQ;MAChB,SAAS;KACV;AACD,cAAU,gBAAe;AACzB,UAAM;;AAEV;AAWA,eAAsB,wBAGpB,UACA,MACA,MAAwB;AAExB,QAAM,gCAAgC,IAAI,uBACxC,KAAK,iBACL,mBAAmB,uBACnB,IAAI;AAEN,MAAI;AACF,UAAM,WAAgB,MAAM,SAAS,6BAA6B;AAClE,SAAK,aAAa,+BAA+B,wBAAwB,OAAO,IAAI;AACpF,WAAO;WACA,GAAG;AACV,SAAK,aAAa,+BAA+B,wBAAwB,OAAO,IAAI;AACpF,UAAM;;AAEV;AAsBA,eAAsB,gBAGpB,UACA,eACA,OAA2B,mBAAmB,qBAAmB;AAEjE,QAAM,iBAAiB,IAAI,uBAAuB,cAAc,iBAAiB,MAAM,IAAI;AAC3F,MAAI;AACF,UAAM,WAAgB,MAAM,SAAS,cAAc;AACnD,mBAAe,gBAAe;AAC9B,UAAM,cAAc,eAAe,aAAa,cAAc,gBAAe,CAAE;AAC/E,QAAI,OAAO,aAAa,YAAY,aAAa,MAAM;AACpD,eAAiB,cAAc;;AAElC,kBAAc,kBAAkB,WAAW;AAC3C,WAAO;WACA,GAAQ;AACf,mBAAe,gBAAe;AAC9B,mBAAe,QAAQ;MACrB,SAAS;KACV;AACD,UAAM,cAAc,eAAe,aAAa,cAAc,gBAAe,CAAE;AAC/E,MAAE,cAAc;AAChB,kBAAc,kBAAkB,WAAW;AAC3C,UAAM;;AAEV;;;AChJA,IAAME,UAAsB,mBAAmB,eAAe;AAQ9D,IAAK;CAAL,SAAKC,SAAM;AACT,EAAAA,QAAA,OAAA,IAAA;AACA,EAAAA,QAAA,YAAA,IAAA;AACA,EAAAA,QAAA,OAAA,IAAA;AACF,GAJK,WAAA,SAAM,CAAA,EAAA;AAOX,IAAa,+BAAb,MAAa,8BAA4B;EAQvC,IAAW,eAAY;AACrB,WAAO,KAAK;EACd;;;;;;;;;;;;EAcA,YACE,SACA,gBAA+D;AAE/D,SAAK,YAAY,CAAA;AACjB,SAAK,eAAe;AACpB,SAAK,wBAAwB;AAC7B,SAAK,iBAAiB,MAAM,QAAQ,cAAc,IAAI,iBAAiB,CAAC,cAAc;AACtF,SAAK,UAAU,WAAW,CAAA;AAC1B,SAAK,oBAAoB,KAAK,QAAQ,qBAAqB,KAAK,QAAQ,gBAAgB;AACxF,SAAK,QAAQ,8BAA6B,OAAO;EACnD;;;;EAKO,MAAM,SAAS,gBAAsC;AAC1D,MAAE,KAAK;AACP,UAAM,WAAW,MAAM,KAAK,QAAQ,cAAc;AAClD,WAAO;EACT;;;;EAKO,MAAM,QAAQ,gBAAsC;AACzD,QAAI,KAAK,eAAe,KAAK,UAAU,QAAQ;AAC7C,aAAO;QACL,QAAQ,KAAK,UAAU,KAAK,YAAY;QACxC,SAAS,iBAAgB;;;AAI7B,QAAI,KAAK,cAAa,GAAI;AACxB,YAAM,EAAE,QAAQ,WAAW,QAAO,IAAK,MAAM,KAAK,UAAU,cAAc;AAC1E,WAAK,YAAY;AACjB,UAAI,KAAK,UAAU,WAAW,GAAG;AAC/B,YAAI,CAAC,KAAK,qBAAqB,KAAK,yBAAyB,KAAK,eAAe,QAAQ;AACvF,eAAK,QAAQ,8BAA6B,OAAO;AACjD,iBAAO,EAAE,QAAQ,QAAW,QAAO;eAC9B;AACL,iBAAO,KAAK,QAAQ,cAAc;;;AAGtC,aAAO,EAAE,QAAQ,KAAK,UAAU,KAAK,YAAY,GAAG,QAAO;WACtD;AACL,WAAK,QAAQ,8BAA6B,OAAO;AACjD,aAAO;QACL,QAAQ;QACR,SAAS,iBAAgB;;;EAG/B;;;;;;;EAQO,iBAAc;AACnB,WACE,KAAK,UAAU,8BAA6B,OAAO,SACnD,KAAK,sBAAsB,UAC3B,KAAK,eAAe,KAAK,UAAU,SAAS,KAC5C,KAAK,wBAAwB,KAAK,eAAe;EAErD;;;;EAKO,MAAM,UAAU,gBAAsC;AAC3D,WAAO,kBACL,OAAO,wBAA+C;AACpD,UAAI,KAAK,yBAAyB,KAAK,eAAe,QAAQ;AAC5D,eAAO;UACL,SAAS,iBAAgB;UACzB,QAAQ;;;AAKZ,YAAM,uBAAuB,KAAK,QAAQ,qBAAqB,KAAK,QAAQ;AAC5E,WAAK,QAAQ,oBAAoB,KAAK;AAGtC,UAAI,KAAK,yBAAyB,KAAK,eAAe,QAAQ;AAC5D,eAAO;UACL,SAAS,iBAAgB;UACzB,QAAQ;;;AAIZ,UAAI;AACJ,UAAI;AACJ,UAAI;AACF,YAAI;AACJ,YAAI,KAAK,sBAAsB,QAAW;AACxC,UAAAD,QAAO,QAAQ,gBAAgB;AAC/B,cAAI,KAAK;AACT,eAAK,oBAAoB;eACpB;AACL,UAAAA,QAAO,QAAQ,mBAAmB;AAClC,cAAI,KAAK,eAAe,KAAK,qBAAqB,EAAE,qBAAqB,KAAK,OAAO;;AAEvF,cAAM,WAAW,MAAM;AACvB,oBAAY,SAAS;AACrB,4BAAoB,kBAAkB,WAAW,wBAAwB,WAAW;AACpF,0BAAkB,SAAS;AAC3B,aAAK,oBAAoB,gBAAgB,UAAU,YAAY,YAAY;AAC3E,YAAI,CAAC,KAAK,mBAAmB;AAC3B,YAAE,KAAK;;AAGT,YAAI,KAAK,WAAW,KAAK,QAAQ,gBAAgB,MAAM;AACrD,gBAAM,gBAAgB,KAAK,eAAe,KAAK,qBAAqB;AACpE,eAAK,oBAAoB,gBACrB,cAAc,qBAAmB,OAAA,OAAA,OAAA,OAAA,CAAA,GAC5B,KAAK,OAAO,GAAA,EACf,mBAAmB,KAAK,kBAAiB,CAAA,CAAA,IAE3C;;eAEC,KAAU;AACjB,aAAK,QAAQ,8BAA6B,OAAO;AAGjD,cAAM;;AAGR,WAAK,QAAQ,8BAA6B,OAAO;AACjD,WAAK,eAAe;AACpB,WAAK,QAAQ,oBAAoB;AACjC,WAAK,QAAQ,eAAe;AAG5B,UAAI,UAAU,YAAY,gBAAgB,iBAAiB;AACzD,cAAM,kBAAkB,gBAAgB,UAAU,YAAY,YAAY;AAC1E,YAAI,eAAe,aAAa,0BAA0B,eAAe;AAGzE,YAAI,UAAU,YAAY,iBAAiB,iBAAiB;AAC1D,gBAAM,gBAAgB,OAAO,gBAAgB,UAAU,YAAY,aAAa,CAAC,KAAK;AACtF,yBAAe,IAAI,aACjB,aAAa,wBACb,aAAa,uBACb,aAAa,qBACb,aAAa,oBACb,aAAa,uBACb,aAAa,yBACb,aAAa,uBACb,aAAa,iBACb,aAAa,kBACb,aAAa,iBACb,aAAa,uBACb,aAAa,mBACb,IAAI,kBAAkB,aAAa,CAAC;;AAMxC,wBAAgB,UAAU,YAAY,YAAY,IAAI,CAAA;AACtD,wBAAgB,UAAU,YAAY,YAAY,EAAE,GAAG,IAAI;;AAG7D,aAAO,EAAE,QAAQ,WAAW,SAAS,gBAAe;IACtD,GACA,gBACA,mBAAmB,oBACnB;MACE,uBAAuB;KACxB;EAEL;EAEQ,gBAAa;AACnB,UAAM,MACJ,KAAK,UAAU,8BAA6B,OAAO,SAClD,KAAK,qBAAqB,KAAK,UAAU,8BAA6B,OAAO,cAC7E,KAAK,wBAAwB,KAAK,eAAe,UAChD,KAAK,UAAU,8BAA6B,OAAO;AACvD,WAAO;EACT;;AA/MwB,6BAAA,SAAS;;;ACjB7B,IAAO,oBAAP,MAAwB;;;;EAMrB,UAAU,OAA6B;AAC5C,QAAI,SAAS,QAAQ,MAAM,OAAO,MAAM;AACtC;;AAEF,QAAI,KAAK,OAAO,MAAM;AACpB,WAAK,MAAM;AACX,WAAK,QAAQ;;AAEf,SAAK,OAAO,MAAM;AAClB,SAAK,SAAS,MAAM;EACtB;;;;EAKO,YAAS;AACd,QAAI,KAAK,OAAO,QAAQ,KAAK,SAAS,GAAG;AACvC,aAAO;;AAET,WAAO,KAAK,MAAM,KAAK;EACzB;;;;AChCI,IAAO,kBAAP,MAAsB;;;;;EAM1B,cAAA;AACE,SAAK,QAAQ;EACf;;;;EAIO,UAAU,OAAa;AAC5B,SAAK,SAAS;EAChB;;;;EAKO,YAAS;AACd,WAAO,KAAK;EACd;;;;ACpBF,IAAM,oBAEF,OAAO,OAAO;EAChB,SAAS;IACP,KAAK;;EAEP,WAAW;IACT,KAAK;;EAEP,SAAS;IACP,KAAK;IACL,UAAU,CAAC,GAAY,MAAc;AACnC,aAAO,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI;IACnC;;EAEF,QAAQ;IACN,KAAK;IACL,UAAU,CAAC,GAAW,MAAa;AACjC,aAAO,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI;IACnC;;EAEF,QAAQ;IACN,KAAK;IACL,UAAU,CAAC,GAAW,MAAa;AACjC,aAAO,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI;IACnC;;CAEH;AAGK,IAAO,oCAAP,MAAwC;EAC5C,YAAmB,WAAmB;AAAnB,SAAA,YAAA;EAAsB;;EAEjC,yCACN,UACA,UAA0B;AAE1B,UAAM,IAAI,SAAS,0BAAyB,EAAG,cAAc;AAC7D,UAAM,IAAI,SAAS,0BAAyB,EAAG,cAAc;AAC7D,WAAO,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI;EACnC;EAEO,QAAQ,UAA4B,UAA0B;AAEnE,QAAI,SAAS,SAAQ,GAAI;AACvB,aAAO;;AAET,QAAI,SAAS,SAAQ,GAAI;AACvB,aAAO;;AAGT,UAAM,mBAAmB,KAAK,gBAAgB,SAAS,kBAAiB,EAAG,CAAC,CAAC;AAC7E,UAAM,mBAAmB,KAAK,gBAAgB,SAAS,kBAAiB,EAAG,CAAC,CAAC;AAI7E,SAAK,qBAAqB,kBAAkB,gBAAgB;AAG5D,aAAS,IAAI,GAAG,IAAI,iBAAiB,QAAQ,KAAK;AAEhD,YAAM,UAAU,KAAK,mBAAmB,iBAAiB,CAAC,GAAG,iBAAiB,CAAC,CAAC;AAChF,UAAI,YAAY,GAAG;AACjB,YAAI,KAAK,UAAU,CAAC,MAAM,aAAa;AACrC,iBAAO;mBACE,KAAK,UAAU,CAAC,MAAM,cAAc;AAC7C,iBAAO,CAAC;;;;AAKd,WAAO,KAAK,yCAAyC,UAAU,QAAQ;EACzE;;EAGO,aAAa,OAAgB,OAAe,OAAgB,OAAa;AAC9E,QAAI,UAAU,YAAY,UAAU,UAAU;AAC5C,YAAM,IAAI,MAAM,iCAAiC;;AAEnD,UAAM,WAAW,kBAAkB,KAAK,EAAE;AAC1C,UAAM,WAAW,kBAAkB,KAAK,EAAE;AAC1C,UAAM,UAAU,WAAW;AAE3B,QAAI,YAAY,GAAG;AAEjB,aAAO;;AAIT,QACE,aAAa,kBAAkB,WAAW,EAAE,OAC5C,aAAa,kBAAkB,SAAS,EAAE,KAC1C;AAEA,aAAO;;AAGT,UAAM,WAAW,kBAAkB,KAAK,EAAE;AAC1C,QAAI,OAAO,aAAa,aAAa;AACnC,YAAM,IAAI,MAAM,qCAAqC;;AAGvD,WAAO,SAAS,OAAO,KAAK;EAC9B;EAEQ,mBAAmB,cAAmB,cAAiB;AAC7D,UAAM,QAAQ,KAAK,QAAQ,YAAY;AACvC,UAAM,QAAQ,KAAK,QAAQ,YAAY;AACvC,WAAO,KAAK,aAAa,aAAa,MAAM,GAAG,OAAO,aAAa,MAAM,GAAG,KAAK;EACnF;EAEQ,qBAAqB,MAAgB,MAAc;AACzD,QAAI,KAAK,WAAW,KAAK,QAAQ;AAC/B,YAAM,IAAI,MAAM,YAAY,KAAK,MAAM,aAAa,KAAK,MAAM,GAAG;;AAEpE,QAAI,KAAK,WAAW,KAAK,UAAU,QAAQ;AACzC,YAAM,IAAI,MAAM,6DAA6D;;AAG/E,aAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC9C,YAAM,QAAQ,KAAK,QAAQ,KAAK,CAAC,CAAC;AAClC,YAAM,QAAQ,KAAK,QAAQ,KAAK,CAAC,CAAC;AAClC,UAAI,UAAU,OAAO;AACnB,cAAM,IAAI,MACR,YAAY,KAAK,aAAa,KAAK,4JAA4J;;;EAIvM;EAEQ,QACN,aAAgB;AAYhB,QAAI,gBAAgB,UAAa,YAAY,SAAS,QAAW;AAC/D,aAAO;;AAET,UAAM,OAAO,OAAO,YAAY;AAChC,QAAI,kBAAkB,IAAI,MAAM,QAAW;AACzC,YAAM,IAAI,MAAM,uBAAuB,IAAI,EAAE;;AAE/C,WAAO;EACT;EAEQ,gBAAgB,KAAQ;AAE9B,WAAO,IAAI,cAAc;EAC3B;;;;ACvJI,IAAO,gBAAP,MAAoB;;;;;EAOxB,cAAA;AACE,SAAK,QAAQ;AACb,SAAK,WAAW,IAAI,kCAAkC,CAAC,WAAW,CAAC;EACrE;;;;EAIO,UAAU,OAAyB;AACxC,QAAI,KAAK,UAAU,QAAW;AAC5B,WAAK,QAAQ,MAAM;eAEnB,KAAK,SAAS,aAAa,MAAM,KAAK,OAAO,MAAM,KAAK,KAAK,OAAO,OAAO,KAAK,KAAK,IAAI,GACzF;AACA,WAAK,QAAQ,MAAM;;EAEvB;;;;EAKO,YAAS;AACd,WAAO,KAAK;EACd;;;;AC7BI,IAAO,gBAAP,MAAoB;;;;;EAOxB,cAAA;AACE,SAAK,QAAQ;AACb,SAAK,WAAW,IAAI,kCAAkC,CAAC,WAAW,CAAC;EACrE;;;;EAIO,UAAU,OAAyB;AACxC,QAAI,KAAK,UAAU,QAAW;AAE5B,WAAK,QAAQ,MAAM;WACd;AACL,YAAM,YAAY,MAAM,QAAQ,OAAO,YAAY,OAAO,MAAM;AAChE,YAAM,WAAW,KAAK,UAAU,OAAO,YAAY,OAAO,KAAK;AAC/D,UAAI,KAAK,SAAS,aAAa,MAAM,KAAK,WAAW,KAAK,OAAO,QAAQ,IAAI,GAAG;AAC9E,aAAK,QAAQ,MAAM;;;EAGzB;;;;EAKO,YAAS;AACd,WAAO,KAAK;EACd;;;;ACtCI,IAAO,gBAAP,MAAoB;;;;EAKjB,UAAU,OAAa;AAC5B,QAAI,UAAU,QAAW;AACvB;;AAEF,QAAI,KAAK,QAAQ,QAAW;AAC1B,WAAK,MAAM;WACN;AACL,WAAK,OAAO;;EAEhB;;;;EAKO,YAAS;AACd,WAAO,KAAK;EACd;;;;ACrBI,IAAO,wBAAP,MAA4B;EAEzB,UAAU,OAAc;AAC7B,QAAI,KAAK,UAAU,QAAW;AAC5B,WAAK,QAAQ;;EAEjB;EAEO,YAAS;AACd,WAAO,KAAK;EACd;;;;ACLI,SAAU,iBACd,eAA4B;AAQ5B,UAAQ,eAAe;IACrB,KAAK;AACH,aAAO,IAAI,kBAAiB;IAC9B,KAAK;AACH,aAAO,IAAI,gBAAe;IAC5B,KAAK;AACH,aAAO,IAAI,cAAa;IAC1B,KAAK;AACH,aAAO,IAAI,cAAa;IAC1B,KAAK;AACH,aAAO,IAAI,cAAa;IAC1B;AACE,aAAO,IAAI,sBAAqB;;AAEtC;;;AC9BA,IAAY;CAAZ,SAAYE,kBAAe;AACzB,EAAAA,iBAAAA,iBAAA,MAAA,IAAA,CAAA,IAAA;AACA,EAAAA,iBAAAA,iBAAA,WAAA,IAAA,CAAA,IAAA;AACA,EAAAA,iBAAAA,iBAAA,QAAA,IAAA,CAAA,IAAA;AACF,GAJY,oBAAA,kBAAe,CAAA,EAAA;AAOrB,IAAO,cAAP,MAAkB;;;;;;;;;EAYtB,YAAY,cAAuB,OAAc;AAE/C,QAAI,iBAAiB,QAAW;AAC9B,WAAK,eAAe;AACpB,WAAK,kBAAkB,gBAAgB;WAClC;AACL,WAAK,QAAQ;AACb,WAAK,kBAAkB,gBAAgB;;EAE3C;;;;ACVI,IAAO,mBAAP,MAAO,kBAAgB;;;;;;;;;EAqB3B,YACU,eACR,gBACA,OACA,yBACA,SAAoB;AAJZ,SAAA,gBAAA;AAbH,SAAA,aAAqB;AA0DrB,SAAA,gBAAgB,OACrB,gBACAC,aAC+B;AAC/B,YAAM,OAAO,gBAAgB,KAAK,gBAAgB,aAAa,IAAI;AACnE,qBAAe,QAAQ,EAAE,qBAAqB,KAAK,wBAAwB,GAAE,CAAE;AAC/E,YAAM,KAAK,cAAc,KAAK,cAAc;AAE5C,aAAO,KAAK,cAAc,UAAU;QAClC;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ,UAAU,CAAC,WAAgB,OAAO;QAClC,OAAO,KAAK;QACZ,SAAAA;QACA;QACA,qBAAqB,KAAK,wBAAwB,IAAI;OACvD;IACH;AAxDE,SAAK,iBAAiB;AACtB,SAAK,QAAQ;AACb,SAAK,0BAA0B;AAC/B,SAAK,eAAe,CAAA;AAEpB,SAAK,aAAa;AAClB,SAAK,MAAM;AAEX,SAAK,4BAA4B;AACjC,SAAK,oBAAoB;AACzB,SAAK,cAAc,iBAAgB;AAEnC,SAAK,2BAA2B,IAAI,6BAA6B,SAAS,KAAK,aAAa;EAC9F;;;;;;EAMO,oBAAiB;AACtB,UAAM,kBAAkB,CAAA;AACxB,aAAS,IAAI,GAAG,OAAO,OAAO,IAAI,KAAK,aAAa,UAAU,CAAC,MAAM,KAAK;AACxE,YAAM,cAAc,KAAK,aAAa,CAAC;AACvC,cAAQ,YAAY,iBAAiB;QACnC,KAAK,gBAAgB;AACnB,iBAAO;AACP;QACF,KAAK,gBAAgB;AACnB,iBAAO;AACP;QACF,KAAK,gBAAgB;AACnB,0BAAgB,KAAK,YAAY,YAAY;AAC7C;;;AAGN,WAAO;EACT;EAsBO,iBAAc;AACnB,WAAO,KAAK,yBAAyB,eAAc,KAAM,KAAK,aAAa,WAAW;EACxF;EAEO,WAAQ;AACb,UAAM,cAAc,KAAK,aAAa,CAAC;AACvC,QAAI,YAAY,oBAAoB,gBAAgB,WAAW;AAC7D,UAAI,kBAAiB,mCAAmC,YAAY,KAAK,GAAG;AAC1E,eAAO;;;AAIX,WAAO;EACT;EAEQ,oCAAiC;AACvC,UAAM,MAAM,KAAK;AACjB,SAAK,cAAc,iBAAgB;AACnC,WAAO;EACT;EAEQ,cAAc,KAAU,YAAmB;AAEjD,QAAI,KAAK;AACP,WAAK,MAAM;AACX;;AAEF,QAAI,YAAY;AACd,WAAK,aAAa;;AAEpB,QAAI,KAAK,yBAAyB,sBAAsB,KAAK,mBAAmB;AAE9E;;AAEF,SAAK,4BAA4B,KAAK;AACtC,SAAK,oBAAoB,KAAK,yBAAyB;EACzD;EAEQ,OAAO,mCAAmC,OAAU;AAE1D,WACE,MAAM,SAAS,YAAY,QAC3B,eAAe,SACf,MAAM,WAAW,MAAM,eAAe;EAE1C;;;;EAKO,MAAM,WAAW,gBAAsC;AAC5D,QAAI,KAAK,KAAK;AACZ,YAAM,KAAK;;AAGb,QAAI;AACF,YAAM,EAAE,QAAQ,WAAW,SAAS,eAAc,IAChD,MAAM,KAAK,yBAAyB,UAAU,cAAc;AAC9D,QAAE,KAAK;AACP,WAAK,cAAc,QAAW,cAAc,MAAS;AACrD,UAAI,cAAc,QAAW;AAE3B,kBAAU,QAAQ,CAAC,YAAgB;AAEjC,eAAK,aAAa,KAAK,IAAI,YAAY,SAAS,MAAS,CAAC;QAC5D,CAAC;;AAIH,UAAI,kBAAkB,QAAQ,UAAU,YAAY,gBAAgB,gBAAgB;AAElF,cAAM,eAAe,eAAe,UAAU,YAAY,YAAY,EAAE,GAAG;AAG3E,uBAAe,UAAU,YAAY,YAAY,IAAI,CAAA;AACrD,uBAAe,UAAU,YAAY,YAAY,EAAE,KAAK,wBAAwB,EAAE,IAChF;;AAGJ,aAAO,EAAE,QAAQ,WAAW,SAAS,eAAc;aAC5C,KAAU;AAEjB,UAAI,kBAAiB,mCAAmC,GAAG,GAAG;AAG5D,cAAM,gBAAgB,IAAI,YAAY,QAAW,GAAG;AACpD,aAAK,aAAa,KAAK,aAAa;AAEpC,eAAO;UACL,QAAQ,CAAC,aAAa;UACtB,SAAS,IAAI;;aAEV;AACL,aAAK,cAAc,KAAK,IAAI,cAAc,MAAS;AACnD,cAAM;;;EAGZ;;;;;;EAOO,4BAAyB;AAC9B,WAAO,KAAK;EACd;;;;EAKO,MAAM,SAAS,gBAAsC;AAC1D,QAAI,KAAK,KAAK;AACZ,WAAK,cAAc,KAAK,KAAK,MAAS;AACtC,YAAM,KAAK;;AAGb,QAAI;AACF,YAAM,EAAE,QAAQ,QAAO,IAAK,MAAM,KAAK,QAAQ,cAAc;AAE7D,YAAM,cAAc,KAAK,aAAa,MAAK;AAC3C,WAAK,cAAc,QAAW,WAAW,MAAS;AAClD,UAAI,YAAY,iBAAiB,QAAQ;AACvC,cAAM,IAAI,MAAM,YAAY,YAAY,YAAY,aAAa,MAAM,EAAE;;AAE3E,cAAQ,YAAY,iBAAiB;QACnC,KAAK,gBAAgB;AACnB,iBAAO,EAAE,QAAQ,QAAW,QAAO;QACrC,KAAK,gBAAgB;AACnB,sBAAY,MAAM,UAAU;AAC5B,gBAAM,YAAY;QACpB,KAAK,gBAAgB;AACnB,iBAAO,EAAE,QAAQ,YAAY,cAAc,QAAO;;aAE/C,KAAU;AACjB,WAAK,cAAc,KAAK,IAAI,SAAS,MAAS;AAC9C,YAAM;;EAEV;;;;EAKO,MAAM,QAAQ,gBAAsC;AAEzD,QAAI,KAAK,aAAa,SAAS,GAAG;AAChC,YAAM,cAAc,KAAK,aAAa,CAAC;AAEvC,cAAQ,YAAY,iBAAiB;QACnC,KAAK,gBAAgB;AACnB,iBAAO;YACL,QAAQ;YACR,SAAS,KAAK,kCAAiC;;QAEnD,KAAK,gBAAgB;AACnB,sBAAY,MAAM,UAAU,KAAK,kCAAiC;AAClE,gBAAM,YAAY;QACpB,KAAK,gBAAgB;AACnB,iBAAO;YACL,QAAQ,YAAY;YACpB,SAAS,KAAK,kCAAiC;;;;AAMvD,QAAI,KAAK,YAAY;AACnB,aAAO;QACL,QAAQ;QACR,SAAS,KAAK,kCAAiC;;;AAKnD,UAAM,EAAE,QAAQ,QAAO,IAAK,MAAM,KAAK,WAAW,cAAc;AAChE,iBAAa,KAAK,aAAa,OAAO;AACtC,QAAI,WAAW,QAAW;AACxB,aAAO,EAAE,QAAQ,QAAW,SAAS,KAAK,YAAW;;AAEvD,WAAO,KAAK,QAAQ,cAAc;EACpC;;;;AC9RF,6BAA0B;AAC1B,uBAAsB;;;ACIhB,IAAO,aAAP,MAAO,YAAU;;;;;;;;;;EAerB,YACE,UACA,UACA,gBACA,gBAAuB;AAEvB,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;EACxB;EACO,SAAS,OAAiB;AAC/B,UAAM,SAAS;AACf,UAAM,SAAS;AACf,QAAI,WAAW,UAAa,WAAW,QAAW;AAChD,aAAO;;AAET,QAAI,OAAO,QAAO,KAAM,OAAO,QAAO,GAAI;AACxC,aAAO;;AAGT,QAAI,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;AACxD,UACG,OAAO,QAAQ,OAAO,OAAO,EAAE,OAAO,kBAAkB,OAAO,mBAC/D,OAAO,QAAQ,OAAO,OAAO,EAAE,OAAO,kBAAkB,OAAO,iBAChE;AACA,eAAO;;AAET,aAAO;;AAET,WAAO;EACT;EAEO,cAAW;AAChB,WACE,KAAK,QAAQ,UAAU,+BAA+B,yCACtD,KAAK,QAAQ,UAAU,+BAA+B,yCACtD,KAAK,mBAAmB,QACxB,KAAK,mBAAmB;EAE5B;EAEO,UAAO;AACZ,WAAO,EAAE,KAAK,kBAAkB,KAAK,mBAAmB,KAAK,QAAQ,KAAK;EAC5E;;;;;;EAMO,OAAO,uBAAuB,mBAAoC;AACvE,WAAO,IAAI,YACT,kBAAkB,UAAU,kBAAkB,YAAY,GAC1D,kBAAkB,UAAU,kBAAkB,YAAY,GAC1D,MACA,KAAK;EAET;;;;;;EAMO,OAAO,cAAc,gBAAkC;AAC5D,WAAO,IAAI,YACT,eAAe,KACf,eAAe,KACf,eAAe,gBACf,eAAe,cAAc;EAEjC;;;;ACrFI,IAAO,+BAAP,MAAmC;;;;;;EAWvC,YAAY,2BAAgD,sBAA6B;AACvF,SAAK,4BAA4B;AACjC,SAAK,gBAAgB,0BAA0B,IAAI,CAAC,QAAO;AACzD,aAAO,IAAI,WACT,IAAI,UAAU,kBAAkB,YAAY,GAC5C,IAAI,UAAU,kBAAkB,YAAY,GAC5C,MACA,KAAK;IAET,CAAC;AACD,SAAK,uBAAuB;EAC9B;EACO,8BAA2B;AAChC,WAAO,KAAK;EACd;EAEO,qBAAqB,qBAA8C;AAGxE,UAAM,MAAoB,MAAM,QAAQ,mBAAmB,IACvD,sBACA,CAAC,mBAAmB;AACxB,UAAM,sBAA2B,CAAA;AAGjC,eAAW,cAAc,KAAK;AAC5B,UAAI,WAAW,QAAO,GAAI;AACxB;;AAGF,UAAI,WAAW,YAAW,GAAI;AAC5B,eAAO,KAAK;;AAGd,YAAM,WAAW,KAAK,cAAc,UAAU,CAAC,UAAS;AACtD,YAAI,WAAW,MAAM,MAAM,OAAO,WAAW,MAAM,MAAM,KAAK;AAC5D,iBAAO;;AAET,YAAI,WAAW,QAAQ,MAAM,KAAK;AAChC,iBAAO;;AAET,YAAI,WAAW,QAAQ,MAAM,KAAK;AAChC,iBAAO;;MAEX,CAAC;AAED,UAAI,WAAW,GAAG;AAChB,cAAM,IAAI,MACR,8EAA8E;;AAKlF,UAAI;AACJ,eAAS,IAAI,KAAK,cAAc,SAAS,GAAG,KAAK,GAAG,KAAK;AACvD,cAAM,QAAQ,KAAK,cAAc,CAAC;AAClC,YAAI,WAAW,MAAM,MAAM,OAAO,WAAW,MAAM,MAAM,KAAK;AAC5D,qBAAW;AACX;;AAEF,YAAI,WAAW,QAAQ,MAAM,KAAK;AAChC,qBAAW;AACX;;AAEF,YAAI,WAAW,QAAQ,MAAM,KAAK;AAChC,qBAAW;AACX;;;AAIJ,UAAI,WAAW,KAAK,cAAc,QAAQ;AACxC,cAAM,IAAI,MACR,+EAA+E;;AAInF,eAAS,IAAI,UAAU,IAAI,WAAW,GAAG,KAAK;AAC5C,YAAI,WAAW,SAAS,KAAK,cAAc,CAAC,CAAC,GAAG;AAC9C,8BACE,KAAK,0BAA0B,CAAC,EAAE,UAAU,kBAAkB,YAAY,CAAC,IACzE,KAAK,0BAA0B,CAAC;;;;AAK1C,UAAM,gCAAgC,OAAO,KAAK,mBAAmB,EAAE,IACrE,CAAC,MAAM,oBAAoB,CAAC,CAAC;AAG/B,WAAO,8BAA8B,KAAK,CAAC,GAAG,MAAK;AACjD,aAAO,EAAE,UAAU,kBAAkB,YAAY,EAAE,cACjD,EAAE,UAAU,kBAAkB,YAAY,CAAC;IAE/C,CAAC;EACH;;;;ACxGF,SAAS,cAAc,GAAQ,GAAM;AACnC,QAAM,OAAO,EAAE,CAAC,EAAE,UAAU,kBAAkB,YAAY;AAC1D,QAAM,OAAO,EAAE,CAAC,EAAE,UAAU,kBAAkB,YAAY;AAC1D,MAAI,OAAO,MAAM;AACf,WAAO;;AAET,MAAI,OAAO,MAAM;AACf,WAAO;;AAET,SAAO;AACT;AAGM,SAAU,yBACd,iCAAsC;AAEtC,QAAM,YAAiB,CAAA;AACvB,QAAM,cAAmB,CAAA;AAEzB,MAAI,eAAe,CAAA;AAGnB,aAAW,KAAK,iCAAiC;AAC/C,cAAU,EAAE,CAAC,EAAE,UAAU,kBAAkB,EAAE,CAAC,IAAI;AAClD,gBAAY,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;AACvB,iBAAa,KAAK,CAAC;;AAGrB,iBAAe,aAAa,KAAK,aAAa;AAC9C,QAAM,2BAA2B,aAAa,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;AAC7D,QAAM,uBAAuB,aAAa,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;AAEzD,MAAI,CAAC,qBAAqB,wBAAwB,GAAG;AACnD,WAAO;;AAET,SAAO,IAAI,6BAA6B,0BAA0B,oBAAoB;AACxF;AAKA,SAAS,qBAAqB,0BAA6B;AAEzD,MAAI,aAAa;AACjB,MAAI,yBAAyB,SAAS,GAAG;AACvC,UAAM,aAAa,yBAAyB,CAAC;AAC7C,UAAM,YAAY,yBAAyB,yBAAyB,SAAS,CAAC;AAC9E,iBACE,WAAW,UAAU,kBAAkB,YAAY,MACnD,UAAU,+BAA+B;AAC3C,iBACE,cACA,UAAU,UAAU,kBAAkB,YAAY,MAChD,UAAU,+BAA+B;AAE7C,aAAS,IAAI,GAAG,IAAI,yBAAyB,QAAQ,KAAK;AACxD,YAAM,gBAAgB,yBAAyB,IAAI,CAAC;AACpD,YAAM,eAAe,yBAAyB,CAAC;AAC/C,mBACE,cACA,cAAc,UAAU,kBAAkB,YAAY,MACpD,aAAa,UAAU,kBAAkB,YAAY;AAEzD,UAAI,CAAC,YAAY;AACf,YACE,cAAc,UAAU,kBAAkB,YAAY,IACtD,aAAa,UAAU,kBAAkB,YAAY,GACrD;AACA,gBAAM,MAAM,gBAAgB;;AAE9B;;;;AAIN,SAAO;AACT;;;ACtEM,IAAO,yBAAP,MAA6B;EAKjC,YAAoB,eAA4B;AAA5B,SAAA,gBAAA;AAClB,SAAK,qCAAqC,CAAA;EAC5C;;;;;;EAMO,MAAM,uBACX,gBACA,gBACA,eAAwB,OAAK;AAE7B,UAAM,eAAe,cAAc,cAAc;AACjD,QAAI,KAAK,mCAAmC,YAAY,MAAM,UAAa,cAAc;AACvF,WAAK,mCAAmC,YAAY,IAAI,KAAK,4BAC3D,gBACA,cAAc;;AAGlB,WAAO,KAAK,mCAAmC,YAAY;EAC7D;;;;;EAMO,MAAM,qBACX,gBACA,YACA,gBACA,eAAwB,OAAK;AAE7B,UAAM,MAAM,MAAM,KAAK,uBAAuB,gBAAgB,gBAAgB,YAAY;AAC1F,WAAO,IAAI,qBAAqB,UAAU;EAC5C;EAEQ,MAAM,4BACZ,gBACA,gBAAsC;AAEtC,UAAM,EAAE,UAAS,IAAK,MAAM,wBAC1B,OAAO,wBAA+C;AACpD,aAAO,KAAK,cACT,wBAAwB,cAAc,EACtC,iBAAiB,mBAAmB;IACzC,GACA,gBACA,mBAAmB,uBAAuB;AAE5C,WAAO,yBAAyB,UAAU,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;EACjE;;;;AC5DK,IAAM,mBAAmB,UAAU;AAGpC,IAAO,0BAAP,MAAO,yBAAuB;EAGlC,YAAY,eAA4B;AACtC,SAAK,yBAAyB,IAAI,uBAAuB,aAAa;EACxE;EACQ,OAAO,8BAA8B,QAAoB,QAAkB;AACjF,QAAI,OAAO,OAAO,QAAQ,aAAa;AACrC,YAAM,IAAI,MAAM,sBAAsB;;AAGxC,QAAI,OAAO,OAAO,QAAQ,aAAa;AACrC,YAAM,IAAI,MAAM,sBAAsB;;AAGxC,QAAI,OAAO,MAAM,OAAO,KAAK;AAE3B,aAAO;WACF;AACL,UAAI,OAAO,QAAQ,OAAO,OAAO,OAAO,kBAAkB,OAAO,gBAAgB;AAG/E,eAAO;;AAET,aAAO;;EAEX;EAEQ,OAAO,2BAA2B,QAAoB;AAC5D,aAAS,MAAM,GAAG,MAAM,OAAO,QAAQ,OAAO;AAC5C,YAAM,YAAY,OAAO,MAAM,CAAC;AAChC,YAAM,IAAI,OAAO,GAAG;AACpB,UAAI,CAAC,KAAK,8BAA8B,WAAW,CAAC,GAAG;AACrD,eAAO;;;AAGX,WAAO;EACT;EAEQ,OAAO,WAAW,GAAW,GAAS;AAC5C,WAAO,KAAK,IAAI,IAAI;EACtB;EAEQ,OAAO,eAAe,GAAW,GAAS;AAChD,WAAO,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI;EACnC;EAEQ,OAAO,eAAe,GAAe,mBAAsB;AACjE,UAAM,OAAO,KAAK,WAAW,kBAAkB,iBAAiB,YAAY,GAAG,EAAE,GAAG;AACpF,UAAM,gBAAgB,KAAK,eAAe,MAAM,EAAE,GAAG,MAAM,IAAI,EAAE,iBAAiB;AAClF,WAAO,IAAI,WAAW,MAAM,EAAE,KAAK,eAAe,EAAE,cAAc;EACpE;;;;;;;EAQO,MAAM,qBACX,gBACA,cACA,gBAAsC;AAGtC,QAAI,CAAC,yBAAwB,2BAA2B,YAAY,GAAG;AACrE,YAAM,IAAI,MAAM,2DAA2D;;AAG7E,QAAI,qBAA4B,CAAA;AAEhC,QAAI,aAAa,WAAW,GAAG;AAC7B,aAAO;;AAGT,UAAM,uBAAuB,MAAM,KAAK,uBAAuB,uBAC7D,gBACA,cAAc;AAGhB,QAAI,QAAQ;AACZ,QAAI,uBAAuB,aAAa,KAAK;AAC7C,eAAS;AACP,UAAI,qBAAqB,QAAO,GAAI;AAElC,YAAI,EAAE,SAAS,aAAa,QAAQ;AAClC,iBAAO;;AAET,+BAAuB,aAAa,KAAK;AACzC;;AAGF,UAAI;AACJ,UAAI,mBAAmB,SAAS,GAAG;AACjC,qBAAa,yBAAwB,eACnC,sBACA,mBAAmB,mBAAmB,SAAS,CAAC,CAAC;aAE9C;AACL,qBAAa;;AAGf,YAAM,oBAAoB,qBAAqB,qBAAqB,UAAU;AAC9E,UAAI,kBAAkB,UAAU,GAAG;AACjC,cAAM,IAAI,MAAM,qDAAqD,UAAU,WAAW;;AAE5F,2BAAqB,mBAAmB,OAAO,iBAAiB;AAEhE,YAAM,uBAAuB,WAAW,uBACtC,mBAAmB,mBAAmB,SAAS,CAAC,CAAC;AAEnD,UAAI,CAAC,sBAAsB;AACzB,cAAM,IAAI,MAAM,2CAA2C;;AAI7D,UACE,yBAAwB,eAAe,qBAAqB,KAAK,qBAAqB,GAAG,IACzF,GACA;AACA,cAAM,IAAI,MAAM,sCAAsC,iBAAiB,iDAChC,UAAU,EAAE;;AAIrD,UAAI,EAAE,SAAS,aAAa,QAAQ;AAClC,eAAO;;AAET,6BAAuB,aAAa,KAAK;AAEzC,aACE,yBAAwB,eACtB,qBAAqB,KACrB,qBAAqB,GAAG,KACrB,GACL;AAEA,YAAI,EAAE,SAAS,aAAa,QAAQ;AAClC,iBAAO;;AAET,+BAAuB,aAAa,KAAK;;;EAG/C;;;;ALrIF,IAAMC,UAAsB,mBAAmB,mCAAmC;AAGlF,IAAY;CAAZ,SAAYC,0CAAuC;AACjD,EAAAA,yCAAA,SAAA,IAAA;AACA,EAAAA,yCAAA,YAAA,IAAA;AACA,EAAAA,yCAAA,OAAA,IAAA;AACF,GAJY,4CAAA,0CAAuC,CAAA,EAAA;AAOnD,IAAsB,oCAAtB,MAAsB,mCAAiC;;;;;;;;;;;;;;EA4BrD,YACU,eACA,gBACA,OACA,SACA,+BAA4D;AAJ5D,SAAA,gBAAA;AACA,SAAA,iBAAA;AACA,SAAA,QAAA;AACA,SAAA,UAAA;AACA,SAAA,gCAAA;AAER,SAAK,gBAAgB;AACrB,SAAK,iBAAiB;AACtB,SAAK,QAAQ;AACb,SAAK,UAAU;AACf,SAAK,gCAAgC;AACrC,SAAK,wBAAwB;MAC3B,UAAU;MACV,gBAAgB,IAAI,uBAClB,cAAc,iBACd,mBAAmB,qBACnB,IAAI;;AAGR,SAAK,sBAAsB,eAAe,QAAQ,EAAE,UAAU,KAAI,CAAE;AACpE,SAAK,MAAM;AACX,SAAK,QAAQ,mCAAkC,OAAO;AACtD,SAAK,kBAAkB,IAAI,wBAAwB,KAAK,aAAa;AACrE,SAAK,aAAa,KAAK,8BAA8B,UAAU;AAE/D,SAAK,sBAAsB,UAAU,QAAQ,qBAAqB,QAAQ,eAAe;AAEzF,SAAK,cAAc,iBAAgB;AAInC,SAAK,YAAY,IAAI,uBAAAC,QACnB,CAAC,GAAqB,MAAwB,KAAK,2BAA2B,GAAG,CAAC,CAAC;AAGrF,SAAK,UAAM,iBAAAC,SAAU,CAAC;AAGtB,UAAM,oDAAoD,YAA0B;AAElF,UAAI;AACF,cAAM,wBAAwB,MAAM,KAAK,yBAAwB;AACjE,aAAK,sCAAsC,sBAAsB;AAEjE,cAAM,yBACJ,QAAQ,2BAA2B,UAAa,QAAQ,yBAAyB,IAC7E,sBAAsB,SACtB,KAAK,IAAI,QAAQ,wBAAwB,sBAAsB,MAAM;AAE3E,QAAAH,QAAO,KACL,4BACE,sBAAsB,SACtB,iCACA,sBAAsB;AAG1B,cAAM,qBAAiB,iBAAAG,SAAU,sBAAsB;AACvD,YAAI,6BAA6B,CAAA;AAEjC,cAAM,2CAA+D,CAAA;AAErE,YAAI,KAAK,qBAAqB;AAC5B,gBAAM,IAAI,MAAM,uEAAuE;eAClF;AACL,uCAA6B;;AAI/B,mCAA2B,QAAQ,CAAC,yBAA6B;AAG/D,mDAAyC,KACvC,KAAK,4CAA4C,oBAAoB,CAAC;QAE1E,CAAC;AAGD,iDAAyC,QAAQ,CAAC,qBAA0B;AAE1E,gBAAM,gBAAgB,YAA0B;AAC9C,gBAAI;AACF,oBAAM,EAAE,QAAQ,UAAU,QAAO,IAAK,MAAM,iBAAiB,QAC3D,KAAK,kBAAiB,CAAE;AAE1B,mBAAK,gCAAgC,OAAO;AAC5C,kBAAI,aAAa,QAAW;AAE1B;;AAGF,kBAAI;AACF,qBAAK,UAAU,IAAI,gBAAgB;uBAC5B,GAAQ;AACf,qBAAK,MAAM;;qBAEN,KAAU;AACjB,mBAAK,gCAAgC,IAAI,OAAO;AAChD,mBAAK,MAAM;;AAEX,6BAAe,MAAK;AACpB,mBAAK,yBAAwB;;UAEjC;AACA,yBAAe,KAAK,aAAa;QACnC,CAAC;eACM,KAAU;AACjB,aAAK,MAAM;AAEX,aAAK,IAAI,MAAK;AACd;;IAEJ;AACA,SAAK,IAAI,KAAK,iDAAiD;EACjE;EAOQ,2BAAwB;AAG9B,SAAK,sCAAsC,KAAK,sCAAsC;AACtF,QAAI,KAAK,wCAAwC,GAAG;AAClD,WAAK,IAAI,MAAK;AACd,UAAI,KAAK,UAAU,KAAI,MAAO,GAAG;AAC/B,aAAK,QAAQ,mCAAkC,OAAO;;;EAG5D;EAEQ,gCAAgC,SAAsB;AAC5D,iBAAa,KAAK,aAAa,OAAO;EACxC;EAEQ,oCAAiC;AACvC,UAAM,MAAM,KAAK;AACjB,SAAK,cAAc,iBAAgB;AACnC,WAAO;EACT;EAEQ,oBAAiB;AACvB,WAAO,KAAK,sBAAsB;EACpC;EAEQ,MAAM,2BAAwB;AAEpC,UAAM,eAAe,KAAK,8BAA8B;AACxD,UAAM,cAAc,aAAa,IAAI,CAAC,SAAS,WAAW,cAAc,IAAI,CAAC;AAC7E,WAAO,KAAK,gBAAgB,qBAC1B,KAAK,gBACL,aACA,KAAK,kBAAiB,CAAE;EAE5B;;;;EAKQ,MAAM,kCACZ,kBAAkC;AAElC,UAAM,oBAAoB,iBAAiB;AAE3C,SAAK,kBAAkB,IAAI,wBAAwB,KAAK,aAAa;AAErE,UAAM,aAAa,WAAW,uBAAuB,iBAAiB;AACtE,WAAO,KAAK,gBAAgB,qBAC1B,KAAK,gBACL,CAAC,UAAU,GACX,KAAK,kBAAiB,CAAE;EAE5B;;;;;;;EAQQ,MAAM,wBACZ,gBACA,gBAAmB;AAKnB,UAAM,yBAAyB,KAAK,UAAU,IAAG;AACjD,QAAI;AACF,YAAM,gCAAuC,MAAM,KAAK,kCACtD,sBAAsB;AAExB,YAAM,+BAAmD,CAAA;AAEzD,oCAA8B,QAAQ,CAAC,sBAAqB;AAE1D,cAAM,8BAA8B,KAAK,4CACvC,mBACA,uBAAuB,iBAAiB;AAE1C,qCAA6B,KAAK,2BAA2B;MAC/D,CAAC;AAED,YAAM,kCAAkC,OACtC,yBACA,sCACiB;AACjB,YAAI;AACF,gBAAM,EAAE,QAAQ,UAAS,IAAK,MAAM,wBAAwB,QAAQ,cAAc;AAClF,cAAI,cAAc,QAAW;iBAEtB;AAEL,iBAAK,UAAU,IAAI,uBAAuB;;AAG5C,gBAAM,kCAAiC;iBAChC,KAAU;AACjB,eAAK,MAAM;AACX;;MAEJ;AACA,YAAM,mCAAmC,OAAO,QAAyC;AACvF,YAAI,IAAI,SAAS,GAAG;AAElB,gBAAM,8BAA8B,IAAI,MAAK;AAC7C,gBAAM,gCAAgC,6BAA6B,YAAW;AAC5E,kBAAM,iCAAiC,GAAG;UAC5C,CAAC;eACI;AAEL,iBAAO,eAAc;;MAEzB;AAEA,YAAM,iCAAiC,4BAA4B;aAC5D,KAAU;AACjB,WAAK,MAAM;AACX,YAAM;;EAEV;EAEQ,OAAO,mCAAmC,OAAU;AAE1D,WACE,MAAM,SAAS,YAAY,QAC3B,eAAe,SACf,MAAM,WAAW,MAAM,eAAe;EAE1C;;;;;;EAOQ,MAAM,gCACZ,gBACA,YACA,cAAiB;AAEjB,UAAM,mBAAmB,KAAK,UAAU,KAAI;AAE5C,QAAI;AACF,YAAM,iBAAiB,QAAQ,cAAc;AAC7C,mBAAY;aACL,KAAU;AACjB,UAAI,mCAAkC,mCAAmC,GAAG,GAAG;AAE7E,eAAO,kBACL,CAAC,cAAc,KAAK,wBAAwB,WAAW,UAAU,GACjE,gBACA,mBAAmB,iBAAiB;aAEjC;AAEL,aAAK,MAAM;AACX,cAAM;;;EAGZ;;;;EAKO,MAAM,SAAS,gBAAsC;AAC1D,QAAI,KAAK,KAAK;AAEZ,YAAM,KAAK;;AAEb,WAAO,IAAI,QAAuB,CAAC,SAAS,WAAU;AACpD,WAAK,IAAI,KAAK,MAAK;AACjB,YAAI,CAAC,KAAK,sBAAsB,UAAU;AACxC,yBAAe,aACb,KAAK,sBAAsB,gBAC3B,wBAAwB,OACxB,mBAAmB,eAAe;AAEpC,eAAK,sBAAsB,iBAAiB;AAC5C,eAAK,sBAAsB,WAAW;eACjC;AACL,eAAK,sBAAsB,iBAAiB;;AAI9C,YAAI,KAAK,KAAK;AAEZ,eAAK,IAAI,MAAK;AAEd,eAAK,IAAI,UAAU,KAAK,kCAAiC;AACzD,iBAAO,KAAK,GAAG;AACf;;AAGF,YAAI,KAAK,UAAU,KAAI,MAAO,GAAG;AAE/B,eAAK,QAAQ,mCAAkC,OAAO;AAEtD,eAAK,IAAI,MAAK;AACd,iBAAO,QAAQ;YACb,QAAQ;YACR,SAAS,KAAK,kCAAiC;WAChD;;AAGH,cAAM,aAAa,MAAW;AAE5B,eAAK,IAAI,MAAK;AAEd,iBAAO,QAAQ,KAAK,SAAS,cAAc,CAAC;QAC9C;AACA,cAAM,eAAe,YAA0B;AAC7C,cAAI;AACJ,cAAI;AACF,+BAAmB,KAAK,UAAU,IAAG;mBAC9B,GAAQ;AAGf,iBAAK,MAAM;AAEX,iBAAK,IAAI,MAAK;AACd,iBAAK,IAAI,UAAU,KAAK,kCAAiC;AACzD,mBAAO,KAAK,GAAG;AACf;;AAGF,cAAI;AACJ,cAAI;AACJ,cAAI;AACF,kBAAM,WAAW,MAAM,iBAAiB,SAAS,cAAc;AAC/D,mBAAO,SAAS;AAChB,sBAAU,SAAS;AACnB,iBAAK,gCAAgC,OAAO;AAC5C,gBAAI,SAAS,QAAW;AAItB,mBAAK,MAAM,IAAI,MACb,gIAC4D;AAG9D,mBAAK,IAAI,MAAK;AACd,qBAAO,QAAQ;gBACb,QAAQ;gBACR,SAAS,KAAK,kCAAiC;eAChD;;mBAEI,KAAU;AACjB,iBAAK,MAAM,IAAI,MACb,iIAC8C,KAAK,UAAU,GAAG,CAAC,EAAE;AAErE,iBAAK,IAAI,UAAU,KAAK,kCAAiC;AAEzD,iBAAK,IAAI,MAAK;AACd,mBAAO,KAAK,GAAG;AACf;;AAKF,cAAI;AACF,kBAAM,EAAE,QAAQ,WAAW,SAAS,aAAY,IAAK,MAAM,iBAAiB,QAC1E,cAAc;AAEhB,iBAAK,gCAAgC,YAAY;AACjD,gBAAI,cAAc,QAAW;mBAEtB;AACL,kBAAI;AACF,sBAAM,WAAW,iBAAiB,aAAa,CAAC;AAChD,oBAAI,OAAO,aAAa,aAAa;AACnC,wBAAM,IAAI,MACR,qEAAqE;;AAGzE,qBAAK,UAAU,IAAI,gBAAgB;uBAC5B,GAAQ;AAGf,qBAAK,MAAM;;;mBAGR,KAAU;AACjB,gBAAI,mCAAkC,mCAAmC,GAAG,GAAG;AAG7E,mBAAK,UAAU,IAAI,gBAAgB;mBAC9B;AAEL,mBAAK,MAAM;AACX,qBAAO,KAAK,GAAG;;;AAIjB,iBAAK,IAAI,MAAK;;AAGhB,iBAAO,QAAQ;YACb,QAAQ;YACR,SAAS,KAAK,kCAAiC;WAChD;QACH;AACA,aAAK,gCAAgC,gBAAgB,YAAY,YAAY,EAAE,MAC7E,MAAM;MAEV,CAAC;IACH,CAAC;EACH;;;;;;EAOO,iBAAc;AACnB,WAAO,EACL,KAAK,UAAU,mCAAkC,OAAO,SAAS,KAAK,QAAQ;EAElF;;;;EAKQ,4CACN,yBACA,mBAAuB;AAIvB,QAAI,iBAAiB,KAAK,8BAA8B,UAAU;AAClE,QAAI;AACJ,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO,UAAU,UAAU;AAC7B,qBAAe,EAAE,MAAK;WACjB;AACL,qBAAe;;AAGjB,UAAM,oBAAoB;AAC1B,QAAI,gBAAgB;AAClB,qBAAe,KAAK,MAAM,KAAK,UAAU,YAAY,CAAC;AAEtD,uBAAiB,eAAe,QAAQ,mBAAmB,MAAM;AACjE,mBAAa,OAAO,IAAI;;AAG1B,UAAM,UAAO,OAAA,OAAA,CAAA,GAAQ,KAAK,OAAO;AACjC,YAAQ,oBAAoB;AAE5B,WAAO,IAAI,iBACT,KAAK,eACL,KAAK,gBACL,cACA,yBACA,OAAO;EAEX;;AAzfe,kCAAA,SAAS;;;AMvBpB,IAAO,gCAAP,cACI,kCAAiC;;;;;;;;EAWlC,2BACL,UACA,UAA0B;AAE1B,WAAO,SAAS,aAAa,SAAS;EACxC;;;;ACjBI,IAAO,+BAAP,cACI,kCAAiC;;;;;;;;;;;;;;EAiBzC,YACE,eACA,gBACA,OACA,SACA,+BAA4D;AAG5D,UAAM,eAAe,gBAAgB,OAAO,SAAS,6BAA6B;AAClF,SAAK,oBAAoB,IAAI,kCAAkC,KAAK,UAAU;EAChF;;;;;;;;EASO,2BAA2B,UAA4B,UAA0B;AACtF,WAAO,KAAK,kBAAkB,QAAQ,UAAU,QAAQ;EAC1D;;;;AC3CI,IAAO,+BAAP,MAAmC;EACvC,YACU,kBACA,QACA,OAAa;AAFb,SAAA,mBAAA;AACA,SAAA,SAAA;AACA,SAAA,QAAA;EACP;EAEI,MAAM,SAAS,gBAAsC;AAC1D,UAAM,mBAAmB,iBAAgB;AACzC,WAAO,KAAK,SAAS,GAAG;AAEtB,YAAM,EAAE,QAAO,IAAK,MAAM,KAAK,iBAAiB,SAAS,cAAc;AACvE,WAAK;AACL,mBAAa,kBAAkB,OAAO;;AAExC,QAAI,KAAK,QAAQ,GAAG;AAClB,YAAM,EAAE,QAAQ,QAAO,IAAK,MAAM,KAAK,iBAAiB,SAAS,cAAc;AAC/E,WAAK;AACL,mBAAa,kBAAkB,OAAO;AACtC,aAAO,EAAE,QAAQ,SAAS,iBAAgB;;AAG5C,WAAO;MACL,QAAQ;MACR,SAAS,iBAAgB;;EAE7B;EAEO,iBAAc;AACnB,YAAQ,KAAK,SAAS,KAAK,KAAK,QAAQ,MAAM,KAAK,iBAAiB,eAAc;EACpF;;;;AC/BI,IAAO,2BAAP,MAA+B;;;;;;;;EAQnC,YAAoB,kBAAkC;AAAlC,SAAA,mBAAA;EAAqC;;;;EAIlD,MAAM,SAAS,gBAAsC;AAC1D,UAAM,EAAE,QAAQ,MAAM,QAAO,IAAK,MAAM,KAAK,iBAAiB,SAAS,cAAc;AACrF,WAAO;MACL,QAAQ,SAAS,SAAY,KAAK,UAAU;MAC5C;;EAEJ;;;;;EAMO,iBAAc;AACnB,WAAO,KAAK,iBAAiB,eAAc;EAC7C;;;;AC3BF,eAAsB,OAAO,KAAW;AACtC,QAAM,OAAO,WAAW,GAAG;AAC3B,QAAM,OAAO,MAAM,aAAa,OAAO,OAAO,WAAW,IAAI;AAC7D,SAAO,YAAY,IAAI;AACzB;AAEA,SAAS,YAAY,QAAmB;AACtC,SAAO,MAAM,UAAU,IACpB,KAAK,IAAI,WAAW,MAAM,GAAG,CAAC,UAAkB,OAAO,KAAK,SAAS,EAAE,GAAG,MAAM,EAAE,CAAC,EACnF,KAAK,EAAE;AACZ;;;ACZA,wCAA4B;AAE5B,eAAsB,WAAW,QAAe;AAC9C,QAAM,wBAAoB,kCAAAC,SAAgB,MAAM;AAChD,SAAO,OAAO,iBAAiB;AACjC;;;ACDM,IAAO,mCAAP,MAAuC;EAE3C,YAAoB,kBAAkC;AAAlC,SAAA,mBAAA;EAAqC;EAElD,MAAM,SAAS,gBAAsC;AAC1D,UAAM,EAAE,SAAS,OAAM,IAAK,MAAM,KAAK,iBAAiB,SAAS,cAAc;AAC/E,QAAI,QAAQ;AACV,YAAM,eAAe,MAAM,WAAW,MAAM;AAC5C,UAAI,iBAAiB,KAAK,kBAAkB;AAC1C,eAAO,EAAE,QAAQ,QAAW,QAAO;;AAErC,WAAK,mBAAmB;;AAE1B,WAAO,EAAE,QAAQ,QAAO;EAC1B;EAEO,iBAAc;AACnB,WAAO,KAAK,iBAAiB,eAAc;EAC7C;;;;AClBI,IAAO,qCAAP,MAAyC;EAE7C,YAAoB,kBAAkC;AAAlC,SAAA,mBAAA;AAClB,SAAK,gBAAgB,oBAAI,IAAG;EAC9B;EAEO,MAAM,SAAS,gBAAsC;AAC1D,UAAM,EAAE,SAAS,OAAM,IAAK,MAAM,KAAK,iBAAiB,SAAS,cAAc;AAC/E,QAAI,QAAQ;AACV,YAAM,eAAe,MAAM,WAAW,MAAM;AAC5C,UAAI,KAAK,cAAc,IAAI,YAAY,GAAG;AACxC,eAAO,EAAE,QAAQ,QAAW,QAAO;;AAErC,WAAK,cAAc,IAAI,YAAY;;AAErC,WAAO,EAAE,QAAQ,QAAO;EAC1B;EAEO,iBAAc;AACnB,WAAO,KAAK,iBAAiB,eAAc;EAC7C;;;;ACvBK,IAAM,aAAa;AAInB,IAAM,yBAAyB,CAAC,YACrC,OAAO,KAAK,OAAO,EAAE,SAAS,IAAK,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAQ;;;ACa/E,IAAO,2BAAP,MAA+B;EACnC,YAAoB,kBAA4C,WAAoB;AAAhE,SAAA,mBAAA;AAA4C,SAAA,YAAA;AAE/C,SAAA,YAAkD,oBAAI,IAAG;AACzD,SAAA,uBAA8B,CAAA;AACvC,SAAA,YAAqB;EAJ0D;EAMhF,MAAM,SAAS,gBAAsC;AAE1D,QAAI,KAAK,qBAAqB,SAAS,GAAG;AACxC,aAAO;QACL,QAAQ,KAAK,qBAAqB,IAAG;QACrC,SAAS,iBAAgB;;;AAI7B,QAAI,KAAK,WAAW;AAClB,aAAO;QACL,QAAQ;QACR,SAAS,iBAAgB;;;AAI7B,UAAM,mBAAmB,iBAAgB;AAEzC,WAAO,KAAK,iBAAiB,eAAc,GAAI;AAE7C,YAAM,EAAE,QAAQ,QAAO,IAAM,MAAM,KAAK,iBAAiB,SACvD,cAAc;AAEhB,mBAAa,kBAAkB,OAAO;AAGtC,UAAI,QAAQ;AACV,cAAM,QAAQ,OAAO,eAAe,MAAM,WAAW,OAAO,YAAY,IAAI;AAC5E,cAAM,cAAc,KAAK,UAAU,IAAI,KAAK;AAC5C,cAAM,UAAU,OAAO;AACvB,YAAI,aAAa;AAEf,iBAAO,KAAK,OAAO,EAAE,IAAI,CAAC,QAAO;AAE/B,kBAAM,wBAAwB,QAAQ,GAAG,IACrC,QAAQ,GAAG,KACX,oBAAI,IAAG,GAAG,IAAI,SAAS,IAAI;AAC/B,kBAAM,kBAAkB,uBAAuB,qBAAqB;AACpE,wBAAY,IAAI,GAAG,EAAE,UAAU,eAAe;UAChD,CAAC;eACI;AAEL,gBAAM,WAAW,oBAAI,IAAG;AACxB,eAAK,UAAU,IAAI,OAAO,QAAQ;AAElC,iBAAO,KAAK,OAAO,EAAE,IAAI,CAAC,QAAO;AAC/B,kBAAM,gBAAgB,KAAK,UAAU,4BAA4B,GAAG;AAEpE,kBAAM,aAAa,iBAAiB,aAAa;AACjD,qBAAS,IAAI,KAAK,UAAU;AAC5B,gBAAI,eAAe;AACjB,oBAAM,kBAAkB,uBAAuB,QAAQ,GAAG,CAAC;AAC3D,yBAAW,UAAU,eAAe;mBAC/B;AACL,yBAAW,UAAU,QAAQ,GAAG,CAAC;;UAErC,CAAC;;;;AAKP,eAAW,YAAY,KAAK,UAAU,OAAM,GAAI;AAC9C,YAAM,cAAmB,CAAA;AACzB,iBAAW,CAAC,cAAc,UAAU,KAAK,SAAS,QAAO,GAAI;AAC3D,oBAAY,YAAY,IAAI,WAAW,UAAS;;AAElD,WAAK,qBAAqB,KAAK,WAAW;;AAE5C,SAAK,YAAY;AACjB,WAAO;MACL,QAAQ,KAAK,qBAAqB,IAAG;MACrC,SAAS;;EAEb;EAEO,iBAAc;AACnB,WAAO,KAAK,iBAAiB,eAAc,KAAM,KAAK,qBAAqB,SAAS;EACtF;;;;ACpFI,IAAO,gCAAP,MAAoC;EAMxC,YAAoB,kBAA4C,WAAoB;AAAhE,SAAA,mBAAA;AAA4C,SAAA,YAAA;AAL/C,SAAA,cAAuC,oBAAI,IAAG;AAC9C,SAAA,uBAA8B,CAAA;AAEvC,SAAA,YAAqB;AAI3B,SAAK,gBAAgB,KAAK,UAAU,WAAW,CAAC;EAClD;EAEO,MAAM,SAAS,gBAAsC;AAE1D,QAAI,KAAK,qBAAqB,SAAS,GAAG;AACxC,aAAO;QACL,QAAQ,KAAK,qBAAqB,IAAG;QACrC,SAAS,iBAAgB;;;AAI7B,QAAI,KAAK,WAAW;AAClB,aAAO;QACL,QAAQ;QACR,SAAS,iBAAgB;;;AAI7B,UAAM,mBAAmB,iBAAgB;AAEzC,WAAO,KAAK,iBAAiB,eAAc,GAAI;AAE7C,YAAM,EAAE,QAAQ,QAAO,IAAM,MAAM,KAAK,iBAAiB,SACvD,cAAc;AAEhB,mBAAa,kBAAkB,OAAO;AAGtC,UAAI,QAAQ;AACV,YAAI,WAAmB;AACvB,YAAI,UAAe;AACnB,YAAI,OAAO,cAAc;AAEvB,oBAAU,OAAO;AACjB,qBAAW,MAAM,WAAW,OAAO,YAAY;;AAGjD,cAAM,aAAa,KAAK,YAAY,IAAI,QAAQ;AAChD,YAAI,CAAC,YAAY;AAEf,eAAK,YAAY,IAAI,UAAU,iBAAiB,KAAK,aAAa,CAAC;;AAGrE,YAAI,KAAK,eAAe;AACtB,gBAAM,kBAAkB,uBAAuB,QAAQ,CAAC,CAAC;AAEzD,cAAI,oBAAoB,MAAM;AAC5B,iBAAK,YAAY;;AAEnB,eAAK,YAAY,IAAI,QAAQ,EAAE,UAAU,eAAe;eACnD;AAGL,eAAK,YAAY,IAAI,QAAQ,EAAE,UAAU,OAAO;;;;AAMtD,QAAI,KAAK,WAAW;AAClB,aAAO;QACL,QAAQ;QACR,SAAS;;;AAIb,eAAW,cAAc,KAAK,YAAY,OAAM,GAAI;AAClD,WAAK,qBAAqB,KAAK,WAAW,UAAS,CAAE;;AAEvD,SAAK,YAAY;AACjB,WAAO;MACL,QAAQ,KAAK,qBAAqB,IAAG;MACrC,SAAS;;EAEb;EAEO,iBAAc;AACnB,WAAO,KAAK,iBAAiB,eAAc,KAAM,KAAK,qBAAqB,SAAS;EACtF;;;;AC1FF,IAAa,iCAAb,MAAa,gCAA8B;EAMzC,YACU,eACA,gBACA,OACA,SACA,+BAA4D;AAJ5D,SAAA,gBAAA;AACA,SAAA,iBAAA;AACA,SAAA,QAAA;AACA,SAAA,UAAA;AACA,SAAA,gCAAA;AAER,SAAK,WAAW;AAChB,SAAK,WAAW,QAAQ,cAAc;AACtC,QAAI,KAAK,aAAa,QAAW;AAC/B,WAAK,WAAW,gCAA+B;;AAIjD,UAAM,aAAa,8BAA8B,UAAU;AAC3D,QAAI,MAAM,QAAQ,UAAU,KAAK,WAAW,SAAS,GAAG;AAGtD,WAAK,WAAW,IAAI,yBAClB,IAAI,6BACF,KAAK,eACL,KAAK,gBACL,KAAK,OACL,KAAK,SACL,KAAK,6BAA6B,CACnC;WAEE;AACL,WAAK,WAAW,IAAI,8BAClB,KAAK,eACL,KAAK,gBACL,KAAK,OACL,KAAK,SACL,KAAK,6BAA6B;;AAGtC,QACE,OAAO,KAAK,8BAA8B,UAAU,2BAA2B,EAAE,SAAS,KAC1F,8BAA8B,UAAU,WAAW,SAAS,KAC5D,8BAA8B,UAAU,mBAAmB,SAAS,GACpE;AACA,UAAI,8BAA8B,UAAU,gBAAgB;AAC1D,aAAK,WAAW,IAAI,8BAClB,KAAK,UACL,8BAA8B,SAAS;aAEpC;AACL,aAAK,WAAW,IAAI,yBAClB,KAAK,UACL,8BAA8B,SAAS;;;AAK7C,UAAM,MAAM,8BAA8B,UAAU;AACpD,QAAI,OAAO,QAAQ,UAAU;AAC3B,WAAK,WAAW,IAAI,6BAA6B,KAAK,UAAU,GAAG,GAAG;;AAIxE,UAAM,QAAQ,8BAA8B,UAAU;AACtD,UAAM,SAAS,8BAA8B,UAAU;AACvD,QAAI,OAAO,UAAU,YAAY,OAAO,WAAW,UAAU;AAC3D,WAAK,WAAW,IAAI,6BAA6B,KAAK,UAAU,QAAQ,KAAK;;AAI/E,UAAM,eAAe,8BAA8B,UAAU;AAC7D,QAAI,iBAAiB,WAAW;AAC9B,WAAK,WAAW,IAAI,iCAAiC,KAAK,QAAQ;;AAEpE,QAAI,iBAAiB,aAAa;AAChC,WAAK,WAAW,IAAI,mCAAmC,KAAK,QAAQ;;EAExE;EAEO,MAAM,SAAS,gBAAsC;AAC1D,WAAO,KAAK,SAAS,SAAS,cAAc;EAC9C;;EAGO,iBAAc;AACnB,WAAO,KAAK,SAAS,eAAc;EACrC;EAEO,MAAM,UAAU,gBAAsC;AAG3D,QAAI,OAAO,KAAK,SAAS,cAAc,YAAY;AACjD,aAAO,KAAK,SAAS,UAAU,cAAc;WACxC;AACL,WAAK,cAAc,CAAA;AACnB,WAAK,uBAAuB,iBAAgB;AAC5C,aAAO,KAAK,yBAAyB,cAAc;;EAEvD;EAEQ,MAAM,yBACZ,gBAAsC;AAEtC,QAAI;AACF,YAAM,EAAE,QAAQ,MAAM,QAAO,IAAK,MAAM,KAAK,SAAS,SAAS,cAAc;AAC7E,mBAAa,KAAK,sBAAsB,OAAO;AAC/C,UAAI,SAAS,QAAW;AAEtB,YAAI,KAAK,YAAY,WAAW,GAAG;AACjC,iBAAO;YACL,QAAQ;YACR,SAAS,KAAK;;eAEX;AAEL,gBAAM,OAAO,KAAK;AAClB,eAAK,cAAc,CAAA;AACnB,iBAAO,EAAE,QAAQ,MAAM,SAAS,KAAK,qBAAoB;;aAEtD;AAEL,aAAK,YAAY,KAAK,IAAI;AAC1B,YAAI,KAAK,YAAY,UAAU,KAAK,UAAU;AAE5C,gBAAM,OAAO,KAAK,YAAY,MAAM,GAAG,KAAK,QAAQ;AACpD,eAAK,cAAc,KAAK,YAAY,OAAO,KAAK,QAAQ;AACxD,iBAAO,EAAE,QAAQ,MAAM,SAAS,KAAK,qBAAoB;eACpD;AAGL,iBAAO,KAAK,yBAAyB,cAAc;;;aAGhD,KAAU;AACjB,mBAAa,KAAK,sBAAsB,IAAI,OAAO;AACnD,UAAI,UAAU,KAAK;AACnB,UAAI,KAAK;AACP,cAAM;;;EAGZ;;AA1Ie,+BAAA,oBAAoB;;;ACS/B,IAAO,gBAAP,MAAoB;;;;EASxB,YACU,eACA,OACA,SACA,gBACA,cACA,cAA2B;AAL3B,SAAA,gBAAA;AACA,SAAA,QAAA;AACA,SAAA,UAAA;AACA,SAAA,iBAAA;AACA,SAAA,eAAA;AACA,SAAA,eAAA;AAER,SAAK,QAAQ;AACb,SAAK,iBAAiB;AACtB,SAAK,UAAU,WAAW,CAAA;AAC1B,SAAK,eAAe;AACpB,SAAK,yBAAyB,iBAAgB;AAC9C,SAAK,MAAK;AACV,SAAK,gBAAgB;EACvB;;;;;;;;;;;;;;;;;;;;;;;EAwBc,mBAAgB;;AAC5B,WAAK,MAAK;AACV,UAAI,iBAAiB,IAAI,uBACvB,KAAK,cAAc,iBACnB,mBAAmB,qBACnB,IAAI;AAEN,WAAK,mBAAmB,KAAK,eAAe,cAAc;AAC1D,aAAO,KAAK,sBAAsB,eAAc,GAAI;AAClD,YAAI;AACJ,YAAI;AACF,qBAAW,MAAA,QAAM,KAAK,sBAAsB,UAAU,cAAc,CAAC;iBAC9D,OAAY;AACnB,cAAI,KAAK,eAAe,KAAK,GAAG;AAC9B,kBAAA,QAAM,KAAK,gCAA+B,CAAE;AAC5C,gBAAI;AACF,yBAAW,MAAA,QAAM,KAAK,sBAAsB,UAAU,cAAc,CAAC;qBAC9D,YAAiB;AACxB,mBAAK,iBAAiB,UAAU;;iBAE7B;AACL,kBAAM;;;AAIV,cAAM,eAAe,IAAI,aACvB,SAAS,QACT,SAAS,SACT,KAAK,sBAAsB,eAAc,GACzC,eAAe,aAAa,KAAK,cAAc,gBAAe,CAAE,CAAC;AAEnE,yBAAiB,IAAI,uBACnB,KAAK,cAAc,iBACnB,mBAAmB,qBACnB,IAAI;AAEN,YAAI,SAAS,WAAW,QAAW;AACjC,gBAAA,MAAA,QAAM,YAAY;;;IAGxB,CAAC;;;;;;;EAOM,iBAAc;AACnB,WAAO,KAAK,sBAAsB,eAAc;EAClD;;;;EAMO,MAAM,WAAQ;AACnB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,aAAO,KAAK,iBAAiB,cAAc;IAC7C,GAAG,KAAK,aAAa;EACvB;;;;EAKO,MAAM,iBAAiB,gBAAsC;AAClE,SAAK,MAAK;AACV,QAAI;AACJ,QAAI;AACF,iBAAW,MAAM,KAAK,sBAAsB,cAAc;aACnD,OAAY;AACnB,WAAK,iBAAiB,KAAK;;AAE7B,WAAO;EACT;;;;;;;;EASO,MAAM,YAAS;AACpB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,WAAK,mBAAmB,wBACtB,OAAO,iBAAwC;AAC7C,eAAO,KAAK,eAAe,YAAY;MACzC,GACA,gBACA,mBAAmB,eAAe;AAEpC,UAAI,CAAC,KAAK,eAAe;AACvB,cAAM,KAAK,KAAI;;AAGjB,UAAI;AACJ,UAAI;AACF,mBAAW,MAAM,KAAK,sBAAsB,UAAU,cAAc;eAC7D,OAAY;AACnB,YAAI,KAAK,eAAe,KAAK,GAAG;AAC9B,gBAAM,KAAK,gCAA+B;AAC1C,cAAI;AACF,uBAAW,MAAM,KAAK,sBAAsB,UAAU,cAAc;mBAC7D,YAAiB;AACxB,iBAAK,iBAAiB,UAAU;;eAE7B;AACL,gBAAM;;;AAGV,aAAO,IAAI,aACT,SAAS,QACT,SAAS,SACT,KAAK,sBAAsB,eAAc,GACzC,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;EAKO,QAAK;AACV,SAAK,mBAAmB;AACxB,SAAK,yBAAyB,iBAAgB;AAC9C,SAAK,wBAAwB,CAAA;AAC7B,SAAK,wBAAwB,IAAI,6BAC/B,KAAK,SACL,KAAK,cAAc;EAEvB;EAEQ,MAAM,sBACZ,gBAAsC;AAEtC,SAAK,mBAAmB,wBACtB,OAAO,iBAAwC;AAC7C,aAAO,KAAK,eAAe,YAAY;IACzC,GACA,gBACA,mBAAmB,eAAe;AAIpC,QAAI,CAAC,KAAK,eAAe;AACvB,YAAM,KAAK,KAAI;;AAEjB,WAAO,KAAK,sBAAsB,eAAc,GAAI;AAClD,UAAI;AACJ,UAAI;AACF,mBAAW,MAAM,KAAK,sBAAsB,SAAS,cAAc;eAC5D,OAAY;AACnB,YAAI,KAAK,eAAe,KAAK,GAAG;AAC9B,gBAAM,KAAK,gCAA+B;AAC1C,qBAAW,MAAM,KAAK,sBAAsB,SAAS,cAAc;eAC9D;AACL,gBAAM;;;AAGV,YAAM,EAAE,QAAQ,QAAO,IAAK;AAE5B,mBAAa,KAAK,wBAAwB,OAAO;AAEjD,UAAI,WAAW,QAAW;AACxB,aAAK,sBAAsB,KAAK,MAAM;;;AAG1C,WAAO,IAAI,aACT,KAAK,uBACL,KAAK,wBACL,KAAK,sBAAsB,eAAc,GACzC,0BAAyB,CAAE;EAE/B;EAEQ,MAAM,kCAA+B;AAC3C,UAAM,oBAAoB,MAAM,KAAK;AAGrC,QAAI,6BAA6B,OAAO;AACtC,YAAM;;AAGR,UAAM,YAAY,kBAAkB;AACpC,UAAM,YAAY,UAAU;AAC5B,QAAI,UAAU,WAAW,SAAS,KAAK,UAAU,mBAAmB,OAAO;AACzE,YAAM,IAAI,MAAM,8CAA8C;;AAEhE,SAAK,wBAAwB,IAAI,+BAC/B,KAAK,eACL,KAAK,cACL,KAAK,OACL,KAAK,SACL,SAAS;EAEb;EAEQ,MAAM,eAAe,gBAAsC;AACjE,QAAI,CAAC,KAAK,oBAAoB,KAAK,iBAAiB,aAAa,MAAM;AACrE,aAAO,KAAK,cACT,aACC,gBAAgB,KAAK,YAAY,IAAI,SACrC,aAAa,MACb,KAAK,cACL,KAAK,OACL,KAAK,SACL,cAAc,EAEf,MAAM,CAAC,UAAe,KAAK;;AAEhC,WAAO,KAAK;EACd;EAEQ,eAAe,OAAoB;;AACzC,UACEC,MAAA,MAAM,UAAI,QAAAA,QAAA,SAAA,SAAAA,IAAE,wBACZ,MAAM,QAAQ,SAAS,qCAAqC,GAC5D;AACA,aAAO,MAAM,SAAS,YAAY,cAAc,KAAK,iBAAiB,aAAa;WAC9E;AACL,YAAM;;EAEV;EAGQ,MAAM,OAAI;AAChB,QAAI,KAAK,kBAAkB,MAAM;AAC/B;;AAEF,QAAI,KAAK,gBAAgB,QAAW;AAClC,WAAK,cAAc,KAAK,MAAK;;AAE/B,WAAO,KAAK;EACd;EACQ,MAAM,QAAK;AACjB,QAAI,KAAK,QAAQ,mBAAmB,QAAQ,KAAK,iBAAiB,aAAa,MAAM;AACnF,YAAM,KAAK,gCAA+B;;AAE5C,SAAK,gBAAgB;EACvB;EAEQ,iBAAiB,KAAQ;AAC/B,QAAI,IAAI,SAAS,KAAK;AACpB,YAAM,QAAQ,IAAI,MAChB,8EAA8E;AAEhF,YAAM,OAAO;AACb,YAAM,gBAAgB;AACtB,YAAM;WACD;AACL,YAAM;;EAEV;;;;ACrUI,IAAO,mBAAP,cAAgC,iBAA+C;EACnF,YACE,UACA,SACA,YACA,UACA,aAA8B;AAE9B,UAAM,UAAU,SAAS,YAAY,WAAW;AAChD,SAAK,WAAW;EAClB;;;;ACZF,eAAsB,2BACpB,gBACA,WAAoB;AAEpB,QAAM,yBAAyB,MAAM,UAAU,2BAA2B,cAAc;AACxF,SAAO,uBAAuB;AAChC;;;ACMM,IAAO,WAAP,MAAe;;;;EAInB,IAAW,MAAG;AACZ,WAAO,IAAI,KAAK,UAAU,GAAG,IAAI,UAAU,KAAK,oBAAoB,IAAI,KAAK,EAAE;EACjF;;;;;;EAMA,YACkB,WACA,IACC,eACT,cAA2B;AAHnB,SAAA,YAAA;AACA,SAAA,KAAA;AACC,SAAA,gBAAA;AACT,SAAA,eAAA;AAER,SAAK,eAAe;EACtB;;;;EAKO,MAAM,KAAK,SAAwB;AACxC,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,OAAO,gBAAgB,KAAK,KAAK,aAAa,SAAS;AAC7D,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,KAAyB;QACjE;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AAED,aAAO,IAAI,iBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;EAKO,MAAM,OAAO,SAAwB;AAC1C,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI,KAAK,iBAAiB,QAAW;AACnC,cAAM,yBAAyB,MAAM,2BACnC,gBACA,KAAK,SAAS;AAEhB,aAAK,eAAe,sBAAsB,sBAAsB;;AAElE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,OAA2B;QACnE;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA,cAAc,KAAK;QACnB;OACD;AACD,aAAO,IAAI,iBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;AChFI,IAAO,YAAP,MAAgB;EACpB,YACkB,WACC,eAA4B;AAD7B,SAAA,YAAA;AACC,SAAA,gBAAA;EAChB;EAgBI,MAAS,OAA8B,SAAqB;AACjE,UAAM,OAAO,gBAAgB,KAAK,UAAU,KAAK,aAAa,SAAS;AACvE,UAAM,KAAK,cAAc,KAAK,UAAU,GAAG;AAE3C,WAAO,IAAI,cACT,KAAK,eACL,OACA,SACA,CAAC,UAAkC,iBAAgB;AACjD,aAAO,KAAK,cAAc,UAAU;QAClC;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ,UAAU,CAAC,WAAW,OAAO;QAC7B;QACA,SAAS;QACT,gBAAgB;OACjB;IACH,CAAC;EAEL;;;;;EAMO,QAAQ,SAAqB;AAClC,WAAO,KAAK,MAAqC,QAAW,OAAO;EACrE;;;;AC/DF,IAAY;CAAZ,SAAYC,yBAAsB;AAChC,EAAAA,wBAAA,QAAA,IAAA;AACA,EAAAA,wBAAA,gBAAA,IAAA;AACF,GAHY,2BAAA,yBAAsB,CAAA,EAAA;;;ACO5B,IAAO,eAAP,cAAsD,iBAA8B;EACxF,YACE,UACA,SACA,YACA,gBACA,MACA,aAA8B;AAE9B,UAAM,UAAU,SAAS,YAAY,aAAa,cAAc;AAChE,SAAK,OAAO;EACd;;;;ACQI,IAAO,OAAP,MAAW;;;;EAKf,IAAW,MAAG;AACZ,WAAO,kBAAkB,KAAK,UAAU,SAAS,IAAI,KAAK,UAAU,IAAI,KAAK,EAAE;EACjF;;;;;;;EAQA,YACkB,WACA,IACC,eACjB,cAA2B;AAHX,SAAA,YAAA;AACA,SAAA,KAAA;AACC,SAAA,gBAAA;AAGjB,SAAK,eACH,iBAAiB,SAAY,SAAY,8BAA8B,YAAY;EACvF;;;;;;;;;;;;;;;;;;;;;;;;;EA0BO,MAAM,KACX,UAA0B,CAAA,GAAE;AAE5B,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI,KAAK,iBAAiB,QAAW;AACnC,cAAM,yBAAyB,MAAM,2BACnC,gBACA,KAAK,SAAS;AAEhB,aAAK,eAAe,sBAAsB,sBAAsB;;AAGlE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AACjC,UAAI;AACJ,UAAI;AACF,mBAAW,MAAM,KAAK,cAAc,KAAQ;UAC1C;UACA,cAAc,aAAa;UAC3B,YAAY;UACZ;UACA,cAAc,KAAK;UACnB;SACD;eACM,OAAY;AACnB,YAAI,MAAM,SAAS,YAAY,UAAU;AACvC,gBAAM;;AAER,mBAAW;;AAGb,aAAO,IAAI,aACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,SAAS,WACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;EA6BO,MAAM,QACX,MACA,UAA0B,CAAA,GAAE;AAE5B,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI,KAAK,iBAAiB,QAAW;AACnC,cAAM,uBAAuB,MAAM,2BACjC,gBACA,KAAK,SAAS;AAEhB,aAAK,eAAe,qBAAqB,MAAM,oBAAoB;;AAGrE,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,oBAAoB,MAAM,GAAG,GAAG;AACnC,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,QAAW;QACnD;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA,cAAc,KAAK;QACnB;OACD;AACD,aAAO,IAAI,aACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,SAAS,WACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;;;;;;EAUO,MAAM,OACX,UAA0B,CAAA,GAAE;AAE5B,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI,KAAK,iBAAiB,QAAW;AACnC,cAAM,uBAAuB,MAAM,2BACjC,gBACA,KAAK,SAAS;AAEhB,aAAK,eAAe,sBAAsB,oBAAoB;;AAGhE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,OAAU;QAClD;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA,cAAc,KAAK;QACnB;OACD;AAED,aAAO,IAAI,aACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,SAAS,WACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;;;;;;EAUO,MAAM,MACX,MACA,UAA0B,CAAA,GAAE;AAE5B,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI,KAAK,iBAAiB,QAAW;AACnC,cAAM,uBAAuB,MAAM,2BACjC,gBACA,KAAK,SAAS;AAEhB,aAAK,eAAe,qBAAqB,MAAM,oBAAoB;;AAGrE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,MAAS;QACjD;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA,cAAc,KAAK;QACnB;OACD;AAED,aAAO,IAAI,aACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,SAAS,WACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;ACxQI,IAAO,qBAAP,MAAyB;;;;EAI7B,YAIkB,QAIA,OAIA,YAChB,SACgB,aAA8B;AAV9B,SAAA,SAAA;AAIA,SAAA,QAAA;AAIA,SAAA,aAAA;AAEA,SAAA,cAAA;AAEhB,SAAK,UAAU,OAAO,OAAO,OAAO;EACtC;;;;EAKA,IAAW,gBAAa;AACtB,UAAM,MAAM,KAAK,QAAQ,UAAU,YAAY,aAAa;AAC5D,WAAO,MAAM,SAAS,KAAK,EAAE,IAAI;EACnC;;;;EAKA,IAAW,aAAU;AACnB,WAAO,KAAK,QAAQ,UAAU,YAAY,UAAU;EACtD;;;;;;EAOA,IAAW,eAAY;AACrB,WAAO,KAAK;EACd;;;;EAKA,IAAW,eAAY;AACrB,WAAO,KAAK,QAAQ,UAAU,YAAY,YAAY;EACxD;;;;;;;;;;EAWA,IAAW,OAAI;AACb,WAAO,KAAK,QAAQ,UAAU,YAAY,IAAI;EAChD;;;;ACvDF,IAAa,qBAAb,MAAa,oBAAkB;;;;EAU7B,YACU,eACA,YACA,cACA,cACA,mBAAoC;AAJpC,SAAA,gBAAA;AACA,SAAA,aAAA;AACA,SAAA,eAAA;AACA,SAAA,eAAA;AACA,SAAA,oBAAA;AAGR,UAAM,oBAAoB,iBAAiB;AAC3C,SAAK,uBAAuB;AAE5B,QAAI,2BAA2B;AAC/B,QAAI,kBAAkB,cAAc;AAClC,WAAK,kBAAkB,kBAAkB;AACzC,iCAA2B;;AAG7B,QAAI,kBAAkB,WAAW;AAI/B,WAAK,kBAAkB,kBAAkB,UAAU,YAAW;AAC9D,iCAA2B;;AAG7B,QAAI,4BAA4B,CAAC,kBAAkB,oBAAoB;AACrE,WAAK,kBAAkB,oBAAmB;;EAE9C;;;;;;;;EASA,IAAI,iBAAc;AAChB,WAAO,KAAK,mBAAmB,YAAY;EAC7C;;;;EAKc,mBAAgB;;AAC5B,SAAG;AACD,cAAM,SAAS,MAAA,QAAM,KAAK,UAAS,CAAE;AACrC,YAAI,OAAO,QAAQ,GAAG;AACpB,gBAAA,MAAA,QAAM,MAAM;;eAEP,KAAK;IAChB,CAAC;;;;;EAKM,MAAM,YAAS;AACpB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,WAAW,MAAM,KAAK,gBAAgB,cAAc;AAC1D,WAAK,iBAAiB,SAAS;AAC/B,WAAK,kBAAkB,SAAS,QAAQ,UAAU,YAAY,IAAI;AAClE,aAAO;IACT,GAAG,KAAK,aAAa;EACvB;EAEQ,MAAM,gBACZ,gBAAsC;AAEtC,QAAI,CAAC,KAAK,sBAAsB;AAC9B,YAAM,IAAI,MACR,yFAAyF;;AAG7F,UAAM,cAA2B,EAAE,gBAAgB,CAAA,GAAI,oBAAoB,KAAI;AAE/E,QAAI,OAAO,KAAK,kBAAkB,iBAAiB,UAAU;AAC3D,kBAAY,eAAe,KAAK,kBAAkB;;AAGpD,QAAI,KAAK,kBAAkB,cAAc;AACvC,kBAAY,eAAe,KAAK,kBAAkB;;AAGpD,QAAI,KAAK,iBAAiB;AACxB,kBAAY,kBAAkB;QAC5B,MAAM,UAAU,YAAY;QAC5B,WAAW,KAAK;;;AAIpB,QAAI,KAAK,iBAAiB;AACxB,kBAAY,eAAe,UAAU,YAAY,eAAe,IAAI,KAAK;;AAG3E,UAAM,WAA0C,MAAO,KAAK,cAAc,UAAa;MACrF,MAAM,KAAK;MACX,cAAc,aAAa;MAC3B,YAAY,KAAK;MACjB,UAAU,CAAC,WAAY,SAAS,OAAO,YAAY,CAAA;MACnD,OAAO;MACP,SAAS;MACT,cAAc,KAAK;MACnB;KACD;AAED,WAAO,IAAI,mBACT,SAAS,QACT,SAAS,SAAS,SAAS,OAAO,SAAS,GAC3C,SAAS,MACT,SAAS,SACT,0BAAyB,CAAE;EAE/B;;AAzHwB,mBAAA,4BAA4B;;;ACPtD,IAAMC,OAAN,MAAMA,cAAaC,MAAAA;EACjBC,YAAYC,GAAwBC,GAAAA;AAElC,QADA,MAAMD,CAAN,GADkC,KAAA,OAAAC,GAE9BD,IAASH,MAAKK;AAChB,YAAM,IAAIC,WAAW,8BAAf;EAET;EAEY,OAANC,OAAOC,GAAD;AAAA,QAAA,IASoBC,KAAKC,OAAAA,IAA7BC,OAAOC;AARd,QAAmB,YAAf,OAAOJ,GAAkB;AAC3B,UAAY,MAARA;AAAW,eAAOR,MAAKa,OAAL;AACtB,UAAIb,MAAKc,gBAAgBN,CAArB;AAAJ,eACY,IAANA,IACKR,MAAKe,WAAW,CAACP,GAAjB,IAAA,IAEFR,MAAKe,WAAWP,GAAhB,KAAA;AAET,UAAI,CAAC,EAAgBA,CAAhB,KAAwB,EAAWA,CAAX,MAAoBA;AAC/C,cAAM,IAAIF,WAAW,gBAAgBE,IAAhB,6DAAf;AAGR,aAAOR,MAAKgB,aAAaR,CAAlB;IACR;AAAM,QAAmB,YAAf,OAAOA,GAAkB;AAClC,YAAMS,KAASjB,MAAKkB,aAAaV,CAAlB;AACf,UAAe,SAAXS;AACF,cAAM,IAAIE,YAAY,oBAAoBX,IAAM,cAA1C;AAER,aAAOS;IACR;AAAM,QAAmB,aAAf,OAAOT;AAAX,aACD,SAAAA,IACKR,MAAKe,WAAW,GAAhB,KAAA,IAEFf,MAAKa,OAAL;AACF,QAAmB,YAAf,OAAOL,GAAkB;AAClC,UAAIA,EAAIN,gBAAgBF;AAAM,eAAOQ;AACrC,YAAMY,KAAYpB,MAAKqB,cAAcb,CAAnB;AAClB,aAAOR,MAAKO,OAAOa,EAAZ;IACR;AACD,UAAM,IAAIE,UAAU,oBAAoBd,IAAM,cAAxC;EACP;EAEDe,gBAAa;AACX,UAAMN,IAAS,CAAC,SAAD;AACf,eAAWO,KAAS;AAClBP,QAAOQ,MAAMD,KAASA,MAAU,GAAGE,SAAS,EAAvB,IAA6BF,KAAS,IAA3D;AAGF,WADAP,EAAOQ,KAAK,GAAZ,GACOR,EAAOU,KAAK,EAAZ;EACR;EAEQD,SAASE,IAAgB,IAAjB;AACf,QAAY,IAARA,KAAqB,KAARA;AACf,YAAM,IAAItB,WACN,oDADE;AAAN,WAGkB,MAAhB,KAAKH,SAAqB,MACA,MAAzByB,IAASA,IAAQ,KACb5B,MAAK6B,yBAAyB,MAAMD,CAApC,IAEF5B,MAAK8B,kBAAkB,MAAMF,GAA7B,KAAA;EACR;EAIc,OAARG,SAASC,GAAD;AACb,UAAMC,IAAUD,EAAE7B;AAClB,QAAgB,MAAZ8B;AAAe,aAAO;AAC1B,QAAgB,MAAZA,GAAe;AACjB,YAAMC,KAAQF,EAAEG,gBAAgB,CAAlB;AACd,aAAOH,EAAE5B,OAAO,CAAC8B,KAAQA;IAC1B;AAAA,UACKE,IAAOJ,EAAEK,QAAQJ,IAAU,CAApB,GACPK,IAAkBtC,MAAKuC,QAAQH,CAAb,GAClBI,IAAuB,KAAVP,IAAeK;AAClC,QAAiB,OAAbE;AAAmB,aAAOR,EAAE5B,OAAO,YAAT,IAAA;AAAP,QACnBqC,IAAWD,IAAa,GACxBE,IAAeN,GACfO,IAAaV,IAAU;AAC3B,UAAMW,IAAQN,IAAkB;AAChC,QAAIO,IAA0B,OAAVD,IAAgB,IAAIF,KAAgBE;AACxDC,WAAkB;AAClB,UAAMC,IAAwBF,IAAQ;AAAtC,QACIG,IAAwB,MAATH,IAAe,IAAKF,KAAiB,KAAKE,GACzDI,IAAuB,KAAKJ;AAAAA,SACJ,IAAxBE,KAA0C,IAAbH,MAC/BA,KACAD,IAAeV,EAAEK,QAAQM,CAAV,GACfE,KAAiBH,MAAkB,KAAKI,GACxCC,IAAcL,KAAgBI,IAAwB,GACtDE,IAAuBF,IAAwB,IAEnB,IAAvBE,KAAyC,IAAbL;AACjCA,WACAD,IAAeV,EAAEK,QAAQM,CAAV,GAEbI,KAD0B,MAAxBC,IACcN,KAAiBM,IAAuB,KAExCN,MAAkB,KAAKM,GAEzCA,KAAwB;AAE1B,UAAMC,IAAWjD,MAAKkD,iBAAiBlB,GAAGgB,GACtCL,GAAYD,CADC;AAEjB,SAAiB,MAAbO,KAAgC,MAAbA,KAAwC,MAAP,IAAdF,QACxCA,IAAeA,IAAc,MAAO,GAChB,MAAhBA,MAEFF,KAC8B,KAAzBA,MAAiB,OAEpBA,IAAe,GACfJ,KACe,OAAXA;AAEF,aAAOT,EAAE5B,OAAO,YAAT,IAAA;AAKf,UAAM+C,IAAUnB,EAAE5B,OAAF,cAAqB;AAIrC,WAHAqC,IAAYA,IAAW,QAAU,IACjCzC,MAAKoD,qBAAqB,CAA1B,IAA+BD,IAAUV,IAAWI,GACpD7C,MAAKoD,qBAAqB,CAA1B,IAA+BL,GACxB/C,MAAKqD,uBAAuB,CAA5B;EACR;EAIgB,OAAVC,WAAWtB,GAAD;AACf,QAAiB,MAAbA,EAAE7B;AAAc,aAAO6B;AAC3B,UAAMf,IAASe,EAAEuB,OAAF;AAEf,WADAtC,EAAOb,OAAO,CAAC4B,EAAE5B,MACVa;EACR;EAEgB,OAAVuC,WAAWxB,GAAD;AAAA,WACXA,EAAE5B,OAEGJ,MAAKyD,iBAAiBzB,CAAtB,EAAyB0B,OAAzB,IAGF1D,MAAK2D,iBAAiB3B,GAAtB,IAAA;EACR;EAEkB,OAAZ4B,aAAa5B,GAAS6B,GAAV;AACjB,QAAIA,EAAEzD;AACJ,YAAM,IAAIE,WAAW,2BAAf;AAER,QAAiB,MAAbuD,EAAE1D;AACJ,aAAOH,MAAKe,WAAW,GAAhB,KAAA;AAET,QAAiB,MAAbiB,EAAE7B;AAAc,aAAO6B;AAC3B,QAAiB,MAAbA,EAAE7B,UAAiC,MAAjB6B,EAAEK,QAAQ,CAAV;AAAtB,aAEML,EAAE5B,QAA+B,MAAP,IAAfyD,EAAExB,QAAQ,CAAV,KACNrC,MAAKsD,WAAWtB,CAAhB,IAGFA;AAIT,QAAe,IAAX6B,EAAE1D;AAAY,YAAM,IAAIG,WAAW,gBAAf;AACxB,QAAIwD,IAAWD,EAAE1B,gBAAgB,CAAlB;AACf,QAAiB,MAAb2B;AAAgB,aAAO9B;AAC3B,QAAI8B,KAAY9D,MAAK+D;AACnB,YAAM,IAAIzD,WAAW,gBAAf;AAER,QAAiB,MAAb0B,EAAE7B,UAAiC,MAAjB6B,EAAEK,QAAQ,CAAV,GAAoB;AAAA,YAElC2B,KAAe,KAAuB,IAAjBF,IAAW,KAChC1D,KAAO4B,EAAE5B,QAA4B,MAAP,IAAX0D,IACnB7C,KAAS,IAAIjB,MAAKgE,IAAc5D,EAAvB;AACfa,MAAAA,GAAOgD,mBAAP;AAEA,YAAMC,IAAM,KAAMJ,IAAW;AAE7B,aADA7C,GAAOkD,WAAWH,KAAe,GAAGE,CAApC,GACOjD;IACR;AAAA,QACGA,IAAS,MACTmD,IAAgBpC;AAIpB,SAFuB,MAAP,IAAX8B,OAAqB7C,IAASe,IACnC8B,MAAa,GACO,MAAbA,GAAgBA,MAAa;AAClCM,UAAgBpE,MAAKqE,SAASD,GAAeA,CAA7B,GACO,MAAP,IAAXN,OACY,SAAX7C,IACFA,IAASmD,IAETnD,IAASjB,MAAKqE,SAASpD,GAAQmD,CAAtB;AAKf,WAAOnD;EACR;EAEc,OAARoD,SAASrC,GAAS6B,GAAV;AACb,QAAiB,MAAb7B,EAAE7B;AAAc,aAAO6B;AAC3B,QAAiB,MAAb6B,EAAE1D;AAAc,aAAO0D;AAC3B,QAAIS,IAAetC,EAAE7B,SAAS0D,EAAE1D;AACG,UAA/B6B,EAAEuC,SAAF,IAAeV,EAAEU,SAAF,KACjBD;AAEF,UAAMrD,IAAS,IAAIjB,MAAKsE,GAActC,EAAE5B,SAASyD,EAAEzD,IAApC;AACfa,MAAOgD,mBAAP;AACA,aAASO,IAAI,GAAGA,IAAIxC,EAAE7B,QAAQqE;AAC5BxE,YAAKyE,qBAAqBZ,GAAG7B,EAAEK,QAAQmC,CAAV,GAAcvD,GAAQuD,CAAnD;AAEF,WAAOvD,EAAOyC,OAAP;EACR;EAEY,OAANgB,OAAO1C,GAAS6B,GAAV;AACX,QAAiB,MAAbA,EAAE1D;AAAc,YAAM,IAAIG,WAAW,kBAAf;AAC1B,QAAmC,IAA/BN,MAAK2E,kBAAkB3C,GAAG6B,CAA1B;AAAkC,aAAO7D,MAAKa,OAAL;AAAP,UAChC+D,IAAa5C,EAAE5B,SAASyD,EAAEzD,MAC1ByE,IAAUhB,EAAE1B,gBAAgB,CAAlB;AAChB,QAAI2C;AACJ,QAAiB,MAAbjB,EAAE1D,UAA2B,SAAX0E,GAAmB;AACvC,UAAgB,MAAZA;AACF,eAAOD,MAAe5C,EAAE5B,OAAO4B,IAAIhC,MAAKsD,WAAWtB,CAAhB;AAErC8C,UAAW9E,MAAK+E,mBAAmB/C,GAAG6C,GAAS,IAApC;IACZ;AACCC,UAAW9E,MAAKgF,mBAAmBhD,GAAG6B,GAA3B,MAAA,KAAA;AAGb,WADAiB,EAAS1E,OAAOwE,GACTE,EAASpB,OAAT;EACR;EAEe,OAATuB,UAAUjD,GAAS6B,GAAV;AACd,QAAiB,MAAbA,EAAE1D;AAAc,YAAM,IAAIG,WAAW,kBAAf;AAC1B,QAAmC,IAA/BN,MAAK2E,kBAAkB3C,GAAG6B,CAA1B;AAAkC,aAAO7B;AAC7C,UAAM6C,IAAUhB,EAAE1B,gBAAgB,CAAlB;AAChB,QAAiB,MAAb0B,EAAE1D,UAA2B,SAAX0E,GAAmB;AACvC,UAAgB,MAAZA;AAAe,eAAO7E,MAAKa,OAAL;AAC1B,YAAMqE,KAAiBlF,MAAKmF,mBAAmBnD,GAAG6C,CAA3B;AAFgB,aAGhB,MAAnBK,KAA6BlF,MAAKa,OAAL,IAC1Bb,MAAKe,WAAWmE,IAAgBlD,EAAE5B,IAAlC;IACR;AACD,UAAM6E,IAAYjF,MAAKgF,mBAAmBhD,GAAG6B,GAA3B,OAAA,IAAA;AAElB,WADAoB,EAAU7E,OAAO4B,EAAE5B,MACZ6E,EAAUvB,OAAV;EACR;EAES,OAAH0B,IAAIpD,GAAS6B,GAAV;AACR,UAAMzD,IAAO4B,EAAE5B;AAAf,WACIA,MAASyD,EAAEzD,OAGNJ,MAAKqF,cAAcrD,GAAG6B,GAAGzD,CAAzB,IAI2B,KAAhCJ,MAAK2E,kBAAkB3C,GAAG6B,CAA1B,IACK7D,MAAKsF,cAActD,GAAG6B,GAAGzD,CAAzB,IAEFJ,MAAKsF,cAAczB,GAAG7B,GAAG,CAAC5B,CAA1B;EACR;EAEc,OAARmF,SAASvD,GAAS6B,GAAV;AACb,UAAMzD,IAAO4B,EAAE5B;AAAf,WACIA,MAASyD,EAAEzD,OAOqB,KAAhCJ,MAAK2E,kBAAkB3C,GAAG6B,CAA1B,IACK7D,MAAKsF,cAActD,GAAG6B,GAAGzD,CAAzB,IAEFJ,MAAKsF,cAAczB,GAAG7B,GAAG,CAAC5B,CAA1B,IAPEJ,MAAKqF,cAAcrD,GAAG6B,GAAGzD,CAAzB;EAQV;EAEe,OAAToF,UAAUxD,GAAS6B,GAAV;AAAA,WACG,MAAbA,EAAE1D,UAA6B,MAAb6B,EAAE7B,SAAqB6B,IACzC6B,EAAEzD,OAAaJ,MAAKyF,uBAAuBzD,GAAG6B,CAA/B,IACZ7D,MAAK0F,sBAAsB1D,GAAG6B,CAA9B;EACR;EAEsB,OAAhB8B,iBAAiB3D,GAAS6B,GAAV;AAAA,WACJ,MAAbA,EAAE1D,UAA6B,MAAb6B,EAAE7B,SAAqB6B,IACzC6B,EAAEzD,OAAaJ,MAAK0F,sBAAsB1D,GAAG6B,CAA9B,IACZ7D,MAAKyF,uBAAuBzD,GAAG6B,CAA/B;EACR;EAEwB,OAAlB+B,qBAAkB;AACvB,UAAM,IAAItE,UACN,sDADE;EAEP;EAEc,OAARuE,SAAS7D,GAAS6B,GAAV;AACb,WAAsC,IAA/B7D,MAAK8F,kBAAkB9D,GAAG6B,CAA1B;EACR;EAEqB,OAAfkC,gBAAgB/D,GAAS6B,GAAV;AACpB,WAAuC,KAAhC7D,MAAK8F,kBAAkB9D,GAAG6B,CAA1B;EACR;EAEiB,OAAXmC,YAAYhE,GAAS6B,GAAV;AAChB,WAAsC,IAA/B7D,MAAK8F,kBAAkB9D,GAAG6B,CAA1B;EACR;EAEwB,OAAlBoC,mBAAmBjE,GAAS6B,GAAV;AACvB,WAAuC,KAAhC7D,MAAK8F,kBAAkB9D,GAAG6B,CAA1B;EACR;EAEW,OAALqC,MAAMlE,GAAS6B,GAAV;AACV,QAAI7B,EAAE5B,SAASyD,EAAEzD;AAAM,aAAA;AACvB,QAAI4B,EAAE7B,WAAW0D,EAAE1D;AAAQ,aAAA;AAC3B,aAASqE,IAAI,GAAGA,IAAIxC,EAAE7B,QAAQqE;AAC5B,UAAIxC,EAAEK,QAAQmC,CAAV,MAAiBX,EAAExB,QAAQmC,CAAV;AAAc,eAAA;AAErC,WAAA;EACD;EAEc,OAAR2B,SAASnE,GAAS6B,GAAV;AACb,WAAO,CAAC7D,MAAKkG,MAAMlE,GAAG6B,CAAd;EACT;EAEgB,OAAVuC,WAAWpE,GAAS6B,GAAV;AAAA,QAAA,IAIQpD,KAAK4F;AAH5B,QAAI,CAACrE,EAAE5B,QAAQ,CAACyD,EAAEzD;AAChB,aAAOJ,MAAKsG,cAActE,GAAG6B,CAAtB,EAAyBH,OAAzB;AACF,QAAI1B,EAAE5B,QAAQyD,EAAEzD,MAAM;AAC3B,YAAMkE,IAAe,EAAStC,EAAE7B,QAAQ0D,EAAE1D,MAArB,IAA+B;AAGpD,UAAIc,IAASjB,MAAKyD,iBAAiBzB,GAAGsC,CAAzB;AACb,YAAMiC,IAAKvG,MAAKyD,iBAAiBI,CAAtB;AAEX,aADA5C,IAASjB,MAAKwG,aAAavF,GAAQsF,GAAItF,CAA9B,GACFjB,MAAK2D,iBAAiB1C,GAAtB,MAAoCA,CAApC,EAA4CyC,OAA5C;IACR;AAMD,WAJI1B,EAAE5B,SACJ,CAAC4B,GAAG6B,CAAJ,IAAS,CAACA,GAAG7B,CAAJ,IAGJhC,MAAKyG,iBAAiBzE,GAAGhC,MAAKyD,iBAAiBI,CAAtB,CAAzB,EAAmDH,OAAnD;EACR;EAEgB,OAAVgD,WAAW1E,GAAS6B,GAAV;AAAA,QAAA,IAKQpD,KAAK4F;AAJ5B,QAAI,CAACrE,EAAE5B,QAAQ,CAACyD,EAAEzD;AAChB,aAAOJ,MAAK2G,cAAc3E,GAAG6B,CAAtB,EAAyBH,OAAzB;AACF,QAAI1B,EAAE5B,QAAQyD,EAAEzD,MAAM;AAAA,YAErBkE,KAAe,EAAStC,EAAE7B,QAAQ0D,EAAE1D,MAArB,GACfc,KAASjB,MAAKyD,iBAAiBzB,GAAGsC,EAAzB,GACTiC,IAAKvG,MAAKyD,iBAAiBI,CAAtB;AACX,aAAO7D,MAAK2G,cAAc1F,IAAQsF,GAAItF,EAA/B,EAAuCyC,OAAvC;IACR;AACD,UAAMY,IAAe,EAAStC,EAAE7B,QAAQ0D,EAAE1D,MAArB,IAA+B;AAEhD6B,MAAE5B,SACJ,CAAC4B,GAAG6B,CAAJ,IAAS,CAACA,GAAG7B,CAAJ;AAGX,QAAIf,IAASjB,MAAKyD,iBAAiBI,GAAGS,CAAzB;AAEb,WADArD,IAASjB,MAAK2G,cAAc1F,GAAQe,GAAGf,CAA9B,GACFjB,MAAK2D,iBAAiB1C,GAAtB,MAAoCA,CAApC,EAA4CyC,OAA5C;EACR;EAEe,OAATkD,UAAU5E,GAAS6B,GAAV;AAAA,QAAA,IACOpD,KAAK4F;AAA1B,UAAM/B,IAAe,EAAStC,EAAE7B,QAAQ0D,EAAE1D,MAArB;AACrB,QAAI,CAAC6B,EAAE5B,QAAQ,CAACyD,EAAEzD;AAChB,aAAOJ,MAAKwG,aAAaxE,GAAG6B,CAArB,EAAwBH,OAAxB;AACF,QAAI1B,EAAE5B,QAAQyD,EAAEzD,MAAM;AAG3B,UAAIa,KAASjB,MAAKyD,iBAAiBzB,GAAGsC,CAAzB;AACb,YAAMiC,KAAKvG,MAAKyD,iBAAiBI,CAAtB;AAEX,aADA5C,KAASjB,MAAKsG,cAAcrF,IAAQsF,IAAItF,EAA/B,GACFjB,MAAK2D,iBAAiB1C,IAAtB,MAAoCA,EAApC,EAA4CyC,OAA5C;IACR;AAEG1B,MAAE5B,SACJ,CAAC4B,GAAG6B,CAAJ,IAAS,CAACA,GAAG7B,CAAJ;AAGX,QAAIf,IAASjB,MAAKyD,iBAAiBI,GAAGS,CAAzB;AAEb,WADArD,IAASjB,MAAKyG,iBAAiBxF,GAAQe,GAAGf,CAAjC,GACFjB,MAAK2D,iBAAiB1C,GAAtB,MAAoCA,CAApC,EAA4CyC,OAA5C;EACR;EAEY,OAANmD,OAAOC,GAAW9E,GAAZ;AAAA,QAAA,IAEPvB,KAAKC;AADT,QAAiB,MAAbsB,EAAE7B;AAAc,aAAO6B;AAE3B,QADA8E,IAAI,EAAWA,CAAX,GACI,IAAJA;AACF,YAAM,IAAIxG,WACN,oDADE;AAGR,QAAU,MAANwG;AAAS,aAAO9G,MAAKa,OAAL;AAEpB,QAAIiG,KAAK9G,MAAK+D;AAAkB,aAAO/B;AACvC,UAAM+E,IAAiC,KAAhBD,IAAI,MAAM;AACjC,QAAI9E,EAAE7B,SAAS4G;AAAc,aAAO/E;AAAP,UACvBgF,IAAWhF,EAAEG,gBAAgB4E,IAAe,CAAjC,GACXE,IAAe,MAAOH,IAAI,KAAK;AACrC,QAAI9E,EAAE7B,WAAW4G,KAAgBC,IAAWC;AAAc,aAAOjF;AAGjE,QAAI,GADYgF,IAAWC,OAAkBA;AAChC,aAAOjH,MAAKkH,kBAAkBJ,GAAG9E,CAA1B;AACpB,QAAI,CAACA,EAAE5B;AAAM,aAAOJ,MAAKmH,+BAA+BL,GAAG9E,GAAvC,IAAA;AACpB,QAAwC,MAAnCgF,IAAYC,IAAe,IAAW;AACzC,eAASzC,IAAIuC,IAAe,GAAQ,KAALvC,GAAQA;AACrC,YAAqB,MAAjBxC,EAAEK,QAAQmC,CAAV;AACF,iBAAOxE,MAAKmH,+BAA+BL,GAAG9E,GAAvC,KAAA;AAH8B,aAMrCA,EAAE7B,WAAW4G,KAAgBC,MAAaC,IAAqBjF,IAC5DhC,MAAKkH,kBAAkBJ,GAAG9E,CAA1B;IACR;AACD,WAAOhC,MAAKmH,+BAA+BL,GAAG9E,GAAvC,KAAA;EACR;EAEa,OAAPoF,QAAQN,GAAW9E,GAAZ;AAAA,QAAA,IAERvB,KAAKC;AADT,QAAiB,MAAbsB,EAAE7B;AAAc,aAAO6B;AAE3B,QADA8E,IAAI,EAAWA,CAAX,GACI,IAAJA;AACF,YAAM,IAAIxG,WACN,oDADE;AAGR,QAAU,MAANwG;AAAS,aAAO9G,MAAKa,OAAL;AAEpB,QAAImB,EAAE5B,MAAM;AACV,UAAI0G,IAAI9G,MAAK+D;AACX,cAAM,IAAIzD,WAAW,gBAAf;AAER,aAAON,MAAKmH,+BAA+BL,GAAG9E,GAAvC,KAAA;IACR;AAED,QAAI8E,KAAK9G,MAAK+D;AAAkB,aAAO/B;AACvC,UAAM+E,IAAiC,KAAhBD,IAAI,MAAM;AACjC,QAAI9E,EAAE7B,SAAS4G;AAAc,aAAO/E;AACpC,UAAMqF,IAAiBP,IAAI;AAC3B,QAAI9E,EAAE7B,UAAU4G,GAAc;AAC5B,UAAuB,MAAnBM;AAAsB,eAAOrF;AACjC,YAAMgF,KAAWhF,EAAEK,QAAQ0E,IAAe,CAAzB;AACjB,UAAsC,KAAjCC,OAAaK;AAAuB,eAAOrF;IACjD;AAED,WAAOhC,MAAKkH,kBAAkBJ,GAAG9E,CAA1B;EACR;EAIS,OAAHsF,IAAItF,GAAQ6B,GAAT;AAGR,QAFA7B,IAAIhC,MAAKqB,cAAcW,CAAnB,GACJ6B,IAAI7D,MAAKqB,cAAcwC,CAAnB,GACa,YAAb,OAAO7B;AAET,aADiB,YAAb,OAAO6B,MAAgBA,IAAIA,EAAEnC,SAAF,IACxBM,IAAI6B;AAEb,QAAiB,YAAb,OAAOA;AACT,aAAO7B,EAAEN,SAAF,IAAemC;AAIxB,QAFA7B,IAAIhC,MAAKuH,YAAYvF,CAAjB,GACJ6B,IAAI7D,MAAKuH,YAAY1D,CAAjB,GACA7D,MAAKwH,WAAWxF,CAAhB,KAAsBhC,MAAKwH,WAAW3D,CAAhB;AACxB,aAAO7D,MAAKoF,IAAIpD,GAAG6B,CAAZ;AAET,QAAiB,YAAb,OAAO7B,KAA+B,YAAb,OAAO6B;AAClC,aAAO7B,IAAI6B;AAEb,UAAM,IAAIvC,UACN,6DADE;EAEP;EAEQ,OAAFmG,GAAGzF,GAAQ6B,GAAT;AACP,WAAO7D,MAAK0H,UAAU1F,GAAG6B,GAAG,CAArB;EACR;EACQ,OAAF8D,GAAG3F,GAAQ6B,GAAT;AACP,WAAO7D,MAAK0H,UAAU1F,GAAG6B,GAAG,CAArB;EACR;EACQ,OAAF+D,GAAG5F,GAAQ6B,GAAT;AACP,WAAO7D,MAAK0H,UAAU1F,GAAG6B,GAAG,CAArB;EACR;EACQ,OAAFgE,GAAG7F,GAAQ6B,GAAT;AACP,WAAO7D,MAAK0H,UAAU1F,GAAG6B,GAAG,CAArB;EACR;EAEQ,OAAFiE,GAAG9F,GAAQ6B,GAAT;AAAA,eAAA;AAEL,UAAI7D,MAAKwH,WAAWxF,CAAhB;AAAJ,eACMhC,MAAKwH,WAAW3D,CAAhB,IAA2B7D,MAAKkG,MAAMlE,GAAG6B,CAAd,IACxB7D,MAAK8H,GAAGjE,GAAG7B,CAAX;AACF,UAAiB,YAAb,OAAOA,GAAgB;AAChC,YAAIhC,MAAKwH,WAAW3D,CAAhB;AAAoB,iBAAO7D,MAAK+H,gBAAgBlE,GAAG7B,CAAxB;AAC/B,YAAiB,YAAb,OAAO6B;AAAgB,iBAAO7B,KAAK6B;AACvCA,YAAI7D,MAAKqB,cAAcwC,CAAnB;MACL,WAAuB,YAAb,OAAO7B,GAAgB;AAChC,YAAIhC,MAAKwH,WAAW3D,CAAhB;AAAJ,iBACE7B,IAAIhC,MAAKkB,aAAac,CAAlB,GACM,SAANA,KACGhC,MAAKkG,MAAMlE,GAAG6B,CAAd;AAET,YAAiB,YAAb,OAAOA;AAAgB,iBAAO7B,KAAK6B;AACvCA,YAAI7D,MAAKqB,cAAcwC,CAAnB;MACL,WAAuB,aAAb,OAAO7B,GAAiB;AACjC,YAAIhC,MAAKwH,WAAW3D,CAAhB;AAAoB,iBAAO7D,MAAK+H,gBAAgBlE,GAAG,CAAC7B,CAAzB;AAC/B,YAAiB,YAAb,OAAO6B;AAAgB,iBAAO7B,KAAK6B;AACvCA,YAAI7D,MAAKqB,cAAcwC,CAAnB;MACL,WAAuB,YAAb,OAAO7B,GAAgB;AAChC,YAAIhC,MAAKwH,WAAW3D,CAAhB;AAAoB,iBAAA;AACxB,YAAiB,YAAb,OAAOA;AAAgB,iBAAO7B,KAAK6B;AACvCA,YAAI7D,MAAKqB,cAAcwC,CAAnB;MACL,WAAuB,YAAb,OAAO7B,GAAgB;AAChC,YAAiB,YAAb,OAAO6B,KAAkBA,EAAE3D,gBAAgBF;AAAM,iBAAOgC,KAAK6B;AACjE7B,YAAIhC,MAAKqB,cAAcW,CAAnB;MACL;AACC,eAAOA,KAAK6B;IAAAA;EAGjB;EAEQ,OAAFmE,GAAGhG,GAAQ6B,GAAT;AACP,WAAO,CAAC7D,MAAK8H,GAAG9F,GAAG6B,CAAX;EACT;EAIY,OAANhD,SAAM;AACX,WAAO,IAAIb,MAAK,GAAT,KAAA;EACR;EAEgB,OAAVe,WAAWmB,GAAe9B,GAAhB;AACf,UAAMa,IAAS,IAAIjB,MAAK,GAAGI,CAAZ;AAEf,WADAa,EAAOkD,WAAW,GAAGjC,CAArB,GACOjB;EACR;EAEDsC,SAAM;AACJ,UAAMtC,IAAS,IAAIjB,MAAK,KAAKG,QAAQ,KAAKC,IAA3B;AACf,aAASoE,IAAI,GAAGA,IAAI,KAAKrE,QAAQqE;AAC/BvD,QAAOuD,CAAD,IAAM,KAAKA,CAAL;AAEd,WAAOvD;EACR;EAEDyC,SAAM;AAAA,QACAuE,IAAY,KAAK9H,QACjB+H,IAAO,KAAKD,IAAY,CAAjB;AAAA,WACK,MAATC;AACLD,WACAC,IAAO,KAAKD,IAAY,CAAjB,GACP,KAAKE,IAAL;AAGF,WADkB,MAAdF,MAAiB,KAAK7H,OAAL,QACd;EACR;EAED6D,qBAAkB;AAChB,aAASO,IAAI,GAAGA,IAAI,KAAKrE,QAAQqE;AAC/B,WAAKA,CAAL,IAAU;EAEb;EAEsB,OAAhBtB,iBAAiBlB,GAASoG,GAC7BzF,GAAoBD,GADD;AAErB,QAAwB,IAApB0F;AAAuB,aAAO;AAClC,QAAIC;AACJ,QAAwB,IAApBD;AACFC,UAAmB,CAACD,IAAoB;SACnC;AAEL,UAAmB,MAAfzF;AAAkB,eAAO;AAC7BA,WACAD,IAAeV,EAAEK,QAAQM,CAAV,GACf0F,IAAmB;IACpB;AAED,QAAIC,IAAO,KAAKD;AAChB,QAA8B,MAAzB3F,IAAe4F;AAAa,aAAO;AAGxC,QADAA,KAAQ,GACsB,MAAzB5F,IAAe4F;AAAa,aAAO;AAAP,WACb,IAAb3F;AAEL,UADAA,KAC8B,MAA1BX,EAAEK,QAAQM,CAAV;AAA6B,eAAO;AAE1C,WAAO;EACR;EAEkB,OAAZ3B,aAAakB,GAAD;AAEjBlC,UAAKqD,uBAAuB,CAA5B,IAAiCnB;AAAAA,UAC3BqG,IAAsD,OAAvCvI,MAAKoD,qBAAqB,CAA1B,MAAiC,IAChDX,IAAW8F,IAAc,MACzBC,KAA4B,IAAjB/F,IAAW,MAAW,GACjCxB,IAAS,IAAIjB,MAAKwI,GALH,IAARtG,CAKE;AAAA,QAEXW,IAA+C,UAA/B7C,MAAKoD,qBAAqB,CAA1B,IADD,SAEfL,IAAc/C,MAAKoD,qBAAqB,CAA1B;AAAA,UACZqF,IAAsB,IAEtBC,IAAYjG,IAAW;AAAA,QAKzBjB,GAFAmH,IAAwB;AAI5B,QAAID,IAAS,IAAwB;AACnC,YAAM9F,KAAQ6F,IAAsBC;AACpCC,UAAwB/F,KAAQ,IAChCpB,IAAQqB,MAAiBD,IACzBC,IAAgBA,KAAiB,KAAKD,KAAWG,MAAgBH,IACjEG,MAA8B,KAAKH;IACpC,WAAU8F,MAAS;AAClBC,UAAwB,IACxBnH,IAAQqB,GACRA,IAAeE,GACfA,IAAc;SACT;AACL,YAAMH,KAAQ8F,IAAYD;AAC1BE,UAAwB,KAAK/F,IAC7BpB,IAASqB,KAAgBD,KAAUG,MAAiB,KAAKH,IACzDC,IAAeE,KAAeH,IAC9BG,IAAc;IACf;AACD9B,MAAOkD,WAAWqE,IAAS,GAAGhH,CAA9B;AAEA,aAASmB,KAAa6F,IAAS,GAAiB,KAAd7F,IAAiBA;AACrB,UAAxBgG,KACFA,KAAyB,IACzBnH,IAAQqB,MAAiB,GACzBA,IAAgBA,KAAgB,KAAOE,MAAgB,GACvDA,MAA8B,MAE9BvB,IAAQ,GAEVP,EAAOkD,WAAWxB,IAAYnB,CAA9B;AAEF,WAAOP,EAAOyC,OAAP;EACR;EAEoB,OAAdkF,eAAeC,GAAD;AAAA,WAAA,CAAA,EACV,MAALA,KAAkB,KAALA,OACR,OAALA,IAAwB,MAANA,IACb,UAALA,IACW,OAANA,KAAoB,QAANA,IAEd,UAALA,KACFA,KAAK,QACO,MAALA,KAAmB,MAANA,KAAoB,MAANA,KAAoB,MAANA,KACnC,MAANA,KAAoB,QAANA,KAEV,SAANA;EACR;EAEkB,OAAZ3H,aAAa4H,GAAgBlH,IAAe,GAAhC;AACjB,QAAIxB,IAAO;AAEX,UAAMD,IAAS2I,EAAO3I;AACtB,QAAI4I,IAAS;AACb,QAAIA,MAAW5I;AAAQ,aAAOH,MAAKa,OAAL;AAC9B,QAAImI,IAAUF,EAAOG,WAAWF,CAAlB;AAAd,WAEO/I,MAAK4I,eAAeI,CAApB,KAA8B;AACnC,UAAI,EAAED,MAAW5I;AAAQ,eAAOH,MAAKa,OAAL;AAChCmI,UAAUF,EAAOG,WAAWF,CAAlB;IACX;AAGD,QAAgB,OAAZC,GAAkB;AACpB,UAAI,EAAED,MAAW5I;AAAQ,eAAO;AAChC6I,UAAUF,EAAOG,WAAWF,CAAlB,GACV3I,IAAO;IACR,WAAsB,OAAZ4I,GAAkB;AAC3B,UAAI,EAAED,MAAW5I;AAAQ,eAAO;AAChC6I,UAAUF,EAAOG,WAAWF,CAAlB,GACV3I,IAAO;IACR;AAED,QAAc,MAAVwB,GAAJ;AAEE,UADAA,IAAQ,IACQ,OAAZoH,GAAkB;AACpB,YAAI,EAAED,MAAW5I;AAAQ,iBAAOH,MAAKa,OAAL;AAEhC,YADAmI,IAAUF,EAAOG,WAAWF,CAAlB,GACM,OAAZC,KAAgC,QAAZA,GAAkB;AAExC,cADApH,IAAQ,IACJ,EAAEmH,MAAW5I;AAAQ,mBAAO;AAChC6I,cAAUF,EAAOG,WAAWF,CAAlB;QACX,WAAsB,OAAZC,KAAgC,QAAZA,GAAkB;AAE/C,cADApH,IAAQ,GACJ,EAAEmH,MAAW5I;AAAQ,mBAAO;AAChC6I,cAAUF,EAAOG,WAAWF,CAAlB;QACX,WAAsB,OAAZC,KAAgC,OAAZA,GAAkB;AAE/C,cADApH,IAAQ,GACJ,EAAEmH,MAAW5I;AAAQ,mBAAO;AAChC6I,cAAUF,EAAOG,WAAWF,CAAlB;QAGX;MACF;IApBH,WAqBqB,OAAVnH,KACO,OAAZoH,GAAkB;AAEpB,UAAI,EAAED,MAAW5I;AAAQ,eAAOH,MAAKa,OAAL;AAEhC,UADAmI,IAAUF,EAAOG,WAAWF,CAAlB,GACM,OAAZC,KAAgC,QAAZA,GAAkB;AACxC,YAAI,EAAED,MAAW5I;AAAQ,iBAAO;AAChC6I,YAAUF,EAAOG,WAAWF,CAAlB;MAGX;IACF;AAEH,QAAa,KAAT3I,KAAwB,OAAVwB;AAAc,aAAO;AAAP,WAEb,OAAZoH,KAAkB;AAEvB,UAAI,EAAED,MAAW5I;AAAQ,eAAOH,MAAKa,OAAL;AAChCmI,UAAUF,EAAOG,WAAWF,CAAlB;IACX;AAGD,UAAMG,IAAQ/I,IAAS4I;AAAvB,QACII,IAAcnJ,MAAKoJ,kBAAkBxH,CAAvB,GACdyH,IAAUrJ,MAAKsJ,gCAAgC;AACnD,QAAIJ,IAAQ,aAAYC;AAAa,aAAO;AAAP,UAC/BI,IACDJ,IAAcD,IAAQG,MAAarJ,MAAKwJ,0BAEvCvI,IAAS,IAAIjB,MAD0B,KAAtBuJ,IAAU,MAAM,IACxB,KAAA,GAGTE,IAAmB,KAAR7H,IAAaA,IAAQ,IAChC8H,IAAmB,KAAR9H,IAAaA,IAAQ,KAAK;AAE3C,QAA8B,MAAzBA,IAASA,IAAQ,IAAW;AAE/BuH,YAAgBnJ,MAAKwJ;AAFU,YAGzBG,KAAQ,CAAA,GACRC,KAAY,CAAA;AAClB,UAAIC,KAAI;AACR,SAAG;AAAA,YACGC,KAAO,GACPC,KAAO;AAFV,mBAGY;AACX,cAAIC;AACJ,cAAMhB,IAAU,OAAQ,IAAKS;AAC3BO,YAAAA,KAAIhB,IAAU;oBACQ,KAAVA,KAAgB,OAAQ,IAAKU;AACzCM,YAAAA,MAAe,KAAVhB,KAAgB;eAChB;AACLa,YAAAA,KAAI;AACJ;UACD;AAGD,cAFAE,MAAQZ,GACRW,KAAQA,MAAQX,IAAea,IAC3B,EAAEjB,MAAW5I,GAAQ;AACvB0J,YAAAA,KAAI;AACJ;UACD;AAED,cADAb,IAAUF,EAAOG,WAAWF,CAAlB,GACe,KAArBgB,KAAOZ;AAAkB;QAC9B;AACDQ,QAAAA,GAAMlI,KAAKqI,EAAX,GACAF,GAAUnI,KAAKsI,EAAf;MACD,SAAQ,CAACF;AACV7J,YAAKiK,gBAAgBhJ,GAAQ0I,IAAOC,EAApC;IACD,OAAM;AACL3I,QAAOgD,mBAAP;AADK,UAED4F,KAAI,OACJK,KAAa;AACjB,SAAG;AAAA,YACGJ,KAAO,GACPK,IAAa;AAFhB,mBAGY;AACX,cAAIH;AACJ,cAAMhB,IAAU,OAAQ,IAAKS;AAC3BO,YAAAA,KAAIhB,IAAU;oBACQ,KAAVA,KAAgB,OAAQ,IAAKU;AACzCM,YAAAA,MAAe,KAAVhB,KAAgB;eAChB;AACLa,YAAAA,KAAI;AACJ;UACD;AAED,gBAAMO,KAAID,IAAavI;AACvB,cAAQ,aAAJwI;AAAgB;AAIpB,cAHAD,IAAaC,IACbN,KAAOA,KAAOlI,IAAQoI,IACtBE,MACI,EAAEnB,MAAW5I,GAAQ;AACvB0J,YAAAA,KAAI;AACJ;UACD;AACDb,cAAUF,EAAOG,WAAWF,CAAlB;QACX;AACDM,YAA+C,KAArCrJ,MAAKsJ,gCAAqC;AACpD,cAAMe,IACsD,KADrClB,IAAce,KAAab,MAC7BrJ,MAAKwJ,4BAA4B;AACtDvI,UAAOqJ,qBAAqBH,GAAYL,IAAMO,CAA9C;MACD,SAAQ,CAACR;IACX;AAED,QAAId,MAAW5I,GAAQ;AACrB,UAAI,CAACH,MAAK4I,eAAeI,CAApB;AAA8B,eAAO;AAC1C,WAAKD,KAAUA,IAAS5I,GAAQ4I;AAE9B,YADAC,IAAUF,EAAOG,WAAWF,CAAlB,GACN,CAAC/I,MAAK4I,eAAeI,CAApB;AAA8B,iBAAO;IAE7C;AAID,WADA/H,EAAOb,OAAiB,MAATA,GACRa,EAAOyC,OAAP;EACR;EAEqB,OAAfuG,gBAAgBhJ,GAAc0I,GAAiBC,GAAhC;AAAA,QAEhBjH,IAAa,GACbnB,IAAQ,GACR+I,IAAc;AAClB,aAAS/F,IAAImF,EAAMxJ,SAAS,GAAQ,KAALqE,GAAQA,KAAK;AAAA,YACpCsF,IAAOH,EAAMnF,CAAD,GACZgG,IAAWZ,EAAUpF,CAAD;AAC1BhD,WAAUsI,KAAQS,GAClBA,KAAeC,GACK,OAAhBD,KACFtJ,EAAOkD,WAAWxB,KAAcnB,CAAhC,GACA+I,IAAc,GACd/I,IAAQ,KACe,KAAd+I,MACTtJ,EAAOkD,WAAWxB,KAAsB,aAARnB,CAAhC,GACA+I,KAAe,IACf/I,IAAQsI,MAAUU,IAAWD;IAEhC;AACD,QAAc,MAAV/I,GAAa;AACf,UAAImB,KAAc1B,EAAOd;AAAQ,cAAM,IAAIsK,MAAM,oBAAV;AACvCxJ,QAAOkD,WAAWxB,KAAcnB,CAAhC;IACD;AACD,WAAOmB,IAAa1B,EAAOd,QAAQwC;AACjC1B,QAAOkD,WAAWxB,GAAY,CAA9B;EAEH;EAE8B,OAAxBd,yBAAyBG,GAASJ,GAAV;AAC7B,UAAMzB,IAAS6B,EAAE7B;AACjB,QAAI4J,IAAOnI,IAAQ;AACnBmI,SAAuB,KAAdA,MAAS,MAAqB,KAAPA,IAChCA,KAAuB,KAAdA,MAAS,MAAqB,KAAPA,IAChCA,KAAuB,KAAdA,MAAS,MAAqB,KAAPA;AAAzB,UACDZ,IAAcY,GACdW,IAAW9I,IAAQ,GACnBsC,IAAMlC,EAAEK,QAAQlC,IAAS,CAAnB,GACNmC,IAAkBtC,MAAKuC,QAAQ2B,CAAb;AAExB,QAAIyG,IACgD,KAFzB,KAATxK,IAAcmC,IAEd6G,IAAc,KAAKA;AAErC,QADInH,EAAE5B,QAAMuK,KACR,YAAAA;AAA2B,YAAM,IAAIF,MAAM,iBAAV;AACrC,UAAMxJ,IAAahB,MAAM0K,CAAb;AAAZ,QACIC,IAAMD,IAAgB,GACtBnJ,IAAQ,GACRqJ,IAAgB;AACpB,aAASrG,KAAI,GAAGA,KAAIrE,IAAS,GAAGqE,MAAK;AAAA,YAC7BsG,KAAW9I,EAAEK,QAAQmC,EAAV,GACXwE,MAAWxH,IAASsJ,MAAYD,KAAkBH;AACxDzJ,QAAO2J,GAAD,IAAU5K,MAAK+K,mBAAmB/B,EAAxB;AAChB,YAAMgC,KAAe7B,IAAc0B;AAJA,WAKnCrJ,IAAQsJ,OAAaE,IACrBH,IAAgB,KAAKG,IACdH,KAAiB1B;AACtBlI,UAAO2J,GAAD,IAAU5K,MAAK+K,mBAAmBvJ,IAAQkJ,CAAhC,GAChBlJ,OAAW2H,GACX0B,KAAiB1B;IAEpB;AACD,UAAMH,KAAWxH,IAAS0C,KAAO2G,KAAkBH;AAAnD,SACAzJ,EAAO2J,GAAD,IAAU5K,MAAK+K,mBAAmB/B,CAAxB,GAChBxH,IAAQ0C,MAASiF,IAAc0B,GACd,MAAVrJ;AACLP,QAAO2J,GAAD,IAAU5K,MAAK+K,mBAAmBvJ,IAAQkJ,CAAhC,GAChBlJ,OAAW2H;AAGb,QADInH,EAAE5B,SAAMa,EAAO2J,GAAD,IAAU,MAChB,MAARA;AAAY,YAAM,IAAIH,MAAM,oBAAV;AACtB,WAAOxJ,EAAOU,KAAK,EAAZ;EACR;EAEuB,OAAjBG,kBAAkBE,GAASJ,GAAeqJ,GAAzB;AAEtB,UAAM9K,IAAS6B,EAAE7B;AACjB,QAAe,MAAXA;AAAc,aAAO;AACzB,QAAe,MAAXA,GAAc;AAChB,UAAIc,KAASe,EAAEG,gBAAgB,CAAlB,EAAqBT,SAASE,CAA9B;AAIb,aAHI,UAAAqJ,KAA6BjJ,EAAE5B,SACjCa,KAAS,MAAMA,KAEVA;IACR;AAAA,UACKiK,IAAqB,KAAT/K,IAAcH,MAAKuC,QAAQP,EAAEK,QAAQlC,IAAS,CAAnB,CAAb,GAC1BgL,IAAiBnL,MAAKoJ,kBAAkBxH,CAAvB,GACjBwJ,IAAiBD,IAAiB;AACxC,QAAIR,IAAgBO,IAAYlL,MAAKsJ;AACrCqB,SAAiBS,IAAiB,GAClCT,IAAmD,IAAlCA,IAAgBS;AAAAA,UAC3BC,IAAmBV,IAAgB,KAAM,GAGzCW,IAAYtL,MAAK4D,aAAa5D,MAAKe,WAAWa,GAAhB,KAAA,GAChC5B,MAAKe,WAAWsK,GAAhB,KAAA,CADc;AAAA,QAEdvG,GACAyG;AACJ,UAAM1G,IAAUyG,EAAUnJ,gBAAgB,CAA1B;AAChB,QAAyB,MAArBmJ,EAAUnL,UAA2B,SAAX0E,GAAmB;AAC/CC,UAAW,IAAI9E,MAAKgC,EAAE7B,QAAX,KAAA,GACX2E,EAASb,mBAAT;AACA,UAAIgB,KAAY;AAChB,eAAST,KAAe,IAAXxC,EAAE7B,SAAa,GAAQ,KAALqE,IAAQA,MAAK;AAC1C,cAAMgH,KAASvG,MAAa,KAAMjD,EAAEyJ,YAAYjH,EAAd;AAClCM,UAAS4G,eAAelH,IAAuB,IAAnBgH,KAAQ3G,CAApC,GACAI,KAAgC,IAAnBuG,KAAQ3G;MACtB;AACD0G,UAAatG,GAAUvD,SAASE,CAAnB;IACd,OAAM;AACL,YAAM+J,KAAiB3L,MAAKgF,mBAAmBhD,GAAGsJ,GAA3B,MAAA,IAAA;AACvBxG,UAAW6G,GAAe7G;AAC1B,YAAMG,KAAY0G,GAAe1G,UAAUvB,OAAzB;AAClB6H,UAAavL,MAAK8B,kBAAkBmD,IAAWrD,GAAlC,IAAA;IACd;AACDkD,MAASpB,OAAT;AACA,QAAIkI,IAAY5L,MAAK8B,kBAAkBgD,GAAUlD,GAAjC,IAAA;AAAhB,WACO2J,EAAWpL,SAASkL;AACzBE,UAAa,MAAMA;AAKrB,WAHI,UAAAN,KAA6BjJ,EAAE5B,SACjCwL,IAAY,MAAMA,IAEbA,IAAYL;EACpB;EAEmB,OAAbM,cAAcC,GAAD;AAClB,WAAOA,IAAe,KAAK;EAC5B;EACuB,OAAjBC,kBAAkBC,GAAD;AACtB,WAAOA,IAAe,KAAK;EAC5B;EACoB,OAAdC,eAAeD,GAAD;AACnB,WAAOA,IAAe,IAAI;EAC3B;EAEuB,OAAjBlG,kBAAkB9D,GAAS6B,GAAV;AACtB,UAAMqI,IAAQlK,EAAE5B;AAChB,QAAI8L,MAAUrI,EAAEzD;AAAM,aAAOJ,MAAK6L,cAAcK,CAAnB;AAC7B,UAAMjL,IAASjB,MAAK2E,kBAAkB3C,GAAG6B,CAA1B;AAAf,WACa,IAAT5C,IAAmBjB,MAAK+L,kBAAkBG,CAAvB,IACV,IAATjL,IAAmBjB,MAAKiM,eAAeC,CAApB,IAChB;EACR;EAEuB,OAAjBC,kBAAkBnK,GAAS6B,GAAV;AACtB,QAAI7D,MAAKc,gBAAgB+C,CAArB,GAAyB;AAAA,YACrBqI,IAAQlK,EAAE5B,MACVgM,IAAa,IAAJvI;AACf,UAAIqI,MAAUE;AAAO,eAAOpM,MAAK6L,cAAcK,CAAnB;AAC5B,UAAiB,MAAblK,EAAE7B,QAAc;AAClB,YAAIiM;AAAO,gBAAM,IAAI3B,MAAM,oBAAV;AACjB,eAAa,MAAN5G,IAAU,IAAI;MACtB;AAED,UAAe,IAAX7B,EAAE7B;AAAY,eAAOH,MAAK+L,kBAAkBG,CAAvB;AATE,YAUrBG,IAAO5L,KAAK6L,IAAIzI,CAAT,GACP0I,IAASvK,EAAEG,gBAAgB,CAAlB;AAXY,aAYvBoK,IAASF,IAAarM,MAAK+L,kBAAkBG,CAAvB,IACtBK,IAASF,IAAarM,MAAKiM,eAAeC,CAApB,IACnB;IACR;AACD,WAAOlM,MAAKwM,kBAAkBxK,GAAG6B,CAA1B;EACR;EAEuB,OAAjB2I,kBAAkBxK,GAAS6B,GAAV;AACtB,QAAIA,MAAMA;AAAG,aAAOA;AACpB,QAAIA,MAAC,IAAA;AAAe,aAAO;AAC3B,QAAIA,MAAM;AAAW,aAAO;AAAP,UACfqI,IAAQlK,EAAE5B;AAEhB,QAAI8L,MADe,IAAJrI;AACM,aAAO7D,MAAK6L,cAAcK,CAAnB;AAC5B,QAAU,MAANrI;AACF,YAAM,IAAI4G,MAAM,iDAAV;AAER,QAAiB,MAAbzI,EAAE7B;AAAc,aAAO;AAC3BH,UAAKqD,uBAAuB,CAA5B,IAAiCQ;AACjC,UAAM0E,IAAsD,OAAvCvI,MAAKoD,qBAAqB,CAA1B,MAAiC;AACtD,QAAoB,QAAhBmF;AACF,YAAM,IAAIkC,MAAM,uCAAV;AAER,UAAMhI,IAAW8F,IAAc;AAC/B,QAAe,IAAX9F;AAGF,aAAOzC,MAAK+L,kBAAkBG,CAAvB;AAET,UAAMjK,IAAUD,EAAE7B;AAClB,QAAIiC,IAAOJ,EAAEK,QAAQJ,IAAU,CAApB;AAAX,UACMK,IAAkBtC,MAAKuC,QAAQH,CAAb,GAClBI,IAAuB,KAAVP,IAAeK,GAC5BmK,IAAahK,IAAW;AAC9B,QAAID,IAAaiK;AAAY,aAAOzM,MAAKiM,eAAeC,CAApB;AACpC,QAAI1J,IAAaiK;AAAY,aAAOzM,MAAK+L,kBAAkBG,CAAvB;AAAP,QAIzBrJ,IAAe,UAAgC,UAA/B7C,MAAKoD,qBAAqB,CAA1B,GAChBL,IAAc/C,MAAKoD,qBAAqB,CAA1B;AAAA,UACZqF,IAAsB,IACtBC,IAAY,KAAKpG;AACvB,QAAIoG,OAAyC,KAAxBlG,IAAa,KAAK;AACrC,YAAM,IAAIiI,MAAM,oBAAV;AAAN,QAEEiC,GACA/D,IAAwB;AAE5B,QAAI,KAAAD,GAAiC;AACnC,YAAM9F,KAAQ6F,IAAsBC;AACpCC,UAAwB/F,KAAQ,IAChC8J,IAAkB7J,MAAiBD,IACnCC,IAAgBA,KAAiB,KAAKD,KAAWG,MAAgBH,IACjEG,MAA8B,KAAKH;IACpC,WAAU,OAAA8F;AACTC,UAAwB,IACxB+D,IAAkB7J,GAClBA,IAAeE,GACfA,IAAc;SACT;AACL,YAAMH,KAAQ8F,IAAYD;AAC1BE,UAAwB,KAAK/F,IAC7B8J,IACK7J,KAAgBD,KAAUG,MAAiB,KAAKH,IACrDC,IAAeE,KAAeH,IAC9BG,IAAc;IACf;AAGD,QAFAX,OAAgB,GAChBsK,OAAsC,GAClCtK,IAAOsK;AAAiB,aAAO1M,MAAK+L,kBAAkBG,CAAvB;AACnC,QAAI9J,IAAOsK;AAAiB,aAAO1M,MAAKiM,eAAeC,CAApB;AAEnC,aAASvJ,KAAaV,IAAU,GAAiB,KAAdU,IAAiBA,MAAc;AACpC,UAAxBgG,KACFA,KAAyB,IACzB+D,IAAkB7J,MAAiB,GACnCA,IAAgBA,KAAgB,KAAOE,MAAgB,GACvDA,MAA8B,MAE9B2J,IAAkB;AAEpB,YAAMlL,KAAQQ,EAAEG,gBAAgBQ,EAAlB;AACd,UAAInB,KAAQkL;AAAiB,eAAO1M,MAAK+L,kBAAkBG,CAAvB;AACpC,UAAI1K,KAAQkL;AAAiB,eAAO1M,MAAKiM,eAAeC,CAApB;IACrC;AAED,QAAqB,MAAjBrJ,KAAsC,MAAhBE,GAAmB;AAC3C,UAA8B,MAA1B4F;AAA6B,cAAM,IAAI8B,MAAM,oBAAV;AACvC,aAAOzK,MAAKiM,eAAeC,CAApB;IACR;AACD,WAAO;EACR;EAEqB,OAAfnE,gBAAgB/F,GAAS6B,GAAV;AAAA,QAAA,IAKepD,KAAK6L;AAAAA,WAJpCtM,MAAKc,gBAAgB+C,CAArB,IACQ,MAANA,IAA6B,MAAb7B,EAAE7B,SAED,MAAb6B,EAAE7B,UAAkB6B,EAAE5B,SAAc,IAAJyD,KAChC7B,EAAEG,gBAAgB,CAAlB,MAAyB,EAAS0B,CAAT,IAEK,MAAjC7D,MAAKwM,kBAAkBxK,GAAG6B,CAA1B;EACR;EAO8B,OAAxB8I,yBAAyB1L,GAAgB2L,GAAjB;AAAA,WAEtB,MADCA,IACkB,IAAT3L,IACV,MAFC2L,IAEmB,KAAV3L,IACV,MAHC2L,IAGkB,IAAT3L,IACV,MAJC2L,IAImB,KAAV3L,IAAAA;EAElB;EAEe,OAATyG,UAAU1F,GAAQ6B,GAAQ+I,GAAjB;AAGd,QAFA5K,IAAIhC,MAAKqB,cAAcW,CAAnB,GACJ6B,IAAI7D,MAAKqB,cAAcwC,CAAnB,GACa,YAAb,OAAO7B,KAA+B,YAAb,OAAO6B;AAClC,cAAQ+I,GAAR;QACE,KAAK;AAAG,iBAAO5K,IAAI6B;QACnB,KAAK;AAAG,iBAAO7B,KAAK6B;QACpB,KAAK;AAAG,iBAAO7B,IAAI6B;QACnB,KAAK;AAAG,iBAAO7B,KAAK6B;MAJtB;AAOF,QAAI7D,MAAKwH,WAAWxF,CAAhB,KAAmC,YAAb,OAAO6B;AAAjC,aACEA,IAAI7D,MAAKkB,aAAa2C,CAAlB,GACM,SAANA,KACG7D,MAAK2M,yBAAyB3M,MAAK8F,kBAAkB9D,GAAG6B,CAA1B,GAA8B+I,CAA5D;AAET,QAAiB,YAAb,OAAO5K,KAAkBhC,MAAKwH,WAAW3D,CAAhB;AAA7B,aACE7B,IAAIhC,MAAKkB,aAAac,CAAlB,GACM,SAANA,KACGhC,MAAK2M,yBAAyB3M,MAAK8F,kBAAkB9D,GAAG6B,CAA1B,GAA8B+I,CAA5D;AAIT,QAFA5K,IAAIhC,MAAKuH,YAAYvF,CAAjB,GACJ6B,IAAI7D,MAAKuH,YAAY1D,CAAjB,GACA7D,MAAKwH,WAAWxF,CAAhB,GAAoB;AACtB,UAAIhC,MAAKwH,WAAW3D,CAAhB;AACF,eAAO7D,MAAK2M,yBAAyB3M,MAAK8F,kBAAkB9D,GAAG6B,CAA1B,GAA8B+I,CAA5D;AAET,UAAiB,YAAb,OAAO/I;AAAgB,cAAM,IAAI4G,MAAM,oBAAV;AACjC,aAAOzK,MAAK2M,yBAAyB3M,MAAKmM,kBAAkBnK,GAAG6B,CAA1B,GAA8B+I,CAA5D;IACR;AACD,QAAiB,YAAb,OAAO5K;AAAgB,YAAM,IAAIyI,MAAM,oBAAV;AACjC,QAAIzK,MAAKwH,WAAW3D,CAAhB;AAEF,aAAO7D,MAAK2M,yBAAyB3M,MAAKmM,kBAAkBtI,GAAG7B,CAA1B,GAC3B,IAAL4K,CADE;AAGT,QAAiB,YAAb,OAAO/I;AAAgB,YAAM,IAAI4G,MAAM,oBAAV;AAAN,WAEpB,MADCmC,IACS5K,IAAI6B,IACd,MAFC+I,IAES5K,KAAK6B,IACf,MAHC+I,IAGS5K,IAAI6B,IACd,MAJC+I,IAIS5K,KAAK6B,IAAAA;EAEvB;EAEDU,WAAQ;AACN,WAAOvE,MAAKuC,QAAQ,KAAKF,QAAQ,KAAKlC,SAAS,CAA3B,CAAb;EACR;EAEmB,OAAbkF,cAAcrD,GAAS6B,GAASe,GAAnB;AAClB,QAAI5C,EAAE7B,SAAS0D,EAAE1D;AAAQ,aAAOH,MAAKqF,cAAcxB,GAAG7B,GAAG4C,CAAzB;AAChC,QAAiB,MAAb5C,EAAE7B;AAAc,aAAO6B;AAC3B,QAAiB,MAAb6B,EAAE1D;AAAc,aAAO6B,EAAE5B,SAASwE,IAAa5C,IAAIhC,MAAKsD,WAAWtB,CAAhB;AACvD,QAAIsC,IAAetC,EAAE7B;AAArB,KACqB,MAAjB6B,EAAEuC,SAAF,KAAuBV,EAAE1D,WAAW6B,EAAE7B,UAA2B,MAAjB0D,EAAEU,SAAF,MAClDD;AAEF,UAAMrD,IAAS,IAAIjB,MAAKsE,GAAcM,CAAvB;AAAf,QACIiI,IAAQ,GACRrI,IAAI;AACR,WAAOA,IAAIX,EAAE1D,QAAQqE,KAAK;AACxB,YAAMsI,IAAI9K,EAAEK,QAAQmC,CAAV,IAAeX,EAAExB,QAAQmC,CAAV,IAAeqI;AACxCA,UAAQC,MAAM,IACd7L,EAAOkD,WAAWK,GAAO,aAAJsI,CAArB;IACD;AACD,WAAOtI,IAAIxC,EAAE7B,QAAQqE,KAAK;AACxB,YAAMsI,IAAI9K,EAAEK,QAAQmC,CAAV,IAAeqI;AACzBA,UAAQC,MAAM,IACd7L,EAAOkD,WAAWK,GAAO,aAAJsI,CAArB;IACD;AAID,WAHItI,IAAIvD,EAAOd,UACbc,EAAOkD,WAAWK,GAAGqI,CAArB,GAEK5L,EAAOyC,OAAP;EACR;EAEmB,OAAb4B,cAActD,GAAS6B,GAASe,GAAnB;AAClB,QAAiB,MAAb5C,EAAE7B;AAAc,aAAO6B;AAC3B,QAAiB,MAAb6B,EAAE1D;AAAc,aAAO6B,EAAE5B,SAASwE,IAAa5C,IAAIhC,MAAKsD,WAAWtB,CAAhB;AACvD,UAAMf,IAAS,IAAIjB,MAAKgC,EAAE7B,QAAQyE,CAAnB;AAAf,QACImI,IAAS,GACTvI,IAAI;AACR,WAAOA,IAAIX,EAAE1D,QAAQqE,KAAK;AACxB,YAAMsI,IAAI9K,EAAEK,QAAQmC,CAAV,IAAeX,EAAExB,QAAQmC,CAAV,IAAeuI;AACxCA,UAAsB,IAAZD,MAAM,IAChB7L,EAAOkD,WAAWK,GAAO,aAAJsI,CAArB;IACD;AACD,WAAOtI,IAAIxC,EAAE7B,QAAQqE,KAAK;AACxB,YAAMsI,IAAI9K,EAAEK,QAAQmC,CAAV,IAAeuI;AACzBA,UAAsB,IAAZD,MAAM,IAChB7L,EAAOkD,WAAWK,GAAO,aAAJsI,CAArB;IACD;AACD,WAAO7L,EAAOyC,OAAP;EACR;EAEsB,OAAhBC,iBAAiB3B,GAAS5B,GAAea,IAAoB,MAA7C;AACrB,UAAM+L,IAAchL,EAAE7B;AACP,aAAXc,IACFA,IAAS,IAAIjB,MAAKgN,GAAa5M,CAAtB,IAETa,EAAOb,OAAOA;AAEhB,QAAIyM,IAAQ;AACZ,aAASrI,IAAI,GAAGA,IAAIwI,GAAaxI,KAAK;AACpC,YAAMsI,KAAI9K,EAAEK,QAAQmC,CAAV,IAAeqI;AACzBA,UAAQC,OAAM,IACd7L,EAAOkD,WAAWK,GAAO,aAAJsI,EAArB;IACD;AAID,WAHc,KAAVD,KACF5L,EAAOgM,eAAeD,GAAa,CAAnC,GAEK/L;EACR;EAEsB,OAAhBwC,iBAAiBzB,GAASsC,GAAV;AACrB,UAAMnE,IAAS6B,EAAE7B;AACjBmE,QAAeA,KAAgBnE;AAC/B,UAAMc,IAAS,IAAIjB,MAAKsE,GAAT,KAAA;AACf,QAAIyI,IAAS;AACb,aAASvI,IAAI,GAAGA,IAAIrE,GAAQqE,KAAK;AAC/B,YAAMsI,IAAI9K,EAAEK,QAAQmC,CAAV,IAAeuI;AACzBA,UAAsB,IAAZD,MAAM,IAChB7L,EAAOkD,WAAWK,GAAO,aAAJsI,CAArB;IACD;AACD,QAAe,KAAXC;AAAc,YAAM,IAAItC,MAAM,oBAAV;AACxB,aAASjG,KAAIrE,GAAQqE,KAAIF,GAAcE;AACrCvD,QAAOkD,WAAWK,IAAG,CAArB;AAEF,WAAOvD;EACR;EAEmB,OAAbqF,cAActE,GAAS6B,GAAS5C,IAAoB,MAAvC;AAAA,QACdgB,IAAUD,EAAE7B,QACZ+M,IAAUrJ,EAAE1D,QACZgN,IAAWD;AACf,QAAIjL,IAAUiL,GAAS;AACrBC,UAAWlL;AADU,YAEfmL,IAAMpL,GACNqL,KAAYpL;AAClBD,UAAI6B,GACJ5B,IAAUiL,GACVrJ,IAAIuJ,GACJF,IAAUG;IACX;AACD,QAAI/I,IAAe6I;AACJ,aAAXlM,IACFA,IAAS,IAAIjB,MAAKsE,GAAT,KAAA,IAETA,IAAerD,EAAOd;AAExB,QAAIqE,IAAI;AACR,WAAOA,IAAI2I,GAAU3I;AACnBvD,QAAOkD,WAAWK,GAAGxC,EAAEK,QAAQmC,CAAV,IAAeX,EAAExB,QAAQmC,CAAV,CAApC;AAEF,WAAOA,IAAIF,GAAcE;AACvBvD,QAAOkD,WAAWK,GAAG,CAArB;AAEF,WAAOvD;EACR;EAEsB,OAAhBwF,iBAAiBzE,GAAS6B,GAAS5C,IAAoB,MAAvC;AAAA,UACfgB,IAAUD,EAAE7B,QACZ+M,IAAUrJ,EAAE1D;AAClB,QAAIgN,IAAWD;AACXjL,QAAUiL,MACZC,IAAWlL;AAEb,QAAIqC,IAAerC;AACJ,aAAXhB,IACFA,IAAS,IAAIjB,MAAKsE,GAAT,KAAA,IAETA,IAAerD,EAAOd;AAExB,QAAIqE,IAAI;AACR,WAAOA,IAAI2I,GAAU3I;AACnBvD,QAAOkD,WAAWK,GAAGxC,EAAEK,QAAQmC,CAAV,IAAe,CAACX,EAAExB,QAAQmC,CAAV,CAArC;AAEF,WAAOA,IAAIvC,GAASuC;AAClBvD,QAAOkD,WAAWK,GAAGxC,EAAEK,QAAQmC,CAAV,CAArB;AAEF,WAAOA,IAAIF,GAAcE;AACvBvD,QAAOkD,WAAWK,GAAG,CAArB;AAEF,WAAOvD;EACR;EAEkB,OAAZuF,aAAaxE,GAAS6B,GAAS5C,IAAoB,MAAvC;AAAA,QACbgB,IAAUD,EAAE7B,QACZ+M,IAAUrJ,EAAE1D,QACZgN,IAAWD;AACf,QAAIjL,IAAUiL,GAAS;AACrBC,UAAWlL;AADU,YAEfmL,IAAMpL,GACNqL,KAAYpL;AAClBD,UAAI6B,GACJ5B,IAAUiL,GACVrJ,IAAIuJ,GACJF,IAAUG;IACX;AACD,QAAI/I,IAAerC;AACJ,aAAXhB,IACFA,IAAS,IAAIjB,MAAKsE,GAAT,KAAA,IAETA,IAAerD,EAAOd;AAExB,QAAIqE,IAAI;AACR,WAAOA,IAAI2I,GAAU3I;AACnBvD,QAAOkD,WAAWK,GAAGxC,EAAEK,QAAQmC,CAAV,IAAeX,EAAExB,QAAQmC,CAAV,CAApC;AAEF,WAAOA,IAAIvC,GAASuC;AAClBvD,QAAOkD,WAAWK,GAAGxC,EAAEK,QAAQmC,CAAV,CAArB;AAEF,WAAOA,IAAIF,GAAcE;AACvBvD,QAAOkD,WAAWK,GAAG,CAArB;AAEF,WAAOvD;EACR;EAEmB,OAAb0F,cAAc3E,GAAS6B,GAAS5C,IAAoB,MAAvC;AAAA,QACdgB,IAAUD,EAAE7B,QACZ+M,IAAUrJ,EAAE1D,QACZgN,IAAWD;AACf,QAAIjL,IAAUiL,GAAS;AACrBC,UAAWlL;AADU,YAEfmL,IAAMpL,GACNqL,KAAYpL;AAClBD,UAAI6B,GACJ5B,IAAUiL,GACVrJ,IAAIuJ,GACJF,IAAUG;IACX;AACD,QAAI/I,IAAerC;AACJ,aAAXhB,IACFA,IAAS,IAAIjB,MAAKsE,GAAT,KAAA,IAETA,IAAerD,EAAOd;AAExB,QAAIqE,IAAI;AACR,WAAOA,IAAI2I,GAAU3I;AACnBvD,QAAOkD,WAAWK,GAAGxC,EAAEK,QAAQmC,CAAV,IAAeX,EAAExB,QAAQmC,CAAV,CAApC;AAEF,WAAOA,IAAIvC,GAASuC;AAClBvD,QAAOkD,WAAWK,GAAGxC,EAAEK,QAAQmC,CAAV,CAArB;AAEF,WAAOA,IAAIF,GAAcE;AACvBvD,QAAOkD,WAAWK,GAAG,CAArB;AAEF,WAAOvD;EACR;EAEuB,OAAjB0D,kBAAkB3C,GAAS6B,GAAV;AACtB,UAAMyJ,IAAOtL,EAAE7B,SAAS0D,EAAE1D;AAC1B,QAAa,KAATmN;AAAY,aAAOA;AACvB,QAAI9I,IAAIxC,EAAE7B,SAAS;AAAnB,WACY,KAALqE,KAAUxC,EAAEK,QAAQmC,CAAV,MAAiBX,EAAExB,QAAQmC,CAAV;AAAcA;AAAC,WACzC,IAAJA,IAAc,IACXxC,EAAEG,gBAAgBqC,CAAlB,IAAuBX,EAAE1B,gBAAgBqC,CAAlB,IAAuB,IAAI;EAC1D;EAE0B,OAApBC,qBAAqB8I,GAAoBpD,GAC5CqD,GAAmBC,GADI;AAEzB,QAAmB,MAAftD;AAAkB;AAAA,UAChBuD,IAAqB,QAAbvD,GACRwD,IAASxD,MAAe;AAAA,QAC1B0C,IAAQ,GACRe,IAAO;AACX,aACMC,GADGrJ,IAAI,GAAGA,IAAI+I,EAAapN,QAAQqE,KAAKiJ,KAAoB;AAC5DI,UAAML,EAAYnL,QAAQoL,CAApB;AADsD,YAE1DK,IAAKP,EAAalL,QAAQmC,CAArB,GACLuJ,KAAa,QAALD,GACRE,IAASF,MAAO,IAChBG,IAAOjO,MAAKkO,OAAOH,IAAOL,CAAnB,GACPS,IAAQnO,MAAKkO,OAAOH,IAAOJ,CAAnB,GACRS,IAAQpO,MAAKkO,OAAOF,GAAQN,CAApB,GACRW,IAAQrO,MAAKkO,OAAOF,GAAQL,CAApB;AACdE,WAAOD,IAAOK,IAAOpB,GACrBA,IAAQgB,MAAQ,IAChBA,KAAO,YACPA,OAAiB,QAARM,MAAmB,QAAgB,QAARC,MAAmB,KACvDvB,KAASgB,MAAQ,IACjBD,IAAOS,KAASF,MAAU,OAAOC,MAAU,KAC3CZ,EAAYrJ,WAAWsJ,GAAwB,aAANI,CAAzC;IACD;AACD,WAAiB,KAAVhB,KAAwB,MAATe,GAAYH,KAAoB;AACpD,UAAII,IAAML,EAAYnL,QAAQoL,CAApB;AACVI,WAAOhB,IAAQe,GACfA,IAAO,GACPf,IAAQgB,MAAQ,IAChBL,EAAYrJ,WAAWsJ,GAAwB,aAANI,CAAzC;IACD;EACF;EAE2B,OAArBS,sBAAsBC,GAAcC,GAAgBC,GACvD3H,GAAW7F,GADa;AAAA,QAEtB4L,IAAQ4B,GACRb,IAAO;AACX,aAASpJ,IAAI,GAAGA,IAAIsC,GAAGtC,KAAK;AAAA,YACpBhD,IAAQ+M,EAAOlM,QAAQmC,CAAf,GACRkK,KAAK1O,MAAKkO,OAAe,QAAR1M,GAAgBgN,CAA5B,GACLG,KAAK3O,MAAKkO,OAAO1M,MAAU,IAAIgN,CAA1B,GACL1B,IAAI4B,OAAY,QAALC,OAAgB,MAAMf,IAAOf;AAC9CA,UAAQC,MAAM,IACdc,IAAOe,OAAO,IACd1N,EAAOkD,WAAWK,GAAO,aAAJsI,CAArB;IACD;AACD,QAAI7L,EAAOd,SAAS2G;AAApB,WACE7F,EAAOkD,WAAW2C,KAAK+F,IAAQe,CAA/B,GACO9G,IAAI7F,EAAOd;AAChBc,UAAOkD,WAAW2C,KAAK,CAAvB;aAGmB,MAAjB+F,IAAQe;AAAY,YAAM,IAAInD,MAAM,oBAAV;EAEjC;EAEDH,qBAAqBH,GAAoBsE,GAAiBtO,GAAtC;AAEdA,QAAS,KAAKA,WAAQA,IAAS,KAAKA;AAAAA,UAClCyO,IAAoB,QAAbzE,GACP0E,IAAQ1E,MAAe;AAAA,QACzB0C,IAAQ,GACRe,IAAOa;AACX,aAASjK,IAAI,GAAGA,IAAIrE,GAAQqE,KAAK;AAAA,YACzBwF,KAAI,KAAK3H,QAAQmC,CAAb,GACJsK,KAAW,QAAJ9E,IACP+E,KAAQ/E,OAAM,IACdgF,IAAOhP,MAAKkO,OAAOY,IAAMF,CAAlB,GACPK,IAAQjP,MAAKkO,OAAOY,IAAMD,CAAlB,GACRK,IAAQlP,MAAKkO,OAAOa,IAAOH,CAAnB,GACRO,IAAQnP,MAAKkO,OAAOa,IAAOF,CAAnB;AACd,UAAI5N,IAAS2M,IAAOoB,IAAOnC;AAC3BA,UAAQ5L,MAAW,IACnBA,KAAU,YACVA,OAAoB,QAARgO,MAAmB,QAAgB,QAARC,MAAmB,KAC1DrC,KAAS5L,MAAW,IACpB2M,IAAOuB,KAASF,MAAU,OAAOC,MAAU,KAC3C,KAAK/K,WAAWK,GAAY,aAATvD,CAAnB;IACD;AACD,QAAc,KAAV4L,KAAwB,MAATe;AACjB,YAAM,IAAInD,MAAM,oBAAV;EAET;EAEwB,OAAlB1F,mBAAmB/C,GAAS6C,GAC/BC,IAAsB,MADD;AAEN,aAAbA,MAAmBA,IAAW,IAAI9E,MAAKgC,EAAE7B,QAAX,KAAA;AAClC,QAAI8E,IAAY;AAChB,aACMuG,GADGhH,IAAe,IAAXxC,EAAE7B,SAAa,GAAQ,KAALqE,GAAQA,KAAK,GAAG;AACzCgH,WAAUvG,KAAa,KAAMjD,EAAEyJ,YAAYjH,CAAd,OAAsB;AACvD,YAAM4K,IAAgC,IAAnB5D,IAAQ3G;AAC3BI,UAAgC,IAAnBuG,IAAQ3G,GACrB2G,KAAUvG,KAAa,KAAMjD,EAAEyJ,YAAYjH,IAAI,CAAlB,OAA0B;AACvD,YAAM6K,IAAgC,IAAnB7D,IAAQ3G;AAC3BI,UAAgC,IAAnBuG,IAAQ3G,GACrBC,EAASX,WAAWK,MAAM,GAAI4K,KAAa,KAAMC,CAAjD;IACD;AACD,WAAOvK;EACR;EAEwB,OAAlBK,mBAAmBnD,GAAS6C,GAAV;AACvB,QAAII,IAAY;AAChB,aAAST,IAAe,IAAXxC,EAAE7B,SAAa,GAAQ,KAALqE,GAAQA,KAAK;AAC1C,YAAMgH,KAAUvG,KAAa,KAAMjD,EAAEyJ,YAAYjH,CAAd,OAAsB;AACzDS,UAAgC,IAAnBuG,IAAQ3G;IACtB;AACD,WAAOI;EACR;EAQwB,OAAlBD,mBAAmBsK,GAAgBzK,GACtC0K,GAAuBC,GADF;AAAA,UAGjB1I,IAAIjC,EAAQ4K,kBAAR,GACJC,IAAK7K,EAAQ1E,QACbiK,IAAIkF,EAASG,kBAAT,IAA+B3I;AACzC,QAAI6I,IAAI;AACJJ,UACFI,IAAI,IAAI3P,MAAMoK,IAAI,MAAO,GAArB,KAAA,GACJuF,EAAE1L,mBAAF;AAEF,UAAM2L,IAAQ,IAAI5P,MAAM8G,IAAI,MAAO,GAArB,KAAA;AACd8I,MAAM3L,mBAAN;AAEA,UAAMrB,IAAQ5C,MAAK6P,QAAQhL,EAAQ4G,YAAY3E,IAAI,CAAxB,CAAb;AACF,QAARlE,MACFiC,IAAU7E,MAAK8P,mBAAmBjL,GAASjC,GAAO,CAAxC;AAAA,UAENmN,IAAI/P,MAAK8P,mBAAmBR,GAAU1M,GAAO,CAAzC,GAEJoN,IAAMnL,EAAQ4G,YAAY3E,IAAI,CAAxB;AACZ,QAAImJ,IAAkB;AACtB,aAEMC,IAFGC,IAAI/F,GAAQ,KAAL+F,GAAQA,KAAK;AAEvBD,MAAAA,KAAO;AACX,YAAME,KAAML,EAAEtE,YAAY0E,IAAIrJ,CAAlB;AACZ,UAAIsJ,OAAQJ,GAAK;AACf,cAAMxE,MAAU4E,MAAO,KAAML,EAAEtE,YAAY0E,IAAIrJ,IAAI,CAAtB,OAA8B;AAC3DoJ,QAAAA,KAAuB,IAAf1E,KAAQwE;AAChB,YAAIK,KAAuB,IAAf7E,KAAQwE;AAHL,cAITM,KAAMzL,EAAQ4G,YAAY3E,IAAI,CAAxB,GACNyJ,KAAOR,EAAEtE,YAAY0E,IAAIrJ,IAAI,CAAtB;AALE,eAMP9G,MAAKkO,OAAOgC,IAAMI,EAAlB,MAA2B,KAAQD,MAAQ,KAAME,QAAU,MACjEL,MACAG,MAAQL,GARK,EASF,QAAPK;AATS;MAWhB;AAEDrQ,YAAKsO,sBAAsBzJ,GAASqL,IAAM,GAAGR,GAAIE,CAAjD;AACA,UAAI/G,KAAIkH,EAAES,aAAaZ,GAAOO,GAAGrJ,IAAI,CAA7B;AACE,YAAN+B,OACFA,KAAIkH,EAAEU,aAAa5L,GAASsL,GAAGrJ,CAA3B,GACJiJ,EAAErE,eAAeyE,IAAIrJ,GAAgC,QAA5BiJ,EAAEtE,YAAY0E,IAAIrJ,CAAlB,IAAuB+B,EAAhD,GACAqH,OAEEX,MACM,IAAJY,IACFF,IAAkBC,MAAQ,KAGzBP,EAAWxL,WAAWgM,MAAM,GAAGF,IAAkBC,EAAjD;IAGN;AACD,QAAIV;AAAJ,aACEO,EAAEW,oBAAoB9N,CAAtB,GACI2M,IACK,EAACzK,UAAW6K,GAAY1K,WAAW8K,EAAnC,IAEFA;AAET,QAAIR;AAAc,aAAQI;AAE1B,UAAM,IAAIlF,MAAM,aAAV;EACP;EAEa,OAAPoF,QAAQ3N,GAAD;AACZ,WAAOlC,MAAKuC,QAAQL,CAAb,IAAsB;EAC9B;EAGDuO,aAAahC,GAAekC,GAAoBC,GAApC;AACV,QAAI/D,IAAQ;AACZ,aAASrI,IAAI,GAAGA,IAAIoM,GAAYpM,KAAK;AACnC,YAAMqM,IAAM,KAAKpF,YAAYkF,IAAanM,CAA9B,IACFiK,EAAQhD,YAAYjH,CAApB,IACAqI;AACVA,UAAQgE,MAAQ,IAChB,KAAKnF,eAAeiF,IAAanM,GAAS,QAANqM,CAApC;IACD;AACD,WAAOhE;EACR;EAED2D,aAAaM,GAAkBH,GAAoBC,GAAvC;AAGV,QAAI7D,IAAS;AACb,QAAiB,IAAb4D,GAAgB;AAGlBA,YAAe;AAHG,UAId3H,IAAU,KAAK3G,QAAQsO,CAAb,GACVI,IAAe,QAAV/H,GACLxE,IAAI;AACR,aAAOA,IATUoM,IAAa,MAAO,GASfpM,KAAK;AAAA,cACnBwM,KAAMF,EAAWzO,QAAQmC,CAAnB,GACNyM,MAAOjI,MAAY,OAAa,QAANgI,MAAgBjE;AAChDA,YAAwB,IAAdkE,OAAQ,IAClB,KAAK9M,WAAWwM,IAAanM,IAAW,QAANyM,OAAiB,KAAY,QAALF,CAA1D,GACA/H,IAAU,KAAK3G,QAAQsO,IAAanM,IAAI,CAA9B,GACVuM,KAAgB,QAAV/H,MAAqBgI,OAAQ,MAAMjE,GACzCA,IAAuB,IAAbgE,MAAO;MAClB;AAfiB,YAiBZC,IAAMF,EAAWzO,QAAQmC,CAAnB,GACNyM,KAAOjI,MAAY,OAAa,QAANgI,KAAgBjE;AAChDA,UAAwB,IAAdkE,MAAQ,IAClB,KAAK9M,WAAWwM,IAAanM,IAAW,QAANyM,MAAiB,KAAY,QAALF,CAA1D;AAEA,UAAIJ,IAAanM,IAAI,KAAK,KAAKrE;AAC7B,cAAM,IAAIG,WAAW,eAAf;AAEiB,YAAP,IAAbsQ,OACH5H,IAAU,KAAK3G,QAAQsO,IAAanM,IAAI,CAA9B,GACVuM,KAAgB,QAAV/H,MANOgI,MAAQ,MAMcjE,GACnCA,IAAuB,IAAbgE,MAAO,IACjB,KAAK5M,WAAWwM,IAAaG,EAAW3Q,QACzB,aAAV6I,IAA8B,QAAL+H,CAD9B;IAGH,OAAM;AACLJ,YAAe;AACf,UAAInM,IAAI;AACR,aAAOA,IAAIsM,EAAW3Q,SAAS,GAAGqE,KAAK;AAAA,cAC/BwE,KAAU,KAAK3G,QAAQsO,IAAanM,CAA1B,GACVwM,KAAMF,EAAWzO,QAAQmC,CAAnB,GACNuM,MAAgB,QAAV/H,OAA2B,QAANgI,MAAgBjE;AACjDA,YAAuB,IAAbgE,OAAO;AACjB,cAAME,MAAOjI,OAAY,OAAOgI,OAAQ,MAAMjE;AAC9CA,YAAwB,IAAdkE,OAAQ,IAClB,KAAK9M,WAAWwM,IAAanM,IAAW,QAANyM,OAAiB,KAAY,QAALF,EAA1D;MACD;AAXI,YAYC/H,IAAU,KAAK3G,QAAQsO,IAAanM,CAA1B,GACVwM,IAAMF,EAAWzO,QAAQmC,CAAnB,GACNuM,KAAgB,QAAV/H,MAA2B,QAANgI,KAAgBjE;AACjDA,UAAuB,IAAbgE,MAAO;AACjB,UAAIE,IAAM;AACe,YAAP,IAAbL,OACHK,KAAOjI,MAAY,OAAOgI,MAAQ,MAAMjE,GACxCA,IAAwB,IAAdkE,MAAQ,KAEpB,KAAK9M,WAAWwM,IAAanM,IAAW,QAANyM,MAAiB,KAAY,QAALF,CAA1D;IACD;AACD,WAAOhE;EACR;EAED2D,oBAAoB9N,GAAD;AACjB,QAAc,MAAVA;AAAa;AACjB,QAAIiK,IAAQ,KAAKxK,QAAQ,CAAb,MAAoBO;AAChC,UAAMsF,IAAO,KAAK/H,SAAS;AAC3B,aAASqE,IAAI,GAAGA,IAAI0D,GAAM1D,KAAK;AAC7B,YAAMwF,IAAI,KAAK3H,QAAQmC,IAAI,CAAjB;AACV,WAAKL,WAAWK,GAA0B,aAArBwF,KAAM,KAAKpH,IAAwBiK,CAAxD,GACAA,IAAQ7C,MAAMpH;IACf;AACD,SAAKuB,WAAW+D,GAAM2E,CAAtB;EACD;EAEwB,OAAlBiD,mBAAmB9N,GAASY,GAAesO,GAAzB;AAAA,UACjBpK,IAAI9E,EAAE7B,QAENc,IAAS,IAAIjB,MADE8G,IAAIoK,GACV,KAAA;AACf,QAAc,MAAVtO,GAAa;AACf,eAAS4B,KAAI,GAAGA,KAAIsC,GAAGtC;AAAKvD,UAAOkD,WAAWK,IAAGxC,EAAEK,QAAQmC,EAAV,CAArB;AAE5B,aADe,IAAX0M,KAAcjQ,EAAOkD,WAAW2C,GAAG,CAArB,GACX7F;IACR;AACD,QAAI4L,IAAQ;AACZ,aAASrI,IAAI,GAAGA,IAAIsC,GAAGtC,KAAK;AAC1B,YAAMwF,IAAIhI,EAAEK,QAAQmC,CAAV;AACVvD,QAAOkD,WAAWK,GAAmB,aAAdwF,KAAKpH,IAAuBiK,CAAnD,GACAA,IAAQ7C,MAAO,KAAKpH;IACrB;AAID,WAHe,IAAXsO,KACFjQ,EAAOkD,WAAW2C,GAAG+F,CAArB,GAEK5L;EACR;EAE2B,OAArByE,sBAAsB1D,GAAS6B,GAAV;AAC1B,UAAMjB,IAAQ5C,MAAKmR,gBAAgBtN,CAArB;AACd,QAAY,IAARjB;AAAW,YAAM,IAAItC,WAAW,gBAAf;AAAN,UACT8Q,IAA4B,IAAdxO,IAAQ,IACtByO,IAAYzO,IAAQ,IACpBzC,IAAS6B,EAAE7B,QACXmR,IAAqB,MAAdD,KACiD,KAAhDrP,EAAEK,QAAQlC,IAAS,CAAnB,MAA2B,KAAKkR,GACxC/M,IAAenE,IAASiR,KAAcE,IAAO,IAAI,IACjDrQ,IAAS,IAAIjB,MAAKsE,GAActC,EAAE5B,IAAzB;AACf,QAAkB,MAAdiR,GAAiB;AACnB,UAAI7M,KAAI;AACR,aAAOA,KAAI4M,GAAY5M;AAAKvD,UAAOkD,WAAWK,IAAG,CAArB;AAC5B,aAAOA,KAAIF,GAAcE;AACvBvD,UAAOkD,WAAWK,IAAGxC,EAAEK,QAAQmC,KAAI4M,CAAd,CAArB;IAEH,OAAM;AACL,UAAIvE,KAAQ;AACZ,eAASrI,KAAI,GAAGA,KAAI4M,GAAY5M;AAAKvD,UAAOkD,WAAWK,IAAG,CAArB;AACrC,eAASA,KAAI,GAAGA,KAAIrE,GAAQqE,MAAK;AAC/B,cAAMwF,KAAIhI,EAAEK,QAAQmC,EAAV;AACVvD,UAAOkD,WACHK,KAAI4M,GAAgC,aAAlBpH,MAAKqH,IAA2BxE,EADtD,GAEAA,KAAQ7C,OAAO,KAAKqH;MACrB;AACD,UAAIC;AACFrQ,UAAOkD,WAAWhE,IAASiR,GAAYvE,EAAvC;eAEc,MAAVA;AAAa,cAAM,IAAIpC,MAAM,oBAAV;IAE1B;AACD,WAAOxJ,EAAOyC,OAAP;EACR;EAE4B,OAAtB+B,uBAAuBzD,GAAS6B,GAAV;AAAA,UACrB1D,IAAS6B,EAAE7B,QACXC,IAAO4B,EAAE5B,MACTwC,IAAQ5C,MAAKmR,gBAAgBtN,CAArB;AACd,QAAY,IAARjB;AAAW,aAAO5C,MAAKuR,sBAAsBnR,CAA3B;AAAP,UACTgR,IAA4B,IAAdxO,IAAQ,IACtByO,IAAYzO,IAAQ;AAC1B,QAAI0B,IAAenE,IAASiR;AAC5B,QAAoB,KAAhB9M;AAAmB,aAAOtE,MAAKuR,sBAAsBnR,CAA3B;AAK9B,QAAIoR,IAAa;AACjB,QAAIpR,GAAM;AAER,UAAuC,MAAlC4B,EAAEK,QAAQ+O,CAAV,KADS,KAAKC,KAAa;AAE9BG,YAAa;;AAEb,iBAAShN,KAAI,GAAGA,KAAI4M,GAAY5M;AAC9B,cAAqB,MAAjBxC,EAAEK,QAAQmC,EAAV,GAAoB;AACtBgN,gBAAa;AACb;UACD;IAGN;AAED,QAAIA,KAA+B,MAAdH,GAAiB;AAAA,YAE9BnN,KAAMlC,EAAEK,QAAQlC,IAAS,CAAnB;AACyB,WAAT,CAAC+D,MACJI;IAC1B;AACD,QAAIrD,IAAS,IAAIjB,MAAKsE,GAAclE,CAAvB;AACb,QAAkB,MAAdiR,GAAiB;AAEnBpQ,QAAOkD,WAAWG,IAAe,GAAG,CAApC;AACA,eAASE,KAAI4M,GAAY5M,KAAIrE,GAAQqE;AACnCvD,UAAOkD,WAAWK,KAAI4M,GAAYpP,EAAEK,QAAQmC,EAAV,CAAlC;IAEH,OAAM;AACL,UAAIqI,KAAQ7K,EAAEK,QAAQ+O,CAAV,MAA0BC;AACtC,YAAMnJ,KAAO/H,IAASiR,IAAa;AACnC,eAAS5M,KAAI,GAAGA,KAAI0D,IAAM1D,MAAK;AAC7B,cAAMwF,KAAIhI,EAAEK,QAAQmC,KAAI4M,IAAa,CAA3B;AACVnQ,UAAOkD,WAAWK,IAA8B,aAAzBwF,MAAM,KAAKqH,IAA4BxE,EAA9D,GACAA,KAAQ7C,OAAMqH;MACf;AACDpQ,QAAOkD,WAAW+D,IAAM2E,EAAxB;IACD;AAMD,WALI2E,MAGFvQ,IAASjB,MAAK2D,iBAAiB1C,GAAtB,MAAoCA,CAApC,IAEJA,EAAOyC,OAAP;EACR;EAE2B,OAArB6N,sBAAsBnR,GAAD;AAAA,WACtBA,IACKJ,MAAKe,WAAW,GAAhB,IAAA,IAEFf,MAAKa,OAAL;EACR;EAEqB,OAAfsQ,gBAAgBnP,GAAD;AACpB,QAAe,IAAXA,EAAE7B;AAAY,aAAO;AACzB,UAAM+B,IAAQF,EAAEG,gBAAgB,CAAlB;AAAd,WACID,IAAQlC,MAAK+D,mBAAyB,KACnC7B;EACR;EAEmB,OAAbb,cAAcoQ,GAAUC,IAAK,WAAhB;AAClB,QAAmB,YAAf,OAAOD;AAAkB,aAAOA;AACpC,QAAIA,EAAIvR,gBAAgBF;AAAM,aAAOyR;AACrC,QAAsB,eAAlB,OAAOE,UACyB,YAA9B,OAAOA,OAAOC,aAA0B;AAC5C,YAAMC,KAAeJ,EAAIE,OAAOC,WAAR;AACxB,UAAIC,IAAc;AAChB,cAAMzQ,KAAYyQ,GAAaH,CAAD;AAC9B,YAAyB,YAArB,OAAOtQ;AAAwB,iBAAOA;AAC1C,cAAM,IAAIE,UAAU,0CAAd;MACP;IACF;AACD,UAAMwQ,IAAUL,EAAIK;AACpB,QAAIA,GAAS;AACX,YAAM1Q,KAAY0Q,EAAQC,KAAKN,CAAb;AAClB,UAAyB,YAArB,OAAOrQ;AAAwB,eAAOA;IAC3C;AACD,UAAMM,IAAW+P,EAAI/P;AACrB,QAAIA,GAAU;AACZ,YAAMN,KAAYM,EAASqQ,KAAKN,CAAd;AAClB,UAAyB,YAArB,OAAOrQ;AAAwB,eAAOA;IAC3C;AACD,UAAM,IAAIE,UAAU,0CAAd;EACP;EAEiB,OAAXiG,YAAYrF,GAAD;AAAA,WACZlC,MAAKwH,WAAWtF,CAAhB,IAA+BA,IAC5B,CAAEA;EACV;EAEgB,OAAVsF,WAAWtF,GAAD;AACf,WAAwB,YAAjB,OAAOA,KAAgC,SAAVA,KAC7BA,EAAMhC,gBAAgBF;EAC9B;EAEuB,OAAjBkH,kBAAkBJ,GAAW9E,GAAZ;AAAA,UAChBgC,IAAiC,KAAhB8C,IAAI,MAAM,IAC3B7F,IAAS,IAAIjB,MAAKgE,GAAchC,EAAE5B,IAAzB,GACT8H,IAAOlE,IAAe;AAC5B,aAASQ,KAAI,GAAGA,KAAI0D,GAAM1D;AACxBvD,QAAOkD,WAAWK,IAAGxC,EAAEK,QAAQmC,EAAV,CAArB;AAEF,QAAIN,IAAMlC,EAAEK,QAAQ6F,CAAV;AACV,QAAiB,KAAZpB,IAAI,IAAW;AAClB,YAAMkL,KAAO,KAAMlL,IAAI;AACvB5C,UAAOA,KAAO8N,OAAUA;IACzB;AAED,WADA/Q,EAAOkD,WAAW+D,GAAMhE,CAAxB,GACOjD,EAAOyC,OAAP;EACR;EAEoC,OAA9ByD,+BAA+BL,GAAW9E,GAC7C4C,GADiC;AAAA,QAAA,IAOrBnE,KAAKwR;AAAAA,UALbjO,IAAiC,KAAhB8C,IAAI,MAAM,IAC3B7F,IAAS,IAAIjB,MAAKgE,GAAcY,CAAvB;AACf,QAAIJ,IAAI;AACR,UAAM0D,IAAOlE,IAAe;AAC5B,QAAI+I,IAAS;AAEb,eADMmF,IAAQ,EAAShK,GAAMlG,EAAE7B,MAAjB,GACPqE,IAAI0N,GAAO1N,KAAK;AACrB,YAAMsI,KAAI,IAAI9K,EAAEK,QAAQmC,CAAV,IAAeuI;AAC7BA,UAAsB,IAAZD,OAAM,IAChB7L,EAAOkD,WAAWK,GAAO,aAAJsI,EAArB;IACD;AACD,WAAOtI,IAAI0D,GAAM1D;AACfvD,QAAOkD,WAAWK,GAA4B,IAAd,aAAV,CAACuI,CAAvB;AAEF,QAAI7I,IAAMgE,IAAOlG,EAAE7B,SAAS6B,EAAEK,QAAQ6F,CAAV,IAAkB;AAC9C,UAAMiK,IAAkBrL,IAAI;AAC5B,QAAIsL;AACJ,QAAwB,KAApBD;AACFC,UAAY,IAAIlO,IAAM6I,GACtBqF,KAAa;SACR;AACL,YAAMJ,IAAO,KAAKG;AAClBjO,UAAOA,KAAO8N,MAAUA;AACxB,YAAMK,KAAa,KAAM,KAAKL;AAC9BI,UAAYC,KAAanO,IAAM6I,GAC/BqF,KAAcC,KAAa;IAC5B;AAED,WADApR,EAAOkD,WAAW+D,GAAMkK,CAAxB,GACOnR,EAAOyC,OAAP;EACR;EAGDrB,QAAQmC,GAAD;AACL,WAAO,KAAKA,CAAL;EACR;EACDrC,gBAAgBqC,GAAD;AACb,WAAO,KAAKA,CAAL,MAAY;EACpB;EACDL,WAAWK,GAAWhD,GAAZ;AACR,SAAKgD,CAAL,IAAkB,IAARhD;EACX;EACDyL,eAAezI,GAAWhD,GAAZ;AACZ,SAAKgD,CAAL,IAAkB,IAARhD;EACX;EACDiO,oBAAiB;AACf,UAAM6C,IAAM,KAAKnS;AAAjB,WACqC,SAAjC,KAAKgC,gBAAgBmQ,IAAM,CAA3B,IAAsD,IAANA,IAAU,IACnD,IAAJA;EACR;EACD7G,YAAYjH,GAAD;AACT,WAA4C,QAApC,KAAKA,MAAM,CAAX,MAA6B,MAAL,IAAJA;EAC7B;EACDkH,eAAelH,GAAWtC,GAAZ;AAAA,UACNS,IAAa6B,MAAM,GACnB+N,IAAW,KAAKlQ,QAAQM,CAAb,GACX6P,IAAe,IAAJhO,IAAqB,QAAX+N,IAAsBrQ,KAAS,KACpB,aAAXqQ,IAAkC,QAARrQ;AACrD,SAAKiC,WAAWxB,GAAY6P,CAA5B;EACD;EAEgB,OAAVC,WAAWC,GAAcjQ,GAAf;AACf,QAAIxB,IAAS;AAAb,WACkB,IAAXwB;AACU,UAAXA,MAAcxB,KAAUyR,IAC5BjQ,OAAc,GACdiQ,KAAQA;AAEV,WAAOzR;EACR;EAsCqB,OAAfH,gBAAgBkB,GAAD;AACpB,YAAY,aAAJA,OAAoBA;EAC7B;AAAA;AAtCMhC,KAAAA,eAAA,UACAA,KAAAA,mBAAmBA,KAAKK,gBAAgB,GAQxCL,KAAAA,oBAAoB,CACzB,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACnC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACnC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KACnC,KAAK,KAAK,KAAK,GALU,GAQpBA,KAAAA,2BAA2B,GAC3BA,KAAAA,gCAAgC,KAAKA,KAAKwJ,0BAC1CxJ,KAAAA,qBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,GAAA,GACAA,KAAAA,yBAAyB,IAAI2S,YAAY,CAAhB,GACzB3S,KAAAA,yBAAyB,IAAI4S,aAAa5S,KAAK6S,sBAAtB,GACzB7S,KAAAA,uBAAuB,IAAI8S,WAAW9S,KAAK6S,sBAApB,GAKvB7S,KAAAA,UAAUS,KAAKsS,QAAQ,SAAS/Q,GAAT;AAC5B,SAAOvB,KAAKsS,MAAM/Q,CAAX,IAAgB;AACxB,IAAG,SAASA,GAAT;AAAA,SACQ,MAANA,IAAgB,KAC6B,IAA1C,MAAqC,IAA/BvB,KAAKuS,IAAIhR,MAAM,CAAf,IAAoBvB,KAAKwS;AACvC,GACMjT,KAAAA,SAASS,KAAKyS,QAAQ,SAASC,GAAWC,GAApB;AAC3B,SAAiB,IAATD,IAAIC;AACb;AAAA,IAAA,eAAA;;;AC33DI,IAAM,aAAa;EACxB,WAAW;EACX,MAAM;EACN,OAAO;EACP,MAAM;EACN,WAAW;EACX,QAAQ;EACR,WAAW;EACX,WAAW;EACX,QAAQ;EACR,WAAW;EACX,OAAO;EACP,OAAO;EACP,OAAO;EACP,MAAM;EACN,QAAQ;EACR,QAAQ;EACR,QAAQ;EACR,OAAO;EACP,QAAQ;EACR,MAAM;EACN,OAAO;EACP,UAAU;;;;ACnBN,SAAU,iCAAiC,MAAY;AAC3D,MAAI,UAAU,yBAAyB,IAAI;AAC3C,MAAI,eAAe,OAAO,KAAK,WAAW,QAAQ,KAAK;AACvD,QAAM,aAAa,aAAK,QAAQ,IAAI,aAAK,iBAAiB,SAAS,aAAK,OAAO,EAAE,CAAC,CAAC;AAEnF,iBAAe,OAAO,OAAO,CAAC,cAAc,OAAO,KAAK,WAAW,SAAS,EAAE,GAAG,KAAK,CAAC,CAAC;AACxF,YAAU,aAAK,QAAQ,IAAI,aAAK,UAAU,aAAK,OAAO,OAAO,GAAG,aAAK,OAAO,CAAG,CAAC,CAAC;AAEjF,MAAI,cAAc,aAAK,OAAO,CAAC;AAC/B,MAAI,iBAAiB;AACrB,MAAI;AACJ,MAAI;AAEJ,KAAG;AACD,QAAI,CAAC,gBAAgB;AAInB,eAAS,YAAY,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG;AACjD,UAAI,WAAW,MAAM;AACnB,uBAAe,OAAO,OAAO,CAAC,cAAc,OAAO,KAAK,QAAQ,KAAK,CAAC,CAAC;;WAEpE;AACL,uBAAiB;;AAGnB,cAAU,aAAK,QAAQ,IAAI,aAAK,iBAAiB,SAAS,aAAK,OAAO,EAAE,CAAC,CAAC;AAC1E,kBAAc,aAAK,QAAQ,IAAI,aAAK,UAAU,SAAS,aAAK,OAAO,CAAI,CAAC,CAAC;AACzE,cAAU,aAAK,QAAQ,IAAI,aAAK,UAAU,SAAS,aAAK,OAAO,CAAC,CAAC,CAAC;WAC3D,aAAK,SAAS,SAAS,aAAK,OAAO,CAAC,CAAC;AAE9C,QAAM,YAAY,aAAK,QAAQ,IAAI,aAAK,WAAW,aAAa,aAAK,OAAO,GAAI,CAAC,CAAC;AAIlF,WAAS,UAAU,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG;AAC/C,MAAI,WAAW,MAAM;AACnB,mBAAe,OAAO,OAAO,CAAC,cAAc,OAAO,KAAK,QAAQ,KAAK,CAAC,CAAC;;AAGzE,SAAO;AACT;AAEA,SAAS,yBAAyB,OAAa;AAC7C,QAAM,eAAe,eAAe,KAAK;AACzC,QAAM,OAAO,aAAK,OAAO,kBAAkB;AAC3C,QAAM,WACJ,eAAe,OACX,aAAK,WAAW,cAAc,IAAI,IAClC,aAAK,IAAI,aAAK,WAAW,YAAY,GAAG,aAAK,OAAO,CAAC,CAAC;AAC5D,SAAO;AACT;AAEM,SAAU,sBAAsB,QAAc;AAClD,QAAM,SAAiB,OAAO,MAAM,CAAC;AACrC,QAAM,MAAM,eAAe,MAAM;AACjC,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,WAAO,CAAC,IAAI,aAAK,SACf,aAAK,WACH,aAAK,iBAAiB,KAAK,aAAK,SAAS,aAAK,OAAO,CAAC,GAAG,aAAK,OAAO,CAAC,CAAC,CAAC,GACxE,aAAK,OAAO,GAAI,CAAC,CAClB;;AAGL,SAAO;AACT;AAEA,SAAS,eAAe,OAAa;AACnC,QAAM,OAAO,IAAI,SAAS,IAAI,YAAY,CAAC,CAAC;AAC5C,OAAK,WAAW,GAAG,KAAK;AACxB,SAAO,aAAK,OAAO,KAAK,QAAQ,KAAK,MAAM,CAAC,EAAE;AAChD;AAEA,SAAS,QAAQ,QAAmB;AAClC,SAAO,MAAM,UAAU,IACpB,KAAK,IAAI,WAAW,MAAM,GAAG,CAAC,OAAe,OAAO,EAAE,SAAS,EAAE,GAAG,MAAM,EAAE,CAAC,EAC7E,KAAK,EAAE;AACZ;;;ACvEA,SAAS,aAAa,GAAW,GAAS;AAMxC,UAAQ,IAAI,SAAU,OAAQ,MAAM,MAAM,IAAK,UAAW;AAC5D;AAEA,SAAS,SAAS,GAAW,GAAS;AAMpC,SAAQ,KAAK,IAAM,MAAO,KAAK;AACjC;AAEA,SAAS,SAAS,GAAS;AAKzB,OAAK,MAAM;AACX,MAAI,aAAa,GAAG,UAAU;AAC9B,OAAK,MAAM;AACX,MAAI,aAAa,GAAG,UAAU;AAC9B,OAAK,MAAM;AAEX,SAAO;AACT;AAEA,SAAS,QAAQ,GAAa,GAAW;AAMvC,MAAI,CAAC,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,OAAQ,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,KAAM;AAC3D,MAAI,CAAC,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,OAAQ,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,KAAM;AAC3D,QAAM,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AAErB,IAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,IAAE,CAAC,KAAK,EAAE,CAAC,MAAM;AACjB,IAAE,CAAC,KAAK;AAER,IAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,IAAE,CAAC,KAAK,EAAE,CAAC,MAAM;AACjB,IAAE,CAAC,KAAK;AAER,IAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,IAAE,CAAC,KAAK,EAAE,CAAC,MAAM;AACjB,IAAE,CAAC,KAAK;AAER,IAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,IAAE,CAAC,KAAK;AAER,SAAO,CAAE,EAAE,CAAC,KAAK,KAAM,EAAE,CAAC,GAAI,EAAE,CAAC,KAAK,KAAM,EAAE,CAAC,CAAC;AAClD;AAEA,SAAS,aAAa,GAAa,GAAW;AAM5C,MAAI,CAAC,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,OAAQ,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,KAAM;AAC3D,MAAI,CAAC,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,OAAQ,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,KAAM;AAC3D,QAAM,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AAErB,IAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,IAAE,CAAC,KAAK,EAAE,CAAC,MAAM;AACjB,IAAE,CAAC,KAAK;AAER,IAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,IAAE,CAAC,KAAK,EAAE,CAAC,MAAM;AACjB,IAAE,CAAC,KAAK;AAER,IAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,IAAE,CAAC,KAAK,EAAE,CAAC,MAAM;AACjB,IAAE,CAAC,KAAK;AAER,IAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,IAAE,CAAC,KAAK,EAAE,CAAC,MAAM;AACjB,IAAE,CAAC,KAAK;AAER,IAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,IAAE,CAAC,KAAK,EAAE,CAAC,MAAM;AACjB,IAAE,CAAC,KAAK;AAER,IAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,IAAE,CAAC,KAAK,EAAE,CAAC,MAAM;AACjB,IAAE,CAAC,KAAK;AAER,IAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAC5D,IAAE,CAAC,KAAK;AAER,SAAO,CAAE,EAAE,CAAC,KAAK,KAAM,EAAE,CAAC,GAAI,EAAE,CAAC,KAAK,KAAM,EAAE,CAAC,CAAC;AAClD;AAEA,SAAS,SAAS,GAAa,GAAS;AAOtC,OAAK;AAEL,MAAI,MAAM,IAAI;AACZ,WAAO,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;aACT,IAAI,IAAI;AACjB,WAAO,CAAE,EAAE,CAAC,KAAK,IAAM,EAAE,CAAC,MAAO,KAAK,GAAM,EAAE,CAAC,KAAK,IAAM,EAAE,CAAC,MAAO,KAAK,CAAG;SACvE;AACL,SAAK;AACL,WAAO,CAAE,EAAE,CAAC,KAAK,IAAM,EAAE,CAAC,MAAO,KAAK,GAAM,EAAE,CAAC,KAAK,IAAM,EAAE,CAAC,MAAO,KAAK,CAAG;;AAEhF;AAEA,SAAS,cAAc,GAAa,GAAS;AAO3C,OAAK;AAEL,MAAI,MAAM,GAAG;AACX,WAAO;aACE,IAAI,IAAI;AACjB,WAAO,CAAE,EAAE,CAAC,KAAK,IAAM,EAAE,CAAC,MAAO,KAAK,GAAK,EAAE,CAAC,KAAK,CAAC;SAC/C;AACL,WAAO,CAAC,EAAE,CAAC,KAAM,IAAI,IAAK,CAAC;;AAE/B;AAEA,SAAS,QAAQ,GAAa,GAAW;AAMvC,SAAO,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AAClC;AAEA,SAAS,SAAS,GAAW;AAO3B,MAAI,QAAQ,GAAG,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;AAC9B,MAAI,aAAa,GAAG,CAAC,YAAY,UAAU,CAAC;AAC5C,MAAI,QAAQ,GAAG,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;AAC9B,MAAI,aAAa,GAAG,CAAC,YAAY,SAAU,CAAC;AAC5C,MAAI,QAAQ,GAAG,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;AAE9B,SAAO;AACT;AAKA,SAAS,UAAU,OAAe,MAAa;AAK7C,SAAO,QAAQ;AAEf,QAAM,YAAY,MAAM,SAAS;AACjC,QAAM,SAAS,MAAM,SAAS;AAE9B,MAAI,KAAK;AAET,MAAI,KAAK;AAET,QAAM,KAAK;AACX,QAAM,KAAK;AACX,MAAI,IAAI;AAER,WAAS,IAAI,GAAG,IAAI,QAAQ,IAAI,IAAI,GAAG;AACrC,SAAK,MAAM,CAAC,IAAK,MAAM,IAAI,CAAC,KAAK,IAAM,MAAM,IAAI,CAAC,KAAK,KAAO,MAAM,IAAI,CAAC,KAAK;AAE9E,SAAK,aAAa,IAAI,EAAE;AACxB,SAAK,SAAS,IAAI,EAAE;AACpB,SAAK,aAAa,IAAI,EAAE;AAExB,UAAM;AACN,SAAK,SAAS,IAAI,EAAE;AACpB,SAAK,aAAa,IAAI,CAAC,IAAI;AAC3B,QAAI,IAAI;;AAGV,OAAK;AAEL,UAAQ,WAAW;IACjB,KAAK;AACH,YAAM,MAAM,IAAI,CAAC,KAAK;IAExB,KAAK;AACH,YAAM,MAAM,IAAI,CAAC,KAAK;IAExB,KAAK;AACH,YAAM,MAAM,CAAC;AACb,WAAK,aAAa,IAAI,EAAE;AACxB,WAAK,SAAS,IAAI,EAAE;AACpB,WAAK,aAAa,IAAI,EAAE;AACxB,YAAM;;AAGV,QAAM,MAAM;AACZ,OAAK,SAAS,EAAE;AAEhB,SAAO,OAAO;AAChB;AAEA,SAAS,WAAW,OAAe,MAAa;AAM9C,SAAO,QAAQ;AACf,QAAM,YAAY,MAAM,SAAS;AACjC,QAAM,SAAS,MAAM,SAAS;AAE9B,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AAET,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AAET,QAAM,KAAK;AACX,QAAM,KAAK;AACX,QAAM,KAAK;AACX,QAAM,KAAK;AACX,MAAI,IAAI;AAER,WAAS,IAAI,GAAG,IAAI,QAAQ,IAAI,IAAI,IAAI;AACtC,SAAK,MAAM,CAAC,IAAK,MAAM,IAAI,CAAC,KAAK,IAAM,MAAM,IAAI,CAAC,KAAK,KAAO,MAAM,IAAI,CAAC,KAAK;AAC9E,SAAK,MAAM,IAAI,CAAC,IAAK,MAAM,IAAI,CAAC,KAAK,IAAM,MAAM,IAAI,CAAC,KAAK,KAAO,MAAM,IAAI,CAAC,KAAK;AAClF,SAAK,MAAM,IAAI,CAAC,IAAK,MAAM,IAAI,CAAC,KAAK,IAAM,MAAM,IAAI,EAAE,KAAK,KAAO,MAAM,IAAI,EAAE,KAAK;AACpF,SAAK,MAAM,IAAI,EAAE,IAAK,MAAM,IAAI,EAAE,KAAK,IAAM,MAAM,IAAI,EAAE,KAAK,KAAO,MAAM,IAAI,EAAE,KAAK;AAEtF,SAAK,aAAa,IAAI,EAAE;AACxB,SAAK,SAAS,IAAI,EAAE;AACpB,SAAK,aAAa,IAAI,EAAE;AACxB,UAAM;AAEN,SAAK,SAAS,IAAI,EAAE;AACpB,UAAM;AACN,SAAK,aAAa,IAAI,CAAC,IAAI;AAE3B,SAAK,aAAa,IAAI,EAAE;AACxB,SAAK,SAAS,IAAI,EAAE;AACpB,SAAK,aAAa,IAAI,EAAE;AACxB,UAAM;AAEN,SAAK,SAAS,IAAI,EAAE;AACpB,UAAM;AACN,SAAK,aAAa,IAAI,CAAC,IAAI;AAE3B,SAAK,aAAa,IAAI,EAAE;AACxB,SAAK,SAAS,IAAI,EAAE;AACpB,SAAK,aAAa,IAAI,EAAE;AACxB,UAAM;AAEN,SAAK,SAAS,IAAI,EAAE;AACpB,UAAM;AACN,SAAK,aAAa,IAAI,CAAC,IAAI;AAE3B,SAAK,aAAa,IAAI,EAAE;AACxB,SAAK,SAAS,IAAI,EAAE;AACpB,SAAK,aAAa,IAAI,EAAE;AACxB,UAAM;AAEN,SAAK,SAAS,IAAI,EAAE;AACpB,UAAM;AACN,SAAK,aAAa,IAAI,CAAC,IAAI;AAC3B,QAAI,IAAI;;AAGV,OAAK;AACL,OAAK;AACL,OAAK;AACL,OAAK;AAEL,UAAQ,WAAW;IACjB,KAAK;AACH,YAAM,MAAM,IAAI,EAAE,KAAK;IAEzB,KAAK;AACH,YAAM,MAAM,IAAI,EAAE,KAAK;IAEzB,KAAK;AACH,YAAM,MAAM,IAAI,EAAE;AAClB,WAAK,aAAa,IAAI,EAAE;AACxB,WAAK,SAAS,IAAI,EAAE;AACpB,WAAK,aAAa,IAAI,EAAE;AACxB,YAAM;IAER,KAAK;AACH,YAAM,MAAM,IAAI,EAAE,KAAK;IAEzB,KAAK;AACH,YAAM,MAAM,IAAI,EAAE,KAAK;IAEzB,KAAK;AACH,YAAM,MAAM,IAAI,CAAC,KAAK;IAExB,KAAK;AACH,YAAM,MAAM,IAAI,CAAC;AACjB,WAAK,aAAa,IAAI,EAAE;AACxB,WAAK,SAAS,IAAI,EAAE;AACpB,WAAK,aAAa,IAAI,EAAE;AACxB,YAAM;IAER,KAAK;AACH,YAAM,MAAM,IAAI,CAAC,KAAK;IAExB,KAAK;AACH,YAAM,MAAM,IAAI,CAAC,KAAK;IAExB,KAAK;AACH,YAAM,MAAM,IAAI,CAAC,KAAK;IAExB,KAAK;AACH,YAAM,MAAM,IAAI,CAAC;AACjB,WAAK,aAAa,IAAI,EAAE;AACxB,WAAK,SAAS,IAAI,EAAE;AACpB,WAAK,aAAa,IAAI,EAAE;AACxB,YAAM;IAER,KAAK;AACH,YAAM,MAAM,IAAI,CAAC,KAAK;IAExB,KAAK;AACH,YAAM,MAAM,IAAI,CAAC,KAAK;IAExB,KAAK;AACH,YAAM,MAAM,IAAI,CAAC,KAAK;IAExB,KAAK;AACH,YAAM,MAAM,CAAC;AACb,WAAK,aAAa,IAAI,EAAE;AACxB,WAAK,SAAS,IAAI,EAAE;AACpB,WAAK,aAAa,IAAI,EAAE;AACxB,YAAM;;AAGV,QAAM,MAAM;AACZ,QAAM,MAAM;AACZ,QAAM,MAAM;AACZ,QAAM,MAAM;AAEZ,QAAM;AACN,QAAM;AACN,QAAM;AACN,QAAM;AACN,QAAM;AACN,QAAM;AAEN,OAAK,SAAS,EAAE;AAChB,OAAK,SAAS,EAAE;AAChB,OAAK,SAAS,EAAE;AAChB,OAAK,SAAS,EAAE;AAEhB,QAAM;AACN,QAAM;AACN,QAAM;AACN,QAAM;AACN,QAAM;AACN,QAAM;AAEN,UACG,cAAc,OAAO,GAAG,SAAS,EAAE,GAAG,MAAM,EAAE,KAC9C,cAAc,OAAO,GAAG,SAAS,EAAE,GAAG,MAAM,EAAE,KAC9C,cAAc,OAAO,GAAG,SAAS,EAAE,GAAG,MAAM,EAAE,KAC9C,cAAc,OAAO,GAAG,SAAS,EAAE,GAAG,MAAM,EAAE;AAEnD;AAEA,SAAS,WAAW,OAAe,MAAa;AAK9C,SAAO,QAAQ;AAEf,QAAM,YAAY,MAAM,SAAS;AACjC,QAAM,SAAS,MAAM,SAAS;AAE9B,MAAI,KAAK,CAAC,GAAG,IAAI;AACjB,MAAI,KAAK,CAAC,GAAG,IAAI;AAEjB,MAAI,KAAK,CAAC,GAAG,CAAC;AACd,MAAI,KAAK,CAAC,GAAG,CAAC;AAEd,QAAM,KAAK,CAAC,YAAY,SAAU;AAClC,QAAM,KAAK,CAAC,YAAY,SAAU;AAClC,MAAI,IAAI;AAER,WAAS,IAAI,GAAG,IAAI,QAAQ,IAAI,IAAI,IAAI;AACtC,SAAK;MACH,MAAM,IAAI,CAAC,IAAK,MAAM,IAAI,CAAC,KAAK,IAAM,MAAM,IAAI,CAAC,KAAK,KAAO,MAAM,IAAI,CAAC,KAAK;MAC7E,MAAM,CAAC,IAAK,MAAM,IAAI,CAAC,KAAK,IAAM,MAAM,IAAI,CAAC,KAAK,KAAO,MAAM,IAAI,CAAC,KAAK;;AAE3E,SAAK;MACH,MAAM,IAAI,EAAE,IAAK,MAAM,IAAI,EAAE,KAAK,IAAM,MAAM,IAAI,EAAE,KAAK,KAAO,MAAM,IAAI,EAAE,KAAK;MACjF,MAAM,IAAI,CAAC,IAAK,MAAM,IAAI,CAAC,KAAK,IAAM,MAAM,IAAI,EAAE,KAAK,KAAO,MAAM,IAAI,EAAE,KAAK;;AAGjF,SAAK,aAAa,IAAI,EAAE;AACxB,SAAK,SAAS,IAAI,EAAE;AACpB,SAAK,aAAa,IAAI,EAAE;AACxB,SAAK,QAAQ,IAAI,EAAE;AAEnB,SAAK,SAAS,IAAI,EAAE;AACpB,SAAK,QAAQ,IAAI,EAAE;AACnB,SAAK,QAAQ,aAAa,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC;AAEtD,SAAK,aAAa,IAAI,EAAE;AACxB,SAAK,SAAS,IAAI,EAAE;AACpB,SAAK,aAAa,IAAI,EAAE;AACxB,SAAK,QAAQ,IAAI,EAAE;AAEnB,SAAK,SAAS,IAAI,EAAE;AACpB,SAAK,QAAQ,IAAI,EAAE;AACnB,SAAK,QAAQ,aAAa,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,SAAU,CAAC;AACtD,QAAI,IAAI;;AAGV,OAAK,CAAC,GAAG,CAAC;AACV,OAAK,CAAC,GAAG,CAAC;AAEV,UAAQ,WAAW;IACjB,KAAK;AACH,WAAK,QAAQ,IAAI,cAAc,CAAC,GAAG,MAAM,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC;IAExD,KAAK;AACH,WAAK,QAAQ,IAAI,cAAc,CAAC,GAAG,MAAM,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC;IAExD,KAAK;AACH,WAAK,QAAQ,IAAI,cAAc,CAAC,GAAG,MAAM,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC;IAExD,KAAK;AACH,WAAK,QAAQ,IAAI,cAAc,CAAC,GAAG,MAAM,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC;IAExD,KAAK;AACH,WAAK,QAAQ,IAAI,cAAc,CAAC,GAAG,MAAM,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC;IAExD,KAAK;AACH,WAAK,QAAQ,IAAI,cAAc,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IAEtD,KAAK;AACH,WAAK,QAAQ,IAAI,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC,CAAC;AAClC,WAAK,aAAa,IAAI,EAAE;AACxB,WAAK,SAAS,IAAI,EAAE;AACpB,WAAK,aAAa,IAAI,EAAE;AACxB,WAAK,QAAQ,IAAI,EAAE;IAErB,KAAK;AACH,WAAK,QAAQ,IAAI,cAAc,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;IAEvD,KAAK;AACH,WAAK,QAAQ,IAAI,cAAc,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;IAEvD,KAAK;AACH,WAAK,QAAQ,IAAI,cAAc,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;IAEvD,KAAK;AACH,WAAK,QAAQ,IAAI,cAAc,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;IAEvD,KAAK;AACH,WAAK,QAAQ,IAAI,cAAc,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;IAEvD,KAAK;AACH,WAAK,QAAQ,IAAI,cAAc,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;IAEvD,KAAK;AACH,WAAK,QAAQ,IAAI,cAAc,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IAEtD,KAAK;AACH,WAAK,QAAQ,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;AAC9B,WAAK,aAAa,IAAI,EAAE;AACxB,WAAK,SAAS,IAAI,EAAE;AACpB,WAAK,aAAa,IAAI,EAAE;AACxB,WAAK,QAAQ,IAAI,EAAE;;AAGvB,OAAK,QAAQ,IAAI,CAAC,GAAG,MAAM,MAAM,CAAC;AAClC,OAAK,QAAQ,IAAI,CAAC,GAAG,MAAM,MAAM,CAAC;AAElC,OAAK,QAAQ,IAAI,EAAE;AACnB,OAAK,QAAQ,IAAI,EAAE;AAEnB,OAAK,SAAS,EAAE;AAChB,OAAK,SAAS,EAAE;AAEhB,OAAK,QAAQ,IAAI,EAAE;AACnB,OAAK,QAAQ,IAAI,EAAE;AAInB,QAAM,SAAS,OAAO,MACnB,cAAc,GAAG,CAAC,MAAM,GAAG,SAAS,EAAE,GAAG,MAAM,EAAE,KAC/C,cAAc,GAAG,CAAC,MAAM,GAAG,SAAS,EAAE,GAAG,MAAM,EAAE,GACpD,KAAK;AAEP,QAAM,aAAa,QAAQ,MAAM,EAAE,SAAS,KAAK;AACjD,QAAM,SAAS,OAAO,MACnB,cAAc,GAAG,CAAC,MAAM,GAAG,SAAS,EAAE,GAAG,MAAM,EAAE,KAC/C,cAAc,GAAG,CAAC,MAAM,GAAG,SAAS,EAAE,GAAG,MAAM,EAAE,GACpD,KAAK;AAEP,QAAM,aAAa,QAAQ,MAAM,EAAE,SAAS,KAAK;AACjD,SAAO,aAAa;AACtB;AAEM,SAAU,QAAQ,MAAY;AAClC,QAAM,SAAS,OAAO,YAAY,KAAK,MAAM;AAE7C,WAAS,IAAI,GAAG,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG;AACrD,WAAO,CAAC,IAAI,KAAK,CAAC;AAClB,WAAO,CAAC,IAAI,KAAK,CAAC;;AAEpB,SAAO;AACT;AAEA,IAAA,qBAAe;EACb,SAAS;EACT,KAAK;IACH,QAAQ;IACR,SAAS;;EAEX,KAAK;IACH,SAAS;;EAEX,iBAAiB;;;;ACriBb,SAAU,mBAAmB,cAA0C;AAC3E,QAAM,SAAiB,OAAO,OAAO,aAAa,IAAI,eAAe,CAAC;AACtE,QAAM,OAAO,mBAAW,IAAI,QAAQ,MAAM;AAC1C,QAAM,cAAsBC,SAAQ,OAAO,KAAK,MAAM,KAAK,CAAC;AAC5D,cAAY,CAAC,KAAK;AAClB,SAAO,YAAY,SAAS,KAAK,EAAE,YAAW;AAChD;AAEA,SAAS,gBAAgB,KAA+B;AACtD,MAAI;AACJ,UAAQ,OAAO,KAAK;IAClB,KAAK,UAAU;AACb,cAAQ,OAAO,OAAO;QACpB,OAAO,KAAK,WAAW,QAAQ,KAAK;QACpC,OAAO,KAAK,GAAG;QACf,OAAO,KAAK,WAAW,UAAU,KAAK;OACvC;AACD,aAAO;;IAET,KAAK,UAAU;AACb,YAAM,cAAc,sBAAsB,GAAG;AAC7C,cAAQ,OAAO,OAAO,CAAC,OAAO,KAAK,WAAW,QAAQ,KAAK,GAAG,WAAW,CAAC;AAC1E,aAAO;;IAET,KAAK,WAAW;AACd,YAAM,SAAS,MAAM,WAAW,OAAO,WAAW;AAClD,aAAO,OAAO,KAAK,QAAQ,KAAK;;IAElC,KAAK,UAAU;AACb,UAAI,QAAQ,MAAM;AAChB,eAAO,OAAO,KAAK,WAAW,MAAM,KAAK;;AAE3C,aAAO,OAAO,KAAK,WAAW,WAAW,KAAK;;IAEhD,KAAK,aAAa;AAChB,aAAO,OAAO,KAAK,WAAW,WAAW,KAAK;;IAEhD;AACE,YAAM,IAAI,MAAM,oBAAoB,OAAO,GAAG,EAAE;;AAEtD;AAEM,SAAUA,SAAQ,MAAY;AAClC,QAAM,SAAS,OAAO,YAAY,KAAK,MAAM;AAE7C,WAAS,IAAI,GAAG,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG;AACrD,WAAO,CAAC,IAAI,KAAK,CAAC;AAClB,WAAO,CAAC,IAAI,KAAK,CAAC;;AAEpB,SAAO;AACT;;;AChDM,SAAU,0BAA0B,cAA0C;AAClF,SAAO,aAAa,IAAI,CAAC,SAAS,mBAAmB,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE;AACvE;;;ACPM,SAAU,6BAA6B,SAAe;AAC1D,MAAI,eAAe,OAAO,KAAK,WAAW,QAAQ,KAAK;AACvD,QAAM,6BAA6B;AACnC,QAAM,YAAY,CAAC,GAAG,OAAO,KAAK,OAAO,CAAC;AAE1C,QAAM,gBAAgB,QAAQ,UAAU;AAExC,WACM,QAAQ,GACZ,SAAS,gBAAgB,UAAU,SAAS,6BAA6B,IACzE,SACA;AACA,QAAI,WAAW,UAAU,KAAK;AAC9B,QAAI,WAAW,KAAM;AACnB;;AAEF,mBAAe,OAAO,OAAO,CAAC,cAAc,OAAO,KAAK,SAAS,SAAS,EAAE,GAAG,KAAK,CAAC,CAAC;;AAGxF,MAAI,eAAe;AACjB,mBAAe,OAAO,OAAO,CAAC,cAAc,OAAO,KAAK,WAAW,WAAW,KAAK,CAAC,CAAC;;AAEvF,SAAO;AACT;;;ACnBA,IAAM,mBAAmB;AAEnB,SAAU,mBAAmB,cAA0C;AAC3E,QAAM,MAAM,aAAa,CAAC;AAC1B,QAAM,SAASC,iBAAgB,GAAG;AAClC,QAAM,OAAO,mBAAW,IAAI,OAAO,MAAM;AACzC,QAAM,cAAc,iCAAiC,IAAI;AACzD,QAAM,eAAe,aAAa,GAAG;AACrC,QAAM,YAAY,OAAO,OAAO,CAAC,aAAa,YAAY,CAAC,EAAE,SAAS,KAAK,EAAE,YAAW;AACxF,SAAO;AACT;AAEA,SAASA,iBAAgB,KAA+B;AACtD,MAAI;AACJ,UAAQ,OAAO,KAAK;IAClB,KAAK,UAAU;AACb,YAAM,YAAY,IAAI,OAAO,GAAG,gBAAgB;AAChD,cAAQ,OAAO,OAAO;QACpB,OAAO,KAAK,WAAW,QAAQ,KAAK;QACpC,OAAO,KAAK,SAAS;QACrB,OAAO,KAAK,WAAW,WAAW,KAAK;OACxC;AACD,aAAO;;IAET,KAAK,UAAU;AACb,YAAM,cAAc,sBAAsB,GAAG;AAC7C,cAAQ,OAAO,OAAO,CAAC,OAAO,KAAK,WAAW,QAAQ,KAAK,GAAG,WAAW,CAAC;AAC1E,aAAO;;IAET,KAAK,WAAW;AACd,YAAM,SAAS,MAAM,WAAW,OAAO,WAAW;AAClD,aAAO,OAAO,KAAK,QAAQ,KAAK;;IAElC,KAAK,UAAU;AACb,UAAI,QAAQ,MAAM;AAChB,eAAO,OAAO,KAAK,WAAW,MAAM,KAAK;;AAE3C,aAAO,OAAO,KAAK,WAAW,WAAW,KAAK;;IAEhD,KAAK,aAAa;AAChB,aAAO,OAAO,KAAK,WAAW,WAAW,KAAK;;IAEhD;AACE,YAAM,IAAI,MAAM,oBAAoB,OAAO,GAAG,EAAE;;AAEtD;AAEA,SAAS,aAAa,KAA+B;AACnD,UAAQ,OAAO,KAAK;IAClB,KAAK,UAAU;AACb,YAAM,YAAY,IAAI,OAAO,GAAG,gBAAgB;AAChD,aAAO,6BAA6B,SAAS;;IAE/C,KAAK,UAAU;AACb,YAAM,cAAc,iCAAiC,GAAG;AACxD,aAAO;;IAET,KAAK,WAAW;AACd,YAAM,SAAS,MAAM,WAAW,OAAO,WAAW;AAClD,aAAO,OAAO,KAAK,QAAQ,KAAK;;IAElC,KAAK;AACH,UAAI,QAAQ,MAAM;AAChB,eAAO,OAAO,KAAK,WAAW,MAAM,KAAK;;AAE3C,aAAO,OAAO,KAAK,WAAW,WAAW,KAAK;IAChD,KAAK;AACH,aAAO,OAAO,KAAK,WAAW,WAAW,KAAK;IAChD;AACE,YAAM,IAAI,MAAM,oBAAoB,OAAO,GAAG,EAAE;;AAEtD;;;AC7DM,SAAU,iBACd,cACA,qBAA2C;AAE3C,QAAM,QAAyB,wBAAmB,QAAnB,wBAAmB,SAAA,SAAnB,oBAAqB,SAAQ,iBAAiB;AAC7E,QAAM,OACJ,uBACA,oBAAoB,WACpB,oBAAoB,YAAY,8BAA8B;AAChE,UAAQ,MAAM;IACZ,KAAK,iBAAiB;AACpB,aAAO,OAAO,mBAAmB,YAAY,IAAI,mBAAmB,YAAY;IAClF,KAAK,iBAAiB;AACpB,aAAO,0BAA0B,YAAY;;AAEnD;;;AC5BM,IAAO,kBAAP,MAAsB;EAsB1B,YACE,cACA,cACA,mBACA,cACA,cAAqB;AAErB,SAAK,eAAe;AACpB,SAAK,eAAe;AACpB,SAAK,oBAAoB;AACzB,SAAK,eAAe;AACpB,SAAK,eAAe;EACtB;;;;AC/BI,IAAO,6BAAP,MAAiC;;;;EAIrC,YAIkB,QAIA,OAIA,YAIhB,SAIgB,aAIA,eAAsB;AApBtB,SAAA,SAAA;AAIA,SAAA,QAAA;AAIA,SAAA,aAAA;AAQA,SAAA,cAAA;AAIA,SAAA,gBAAA;AAEhB,SAAK,UAAU;EACjB;;;;EAKA,IAAW,gBAAa;AACtB,UAAM,MAAM,KAAK,QAAQ,UAAU,YAAY,aAAa;AAC5D,WAAO,MAAM,SAAS,KAAK,EAAE,IAAI;EACnC;;;;EAKA,IAAW,aAAU;AACnB,WAAO,KAAK,QAAQ,UAAU,YAAY,UAAU;EACtD;;;;EAKA,IAAW,oBAAiB;AAC1B,WAAO,KAAK,QAAQ,UAAU,YAAY,iBAAiB;EAC7D;;;;EAIA,IAAW,eAAY;AACrB,WAAO,KAAK,QAAQ,UAAU,YAAY,YAAY;EACxD;;;;AC7DI,IAAO,iBAAP,MAAqB;EAGzB,cAAA;AACE,SAAK,WAAW,CAAA;EAClB;EAEO,mBAAmB,SAAwB;AAChD,QAAI,CAAC,KAAK,QAAO,GAAI;AACnB,WAAK,SAAS,CAAC,IAAI;;EAEvB;EAEO,QAAQ,MAAqB;AAClC,SAAK,SAAS,KAAK,IAAI;EACzB;EAEO,UAAO;AACZ,WAAO,KAAK,SAAS,MAAK;EAC5B;EAEO,OAAI;AACT,WAAO,CAAC,KAAK,QAAO,IAAK,KAAK,SAAS,CAAC,IAAI;EAC9C;EAEO,UAAO;AACZ,WAAO,KAAK,SAAS,WAAW;EAClC;EAEO,2BAAwB;AAC7B,QAAI,CAAC,KAAK,QAAO,GAAI;AACnB,WAAK,SAAS,KAAK,KAAK,QAAO,CAAE;;EAErC;;;;EAIO,iBAAc;AACnB,UAAM,gBAAmC,CAAA;AACzC,SAAK,SAAS,IAAI,CAAC,YAAW;AAC5B,YAAM,eAAe,QAAQ,eAAe,QAAQ,eAAe,QAAQ;AAC3E,YAAM,eAAe,QAAQ,eAAe,QAAQ,eAAe,QAAQ;AAC3E,YAAM,mBAAmB,IAAI,gBAC3B,cACA,cACA,QAAQ,iBAAiB;AAE3B,oBAAc,KAAK,gBAAgB;IACrC,CAAC;AACD,WAAO;EACT;;;;AClDI,IAAO,6BAAP,MAAiC;EAUrC,YAAY,KAAa,cAA+B;AACtD,SAAK,MAAM;AACX,SAAK,eAAe;EACtB;;;;ACXI,IAAO,+BAAP,MAAmC;EAGvC,YAAY,YAAqC;AAC/C,SAAK,aAAa;EACpB;EAEO,gBAAa;AAClB,WAAO,KAAK;EACd;;;;ACTI,IAAO,yBAAP,MAA6B;EAGjC,YAAY,YAAqC;AAC/C,SAAK,aAAa;EACpB;EAEO,gBAAa;AAClB,WAAO,KAAK;EACd;;;;ACVI,IAAO,0BAAP,MAA8B;EAKlC,YAAY,WAAiB,YAAqC;AAChE,SAAK,YAAY;AACjB,SAAK,aAAa;EACpB;EAEO,gBAAa;AAClB,WAAO,KAAK;EACd;EAEO,eAAY;AACjB,WAAO,KAAK;EACd;;;;AChBI,IAAgB,YAAhB,MAAgB,WAAS;;;;EAY7B,YAAsB,cAAsB,cAAoB;AAE9D,QAAI,eAAe,YAAW;AAC5B,YAAM,IAAI,cAAc,6CAA6C;;AAGvE,SAAK,eAAe;AACpB,SAAK,eAAe;EACtB;;AAOI,IAAO,oBAAP,cAAiC,UAAS;;EAE9C,YAAY,cAAsB,cAAoB;AACpD,UAAM,cAAc,YAAY;EAClC;;;;ACpBI,SAAU,kCAAkC,SAAkC;AAClF,MAAI,CAAC,4BAA4B,OAAO,GAAG;AACzC,UAAM,IAAI,cAAc,sCAAsC;;AAEhE,OAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,iBAAgB,QAAO,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,kBAAiB,UAAU;AACtE,UAAM,IAAI,cAAc,6BAA6B;;AAEvD,OAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,kBAAiB,WAAa,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,gBAAe,GAAG;AACpE,UAAM,IAAI,cAAc,wCAAwC;;AAEpE;AAEA,SAAS,4BAA4B,SAAgB;AACnD,MAAI,OAAO,YAAY,UAAU;AAC/B,WAAO;;AAET,MAAI,OAAO,KAAK,OAAO,EAAE,WAAW,KAAK,KAAK,UAAU,OAAO,MAAM,MAAM;AACzE,WAAO;;AAET,SAAO,WAAW,EAAE,6BAA6B,OAAO,KAAK,MAAM,QAAQ,OAAO;AACpF;AAQA,eAAsB,yBACpB,UACA,kBAAmC;AAEnC,MACE,iBAAiB,gBAAgB,SAAS,OAC1C,iBAAiB,gBAAgB,SAAS,KAC1C;AACA,WAAO,CAAC,QAAW,MAAS;aAE5B,iBAAiB,gBAAgB,SAAS,OAC1C,iBAAiB,gBAAgB,SAAS,KAC1C;AACA,WAAO,CAAC,SAAS,KAAK,SAAS,GAAG;aAIlC,iBAAiB,gBAAgB,SAAS,OAC1C,iBAAiB,gBAAgB,SAAS,OAC1C,iBAAiB,gBAAgB,SAAS,KAC1C;AACA,WAAO,CAAC,SAAS,KAAK,iBAAiB,YAAY;SAGhD;AACH,WAAO,CAAC,iBAAiB,cAAc,SAAS,GAAG;;AAEvD;AAMM,SAAU,WAAW,KAAY;AACrC,SACE,eAAe,qBACf,OAAO,IAAI,iBAAiB,YAC5B,OAAO,IAAI,iBAAiB,YAC5B,IAAI,gBACF,UAAU,+BAA+B,yCAC3C,IAAI,gBACF,UAAU,+BAA+B,yCAC3C,IAAI,eAAe,IAAI;AAE3B;AAKM,SAAU,+BACd,SACA,mBACA,WAAgB;AAEhB,QAAM,oBAAoB,CAAA;AAC1B,oBAAkB,eAAe,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;AAC1C,oBAAkB,eAAe,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS;AAC1C,oBAAkB,oBAAoB;AAGtC,oBAAkB,YAAY;AAC9B,SAAO;AACT;AAIM,SAAU,eAAe,qBAAwC;AACrE,MAAI,+BAA+B,8BAA8B;AAC/D,WAAO;aACE,+BAA+B,wBAAwB;AAChE,WAAO,oBAAI,KAAI;aACN,+BAA+B,yBAAyB;AACjE,WAAO,oBAAoB,aAAY;;AAE3C;AAKM,SAAU,cAAc,MAA+B;AAC3D,SAAO,SAAS,QAAQ,SAAS,UAAa,KAAK,KAAI,MAAO;AAChE;;;AC1GM,IAAO,wBAAP,MAA4B;;;;EAShC,YACU,eACA,WACA,wBACA,YACA,cACA,KACA,mBACA,UAAoB;AAPpB,SAAA,gBAAA;AACA,SAAA,YAAA;AACA,SAAA,yBAAA;AACA,SAAA,aAAA;AACA,SAAA,eAAA;AACA,SAAA,MAAA;AACA,SAAA,oBAAA;AACA,SAAA,WAAA;AAuKF,SAAA,4BAA4B,MAAa;AAC/C,aAAO,KAAK,UAAU,IAAI,2BAA2B,KAAK,KAAK,KAAK,MAAM,eAAc,CAAE,CAAC;IAC7F;AAvKE,SAAK,QAAQ,IAAI,eAAc;AAC/B,SAAK,oBAAoB,kBAAkB,oBACvC,KAAK,MAAM,kBAAkB,iBAAiB,IAC9C;AACJ,SAAK,YAAY,kBAAkB,YAC/B,kBAAkB,UAAU,YAAW,IACvC;AACJ,SAAK,iBAAiB;EACxB;EAEQ,MAAM,eAAe,gBAAsC;AACjE,UAAM,EAAE,SAAQ,IAAK,MAAM,KAAK,UAAU,aAAa,cAAc;AACrE,SAAK,MAAM,SAAS;EACtB;EAEQ,wCAAqC;AAC3C,QAAI,KAAK,kBAAkB,QAAQ,KAAK,KAAK;AAC3C,aAAO;;AAET,WAAO;EACT;EAEQ,MAAM,oBAAoB,gBAAsC;AACtE,QAAI,KAAK,mBAAmB;AAE1B,YAAM,KAAK,iCAAiC,cAAc;WACrD;AAEL,YAAM,KAAK,2BAA2B,cAAc;;AAEtD,SAAK,iBAAiB;EACxB;;;;EAKQ,MAAM,2BAA2B,gBAAsC;AAC7E,QAAI;AACF,YAAM,oBAAoB,MAAM,KAAK,uBAAuB,qBAC1D,KAAK,KACL,KAAK,UACL,cAAc;AAEhB,iBAAW,oBAAoB,mBAAmB;AAChD,cAAM,CAAC,cAAc,YAAY,IAAI,MAAM,yBACzC,KAAK,UACL,gBAAgB;AAElB,cAAM,YAA6B,IAAI,gBACrC,iBAAiB,cACjB,iBAAiB,cACjB,IACA,cACA,YAAY;AAEd,aAAK,MAAM,QAAQ,SAAS;;aAEvB,KAAK;AACZ,YAAM,IAAI,cAAc,IAAI,OAAO;;EAEvC;;;;EAIQ,MAAM,iCACZ,gBAAsC;AAEtC,UAAM,YAAY,KAAK;AACvB,QAAI,CAAC,KAAK,sCAAqC,GAAI;AACjD,YAAM,IAAI,cAAc,oEAAoE;WACvF;AACL,iBAAW,UAAU,UAAU,cAAc;AAC3C,cAAM,aAAa,IAAI,WAAW,OAAO,cAAc,OAAO,cAAc,MAAM,KAAK;AACvF,YAAI;AACF,gBAAM,oBAAoB,MAAM,KAAK,uBAAuB,qBAC1D,KAAK,KACL,YACA,cAAc;AAEhB,qBAAW,oBAAoB,mBAAmB;AAKhD,kBAAM,CAAC,cAAc,YAAY,IAAI,MAAM,yBACzC,YACA,gBAAgB;AAElB,kBAAM,YAA6B,IAAI,gBACrC,iBAAiB,cACjB,iBAAiB,cACjB,OAAO,mBACP,cACA,YAAY;AAEd,iBAAK,MAAM,QAAQ,SAAS;;iBAEvB,KAAK;AACZ,gBAAM,IAAI,cAAc,IAAI,OAAO;;;;EAI3C;;;;EAKA,IAAI,iBAAc;AAChB,WAAO;EACT;;;;EAKc,mBAAgB;;AAC5B,SAAG;AACD,cAAM,SAAS,MAAA,QAAM,KAAK,SAAQ,CAAE;AACpC,cAAA,MAAA,QAAM,MAAM;eACL,KAAK;IAChB,CAAC;;;;;;;;;EASM,MAAM,WAAQ;AACnB,WAAO,gBAAgB,OAAO,mBAA0C;AAEtE,UAAI,CAAC,KAAK,gBAAgB;AACxB,cAAM,KAAK,eAAe,cAAc;AACxC,cAAM,KAAK,oBAAoB,cAAc;;AAI/C,UAAI,4BAA8C;AAClD,UAAI;AACJ,SAAG;AACD,cAAM,CAAC,oBAAoB,QAAQ,IAAI,MAAM,KAAK,UAAU,cAAc;AAC1E,iBAAS;AACT,YAAI,WAAW,QAAW;AACxB;AACE,gBAAI,8BAA8B,QAAW;AAC3C,0CAA4B;;AAI9B,iBAAK,MAAM,yBAAwB;AAEnC,gBAAI,OAAO,eAAe,YAAY,IAAI;AACxC,qBAAO,QAAQ,UAAU,YAAY,iBAAiB,IACpD,KAAK,0BAAyB;AAChC,qBAAO;;;;eAIN,CAAC,KAAK,qBAAqB,yBAAyB;AAE7D,aAAO,QAAQ,UAAU,YAAY,iBAAiB,IAAI,KAAK,0BAAyB;AACxF,aAAO;IACT,GAAG,KAAK,aAAa;EACvB;;;;EASQ,MAAM,UACZ,gBAAsC;AAEtC,UAAM,YAAY,KAAK,MAAM,KAAI;AACjC,QAAI,WAAW;AAEb,YAAM,SAAS,MAAM,KAAK,gBAAgB,WAAW,cAAc;AAInE,YAAM,cAAuB,MAAM,KAAK,qBACtC,WACA,QACA,cAAc;AAGhB,UAAI,aAAa;AACf,aAAK,MAAM,QAAO;AAClB,eAAO,KAAK,UAAU,cAAc;aAC/B;AAEL,cAAM,gCAAgC,OAAO,QAAQ,UAAU,YAAY,IAAI;AAC/E,cAAM,eAAe,KAAK,MAAM,KAAI;AACpC,qBAAa,oBAAoB;AAEjC,eAAO,CAAC,CAAC,aAAa,cAAc,aAAa,YAAY,GAAG,MAAM;;WAEnE;AACL,aAAO,CAAC,CAAC,QAAW,MAAS,GAAG,MAAS;;EAE7C;EAEQ,qBAAqB,2BAA2C;AACtE,QAAI,8BAA8B,QAAW;AAC3C,aAAO;;AAET,UAAM,6BAA6B,KAAK,MAAM,KAAI;AAClD,WACE,0BAA0B,CAAC,OAAM,+BAA0B,QAA1B,+BAA0B,SAAA,SAA1B,2BAA4B,iBAC7D,0BAA0B,CAAC,OAAM,+BAA0B,QAA1B,+BAA0B,SAAA,SAA1B,2BAA4B;EAEjE;;;;;;EAOQ,MAAM,qBACZ,WACA,UACA,gBAAsC;AAEtC,QAAI,SAAS,eAAe,YAAY,MAAM,SAAS,eAAe,YAAY,aAAa;AAC7F,aAAO;;AAGT,UAAM,iBACJ,SAAS,eAAe,YAAY,SACnC,SAAS,kBAAkB,eAAe,yBACzC,SAAS,kBAAkB,eAAe;AAE9C,QAAI,gBAAgB;AAClB,YAAM,aAAa,IAAI,WACrB,UAAU,cACV,UAAU,cACV,MACA,KAAK;AAEP,YAAM,iBAAiB,MAAM,KAAK,uBAAuB,qBACvD,KAAK,KACL,YACA,gBACA,IAAI;AAEN,UAAI,eAAe,SAAS,GAAG;AAC7B,cAAM,IAAI,cAAc,iEAAiE;;AAK3F,UAAI,eAAe,UAAU,GAAG;AAC9B,cAAM,KAAK,YAAY,OAAO,gBAAgB,YAAY,UAAU,iBAAiB;;AAEvF,aAAO;;AAET,WAAO;EACT;;;;EAIQ,MAAM,YACZ,WACA,gBACA,cACA,mBAAyB;AAEzB,QAAI,OAAO;AACX,QAAI,WAAW;AAIb,YAAM,CAAC,cAAc,YAAY,IAAI,MAAM,yBACzC,cACA,eAAe,CAAC,CAAC;AAEnB,YAAM,eAAe,IAAI,gBACvB,eAAe,CAAC,EAAE,cAClB,eAAe,CAAC,EAAE,cAClB,mBACA,cACA,YAAY;AAGd,WAAK,MAAM,mBAAmB,YAAY;AAC1C,aAAO;;AAGT,aAAS,IAAI,MAAM,IAAI,eAAe,QAAQ,KAAK;AACjD,YAAM,CAAC,cAAc,YAAY,IAAI,MAAM,yBACzC,cACA,eAAe,CAAC,CAAC;AAGnB,YAAM,eAAe,IAAI,gBACvB,eAAe,CAAC,EAAE,cAClB,eAAe,CAAC,EAAE,cAClB,mBACA,cACA,YAAY;AAEd,WAAK,MAAM,QAAQ,YAAY;;EAEnC;;;;;;EAOQ,MAAM,oBACZ,WACA,gBAAsC;AAEtC,UAAM,MAAM,UAAU,eAAe,UAAU,eAAe,UAAU;AACxE,UAAMC,OAAM,UAAU,eAAe,UAAU,eAAe,UAAU;AACxE,UAAM,aAAa,IAAI,WAAW,KAAKA,MAAK,MAAM,KAAK;AACvD,UAAM,iBAAiB,MAAM,KAAK,uBAAuB,qBACvD,KAAK,KACL,YACA,gBACA,KAAK;AAEP,QAAI,eAAe,SAAS,GAAG;AAC7B,YAAM,IAAI,cAAc,8BAA8B;;AAExD,UAAM,qBAAqB,eAAe,CAAC;AAC3C,QAAI,eAAe,SAAS,GAAG;AAC7B,YAAM,KAAK,YAAY,MAAM,gBAAgB,YAAY,UAAU,iBAAiB;;AAEtF,WAAO,mBAAmB;EAC5B;EAEQ,MAAM,gBACZ,WACA,gBAAsC;AAEtC,UAAM,cAA2B,EAAE,gBAAgB,CAAA,GAAI,oBAAoB,KAAI;AAE/E,QAAI,OAAO,KAAK,kBAAkB,iBAAiB,UAAU;AAC3D,kBAAY,eAAe,KAAK,kBAAkB;;AAGpD,QAAI,KAAK,kBAAkB,cAAc;AACvC,kBAAY,eAAe,KAAK,kBAAkB;;AAGpD,QAAI,UAAU,mBAAmB;AAC/B,kBAAY,kBAAkB;QAC5B,MAAM,UAAU,YAAY;QAC5B,WAAW,UAAU;;;AAIzB,QAAI,KAAK,WAAW;AAClB,kBAAY,eAAe,UAAU,YAAY,eAAe,IAAI,KAAK;;AAE3E,UAAM,UAAU,MAAM,KAAK,oBAAoB,WAAW,cAAc;AACxE,QAAI;AAEF,YAAM,WAA0C,MAAO,KAAK,cAAc,UAAa;QACrF,MAAM,KAAK;QACX,cAAc,aAAa;QAC3B,YAAY,KAAK;QACjB,UAAU,CAAC,WAAY,SAAS,OAAO,YAAY,CAAA;QACnD,OAAO;QACP,SAAS;QACT;QACA,cAAc;QACd,qBAAqB;QACrB,UAAU,UAAU;QACpB,QAAQ,UAAU;OACnB;AAED,aAAO,IAAI,2BACT,SAAS,QACT,SAAS,SAAS,SAAS,OAAO,SAAS,GAC3C,SAAS,MACT,SAAS,SACT,0BAAyB,CAAE;aAEtB,KAAK;AAEZ,aAAO,IAAI,2BACT,CAAA,GACA,GACA,IAAI,MACJ,IAAI,SACJ,0BAAyB,GACzB,IAAI,SAAS;;EAGnB;;;;AC5aI,IAAO,mCAAP,MAAuC;EAc3C,YAAY,KAAa,cAA4B,cAAoB;AACvE,SAAK,MAAM;AACX,SAAK,eAAe;AACpB,SAAK,eAAe;EACtB;;;;ACNI,IAAO,4BAAP,MAAgC;;;;EAQpC,YACU,eACA,WACA,YACA,cACA,cACA,mBAAoD;AALpD,SAAA,gBAAA;AACA,SAAA,YAAA;AACA,SAAA,aAAA;AACA,SAAA,eAAA;AACA,SAAA,eAAA;AACA,SAAA,oBAAA;AAER,SAAK,oBAAoB,kBAAkB,oBACvC,KAAK,MAAM,kBAAkB,iBAAiB,IAC9C;AACJ,SAAK,iBAAiB;AAEtB,QAAI,kBAAkB,WAAW;AAC/B,WAAK,YAAY,kBAAkB,UAAU,YAAW;;EAE5D;EAEQ,MAAM,oBAAoB,gBAAsC;AACtE,UAAM,KAAK,eAAe,cAAc;AACxC,QAAI,KAAK,mBAAmB;AAC1B,UAAI,CAAC,KAAK,sCAAqC,GAAI;AACjD,cAAM,IAAI,cAAc,+DAA+D;;WAEpF;AACL,WAAK,oBAAoB,IAAI,iCAC3B,KAAK,KACL,KAAK,cACL,EAAE;;AAIN,SAAK,iBAAiB;EACxB;EAEQ,wCAAqC;AAC3C,QAAI,KAAK,kBAAkB,QAAQ,KAAK,KAAK;AAC3C,aAAO;;AAET,WAAO;EACT;EAEQ,MAAM,eAAe,gBAAsC;AACjE,UAAM,EAAE,SAAQ,IAAK,MAAM,KAAK,UAAU,aAAa,cAAc;AACrE,SAAK,MAAM,SAAS;EACtB;;;;EAKA,IAAI,iBAAc;AAChB,WAAO;EACT;;;;EAKc,mBAAgB;;AAC5B,SAAG;AACD,cAAM,SAAS,MAAA,QAAM,KAAK,SAAQ,CAAE;AACpC,cAAA,MAAA,QAAM,MAAM;eACL,KAAK;IAChB,CAAC;;;;;EAKM,MAAM,WAAQ;AACnB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI,CAAC,KAAK,gBAAgB;AACxB,cAAM,KAAK,oBAAoB,cAAc;;AAE/C,YAAM,SAAS,MAAM,KAAK,UAAU,cAAc;AAClD,aAAO;IACT,GAAG,KAAK,aAAa;EACvB;;;;EAKQ,MAAM,UACZ,gBAAsC;AAEtC,UAAM,WAAW,MAAM,KAAK,gBAAgB,cAAc;AAC1D,SAAK,kBAAkB,eAAe,SAAS,QAAQ,UAAU,YAAY,IAAI;AACjF,aAAS,QAAQ,UAAU,YAAY,iBAAiB,IAAI,KAAK,UAC/D,KAAK,iBAAiB;AAExB,WAAO;EACT;EAEQ,MAAM,gBACZ,gBAAsC;AAEtC,UAAM,cAA2B,EAAE,gBAAgB,CAAA,GAAI,oBAAoB,KAAI;AAE/E,QAAI,OAAO,KAAK,kBAAkB,iBAAiB,UAAU;AAC3D,kBAAY,eAAe,KAAK,kBAAkB;;AAGpD,QAAI,KAAK,kBAAkB,cAAc;AACvC,kBAAY,eAAe,KAAK,kBAAkB;;AAGpD,UAAM,eAAe,KAAK,kBAAkB;AAC5C,QAAI,cAAc;AAChB,kBAAY,kBAAkB;QAC5B,MAAM,UAAU,YAAY;QAC5B,WAAW;;;AAIf,QAAI,KAAK,WAAW;AAClB,kBAAY,eAAe,UAAU,YAAY,eAAe,IAAI,KAAK;;AAG3E,UAAM,WAA0C,MAAO,KAAK,cAAc,UAAa;MACrF,MAAM,KAAK;MACX,cAAc,aAAa;MAC3B,YAAY,KAAK;MACjB,UAAU,CAAC,WAAY,SAAS,OAAO,YAAY,CAAA;MACnD;MACA,OAAO;MACP,SAAS;MACT,cAAc,KAAK;KACpB;AAED,WAAO,IAAI,2BACT,SAAS,QACT,SAAS,SAAS,SAAS,OAAO,SAAS,GAC3C,SAAS,MACT,SAAS,SACT,0BAAyB,CAAE;EAE/B;;;;AC3JF,IAAY;CAAZ,SAAYC,yBAAsB;AAChC,EAAAA,wBAAAA,wBAAA,WAAA,IAAA,CAAA,IAAA;AACA,EAAAA,wBAAAA,wBAAA,cAAA,IAAA,CAAA,IAAA;AACF,GAHY,2BAAA,yBAAsB,CAAA,EAAA;;;ACE5B,IAAO,kCAAP,MAAsC;EAG1C,YAAY,cAAoB;AAC9B,SAAK,oBAAoB;EAC3B;EAEO,gBAAa;AAClB,WAAO,KAAK;EACd;EACO,oBAAiB;AACtB,WAAO,KAAK,MAAM,KAAK,iBAAiB;EAC1C;EAEO,kBAAe;AACpB,UAAM,SAAS,KAAK,kBAAiB;AACrC,QACE,OAAO,UAAU,eAAe,KAAK,QAAQ,cAAc,KAC3D,OAAO,UAAU,eAAe,KAAK,QAAQ,cAAc,KAC3D,OAAO,OAAO,iBAAiB,UAC/B;AACA,aAAO,uBAAuB;eAE9B,OAAO,UAAU,eAAe,KAAK,QAAQ,cAAc,KAC3D,MAAM,QAAQ,OAAO,YAAY,KACjC,OAAO,aAAa,SAAS,GAC7B;AACA,aAAO,uBAAuB;WACzB;AACL,YAAM,IAAI,cAAc,6BAA6B;;EAEzD;;;;ACxBI,IAAgB,sBAAhB,MAAmC;;;;;EAKhC,OAAO,UAAU,YAAqC;AAC3D,WAAO,IAAI,6BAA6B,UAAU;EACpD;;;;;EAKO,OAAO,IAAI,YAAqC;AACrD,WAAO,IAAI,uBAAuB,UAAU;EAC9C;;;;;;EAMO,OAAO,KACZ,WACA,YAAqC;AAErC,QAAI,CAAC,WAAW;AACd,YAAM,IAAI,cAAc,2BAA2B;;AAErD,QAAI,qBAAqB,SAAS,MAAM;AACtC,aAAO,IAAI,wBAAwB,WAAW,UAAU;WACnD;AACL,YAAM,IAAI,cAAc,kCAAkC;;EAE9D;;;;;EAKO,OAAO,aAAa,mBAAyB;AAClD,QAAI,CAAC,mBAAmB;AACtB,YAAM,IAAI,cAAc,uCAAuC;;AAEjE,QAAI,cAAc,iBAAiB,GAAG;AACpC,YAAM,IAAI,cAAc,wDAAwD;;AAElF,WAAO,IAAI,gCAAgC,iBAAiB;EAC9D;;;;ACvCI,SAAU,0BACd,WACA,eACA,WACA,wBAA8C;AAE9C,QAAM,MAAM,UAAU;AACtB,QAAM,OAAO,gBAAgB,KAAK,aAAa,IAAI;AACnD,QAAM,KAAK,cAAc,GAAG;AAE5B,MAAI,sBAAsB,UAAU;AAEpC,MAAI,wBAAwB,QAAW;AACrC,0BAAsB,oBAAoB,IAAG;;AAG/C,MAAI,+BAA+B,iCAAiC;AAClE,UAAM,oBAAoB,oBAAoB,kBAAiB;AAC/D,UAAM,eAAe,oBAAoB,gBAAe;AACxD,UAAM,oBAAoB,+BACxB,WACA,oBAAoB,cAAa,CAAE;AAGrC,QACE,iBAAiB,uBAAuB,gBACxC,eAAe,kBAAkB,YAAY,GAC7C;AACA,aAAO,IAAI,0BACT,eACA,WACA,IACA,MACA,kBAAkB,cAClB,iBAAiB;eAEV,iBAAiB,uBAAuB,WAAW;AAC5D,aAAO,IAAI,sBACT,eACA,WACA,wBACA,IACA,MACA,KACA,mBACA,MAAS;WAEN;AACL,YAAM,IAAI,cAAc,6BAA6B;;aAGvD,+BAA+B,0BAC/B,+BAA+B,2BAC/B,+BAA+B,8BAC/B;AACA,UAAM,YAAY,eAAe,mBAAmB;AACpD,UAAM,oBAAoB,+BAA+B,WAAW,QAAW,SAAS;AACxF,UAAM,aAAa,oBAAoB,cAAa;AACpD,QAAI,eAAe,UAAU,GAAG;AAC9B,aAAO,IAAI,0BACT,eACA,WACA,IACA,MACA,YACA,iBAAiB;WAEd;AACL,UAAI;AACJ,UAAI,eAAe,QAAW;AAC5B,6BAAqB,IAAI,WACvB,UAAU,+BAA+B,uCACzC,UAAU,+BAA+B,uCACzC,MACA,KAAK;iBAEE,WAAW,UAAU,GAAG;AACjC,6BAAqB,IAAI,WACtB,WAAiC,cACjC,WAAiC,cAClC,MACA,KAAK;aAEF;AACL,cAAM,IAAI,cAAc,qBAAqB;;AAE/C,aAAO,IAAI,sBACT,eACA,WACA,wBACA,IACA,MACA,KACA,mBACA,kBAAkB;;SAGjB;AACL,UAAM,IAAI,cAAc,qCAAqC;;AAEjE;;;ACtHA,IAAMC,QAAO;AAgDb,SAAS,oBAAoB,SAAgB;AAC3C,SAAO,WAAW,EAAE,6BAA6B,OAAO,KAAK,MAAM,QAAQ,OAAO;AACpF;AAOM,IAAO,QAAP,MAAY;;;;;;EAOhB,YAA4B,WAAuC,eAA4B;AAAnE,SAAA,YAAA;AAAuC,SAAA,gBAAA;AACjE,SAAK,yBAAyB,IAAI,uBAAuB,KAAK,aAAa;EAC7E;EAkCO,MAAS,OAA8B,UAAuB,CAAA,GAAE;AACrE,UAAM,OAAO,gBAAgB,KAAK,UAAU,KAAK,aAAa,IAAI;AAClE,UAAM,KAAK,cAAc,KAAK,UAAU,GAAG;AAE3C,UAAM,gBAAuC,OAC3C,gBACA,iBACE;AACF,YAAM,WAAW,MAAM,KAAK,cAAc,UAAU;QAClD;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ,UAAU,CAAC,WAAY,SAAS,OAAO,YAAY,CAAA;QACnD;QACA,SAAS;QACT,cAAc,QAAQ;QACtB;OACD;AACD,aAAO;IACT;AAEA,WAAO,IAAI,cACT,KAAK,eACL,OACA,SACA,eACA,KAAK,UAAU,KACf,aAAa,IAAI;EAErB;EAsCO,eACL,iCACA,mBAAqC;AAErC,QAAI,oBAAoB,+BAA+B,GAAG;AACxD,aAAO,KAAK,WAAW,+BAA+B;WACjD;AACL,aAAO,KAAK,WAAW,iCAAiC,iBAAiB;;EAE7E;EAgCO,WACL,iCACA,mBAAqC;AAErC,QAAI;AACJ,QAAI,CAAC,qBAAqB,oBAAoB,+BAA+B,GAAG;AAC9E,qBAAe;AACf,0BAAoB;eAEpB,oCAAoC,UACpC,CAAC,oBAAoB,+BAA+B,GACpD;AACA,qBAAe;;AAGjB,QAAI,CAAC,mBAAmB;AACtB,0BAAoB,CAAA;;AAGtB,UAAM,OAAO,gBAAgB,KAAK,UAAU,KAAK,aAAa,IAAI;AAClE,UAAM,KAAK,cAAc,KAAK,UAAU,GAAG;AAC3C,WAAO,IAAI,mBAAsB,KAAK,eAAe,IAAI,MAAM,cAAc,iBAAiB;EAChG;;;;EAKO,sBACL,2BAAqD;AAErD,UAAM,YAAY,8BAA8B,SAAY,4BAA4B,CAAA;AACxF,sCAAkC,SAAS;AAC3C,UAAM,WAAW,0BACf,WACA,KAAK,eACL,KAAK,WACL,KAAK,sBAAsB;AAE7B,WAAO;EACT;EA6BO,QAAkC,SAAqB;AAC5D,WAAO,KAAK,MAAS,mBAAmB,OAAO;EACjD;;;;;;;;;;;;EAaO,MAAM,OACX,MACA,UAA0B,CAAA,GAAE;AAK5B,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,WAAK,KAAK,OAAO,UAAa,KAAK,OAAO,OAAO,CAAC,QAAQ,8BAA8B;AACtF,aAAK,KAAKA,MAAI;;AAEhB,YAAM,yBAAyB,MAAM,2BACnC,gBACA,KAAK,SAAS;AAEhB,YAAM,eAAe,qBAAqB,MAAM,sBAAsB;AAEtE,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,oBAAoB,MAAM,GAAG,GAAG;AACnC,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,UAAU,KAAK,aAAa,IAAI;AAClE,YAAM,KAAK,cAAc,KAAK,UAAU,GAAG;AAE3C,YAAM,WAAW,MAAM,KAAK,cAAc,OAAU;QAClD;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;QACA;OACD;AAED,YAAM,MAAM,IAAI,KACd,KAAK,WACJ,SAAS,OAAe,IACzB,KAAK,eACL,YAAY;AAEd,aAAO,IAAI,aACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,SAAS,WACT,KACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;EA6BO,MAAM,OACX,MACA,UAA0B,CAAA,GAAE;AAE5B,WAAO,gBAAgB,OAAO,mBAA0C;AAGtE,WAAK,KAAK,OAAO,UAAa,KAAK,OAAO,OAAO,CAAC,QAAQ,8BAA8B;AACtF,aAAK,KAAKA,MAAI;;AAGhB,YAAM,yBAAyB,MAAM,2BACnC,gBACA,KAAK,SAAS;AAEhB,YAAM,eAAe,qBAAqB,MAAM,sBAAsB;AAEtE,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,oBAAoB,MAAM,GAAG,GAAG;AACnC,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,UAAU,KAAK,aAAa,IAAI;AAClE,YAAM,KAAK,cAAc,KAAK,UAAU,GAAG;AAE3C,YAAM,WAAW,MAAM,KAAK,cAAc,OAAU;QAClD;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;QACA;OACD;AAED,YAAM,MAAM,IAAI,KACd,KAAK,WACJ,SAAS,OAAe,IACzB,KAAK,eACL,YAAY;AAEd,aAAO,IAAI,aACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,SAAS,WACT,KACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BO,MAAM,KACX,YACA,aACA,SAAwB;AAExB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,EAAE,WAAW,mBAAkB,IAAK,MAAM,KAAK,UAClD,uBAAsB,EACtB,SAAQ;AACX,YAAM,yBAAyB,MAAM,2BACnC,gBACA,KAAK,SAAS;AAEhB,YAAM,UAAmB,mBAAmB,IAAI,CAAC,aAA+B;AAC9E,eAAO;UACL,KAAK,SAAS;UACd,KAAK,SAAS;UACd,SAAS,SAAS;UAClB,SAAS,CAAA;UACT,YAAY,CAAA;;MAEhB,CAAC;AAED,WAAK,mCAAmC,YAAY,wBAAwB,SAAS,OAAO;AAE5F,YAAM,OAAO,gBAAgB,KAAK,UAAU,KAAK,aAAa,IAAI;AAElE,YAAM,mBAAwC,CAAA;AAC9C,YAAM,QAAQ,IACZ,QACG,OAAO,CAAC,UAAiB,MAAM,WAAW,MAAM,EAChD,QAAQ,CAAC,UAAiB,0BAA0B,KAAK,CAAC,EAC1D,IAAI,OAAO,UAAgB;AAC1B,YAAI,MAAM,WAAW,SAAS,KAAK;AACjC,gBAAM,IAAI,MACR,qEAAqE;;AAGzE,YAAI;AACF,gBAAMC,YAAW,MAAM,kBACrB,OAAO,cACL,KAAK,cAAc,KAAK;YACtB,MAAM,MAAM;YACZ,qBAAqB,MAAM;YAC3B;YACA,YAAY,KAAK,UAAU;YAC3B;YACA;YACA,gBAAgB;WACjB,GACH,gBACA,mBAAmB,aAAa;AAElC,UAAAA,UAAS,OAAO,QAAQ,CAAC,mBAAsC,UAAiB;AAC9E,6BAAiB,MAAM,QAAQ,KAAK,CAAC,IAAI;UAC3C,CAAC;iBACM,KAAU;AAIjB,cAAI,IAAI,SAAS,KAAK;AACpB,kBAAM,IAAI,MACR,+GACE,IAAI,OAAO;;AAGjB,gBAAM,IAAI,MAAM,8BAA8B,IAAI,OAAO,EAAE;;MAE/D,CAAC,CAAC;AAEN,YAAM,WAAgB;AACtB,eAAS,cAAc,eAAe,aAAa,KAAK,cAAc,gBAAe,CAAE;AACvF,aAAO;IACT,GAAG,KAAK,aAAa;EACvB;;;;;;;;EASQ,mCACN,YACA,qBACA,SACA,SAAgB;AAEhB,eAAW,QAAQ,CAAC,gBAAgB,UAAiB;AACnD,YAAM,EAAE,WAAW,aAAY,IAAK,kBAClC,gBACA,qBACA,OAAO;AAET,YAAM,SAAS,iBACb,mBACE,cACA,sFAAsF,GAExF,mBAAmB;AAErB,YAAM,cAAc,mBAClB,QAAQ,KAAK,CAAC,UAAgB;AAC5B,eAAO,aAAa,MAAM,KAAK,MAAM,KAAK,MAAM;MAClD,CAAC,GACD,0BAA0B;AAE5B,kBAAY,WAAW,KAAK,SAAS;AACrC,kBAAY,QAAQ,KAAK,KAAK;IAChC,CAAC;EACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BO,MAAM,MACX,YACA,cACA,SAAwB;AAExB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,iBAAW,IAAI,CAAC,cAAc,uBAAuB,WAAW,OAAO,CAAC;AAExE,YAAM,OAAO,gBAAgB,KAAK,UAAU,KAAK,aAAa,IAAI;AAElE,UAAI,WAAW,SAAS,KAAK;AAC3B,cAAM,IAAI,MAAM,sEAAsE;;AAExF,UAAI;AACF,cAAM,WAA0C,MAAM,KAAK,cAAc,MAAM;UAC7E,MAAM;UACN;UACA;UACA,YAAY,KAAK,UAAU;UAC3B;UACA;SACD;AACD,eAAO;eACA,KAAU;AACjB,cAAM,IAAI,MAAM,wBAAwB,IAAI,OAAO,EAAE;;IAEzD,GAAG,KAAK,aAAa;EACvB;;;;ACnmBI,IAAO,0BAAP,cAAuC,iBAE5C;EACC,YACE,UACA,SACA,YACA,iBACA,aAA8B;AAE9B,UAAM,UAAU,SAAS,YAAY,WAAW;AAChD,SAAK,kBAAkB;EACzB;;;;;;EAWA,IAAW,QAAK;AACd,WAAO,KAAK;EACd;;;;ACTI,IAAO,kBAAP,MAAsB;;;;EAI1B,IAAW,MAAG;AACZ,WAAO,yBAAyB,KAAK,UAAU,SAAS,IAAI,KAAK,UAAU,IAAI,KAAK,EAAE;EACxF;;;;;;;EAOA,YACkB,WACA,IACC,eAA4B;AAF7B,SAAA,YAAA;AACA,SAAA,KAAA;AACC,SAAA,gBAAA;EAChB;;;;EAKI,MAAM,KAAK,SAAwB;AACxC,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,KAAgC;QACxE;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,wBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;;EAMO,MAAM,QACX,MACA,SAAwB;AAExB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI,KAAK,MAAM;AACb,aAAK,OAAO,KAAK,KAAK,SAAQ;;AAGhC,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,QAAmC;QAC3E;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,wBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;EAKO,MAAM,OAAO,SAAwB;AAC1C,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,OAAkC;QAC1E;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,wBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;;;;;;;;EAYO,MAAM,QACX,cACA,QACA,SAAwB;AAExB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI,iBAAiB,QAAW;AAC9B,cAAM,uBAAuB,MAAM,2BACjC,gBACA,KAAK,SAAS;AAEhB,uBAAe,sBAAsB,oBAAoB;;AAE3D,YAAM,WAAW,MAAM,KAAK,cAAc,QAAW;QACnD,WAAW,KAAK;QAChB;QACA;QACA;QACA;OACD;AACD,aAAO,IAAI,iBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;ACtJI,IAAO,mBAAP,MAAuB;;;;;EAK3B,YACkB,WACC,eAA4B;AAD7B,SAAA,YAAA;AACC,SAAA,gBAAA;EAChB;EAgCI,MAAS,OAAqB,SAAqB;AACxD,UAAM,OAAO,gBAAgB,KAAK,UAAU,KAAK,aAAa,KAAK;AACnE,UAAM,KAAK,cAAc,KAAK,UAAU,GAAG;AAE3C,WAAO,IAAI,cAAc,KAAK,eAAe,OAAO,SAAS,CAAC,UAAU,iBAAgB;AACtF,aAAO,KAAK,cAAc,UAAU;QAClC;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ,UAAU,CAAC,WAAW,OAAO;QAC7B;QACA,SAAS;QACT,gBAAgB;OACjB;IACH,CAAC;EACH;;;;;;;;EASO,QAAQ,SAAqB;AAClC,WAAO,KAAK,MAA4C,QAAW,OAAO;EAC5E;;;;;;;;;;EAWO,MAAM,OACX,MACA,SAAwB;AAExB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI,KAAK,MAAM;AACb,aAAK,OAAO,KAAK,KAAK,SAAQ;;AAGhC,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,UAAU,KAAK,aAAa,KAAK;AACnE,YAAM,KAAK,cAAc,KAAK,UAAU,GAAG;AAE3C,YAAM,WAAW,MAAM,KAAK,cAAc,OAAkC;QAC1E;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,YAAM,MAAM,IAAI,gBAAgB,KAAK,WAAW,SAAS,OAAO,IAAI,KAAK,aAAa;AACtF,aAAO,IAAI,wBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,KACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;AC1HI,IAAO,kBAAP,cAA+B,iBAA8C;EACjF,YACE,UACA,SACA,YACA,SACA,aAA8B;AAE9B,UAAM,UAAU,SAAS,YAAY,WAAW;AAChD,SAAK,UAAU;EACjB;;;;ACGI,IAAO,UAAP,MAAc;;;;EAIlB,IAAW,MAAG;AACZ,WAAO,iBAAiB,KAAK,UAAU,SAAS,IAAI,KAAK,UAAU,IAAI,KAAK,EAAE;EAChF;;;;;;EAOA,YACkB,WACA,IACC,eAA4B;AAF7B,SAAA,YAAA;AACA,SAAA,KAAA;AACC,SAAA,gBAAA;EAChB;;;;EAKI,MAAM,KAAK,SAAwB;AACxC,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,KAAwB;QAChE;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,gBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;;EAMO,MAAM,QACX,MACA,SAAwB;AAExB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI,KAAK,MAAM;AACb,aAAK,OAAO,KAAK,KAAK,SAAQ;;AAGhC,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,QAA2B;QACnE;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,gBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;EAKO,MAAM,OAAO,SAAwB;AAC1C,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,OAA0B;QAClE;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,gBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;AC5GI,IAAO,WAAP,MAAe;;;;;EAKnB,YACkB,WACC,eAA4B;AAD7B,SAAA,YAAA;AACC,SAAA,gBAAA;EAChB;EAYI,MAAS,OAAqB,SAAqB;AACxD,UAAM,OAAO,gBAAgB,KAAK,UAAU,KAAK,aAAa,OAAO;AACrE,UAAM,KAAK,cAAc,KAAK,UAAU,GAAG;AAE3C,WAAO,IAAI,cAAc,KAAK,eAAe,OAAO,SAAS,CAAC,gBAAgB,iBAAgB;AAC5F,aAAO,KAAK,cAAc,UAAU;QAClC;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ,UAAU,CAAC,WAAW,OAAO;QAC7B;QACA,SAAS;QACT;OACD;IACH,CAAC;EACH;;;;;;;;EASO,QAAQ,SAAqB;AAClC,WAAO,KAAK,MAAoC,QAAW,OAAO;EACpE;;;;;;;;;EASO,MAAM,OAAO,MAAyB,SAAwB;AACnE,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI,KAAK,MAAM;AACb,aAAK,OAAO,KAAK,KAAK,SAAQ;;AAGhC,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,UAAU,KAAK,aAAa,OAAO;AACrE,YAAM,KAAK,cAAc,KAAK,UAAU,GAAG;AAE3C,YAAM,WAAW,MAAM,KAAK,cAAc,OAA0B;QAClE;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,YAAM,MAAM,IAAI,QAAQ,KAAK,WAAW,SAAS,OAAO,IAAI,KAAK,aAAa;AAC9E,aAAO,IAAI,gBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,KACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;ACjGI,IAAO,8BAAP,cAA2C,iBAEhD;EACC,YACE,UACA,SACA,YACA,KACA,aAA8B;AAE9B,UAAM,UAAU,SAAS,YAAY,WAAW;AAChD,SAAK,sBAAsB;EAC7B;;;;;;EAQA,IAAW,MAAG;AACZ,WAAO,KAAK;EACd;;;;ACTI,IAAO,sBAAP,MAA0B;;;;EAI9B,IAAW,MAAG;AACZ,WAAO,6BAA6B,KAAK,UAAU,SAAS,IAAI,KAAK,UAAU,IAAI,KAAK,EAAE;EAC5F;;;;;;EAMA,YACkB,WACA,IACC,eAA4B;AAF7B,SAAA,YAAA;AACA,SAAA,KAAA;AACC,SAAA,gBAAA;EAChB;;;;EAKI,MAAM,KAAK,SAAwB;AACxC,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,KAAoC;QAC5E;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,4BACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;;EAMO,MAAM,QACX,MACA,SAAwB;AAExB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI,KAAK,MAAM;AACb,aAAK,OAAO,KAAK,KAAK,SAAQ;;AAGhC,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,QAAuC;QAC/E;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,4BACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;EAKO,MAAM,OAAO,SAAwB;AAC1C,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,OAAO;QAC/C;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,4BACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;AC3GI,IAAO,uBAAP,MAA2B;;;;;EAK/B,YACkB,WACC,eAA4B;AAD7B,SAAA,YAAA;AACC,SAAA,gBAAA;EAChB;EAYI,MAAS,OAAqB,SAAqB;AACxD,UAAM,OAAO,gBAAgB,KAAK,UAAU,KAAK,aAAa,GAAG;AACjE,UAAM,KAAK,cAAc,KAAK,UAAU,GAAG;AAE3C,WAAO,IAAI,cAAc,KAAK,eAAe,OAAO,SAAS,CAAC,gBAAgB,iBAAgB;AAC5F,aAAO,KAAK,cAAc,UAAU;QAClC;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ,UAAU,CAAC,WAAW,OAAO;QAC7B;QACA,SAAS;QACT;OACD;IACH,CAAC;EACH;;;;;;;;EASO,QAAQ,SAAqB;AAClC,WAAO,KAAK,MAAgD,QAAW,OAAO;EAChF;;;;;;;;;EAUO,MAAM,OACX,MACA,SAAwB;AAExB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI,KAAK,MAAM;AACb,aAAK,OAAO,KAAK,KAAK,SAAQ;;AAGhC,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,UAAU,KAAK,aAAa,GAAG;AACjE,YAAM,KAAK,cAAc,KAAK,UAAU,GAAG;AAE3C,YAAM,WAAW,MAAM,KAAK,cAAc,OAAsC;QAC9E;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,YAAM,MAAM,IAAI,oBAAoB,KAAK,WAAW,SAAS,OAAO,IAAI,KAAK,aAAa;AAC1F,aAAO,IAAI,4BACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,KACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;ACtGI,IAAO,UAAP,MAAc;;;;;EAKlB,YACkB,WACC,eAA4B;AAD7B,SAAA,YAAA;AACC,SAAA,gBAAA;EAChB;;;;;;;EAQI,gBAAgB,IAAU;AAC/B,WAAO,IAAI,gBAAgB,KAAK,WAAW,IAAI,KAAK,aAAa;EACnE;;;;;;;EAQO,QAAQ,IAAU;AACvB,WAAO,IAAI,QAAQ,KAAK,WAAW,IAAI,KAAK,aAAa;EAC3D;;;;;;;EAQO,oBAAoB,IAAU;AACnC,WAAO,IAAI,oBAAoB,KAAK,WAAW,IAAI,KAAK,aAAa;EACvE;;;;;;EAQA,IAAW,mBAAgB;AACzB,QAAI,CAAC,KAAK,SAAS;AACjB,WAAK,UAAU,IAAI,iBAAiB,KAAK,WAAW,KAAK,aAAa;;AAExE,WAAO,KAAK;EACd;;;;;;EAQA,IAAW,WAAQ;AACjB,QAAI,CAAC,KAAK,WAAW;AACnB,WAAK,YAAY,IAAI,SAAS,KAAK,WAAW,KAAK,aAAa;;AAElE,WAAO,KAAK;EACd;;;;;;EAQA,IAAW,uBAAoB;AAC7B,QAAI,CAAC,KAAK,OAAO;AACf,WAAK,QAAQ,IAAI,qBAAqB,KAAK,WAAW,KAAK,aAAa;;AAE1E,WAAO,KAAK;EACd;;;;AC3EI,IAAO,oBAAP,cAAiC,iBAAgD;EACrF,YACE,UACA,SACA,YACA,WACA,aAA8B;AAE9B,UAAM,UAAU,SAAS,YAAY,WAAW;AAChD,SAAK,YAAY;EACnB;;;;ACXI,IAAO,gBAAP,cAA6B,iBAA4C;EAC7E,YACE,UACA,SACA,YACA,aACA,OAAa;AAEb,UAAM,UAAU,SAAS,YAAY,WAAW;AAChD,SAAK,QAAQ;EACf;;;;ACHI,IAAO,QAAP,MAAY;;;;EAIhB,IAAW,MAAG;AACZ,WAAO,IAAI,UAAU,KAAK,iBAAiB,IAAI,KAAK,EAAE;EACxD;;;;;;EAMA,YACkB,QACA,IACC,eAA4B;AAF7B,SAAA,SAAA;AACA,SAAA,KAAA;AACC,SAAA,gBAAA;EAChB;;;;EAKI,MAAM,KAAK,SAAwB;AACxC,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,WAAW,MAAM,KAAK,cAAc,KAAsB;QAC9D,MAAM,KAAK;QACX,cAAc,aAAa;QAC3B,YAAY,KAAK;QACjB;QACA;OACD;AACD,aAAO,IAAI,cACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,0BAAyB,GACzB,IAAI;IAER,GAAG,KAAK,aAAa;EACvB;;;;;EAMO,MAAM,QAAQ,MAAuB,SAAwB;AAClE,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,cAAM;;AAER,YAAM,WAAW,MAAM,KAAK,cAAc,QAAyB;QACjE;QACA,MAAM,KAAK;QACX,cAAc,aAAa;QAC3B,YAAY,KAAK;QACjB;QACA;OACD;AACD,aAAO,IAAI,cACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,0BAAyB,GACzB,IAAI;IAER,GAAG,KAAK,aAAa;EACvB;;;;AClEI,IAAO,SAAP,MAAa;;;;;EAKjB,YACkB,QACC,eAA4B;AAD7B,SAAA,SAAA;AACC,SAAA,gBAAA;EAChB;EAYI,MAAS,OAAqB,SAAqB;AACxD,WAAO,IAAI,cAAc,KAAK,eAAe,OAAO,SAAS,CAAC,gBAAgB,iBAAgB;AAC5F,aAAO,KAAK,cAAc,UAAa;QACrC,MAAM;QACN,cAAc,aAAa;QAC3B,YAAY;QACZ,UAAU,CAAC,WAAW,OAAO;QAC7B;QACA,SAAS;QACT;OACD;IACH,CAAC;EACH;;;;;;;;EASO,QAAQ,SAAqB;AAClC,WAAO,KAAK,MAAkC,QAAW,OAAO;EAClE;;;;ACdI,IAAO,YAAP,MAAgB;;;;;;;;;;;EAYpB,IAAW,QAAK;AACd,QAAI,CAAC,KAAK,QAAQ;AAChB,WAAK,SAAS,IAAI,MAAM,MAAM,KAAK,aAAa;;AAElD,WAAO,KAAK;EACd;;;;EAMA,IAAW,UAAO;AAChB,QAAI,CAAC,KAAK,UAAU;AAClB,WAAK,WAAW,IAAI,QAAQ,MAAM,KAAK,aAAa;;AAEtD,WAAO,KAAK;EACd;;;;;;EAQA,IAAW,YAAS;AAClB,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,IAAI,UAAU,MAAM,KAAK,aAAa;;AAE1D,WAAO,KAAK;EACd;;;;EAKA,IAAW,MAAG;AACZ,WAAO,4BAA4B,KAAK,SAAS,IAAI,KAAK,EAAE;EAC9D;;;;;;;EAQA,YACkB,UACA,IACC,eAA4B;AAF7B,SAAA,WAAA;AACA,SAAA,KAAA;AACC,SAAA,gBAAA;EAChB;;;;;;;;;;;EAYI,KAAK,IAAY,mBAAgC;AACtD,WAAO,IAAI,KAAK,MAAM,IAAI,KAAK,eAAe,iBAAiB;EACjE;;;;;;;EAQO,SAAS,IAAY,cAA2B;AACrD,WAAO,IAAI,SAAS,MAAM,IAAI,KAAK,eAAe,YAAY;EAChE;;EAGO,MAAM,KAAK,SAAwB;AACxC,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,aAAO,KAAK,aAAa,gBAAgB,OAAO;IAClD,GAAG,KAAK,aAAa;EACvB;;;;EAKO,MAAM,aACX,gBACA,SAAwB;AAExB,UAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,UAAM,KAAK,cAAc,KAAK,GAAG;AACjC,UAAM,WAAW,MAAM,KAAK,cAAc,KAA0B;MAClE;MACA,cAAc,aAAa;MAC3B,YAAY;MACZ;MACA;KACD;AACD,SAAK,cAAc,4BAA4B,KAAK,GAAG,IAAI,SAAS,OAAO;AAC3E,WAAO,IAAI,kBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;EAE/B;;EAGO,MAAM,QACX,MACA,SAAwB;AAExB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,cAAM;;AAER,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,QAA6B;QACrE;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,kBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;EAGO,MAAM,OAAO,SAAwB;AAC1C,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,OAA4B;QACpE;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,kBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;;EAMO,MAAM,4BAAyB;AACpC,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,aAAO,KAAK,2BAA2B,cAAc;IACvD,GAAG,KAAK,aAAa;EACvB;;;;;EAMO,MAAM,2BACX,gBAAsC;AAItC,QAAI,KAAK,OAAO,KAAK,cAAc,6BAA6B;AAC9D,qBAAe,QAAQ,EAAE,eAAe,KAAI,CAAE;AAC9C,aAAO,IAAI,iBACT,KAAK,cAAc,4BAA4B,KAAK,GAAG,GACvD,CAAA,GACA,GACA,0BAAyB,CAAE;;AAI/B,UAAM,EAAE,SAAS,YAAY,YAAW,IAAK,MAAM,wBACjD,OAAO,SAAgC;AACrC,aAAO,KAAK,aAAa,IAAI;IAC/B,GACA,gBACA,mBAAmB,eAAe;AAGpC,WAAO,IAAI,iBACT,KAAK,cAAc,4BAA4B,KAAK,GAAG,GACvD,SACA,YACA,WAAW;EAEf;;;;EAKO,MAAM,UAAU,UAA0B,CAAA,GAAE;AACjD,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,EAAE,UAAU,UAAS,IAAK,MAAM,KAAK,KAAI;AAC/C,YAAM,OAAO;AACb,YAAM,MAAM,UAAU;AAEtB,YAAM,WAAW,MAAM,KAAK,cAAc,UAAwC;QAChF;QACA,YAAY;QACZ,cAAc,aAAa;QAC3B,OAAO,6CAA6C,GAAG;QACvD,UAAU,CAAC,WAAW,OAAO;QAC7B;QACA;OACD;AACD,YAAM,QAAQ,SAAS,OAAO,CAAC,IAC3B,IAAI,MAAM,KAAK,SAAS,QAAQ,SAAS,OAAO,CAAC,EAAE,IAAI,KAAK,aAAa,IACzE;AACJ,aAAO,IAAI,cACT,SAAS,OAAO,CAAC,GACjB,SAAS,SACT,SAAS,MACT,0BAAyB,GACzB,KAAK;IAET,GAAG,KAAK,aAAa;EACvB;EAEO,MAAM,aACX,OAA4B;AAE5B,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AAErC,aAAO,KAAK,cAAc,aACxB,OAAO,SACP,aAAa,MACb,cAAc,KAAK,GAAG,GACtB,OACA,CAAA,GACA,cAAc;IAElB,GAAG,KAAK,aAAa;EACvB;EAEO,uBAAuB,aAAyB;AACrD,kBAAc,eAAe,CAAA;AAC7B,WAAO,KAAK,cAAc,wBAAwB,KAAK,KAAK,QAAW,WAAW;EACpF;;;;;EAKO,MAAM,gBAAa;AACxB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,EAAE,UAAS,IAAK,MAAM,KAAK,uBAAsB,EAAG,iBAAiB,cAAc;AAEzF,YAAM,aAA0B,CAAA;AAChC,iBAAW,YAAY,WAAW;AAChC,cAAM,YAAY,IAAI,kBAAkB,SAAS,cAAc,SAAS,YAAY;AACpF,eAAO,OAAO,SAAS;AACvB,mBAAW,KAAK,SAAS;;AAE3B,aAAO;IACT,GAAG,KAAK,aAAa;EACvB;;;;;EAMO,MAAM,8BACX,cACA,SAAwB;AAExB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI,OAAO,gBAAgB,KAAK,GAAG;AACnC,YAAM,KAAK,cAAc,KAAK,GAAG;AACjC,aAAO,OAAO;AACd,YAAM,WAAW,MAAM,KAAK,cAAc,OAA4B;QACpE;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;QACA,QAAQ,WAAW;QACnB;OACD;AACD,aAAO,IAAI,kBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;ACrWI,SAAU,cAAc,MAAsB;AAClD,MAAI,KAAK,YAAY;AACnB,QAAI,KAAK,eAAe;AACtB,cAAQ,IAAI,oBAAoB;AAChC,YAAM,IAAI,MAAM,kDAAkD;;AAEpE,QAAI,KAAK,mBAAmB;AAC1B,YAAM,IAAI,MACR,+EAA+E;;;AAIvF;;;ACkBM,IAAO,aAAP,MAAiB;EACrB,YAA4B,UAAqC,eAA4B;AAAjE,SAAA,WAAA;AAAqC,SAAA,gBAAA;EAA+B;EAoCzF,MAAS,OAAqB,SAAqB;AACxD,UAAM,OAAO,gBAAgB,KAAK,SAAS,KAAK,aAAa,SAAS;AACtE,UAAM,KAAK,cAAc,KAAK,SAAS,GAAG;AAE1C,WAAO,IAAI,cACT,KAAK,eACL,OACA,SACA,CAAC,UAAkC,iBAAgB;AACjD,aAAO,KAAK,cAAc,UAA+B;QACvD;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ,UAAU,CAAC,WAAW,OAAO;QAC7B;QACA,SAAS;QACT,gBAAgB;OACjB;IACH,CAAC;EAEL;;;;;;;;;;;;;;;;;;EAmBO,MAAM,OACX,MACA,UAA0B,CAAA,GAAE;AAE5B,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,aAAO,KAAK,eAAe,gBAAgB,MAAM,OAAO;IAC1D,GAAG,KAAK,aAAa;EACvB;;;;EAKO,MAAM,eACX,gBACA,MACA,UAA0B,CAAA,GAAE;AAE5B,UAAM,MAAM,CAAA;AACZ,QAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,YAAM;;AAER,UAAM,OAAO,gBAAgB,KAAK,SAAS,KAAK,aAAa,SAAS;AACtE,UAAM,KAAK,cAAc,KAAK,SAAS,GAAG;AAE1C,kBAAc,IAAI;AAElB,QAAI,KAAK,eAAe;AACtB,YAAM,kBAOF;QACF,eAAe,KAAK;;AAEtB,UAAI,KAAK,mBAAmB;AAC1B,wBAAgB,oBAAoB,KAAK;;AAE3C,YAAM,kBAAkB,KAAK,UAAU,eAAe;AACtD,cAAQ,iBAAiB,OAAO,OAAO,CAAA,GAAI,QAAQ,gBAAgB;QACjE,CAAC,UAAU,YAAY,iBAAiB,GAAG;OAC5C;AACD,aAAO,KAAK;AACZ,aAAO,KAAK;;AAGd,QAAI,KAAK,YAAY;AACnB,cAAQ,iBAAiB,OAAO,OAAO,CAAA,GAAI,QAAQ,gBAAgB;QACjE,CAAC,UAAU,YAAY,eAAe,GAAG,KAAK;OAC/C;AACD,aAAO,KAAK;;AAGd,QAAI,OAAO,KAAK,iBAAiB,UAAU;AACzC,UAAI,CAAC,KAAK,aAAa,WAAW,GAAG,GAAG;AACtC,cAAM,IAAI,MAAM,mCAAmC;;AAErD,WAAK,eAAe;QAClB,OAAO,CAAC,KAAK,YAAY;;;AAK7B,QAAI,CAAC,KAAK,gBAAgB,CAAC,KAAK,aAAa,OAAO;AAClD,WAAK,eAAe;QAClB,OAAO,CAAC,0BAA0B;;;AAItC,UAAM,WAAW,MAAM,KAAK,cAAc,OAA8C;MACtF;MACA;MACA,cAAc,aAAa;MAC3B,YAAY;MACZ;MACA;KACD;AACD,UAAM,MAAM,IAAI,UAAU,KAAK,UAAU,SAAS,OAAO,IAAI,KAAK,aAAa;AAC/E,WAAO,IAAI,kBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,KACA,0BAAyB,CAAE;EAE/B;;;;;;;;;;;;;;;;;;;;EAqBO,MAAM,kBACX,MACA,SAAwB;AAExB,QAAI,CAAC,QAAQ,KAAK,OAAO,QAAQ,KAAK,OAAO,QAAW;AACtD,YAAM,IAAI,MAAM,sDAAsD;;AAMxE,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI;AACF,cAAM,eAAe,MAAM,KAAK,SAC7B,UAAU,KAAK,EAAE,EACjB,aAAa,gBAAgB,OAAO;AACvC,eAAO;eACA,KAAU;AACjB,YAAI,IAAI,SAAS,YAAY,UAAU;AACrC,gBAAM,iBAAiB,MAAM,KAAK,eAAe,gBAAgB,MAAM,OAAO;AAE9E,uBAAa,eAAe,SAAS,IAAI,OAAO;AAChD,iBAAO;eACF;AACL,gBAAM;;;IAGZ,GAAG,KAAK,aAAa;EACvB;;;;;;;;;;EAWO,QAAQ,SAAqB;AAClC,WAAO,KAAK,MAAM,QAAW,OAAO;EACtC;;;;AC1PI,IAAO,qBAAP,cAAkC,iBAEvC;EACC,YACE,UACA,SACA,YACA,YACA,aAA8B;AAE9B,UAAM,UAAU,SAAS,YAAY,WAAW;AAChD,SAAK,aAAa;EACpB;;;;ACCI,IAAO,aAAP,MAAiB;;;;EAIrB,IAAW,MAAG;AACZ,WAAO,oBAAoB,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,KAAK,EAAE;EACzE;;;;;;EAMA,YACkB,MACA,IACC,eAA4B;AAF7B,SAAA,OAAA;AACA,SAAA,KAAA;AACC,SAAA,gBAAA;EAChB;;;;EAKI,MAAM,KAAK,SAAwB;AACxC,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,KAA4C;QACpF;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,mBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;;EAMO,MAAM,QACX,MACA,SAAwB;AAExB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AACjC,YAAM,WAAW,MAAM,KAAK,cAAc,QAA+C;QACvF;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,mBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;EAKO,MAAM,OAAO,SAAwB;AAC1C,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AACjC,YAAM,WAAW,MAAM,KAAK,cAAc,OAA8C;QACtF;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,mBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;ACrGI,IAAO,cAAP,MAAkB;;;;;EAKtB,YAA4B,MAA6B,eAA4B;AAAzD,SAAA,OAAA;AAA6B,SAAA,gBAAA;EAA+B;EAYjF,MAAS,OAAqB,SAAqB;AACxD,UAAM,OAAO,gBAAgB,KAAK,KAAK,KAAK,aAAa,UAAU;AACnE,UAAM,KAAK,cAAc,KAAK,KAAK,GAAG;AAEtC,WAAO,IAAI,cAAc,KAAK,eAAe,OAAO,SAAS,CAAC,gBAAgB,iBAAgB;AAC5F,aAAO,KAAK,cAAc,UAAU;QAClC;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ,UAAU,CAAC,WAAW,OAAO;QAC7B;QACA,SAAS;QACT;OACD;IACH,CAAC;EACH;;;;;;;;EASO,QAAQ,SAAqB;AAClC,WAAO,KAAK,MAAM,QAAW,OAAO;EACtC;;;;;;;;EASO,MAAM,OACX,MACA,SAAwB;AAExB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,KAAK,KAAK,aAAa,UAAU;AACnE,YAAM,KAAK,cAAc,KAAK,KAAK,GAAG;AAEtC,YAAM,WAAW,MAAM,KAAK,cAAc,OAA6C;QACrF;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,YAAM,MAAM,IAAI,WAAW,KAAK,MAAM,SAAS,OAAO,IAAI,KAAK,aAAa;AAC5E,aAAO,IAAI,mBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,KACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;;;;EAQO,MAAM,OACX,MACA,SAAwB;AAExB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,KAAK,KAAK,aAAa,UAAU;AACnE,YAAM,KAAK,cAAc,KAAK,KAAK,GAAG;AAEtC,YAAM,WAAW,MAAM,KAAK,cAAc,OAA6C;QACrF;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,YAAM,MAAM,IAAI,WAAW,KAAK,MAAM,SAAS,OAAO,IAAI,KAAK,aAAa;AAC5E,aAAO,IAAI,mBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,KACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;ACpII,IAAO,eAAP,cAA4B,iBAA2C;EAC3E,YACE,UACA,SACA,YACA,MACA,aAA8B;AAE9B,UAAM,UAAU,SAAS,YAAY,WAAW;AAChD,SAAK,OAAO;EACd;;;;ACMI,IAAO,OAAP,MAAW;;;;EAUf,IAAW,MAAG;AACZ,WAAO,cAAc,KAAK,SAAS,IAAI,KAAK,EAAE;EAChD;;;;;EAKA,YACkB,UACA,IACC,eAA4B;AAF7B,SAAA,WAAA;AACA,SAAA,KAAA;AACC,SAAA,gBAAA;AAEjB,SAAK,cAAc,IAAI,YAAY,MAAM,KAAK,aAAa;EAC7D;;;;;;EAOO,WAAW,IAAU;AAC1B,WAAO,IAAI,WAAW,MAAM,IAAI,KAAK,aAAa;EACpD;;;;EAKO,MAAM,KAAK,SAAwB;AACxC,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AACjC,YAAM,WAAW,MAAM,KAAK,cAAc,KAAqB;QAC7D;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,aACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;;EAMO,MAAM,QAAQ,MAAsB,SAAwB;AACjE,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,QAAwB;QAChE;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,aACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;EAKO,MAAM,OAAO,SAAwB;AAC1C,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,OAAuB;QAC/D;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,aACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;ACtHI,IAAO,QAAP,MAAY;;;;;EAKhB,YAA4B,UAAqC,eAA4B;AAAjE,SAAA,WAAA;AAAqC,SAAA,gBAAA;EAA+B;EAYzF,MAAS,OAAqB,SAAqB;AACxD,UAAM,OAAO,gBAAgB,KAAK,SAAS,KAAK,aAAa,IAAI;AACjE,UAAM,KAAK,cAAc,KAAK,SAAS,GAAG;AAC1C,WAAO,IAAI,cAAc,KAAK,eAAe,OAAO,SAAS,CAAC,gBAAgB,iBAAgB;AAC5F,aAAO,KAAK,cAAc,UAAU;QAClC;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ,UAAU,CAAC,WAAW,OAAO;QAC7B;QACA,SAAS;QACT;OACD;IACH,CAAC;EACH;;;;;;;;EASO,QAAQ,SAAqB;AAClC,WAAO,KAAK,MAAiC,QAAW,OAAO;EACjE;;;;;EAMO,MAAM,OAAO,MAAsB,SAAwB;AAChE,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,SAAS,KAAK,aAAa,IAAI;AACjE,YAAM,KAAK,cAAc,KAAK,SAAS,GAAG;AAC1C,YAAM,WAAW,MAAM,KAAK,cAAc,OAAuB;QAC/D;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,YAAM,MAAM,IAAI,KAAK,KAAK,UAAU,SAAS,OAAO,IAAI,KAAK,aAAa;AAC1E,aAAO,IAAI,aACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,KACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;;EAMO,MAAM,OAAO,MAAsB,SAAwB;AAChE,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,MAAM,CAAA;AACZ,UAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,cAAM;;AAGR,YAAM,OAAO,gBAAgB,KAAK,SAAS,KAAK,aAAa,IAAI;AACjE,YAAM,KAAK,cAAc,KAAK,SAAS,GAAG;AAE1C,YAAM,WAAW,MAAM,KAAK,cAAc,OAAuB;QAC/D;QACA;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,YAAM,MAAM,IAAI,KAAK,KAAK,UAAU,SAAS,OAAO,IAAI,KAAK,aAAa;AAC1E,aAAO,IAAI,aACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,KACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;ACrHI,IAAO,mBAAP,cAAgC,iBAA+C;EACnF,YACE,UACA,SACA,YACA,UACA,aAA8B;AAE9B,UAAM,UAAU,SAAS,YAAY,WAAW;AAChD,SAAK,WAAW;EAClB;;;;ACUI,IAAO,WAAP,MAAe;;;;EAsBnB,IAAW,MAAG;AACZ,WAAO,kBAAkB,KAAK,EAAE;EAClC;;;;;EAMA,YACkB,QACA,IACR,eAA4B;AAFpB,SAAA,SAAA;AACA,SAAA,KAAA;AACR,SAAA,gBAAA;AAER,SAAK,aAAa,IAAI,WAAW,MAAM,KAAK,aAAa;AACzD,SAAK,QAAQ,IAAI,MAAM,MAAM,KAAK,aAAa;EACjD;;;;;;;;;;;EAYO,UAAU,IAAU;AACzB,WAAO,IAAI,UAAU,MAAM,IAAI,KAAK,aAAa;EACnD;;;;;;EAOO,KAAK,IAAU;AACpB,WAAO,IAAI,KAAK,MAAM,IAAI,KAAK,aAAa;EAC9C;;EAGO,MAAM,KAAK,SAAwB;AACxC,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,aAAO,KAAK,aAAa,gBAAgB,OAAO;IAClD,GAAG,KAAK,aAAa;EACvB;;;;EAKO,MAAM,aACX,gBACA,SAAwB;AAExB,UAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,UAAM,KAAK,cAAc,KAAK,GAAG;AACjC,UAAM,WAAW,MAAM,KAAK,cAAc,KAAyB;MACjE;MACA,cAAc,aAAa;MAC3B,YAAY;MACZ;MACA;KACD;AACD,WAAO,IAAI,iBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;EAE/B;;EAGO,MAAM,OAAO,SAAwB;AAC1C,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,OAAO,gBAAgB,KAAK,GAAG;AACrC,YAAM,KAAK,cAAc,KAAK,GAAG;AAEjC,YAAM,WAAW,MAAM,KAAK,cAAc,OAA2B;QACnE;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ;QACA;OACD;AACD,aAAO,IAAI,iBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,MACA,0BAAyB,CAAE;IAE/B,GAAG,KAAK,aAAa;EACvB;;;;EAKO,MAAM,UAAU,UAA0B,CAAA,GAAE;AACjD,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,YAAM,EAAE,UAAU,OAAM,IAAK,MAAM,wBACjC,OAAO,SAAgC;AACrC,eAAO,KAAK,aAAa,IAAI;MAC/B,GACA,gBACA,mBAAmB,cAAc;AAGnC,YAAM,OAAO;AACb,YAAM,MAAM,OAAO;AAEnB,YAAM,WAAW,MAAM,KAAK,cAAc,UAAwC;QAChF;QACA,YAAY;QACZ,cAAc,aAAa;QAC3B,OAAO,6CAA6C,GAAG;QACvD,UAAU,CAAC,WAAW,OAAO;QAC7B;QACA;OACD;AACD,YAAM,QAAQ,SAAS,OAAO,CAAC,IAC3B,IAAI,MAAM,KAAK,QAAQ,SAAS,OAAO,CAAC,EAAE,IAAI,KAAK,aAAa,IAChE;AACJ,aAAO,IAAI,cACT,SAAS,OAAO,CAAC,GACjB,SAAS,SACT,SAAS,MACT,0BAAyB,GACzB,KAAK;IAET,GAAG,KAAK,aAAa;EACvB;;;;AC5JI,IAAO,YAAP,MAAgB;;;;;EAKpB,YACkB,QACC,eAA4B;AAD7B,SAAA,SAAA;AACC,SAAA,gBAAA;EAChB;EAoCI,MAAS,OAA8B,SAAqB;AACjE,UAAM,KAA4B,CAAC,UAAkC,iBAAgB;AACnF,aAAO,KAAK,cAAc,UAAU;QAClC,MAAM;QACN,cAAc,aAAa;QAC3B,YAAY;QACZ,UAAU,CAAC,WAAW,OAAO;QAC7B;QACA,SAAS;QACT,gBAAgB;OACjB;IACH;AACA,WAAO,IAAI,cAAc,KAAK,eAAe,OAAO,SAAS,EAAE;EACjE;;;;;;;;;;;;;;;EAgBO,MAAM,OACX,MACA,UAA0B,CAAA,GAAE;AAE5B,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,aAAO,KAAK,eAAe,gBAAgB,MAAM,OAAO;IAC1D,GAAG,KAAK,aAAa;EACvB;;;;EAKO,MAAM,eACX,gBACA,MACA,UAA0B,CAAA,GAAE;AAE5B,UAAM,MAAM,CAAA;AACZ,QAAI,CAAC,gBAAgB,MAAM,GAAG,GAAG;AAC/B,YAAM;;AAGR,kBAAc,IAAI;AAElB,QAAI,KAAK,eAAe;AACtB,YAAM,kBAOF;QACF,eAAe,KAAK;;AAEtB,UAAI,KAAK,mBAAmB;AAC1B,wBAAgB,oBAAoB,KAAK;;AAE3C,YAAM,mBAAmB,KAAK,UAAU,eAAe;AACvD,cAAQ,iBAAiB,OAAO,OAAO,CAAA,GAAI,QAAQ,gBAAgB;QACjE,CAAC,UAAU,YAAY,iBAAiB,GAAG;OAC5C;AACD,aAAO,KAAK;AACZ,aAAO,KAAK;;AAGd,QAAI,KAAK,YAAY;AACnB,cAAQ,iBAAiB,OAAO,OAAO,CAAA,GAAI,QAAQ,gBAAgB;QACjE,CAAC,UAAU,YAAY,eAAe,GAAG,KAAK;OAC/C;AACD,aAAO,KAAK;;AAGd,UAAM,OAAO;AACb,UAAM,WAAW,MAAM,KAAK,cAAc,OAAwB;MAChE;MACA;MACA,cAAc,aAAa;MAC3B,YAAY;MACZ;MACA;KACD;AACD,UAAM,MAAM,IAAI,SAAS,KAAK,QAAQ,KAAK,IAAI,KAAK,aAAa;AACjE,WAAO,IAAI,iBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,KACA,0BAAyB,CAAE;EAE/B;;;;;;;;;;;;;;;;EAiBO,MAAM,kBACX,MACA,SAAwB;AAExB,QAAI,CAAC,QAAQ,KAAK,OAAO,QAAQ,KAAK,OAAO,QAAW;AACtD,YAAM,IAAI,MAAM,sDAAsD;;AAMxE,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,UAAI;AACF,cAAM,eAAe,MAAM,KAAK,OAC7B,SAAS,KAAK,EAAE,EAChB,aAAa,gBAAgB,OAAO;AACvC,eAAO;eACA,KAAU;AACjB,YAAI,IAAI,SAAS,YAAY,UAAU;AACrC,gBAAM,iBAAiB,MAAM,KAAK,eAAe,gBAAgB,MAAM,OAAO;AAE9E,uBAAa,eAAe,SAAS,IAAI,OAAO;AAChD,iBAAO;eACF;AACL,gBAAM;;;IAGZ,GAAG,KAAK,aAAa;EACvB;;;;;;;;;;;EAYO,QAAQ,SAAqB;AAClC,WAAO,KAAK,MAAqC,QAAW,OAAO;EACrE;;;;ACrNF,IAAM,kBAAkB,oBAAI,IAAmB,CAAC,eAAe,aAAa,SAAS,MAAM,CAAC;AAsG5F,IAAM,eAAN,MAAM,cAAY;EAIhB,YAAoB,UAA+B;;AAH3C,SAAA,YAAkC,CAAA;AAIxC,SAAK,aAAYC,MAAA,aAAQ,QAAR,aAAQ,SAAA,SAAR,SAAU,MAAM,CAAC,OAAC,QAAAA,QAAA,SAAAA,MAAI,CAAA;AACvC,SAAK,mBAAmB;EAC1B;EAEO,UAAU,QAAwB,UAA4B,CAAA,GAAE;AACrE,QAAI,QAAQ,SAAS,QAAQ,YAAY;AACvC,YAAM,IAAI,MAAM,oDAAoD;IACtE;AACA,QAAI,QAAQ,SAAS,CAAC,gBAAgB,IAAI,QAAQ,KAAK,GAAG;AACxD,YAAM,IAAI,MAAM,uBAAuB,QAAQ,KAAK,EAAE;IACxD;AACA,QAAI,QAAQ,cAAc,CAAC,gBAAgB,IAAI,QAAQ,UAAU,GAAG;AAClE,YAAM,IAAI,MAAM,4BAA4B,QAAQ,UAAU,EAAE;IAClE;AACA,SAAK,UAAU,KAAK;MAClB;MACA;KACD;AACD,SAAK,mBAAmB;EAC1B;EAEO,aAAa,SAA0C;AAC5D,UAAM,kBAAoC,CAAA;AAE1C,SAAK,YAAY,KAAK,UAAU,OAAO,CAAC,qBAAoB;AAC1D,UACG,QAAQ,QAAQ,iBAAiB,OAAO,SAAS,QAAQ,QACzD,QAAQ,SAAS,iBAAiB,QAAQ,UAAU,QAAQ,OAC7D;AACA,wBAAgB,KAAK,iBAAiB,MAAM;AAC5C,eAAO;MACT,OAAO;AACL,eAAO;MACT;IACF,CAAC;AACD,SAAK,mBAAmB;AAExB,WAAO;EACT;EAEO,YAAY,YAAwBC,UAAwB;AACjE,UAAM,WAAW,KAAK,mBAAkB;AAExC,UAAM,WAAW,SAAS,YACxB,CAAC,MAAM,WAAU;AACf,aAAO,CAAC,QAAwB;AAC9B,eAAO,OAAO,YAAY,KAAK,IAAI;MACrC;IACF,GACA,CAAC,QAAyB,WAAW,YAAY,GAAG,CAAC;AAGvD,WAAO,SAASA,QAAO;EACzB;EAEO,qBAAkB;AACvB,QAAI,CAAC,KAAK,kBAAkB;AAC1B,WAAK,mBAAmB,KAAK,cAAa;IAC5C;AACA,WAAO,KAAK;EACd;EAEO,QAAK;AACV,WAAO,IAAI,cAAa,KAAK,SAAS;EACxC;EAEO,OAAO,SAAM;AAClB,WAAO,IAAI,cAAY;EACzB;EAEQ,gBAAa;AAoCnB,UAAM,SAA2B,CAAA;AAGjC,UAAM,YAA0C,oBAAI,IAAG;AAEvD,aAAS,YAAY,MAA4B;AAC/C,aAAO;QACL;QACA,UAAU,oBAAI,IAAG;QACjB,QAAQ;QACR,kBAAkB;;IAEtB;AAGA,UAAM,iBAAiB,YAAY,WAAW;AAC9C,UAAM,UAAU,YAAY,MAAM;AAClC,UAAM,mBAAmB,YAAY,aAAa;AAClD,UAAM,aAAa,YAAY,OAAO;AACtC,UAAM,YAAY,YAAY,MAAM;AAGpC,UAAM,gBAAgB,CAAC,gBAAgB,SAAS,kBAAkB,YAAY,SAAS;AAGvF,aAAS,SAAS,OAAgC;AAChD,UAAI,UAAU,SAAS;AACrB,eAAO;MACT,WAAW,UAAU,aAAa;AAChC,eAAO;MACT,WAAW,UAAU,eAAe;AAClC,eAAO;MACT,WAAW,UAAU,QAAQ;AAC3B,eAAO;MACT,OAAO;AACL,eAAO;MACT;IACF;AAGA,eAAW,cAAc,KAAK,WAAW;AACvC,YAAM,SAAS,WAAW;AAC1B,YAAM,UAAU,WAAW;AAC3B,YAAM,aAAa,OAAO;AAC1B,UAAI,UAAU,IAAI,UAAU,GAAG;AAC7B,cAAM,IAAI,MAAM,gDAAgD;MAClE;AACA,YAAM,OAAwB;QAC5B;QACA,WAAW,oBAAI,IAAG;QAClB,YAAY,oBAAI,IAAG;;AAErB,UAAI,QAAQ,YAAY;AACtB,aAAK,aAAa,SAAS,QAAQ,UAAU;AAC7C,aAAK,WAAW,mBAAmB;MACrC;AACA,gBAAU,IAAI,YAAY,IAAI;AAC9B,YAAM,QAAQ,SAAS,QAAQ,KAAK;AACpC,YAAM,SAAS,IAAI,IAAI;IACzB;AAGA,eAAW,cAAc,KAAK,WAAW;AACvC,YAAM,EAAE,QAAQ,QAAO,IAAK;AAC5B,YAAM,aAAa,OAAO;AAC1B,YAAM,OAAO,UAAU,IAAI,UAAU;AACrC,UAAI,CAAC,MAAM;AACT,cAAM,IAAI,MAAM,2BAA2B,UAAU,EAAE;MACzD;AAEA,UAAI,QAAQ,eAAe;AACzB,mBAAW,mBAAmB,QAAQ,eAAe;AACnD,gBAAM,YAAY,UAAU,IAAI,eAAe;AAC/C,cAAI,WAAW;AAGb,iBAAK,UAAU,IAAI,SAAS;AAC5B,sBAAU,WAAW,IAAI,IAAI;UAC/B;QACF;MACF;AACA,UAAI,QAAQ,gBAAgB;AAC1B,mBAAW,oBAAoB,QAAQ,gBAAgB;AACrD,gBAAM,aAAa,UAAU,IAAI,gBAAgB;AACjD,cAAI,YAAY;AAGd,uBAAW,UAAU,IAAI,IAAI;AAC7B,iBAAK,WAAW,IAAI,UAAU;UAChC;QACF;MACF;IACF;AAEA,aAAS,UAAU,OAAY;AAC7B,YAAM,SAAS;AAEf,iBAAW,QAAQ,MAAM,UAAU;AACjC,YAAI,KAAK,eAAe,CAAC,KAAK,WAAW,UAAU,KAAK,WAAW,SAAS,OAAO;AAKjF;QACF;AACA,YAAI,KAAK,UAAU,SAAS,GAAG;AAG7B,iBAAO,KAAK,KAAK,MAAM;AAGvB,qBAAW,aAAa,KAAK,YAAY;AACvC,sBAAU,UAAU,OAAO,IAAI;UACjC;AACA,oBAAU,OAAO,KAAK,OAAO,IAAI;AACjC,gBAAM,SAAS,OAAO,IAAI;QAC5B;MACF;IACF;AAEA,aAAS,aAAU;AACjB,iBAAW,SAAS,eAAe;AACjC,kBAAU,KAAK;AAEf,YAAI,MAAM,SAAS,OAAO,KAAK,UAAU,SAAS;AAChD,cAAI,CAAC,QAAQ,QAAQ;AAInB,sBAAU,OAAO;UACnB;AAEA;QACF;AAEA,YAAI,MAAM,kBAAkB;AAE1B,oBAAU,OAAO;QACnB;MACF;IACF;AAGA,QAAI,YAAY;AAChB,WAAO,UAAU,OAAO,GAAG;AACzB;AACA,YAAM,sBAAsB,OAAO;AAEnC,iBAAU;AAIV,UAAI,OAAO,UAAU,uBAAuB,YAAY,GAAG;AACzD,cAAM,IAAI,MAAM,+DAA+D;MACjF;IACF;AAEA,WAAO;EACT;;AAOI,SAAU,sBAAmB;AACjC,SAAO,aAAa,OAAM;AAC5B;;;ACxYO,IAAMC,UAAS,mBAAmB,oBAAoB;;;ACmBvD,IAAO,aAAP,cAA0B,MAAK;EACnC,YAAY,SAAgB;AAC1B,UAAM,OAAO;AACb,SAAK,OAAO;EACd;;;;ACfI,SAAU,SAAS,OAAc;AACrC,SACE,OAAO,UAAU,YACjB,UAAU,QACV,CAAC,MAAM,QAAQ,KAAK,KACpB,EAAE,iBAAiB,WACnB,EAAE,iBAAiB;AAEvB;;;ACyFA,IAAM,YAAY,IAAI,IAAI,wBAAwB;;;ACjG5C,SAAU,eAAY;AAC1B,MAAIC,QAAO;AACX,WAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAE3B,UAAM,eAAe,KAAK,MAAM,KAAK,OAAM,IAAK,EAAE;AAElD,QAAI,MAAM,IAAI;AACZ,MAAAA,SAAQ;eACC,MAAM,IAAI;AAEnB,MAAAA,SAAS,eAAe,IAAO;WAC1B;AAEL,MAAAA,SAAQ,aAAa,SAAS,EAAE;;AAGlC,QAAI,MAAM,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;AAC/C,MAAAA,SAAQ;;;AAGZ,SAAOA;AACT;;;;ACnBA,IAAM,eACJ,SAAO,KAAA,eAAU,QAAV,eAAU,SAAA,SAAV,WAAY,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,gBAAe,aACtC,WAAW,OAAO,WAAW,KAAK,WAAW,MAAM,IACnD;AAOA,SAAU,aAAU;AACxB,SAAO,aAAY;AACrB;;;;;;;ACgBO,IAAM,YAAY,OAAO,WAAW,eAAe,OAAO,OAAO,aAAa;AAK9E,IAAM,cACX,OAAO,SAAS,YAChB,QAAO,SAAI,QAAJ,SAAI,SAAA,SAAJ,KAAM,mBAAkB,iBAC9BC,MAAA,KAAK,iBAAW,QAAAA,QAAA,SAAA,SAAAA,IAAE,UAAS,kCAC1B,KAAA,KAAK,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE,UAAS,gCAC3B,KAAA,KAAK,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAE,UAAS;AAKxB,IAAM,SACX,OAAO,SAAS,eAChB,OAAO,KAAK,YAAY,eACxB,OAAO,KAAK,QAAQ,SAAS;AAKxB,IAAM,SACX,OAAO,YAAY,eACnB,QAAQ,QAAQ,OAAO,KACvB,SAAQ,KAAA,QAAQ,cAAQ,QAAA,OAAA,SAAA,SAAA,GAAE,IAAI;AAE9B,CAAC;AAKI,IAAM,QAAQ,OAAO,QAAQ,eAAe,OAAO,IAAI,YAAY;AAMnE,IAAM,gBACX,OAAO,cAAc,gBAAe,cAAS,QAAT,cAAS,SAAA,SAAT,UAAW,aAAY;;;AC1D7D,IAAM,iBAAiB;AAGvB,IAAM,4BAA4B;EAChC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAGF,IAAM,gCAA0C,CAAC,aAAa;AAKxD,IAAO,YAAP,MAAgB;EAIpB,YAAY,EACV,8BAA8B,qBAAqB,CAAA,GACnD,kCAAkC,yBAAyB,CAAA,EAAE,IACzC,CAAA,GAAE;AACtB,yBAAqB,0BAA0B,OAAO,kBAAkB;AACxE,6BAAyB,8BAA8B,OAAO,sBAAsB;AAEpF,SAAK,qBAAqB,IAAI,IAAI,mBAAmB,IAAI,CAAC,MAAM,EAAE,YAAW,CAAE,CAAC;AAChF,SAAK,yBAAyB,IAAI,IAAI,uBAAuB,IAAI,CAAC,MAAM,EAAE,YAAW,CAAE,CAAC;EAC1F;EAEO,SAAS,KAAY;AAC1B,UAAM,OAAO,oBAAI,IAAG;AACpB,WAAO,KAAK,UACV,KACA,CAAC,KAAa,UAAkB;AAE9B,UAAI,iBAAiB,OAAO;AAC1B,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACK,KAAK,GAAA,EACR,MAAM,MAAM,MACZ,SAAS,MAAM,QAAO,CAAA;MAE1B;AAEA,UAAI,QAAQ,WAAW;AACrB,eAAO,KAAK,gBAAgB,KAAsB;MACpD,WAAW,QAAQ,OAAO;AACxB,eAAO,KAAK,YAAY,KAAe;MACzC,WAAW,QAAQ,SAAS;AAC1B,eAAO,KAAK,cAAc,KAAsB;MAClD,WAAW,QAAQ,QAAQ;AAEzB,eAAO;MACT,WAAW,QAAQ,YAAY;AAE7B,eAAO;MACT,WAAW,QAAQ,iBAAiB;AAGlC,eAAO;MACT,WAAW,MAAM,QAAQ,KAAK,KAAK,SAAS,KAAK,GAAG;AAClD,YAAI,KAAK,IAAI,KAAK,GAAG;AACnB,iBAAO;QACT;AACA,aAAK,IAAI,KAAK;MAChB;AAEA,aAAO;IACT,GACA,CAAC;EAEL;EAEQ,gBAAgB,KAAkB;AACxC,UAAM,YAA2B,CAAA;AACjC,eAAW,OAAO,OAAO,KAAK,GAAG,GAAG;AAClC,UAAI,KAAK,mBAAmB,IAAI,IAAI,YAAW,CAAE,GAAG;AAClD,kBAAU,GAAG,IAAI,IAAI,GAAG;MAC1B,OAAO;AACL,kBAAU,GAAG,IAAI;MACnB;IACF;AACA,WAAO;EACT;EAEQ,cAAc,OAAoB;AACxC,QAAI,OAAO,UAAU,YAAY,UAAU,MAAM;AAC/C,aAAO;IACT;AAEA,UAAM,YAA2B,CAAA;AAEjC,eAAW,KAAK,OAAO,KAAK,KAAK,GAAG;AAClC,UAAI,KAAK,uBAAuB,IAAI,EAAE,YAAW,CAAE,GAAG;AACpD,kBAAU,CAAC,IAAI,MAAM,CAAC;MACxB,OAAO;AACL,kBAAU,CAAC,IAAI;MACjB;IACF;AAEA,WAAO;EACT;EAEQ,YAAY,OAAa;AAC/B,QAAI,OAAO,UAAU,YAAY,UAAU,MAAM;AAC/C,aAAO;IACT;AAEA,UAAM,MAAM,IAAI,IAAI,KAAK;AAEzB,QAAI,CAAC,IAAI,QAAQ;AACf,aAAO;IACT;AAEA,eAAW,CAAC,GAAG,KAAK,IAAI,cAAc;AACpC,UAAI,CAAC,KAAK,uBAAuB,IAAI,IAAI,YAAW,CAAE,GAAG;AACvD,YAAI,aAAa,IAAI,KAAK,cAAc;MAC1C;IACF;AAEA,WAAO,IAAI,SAAQ;EACrB;;;;AC5KI,SAAU,gBAAa;AAC3B,SAAO;AACT;;;ACMM,SAAU,yBAAsB;AACpC,SAAO,cAAa;AACtB;;;ACbA,IAAM,sBAAsB,uBAAsB;;;ACJ5C,SAAU,qBAAqB,GAAU;AAC7C,SAAO,QAAQ,KAAK,OAAQ,EAA4B,MAAM,MAAM,UAAU;AAChF;AAEM,SAAU,oBAAoB,GAAU;AAC5C,SAAO,QACL,KACE,OAAQ,EAAqB,cAAc,cAC3C,OAAQ,EAAqB,QAAQ,UAAU;AAErD;;;ACqDA,IAAM,aAA4B,OAAO,YAAY;;;AC2BrD,IAAM,0BAA0B,IAAI,IAClC,2EAA2E;;;ACzEvE,IAAOC,cAAP,cAA0B,MAAK;EACnC,YAAY,SAAgB;AAC1B,UAAM,OAAO;AACb,SAAK,OAAO;EACd;;;;ACnBF,IAAM,uBAAuB;AAWvB,SAAUC,OACd,WACA,OACA,SAGC;AAED,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAU;AACrC,QAAI,QAAmD;AACvD,QAAI,YAAsC;AAE1C,UAAM,gBAAgB,MAAW;AAC/B,aAAO,OACL,IAAIC,aAAW,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,iBAAgB,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,gBAAgB,oBAAoB,CAAC;IAE1F;AAEA,UAAM,kBAAkB,MAAW;AACjC,WAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,gBAAe,WAAW;AACrC,gBAAQ,YAAY,oBAAoB,SAAS,SAAS;MAC5D;IACF;AAEA,gBAAY,MAAW;AACrB,UAAI,OAAO;AACT,qBAAa,KAAK;MACpB;AACA,sBAAe;AACf,aAAO,cAAa;IACtB;AAEA,SAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,gBAAe,QAAQ,YAAY,SAAS;AACvD,aAAO,cAAa;IACtB;AAEA,YAAQ,WAAW,MAAK;AACtB,sBAAe;AACf,cAAQ,KAAK;IACf,GAAG,SAAS;AAEZ,QAAI,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,aAAa;AACxB,cAAQ,YAAY,iBAAiB,SAAS,SAAS;IACzD;EACF,CAAC;AACH;;;ACnDA,IAAM,oCAAoC,MAAO;;;ACEjD,IAAM,oBAAoB,mBAAmB,gCAAgC;;;ACPtE,IAAM,mBAAmB;EAC9B,MAAM,OAAO,IAAI,0BAA0B;EAC3C,WAAW,OAAO,IAAI,+BAA+B;;;;ACLhD,IAAM,SAAS,CAAA;;;ACKtB,IAAM,iBAAiB,IAAI,UAAS;AA2B9B,IAAO,YAAP,MAAO,mBAAkB,MAAK;EAkClC,YAAY,SAAiB,UAA4B,CAAA,GAAE;AACzD,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,SAAK,OAAO,QAAQ;AACpB,SAAK,aAAa,QAAQ;AAC1B,SAAK,UAAU,QAAQ;AACvB,SAAK,WAAW,QAAQ;AAExB,WAAO,eAAe,MAAM,WAAU,SAAS;EACjD;;;;EAKA,CAAC,MAAM,IAAC;AACN,WAAO,cAAc,KAAK,OAAO;GAAO,eAAe,SAAS,IAAI,CAAC;EACvE;;AA5CgB,UAAA,qBAA6B;AAK7B,UAAA,cAAsB;;;ACpCxC,SAAS,cAAc,MAAY;AACjC,SAAO,KAAK,YAAW;AACzB;AAEA,UAAU,eAAe,KAA6B;AACpD,aAAW,SAAS,IAAI,OAAM,GAAI;AAChC,UAAM,CAAC,MAAM,MAAM,MAAM,KAAK;EAChC;AACF;AAEA,IAAM,kBAAN,MAAqB;EAGnB,YAAY,YAAiD;AAC3D,SAAK,cAAc,oBAAI,IAAG;AAC1B,QAAI,YAAY;AACd,iBAAW,cAAc,OAAO,KAAK,UAAU,GAAG;AAChD,aAAK,IAAI,YAAY,WAAW,UAAU,CAAC;MAC7C;IACF;EACF;;;;;;;EAQO,IAAI,MAAc,OAAgC;AACvD,SAAK,YAAY,IAAI,cAAc,IAAI,GAAG,EAAE,MAAM,OAAO,OAAO,KAAK,EAAE,KAAI,EAAE,CAAE;EACjF;;;;;;EAOO,IAAI,MAAY;;AACrB,YAAOC,MAAA,KAAK,YAAY,IAAI,cAAc,IAAI,CAAC,OAAC,QAAAA,QAAA,SAAA,SAAAA,IAAE;EACpD;;;;;EAMO,IAAI,MAAY;AACrB,WAAO,KAAK,YAAY,IAAI,cAAc,IAAI,CAAC;EACjD;;;;;EAMO,OAAO,MAAY;AACxB,SAAK,YAAY,OAAO,cAAc,IAAI,CAAC;EAC7C;;;;EAKO,OAAO,UAAsC,CAAA,GAAE;AACpD,UAAM,SAAyB,CAAA;AAC/B,QAAI,QAAQ,cAAc;AACxB,iBAAW,SAAS,KAAK,YAAY,OAAM,GAAI;AAC7C,eAAO,MAAM,IAAI,IAAI,MAAM;MAC7B;IACF,OAAO;AACL,iBAAW,CAAC,gBAAgB,KAAK,KAAK,KAAK,aAAa;AACtD,eAAO,cAAc,IAAI,MAAM;MACjC;IACF;AAEA,WAAO;EACT;;;;EAKO,WAAQ;AACb,WAAO,KAAK,UAAU,KAAK,OAAO,EAAE,cAAc,KAAI,CAAE,CAAC;EAC3D;;;;EAKA,CAAC,OAAO,QAAQ,IAAC;AACf,WAAO,eAAe,KAAK,WAAW;EACxC;;AAOI,SAAU,kBAAkB,YAAgC;AAChE,SAAO,IAAI,gBAAgB,UAAU;AACvC;;;ACxFA,SAASC,QAAO,MAAa;AAE3B,UAAQ,OAAO,SAAS,cAAc,OAAO,SAAS,aAAa,gBAAgB;AACrF;AAMA,IAAM,kBAAN,MAAqB;;;;;EAKZ,MAAM,YAAYC,UAAwB;AAC/C,UAAM,MAAM,IAAI,IAAIA,SAAQ,GAAG;AAC/B,UAAM,aAAa,IAAI,aAAa;AAEpC,QAAI,cAAc,CAACA,SAAQ,yBAAyB;AAClD,YAAM,IAAI,MAAM,qBAAqBA,SAAQ,GAAG,0CAA0C;IAC5F;AAEA,QAAIA,SAAQ,eAAe;AACzB,YAAM,IAAI,MAAM,oDAAoD;IACtE;AAEA,QAAI;AACF,aAAO,MAAM,YAAYA,QAAO;IAClC,SAAS,GAAQ;AACf,YAAM,SAAS,GAAGA,QAAO;IAC3B;EACF;;AAMF,eAAe,YAAYA,UAAwB;AACjD,QAAM,EAAE,iBAAiB,uBAAsB,IAAK,iBAAiBA,QAAO;AAC5E,MAAI;AACF,UAAM,UAAU,kBAAkBA,SAAQ,OAAO;AACjD,UAAM,EAAE,WAAW,MAAM,YAAW,IAAK,iBAAiBA,QAAO;AACjE,UAAM,cAAW,OAAA,OAAA,OAAA,OAAA,EACf,MAAM,aACN,QAAQA,SAAQ,QAChB,SACA,QAAQ,gBAAgB,OAAM,GAI1B,iBAAiB,QAAQ,YACzB,EAAE,aAAaA,SAAQ,kBAAkB,YAAY,cAAa,IAClE,CAAA,CAAG,GACH,WAAW,QAAQ,YAAY,EAAE,OAAO,WAAU,IAAK,CAAA,CAAG;AAMhE,QAAI,WAAW;AACZ,kBAAoB,SAAS;IAChC;AAOA,UAAM,WAAW,MAAM,MAAMA,SAAQ,KAAK,WAAW;AAErD,QAAID,QAAOC,SAAQ,IAAI,KAAKA,SAAQ,kBAAkB;AACpD,MAAAA,SAAQ,iBAAiB,EAAE,aAAaA,SAAQ,KAAK,KAAI,CAAE;IAC7D;AACA,WAAO,sBAAsB,UAAUA,UAAS,sBAAsB;EACxE,SAAS,GAAG;AACV,+BAAsB,QAAtB,2BAAsB,SAAA,SAAtB,uBAAsB;AACtB,UAAM;EACR;AACF;AAKA,eAAe,sBACb,cACAA,UACA,wBAAmC;;AAEnC,QAAM,UAAU,qBAAqB,YAAY;AACjD,QAAM,WAA6B;IACjC,SAAAA;IACA;IACA,QAAQ,aAAa;;AAGvB,QAAM,aAAa,oBAAoB,aAAa,IAAI,IACpD,gBAAgB,aAAa,MAAM;IACjC,YAAYA,SAAQ;IACpB,OAAO;GACR,IACD,aAAa;AAEjB;;MAEEC,MAAAD,SAAQ,+BAAyB,QAAAC,QAAA,SAAA,SAAAA,IAAE,IAAI,OAAO,iBAAiB,QAC/DC,MAAAF,SAAQ,+BAAyB,QAAAE,QAAA,SAAA,SAAAA,IAAE,IAAI,SAAS,MAAM;IACtD;AACA,QAAIF,SAAQ,sBAAsB;AAChC,eAAS,oBAAoB,eAAU,QAAV,eAAU,SAAV,aAAc;IAC7C,OAAO;AACL,YAAM,iBAAiB,IAAI,SAAS,UAAU;AAC9C,eAAS,WAAW,eAAe,KAAI;AACvC,iCAAsB,QAAtB,2BAAsB,SAAA,SAAtB,uBAAsB;IACxB;EACF,OAAO;AACL,UAAM,iBAAiB,IAAI,SAAS,UAAU;AAE9C,aAAS,aAAa,MAAM,eAAe,KAAI;AAC/C,+BAAsB,QAAtB,2BAAsB,SAAA,SAAtB,uBAAsB;EACxB;AAEA,SAAO;AACT;AAEA,SAAS,iBAAiBA,UAAwB;AAIhD,QAAM,kBAAkB,IAAI,gBAAe;AAG3C,MAAI;AAKJ,MAAI;AACJ,MAAIA,SAAQ,aAAa;AACvB,QAAIA,SAAQ,YAAY,SAAS;AAC/B,YAAM,IAAIG,YAAW,4BAA4B;IACnD;AAEA,oBAAgB,CAAC,UAAgB;AAC/B,UAAI,MAAM,SAAS,SAAS;AAC1B,wBAAgB,MAAK;MACvB;IACF;AACA,IAAAH,SAAQ,YAAY,iBAAiB,SAAS,aAAa;AAC3D,6BAAyB,MAAK;;AAC5B,UAAI,eAAe;AACjB,SAAAC,MAAAD,SAAQ,iBAAW,QAAAC,QAAA,SAAA,SAAAA,IAAE,oBAAoB,SAAS,aAAa;MACjE;IACF;EACF;AAGA,MAAID,SAAQ,UAAU,GAAG;AACvB,eAAW,MAAK;AACd,sBAAgB,MAAK;IACvB,GAAGA,SAAQ,OAAO;EACpB;AAEA,SAAO,EAAE,iBAAiB,uBAAsB;AAClD;AAKA,SAAS,SAAS,GAAcA,UAAwB;;AACtD,MAAI,MAAK,MAAC,QAAD,MAAC,SAAA,SAAD,EAAG,UAAS,cAAc;AACjC,WAAO;EACT,OAAO;AACL,WAAO,IAAI,UAAU,0BAA0B,EAAE,OAAO,IAAI;MAC1D,OAAMC,MAAA,MAAC,QAAD,MAAC,SAAA,SAAD,EAAG,UAAI,QAAAA,QAAA,SAAAA,MAAI,UAAU;MAC3B,SAAAD;KACD;EACH;AACF;AAKA,SAAS,kBAAkB,iBAAgC;AACzD,QAAM,UAAU,IAAI,QAAO;AAC3B,aAAW,CAAC,MAAM,KAAK,KAAK,iBAAiB;AAC3C,YAAQ,OAAO,MAAM,KAAK;EAC5B;AAEA,SAAO;AACT;AAEA,SAAS,qBAAqB,cAAsB;AAClD,QAAM,kBAAkB,kBAAiB;AACzC,aAAW,CAAC,MAAM,KAAK,KAAK,aAAa,SAAS;AAChD,oBAAgB,IAAI,MAAM,KAAK;EACjC;AAEA,SAAO;AACT;AAEA,SAAS,iBAAiBA,UAAwB;AAChD,QAAM,OAAO,OAAOA,SAAQ,SAAS,aAAaA,SAAQ,KAAI,IAAKA,SAAQ;AAC3E,MAAI,qBAAqB,IAAI,GAAG;AAC9B,UAAM,IAAI,MAAM,wDAAwD;EAC1E;AAEA,SAAO,oBAAoB,IAAI,IAC3B,EAAE,WAAW,MAAM,MAAM,gBAAgB,MAAM,EAAE,YAAYA,SAAQ,iBAAgB,CAAE,EAAC,IACxF,EAAE,WAAW,OAAO,KAAI;AAC9B;AAQA,SAAS,gBACP,gBACA,UAA0F,CAAA,GAAE;AAE5F,MAAI,cAAc;AAClB,QAAM,EAAE,YAAY,MAAK,IAAK;AAI9B,MAAI,2BAA2B,cAAc,GAAG;AAC9C,WAAO,eAAe,YACpB,IAAI,gBAAgB;MAClB,UAAU,OAAO,YAAU;AACzB,YAAI,UAAU,MAAM;AAClB,qBAAW,UAAS;AACpB;QACF;AAEA,mBAAW,QAAQ,KAAK;AACxB,uBAAe,MAAM;AACrB,YAAI,YAAY;AACd,qBAAW,EAAE,YAAW,CAAE;QAC5B;MACF;MACA,QAAK;AACH,kBAAK,QAAL,UAAK,SAAA,SAAL,MAAK;MACP;KACD,CAAC;EAEN,OAAO;AAGL,UAAM,SAAS,eAAe,UAAS;AACvC,WAAO,IAAI,eAAe;MACxB,MAAM,KAAK,YAAU;;AACnB,cAAM,EAAE,MAAM,MAAK,IAAK,MAAM,OAAO,KAAI;AAEzC,YAAI,QAAQ,CAAC,OAAO;AAClB,oBAAK,QAAL,UAAK,SAAA,SAAL,MAAK;AAEL,qBAAW,MAAK;AAChB,iBAAO,YAAW;AAClB;QACF;AAEA,wBAAeC,MAAA,UAAK,QAAL,UAAK,SAAA,SAAL,MAAO,YAAM,QAAAA,QAAA,SAAAA,MAAI;AAGhC,mBAAW,QAAQ,KAAK;AAExB,YAAI,YAAY;AACd,qBAAW,EAAE,YAAW,CAAE;QAC5B;MACF;MACA,OAAO,QAAe;AACpB,kBAAK,QAAL,UAAK,SAAA,SAAL,MAAK;AACL,eAAO,OAAO,OAAO,MAAM;MAC7B;KACD;EACH;AACF;AAMM,SAAU,wBAAqB;AACnC,SAAO,IAAI,gBAAe;AAC5B;AAEA,SAAS,2BAA2B,gBAA8B;AAChE,SAAO,eAAe,gBAAgB,UAAa,KAAK,oBAAoB;AAC9E;;;AC1SM,SAAU,0BAAuB;AACrC,SAAO,sBAAqB;AAC9B;;;AC4GA,IAAM,sBAAN,MAAyB;EAqBvB,YAAY,SAA+B;;AACzC,SAAK,MAAM,QAAQ;AACnB,SAAK,OAAO,QAAQ;AACpB,SAAK,WAAUG,MAAA,QAAQ,aAAO,QAAAA,QAAA,SAAAA,MAAI,kBAAiB;AACnD,SAAK,UAASC,MAAA,QAAQ,YAAM,QAAAA,QAAA,SAAAA,MAAI;AAChC,SAAK,WAAUC,MAAA,QAAQ,aAAO,QAAAA,QAAA,SAAAA,MAAI;AAClC,SAAK,gBAAgB,QAAQ;AAC7B,SAAK,WAAW,QAAQ;AACxB,SAAK,oBAAmBC,MAAA,QAAQ,sBAAgB,QAAAA,QAAA,SAAAA,MAAI;AACpD,SAAK,gBAAgB,QAAQ;AAC7B,SAAK,4BAA4B,QAAQ;AACzC,SAAK,mBAAkB,KAAA,QAAQ,qBAAe,QAAA,OAAA,SAAA,KAAI;AAClD,SAAK,cAAc,QAAQ;AAC3B,SAAK,iBAAiB,QAAQ;AAC9B,SAAK,mBAAmB,QAAQ;AAChC,SAAK,qBAAqB,QAAQ;AAClC,SAAK,YAAY,QAAQ,aAAa,WAAU;AAChD,SAAK,2BAA0B,KAAA,QAAQ,6BAAuB,QAAA,OAAA,SAAA,KAAI;AAClE,SAAK,wBAAuB,KAAA,QAAQ,0BAAoB,QAAA,OAAA,SAAA,KAAI;EAC9D;;AAQI,SAAU,sBAAsB,SAA+B;AACnE,SAAO,IAAI,oBAAoB,OAAO;AACxC;;;AClIO,IAAM,yBAA6C;EACxD,yBAAyB;;EACzB,mBAAmB;;EACnB,mBAAmB,MAAO,KAAK;;;AAajC,eAAe,aACb,gBACA,mBACA,gBAAsB;AAItB,iBAAe,oBAAiB;AAC9B,QAAI,KAAK,IAAG,IAAK,gBAAgB;AAC/B,UAAI;AACF,eAAO,MAAM,eAAc;MAC7B,SAAEC,KAAM;AACN,eAAO;MACT;IACF,OAAO;AACL,YAAM,aAAa,MAAM,eAAc;AAGvC,UAAI,eAAe,MAAM;AACvB,cAAM,IAAI,MAAM,iCAAiC;MACnD;AAEA,aAAO;IACT;EACF;AAEA,MAAI,QAA4B,MAAM,kBAAiB;AAEvD,SAAO,UAAU,MAAM;AACrB,UAAMC,OAAM,iBAAiB;AAE7B,YAAQ,MAAM,kBAAiB;EACjC;AAEA,SAAO;AACT;AAgBM,SAAU,kBACd,YACA,oBAAgD;AAEhD,MAAI,gBAA6C;AACjD,MAAI,QAA4B;AAChC,MAAI;AAEJ,QAAM,UAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,sBAAsB,GACtB,kBAAkB;AAOvB,QAAM,SAAS;;;;IAIb,IAAI,eAAY;AACd,aAAO,kBAAkB;IAC3B;;;;;IAKA,IAAI,gBAAa;;AACf,aACE,CAAC,OAAO,kBACPD,MAAA,UAAK,QAAL,UAAK,SAAA,SAAL,MAAO,wBAAkB,QAAAA,QAAA,SAAAA,MAAI,KAAK,QAAQ,oBAAoB,KAAK,IAAG;IAE3E;;;;;IAKA,IAAI,cAAW;AACb,aACE,UAAU,QAAQ,MAAM,qBAAqB,QAAQ,0BAA0B,KAAK,IAAG;IAE3F;;AAOF,WAAS,QACP,QACA,iBAAgC;;AAEhC,QAAI,CAAC,OAAO,cAAc;AAExB,YAAM,oBAAoB,MACxB,WAAW,SAAS,QAAQ,eAAe;AAI7C,sBAAgB;QACd;QACA,QAAQ;;SAERA,MAAA,UAAK,QAAL,UAAK,SAAA,SAAL,MAAO,wBAAkB,QAAAA,QAAA,SAAAA,MAAI,KAAK,IAAG;MAAE,EAEtC,KAAK,CAAC,WAAU;AACf,wBAAgB;AAChB,gBAAQ;AACR,mBAAW,gBAAgB;AAC3B,eAAO;MACT,CAAC,EACA,MAAM,CAAC,WAAU;AAIhB,wBAAgB;AAChB,gBAAQ;AACR,mBAAW;AACX,cAAM;MACR,CAAC;IACL;AAEA,WAAO;EACT;AAEA,SAAO,OAAO,QAA2B,iBAAuD;AAc9F,UAAM,cACJ,aAAa,aAAa,YAAY,QAAQ,aAAa,MAAM,KAAK,OAAO;AAE/E,QAAI;AAAa,aAAO,QAAQ,QAAQ,YAAY;AAEpD,QAAI,OAAO,eAAe;AACxB,cAAQ,QAAQ,YAAY;IAC9B;AAEA,WAAO;EACT;AACF;;;AC5MO,IAAM,sCAAsC;AA8FnD,eAAe,wBAAwB,SAAgC;AACrE,QAAM,EAAE,QAAQ,gBAAgB,SAAAE,SAAO,IAAK;AAC5C,QAAM,kBAAmC;IACvC,aAAaA,SAAQ;IACrB,gBAAgBA,SAAQ;;AAE1B,QAAM,cAAc,MAAM,eAAe,QAAQ,eAAe;AAEhE,MAAI,aAAa;AACf,YAAQ,QAAQ,QAAQ,IAAI,iBAAiB,UAAU,YAAY,KAAK,EAAE;EAC5E;AACF;AAMA,SAAS,aAAa,UAA0B;AAC9C,QAAM,YAAY,SAAS,QAAQ,IAAI,kBAAkB;AACzD,MAAI,SAAS,WAAW,OAAO,WAAW;AACxC,WAAO;EACT;AACA;AACF;AAMM,SAAU,gCACd,SAA+C;;AAE/C,QAAM,EAAE,YAAY,QAAQ,mBAAkB,IAAK;AACnD,QAAMC,UAAS,QAAQ,UAAUA;AACjC,QAAM,YAAS,OAAA,OAAA,EACb,mBAAkBC,MAAA,uBAAkB,QAAlB,uBAAkB,SAAA,SAAlB,mBAAoB,sBAAgB,QAAAA,QAAA,SAAAA,MAAI,yBAC1D,6BAA6B,uBAAkB,QAAlB,uBAAkB,SAAA,SAAlB,mBAAoB,4BAA2B,GAEzE,kBAAkB;AAOvB,QAAM,iBAAiB,aACnB;IAAkB;;EAA0B,IAC5C,MAAM,QAAQ,QAAQ,IAAI;AAE9B,SAAO;IACL,MAAM;;;;;;;;;;;;;;IAcN,MAAM,YAAYF,UAA0B,MAAiB;AAC3D,UAAI,CAACA,SAAQ,IAAI,YAAW,EAAG,WAAW,UAAU,GAAG;AACrD,cAAM,IAAI,MACR,sFAAsF;MAE1F;AAEA,YAAM,UAAU,iBAAiB;QAC/B,QAAQ,MAAM,QAAQ,MAAM,IAAI,SAAS,CAAC,MAAM;QAChD,SAAAA;QACA;QACA,QAAAC;OACD;AAED,UAAI;AACJ,UAAI;AACJ,UAAI;AACF,mBAAW,MAAM,KAAKD,QAAO;MAC/B,SAAS,KAAU;AACjB,gBAAQ;AACR,mBAAW,IAAI;MACjB;AAEA,UACE,UAAU,gCACV,aAAQ,QAAR,aAAQ,SAAA,SAAR,SAAU,YAAW,OACrB,aAAa,QAAQ,GACrB;AAEA,cAAM,oBAAoB,MAAM,UAAU,4BAA4B;UACpE,QAAQ,MAAM,QAAQ,MAAM,IAAI,SAAS,CAAC,MAAM;UAChD,SAAAA;UACA;UACA;UACA,QAAAC;SACD;AAED,YAAI,mBAAmB;AACrB,iBAAO,KAAKD,QAAO;QACrB;MACF;AAEA,UAAI,OAAO;AACT,cAAM;MACR,OAAO;AACL,eAAO;MACT;IACF;;AAEJ;;;ACjNA,IAAY;CAAZ,SAAYG,WAAQ;AAIlB,EAAAA,UAAA,SAAA,IAAA;AAIA,EAAAA,UAAA,WAAA,IAAA;AACF,GATY,aAAA,WAAQ,CAAA,EAAA;AAwDpB,eAAsB,eACpB,gBACA,gBACA,MACA,IAAY;AAEZ,MAAI,CAAC,eAAe,SAAS;AAC3B,WAAO,KAAK,gBAAgB,gBAAgB,MAAS;;AAEvD,MAAI,QAAQ;AACZ,QAAM,IAAe,CAAC,UAAiD;AACrE,QAAI,EAAE,SAAS,MAAM,QAAQ,QAAQ;AACnC,aAAO,KAAK,gBAAgB,gBAAgB,MAAS;eAC5C,MAAM,QAAQ,KAAK,EAAE,OAAO,IAAI;AACzC,aAAO,EAAE,cAAc;WAClB;AACL,aAAO,MAAM,QAAQ,KAAK,EAAE,OAAO,OAAO,gBAAgB,CAAC;;EAE/D;AACA,MAAI,eAAe,QAAQ,KAAK,EAAE,OAAO,IAAI;AAC3C,WAAO,EAAE,cAAc;SAClB;AACL,WAAO,eAAe,QAAQ,KAAK,EAAE,OAAO,gBAAgB,gBAAgB,CAAC;;AAEjF;;;ACzFA,mCAAgC;;;ACUhC,IAAM,iCAAiC;AAIvC,IAAM,4BAA4B;AAIlC,IAAM,0BAA0B;AAIhC,IAAM,oBAAoB;AAI1B,IAAM,yBAAyB;AAI/B,IAAM,wCAAwC;AAI9C,IAAM,gCAAgC;AAItC,IAAM,6BAA6B;AAInC,IAAM,+BAA+B;AAIrC,IAAM,uCAAuC;AAI7C,IAAM,4BAA4B;AAIlC,IAAM,2BAA2B;AAIjC,IAAM,qBAAqB;AAI3B,IAAM,oBAAoB;AAI1B,IAAM,uBAAuB;AAS7B,IAAM,uBAAuB;AAM7B,IAAM,aAAa;AAKnB,IAAM,yBAAyB;EAC7B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAMF,SAAS,WAAW,eAA8B,MAAqB;AACrE,OACG,kBAAkB,cAAc,QAAQ,kBAAkB,cAAc,UACzE,uBAAuB,QAAQ,IAAI,MAAM,IACzC;AACA,WAAO;SACF;AACL,WAAO;;AAEX;AAMM,IAAO,qBAAP,MAAyB;EAK7B,YAAoB,eAA4B;AAA5B,SAAA,gBAAA;AAJZ,SAAA,WAAmB;AACnB,SAAA,2BAAmC;AACpC,SAAA,iBAAyB;EAEmB;;;;;EAK5C,MAAM,YACX,KACA,gBAAsC;AAEtC,QAAI,KAAK;AACP,UACE,KAAK,2BAA2B,KAAK,YACrC,WAAW,KAAK,eAAe,IAAI,IAAI,GACvC;AACA,uBAAe,QAAQ,EAAE,uBAAuB,UAAS,CAAE;AAC3D,aAAK;AACL,eAAO;;;AAGX,WAAO;EACT;;;;AC1IF,IAAa,+BAAb,MAAa,8BAA4B;;;;EAcvC,YACU,uBACA,eAA4B;AAD5B,SAAA,wBAAA;AACA,SAAA,gBAAA;AAER,SAAK,WAAW,8BAA6B;AAC7C,SAAK,2BAA2B;AAChC,SAAK,iBAAiB,8BAA6B;EACrD;;;;;EAMO,MAAM,YACX,KACA,gBACA,cACA,kBAAyB;AAEzB,QAAI,CAAC,KAAK;AACR,aAAO;;AAGT,QAAI,CAAC,gBAAgB,CAAC,kBAAkB;AACtC,aAAO;;AAGT,QAAI,CAAC,KAAK,sBAAsB,yBAAyB;AACvD,aAAO;;AAGT,QAAI,KAAK,4BAA4B,KAAK,UAAU;AAClD,aAAO;;AAGT,SAAK;AAEL,QAAI,cAAc,KAAK,aAAa,GAAG;AACrC,YAAM,KAAK,sBAAsB,sCAC/B,gBACA,gBAAgB;WAEb;AACL,YAAM,KAAK,sBAAsB,uCAC/B,gBACA,gBAAgB;;AAIpB,iBAAa,aAAa,KAAK;AAC/B,iBAAa,gCAAgC;AAC7C,iBAAa,mCAAmC;AAChD,mBAAe,QAAQ,EAAE,uBAAuB,oBAAmB,CAAE;AACrE,WAAO;EACT;;AA5DwB,6BAAA,WAAW;AACX,6BAAA,iBAAiB;;;ACdrC,IAAO,8BAAP,MAAkC;;;;;;;;EAiBtC,YACU,WAAmB,GACnB,yBAAiC,GACzC,mBAA2B,IAAE;AAFrB,SAAA,WAAA;AACA,SAAA,yBAAA;AAjBH,SAAA,2BAAmC;AAEnC,SAAA,0BAAkC;AAElC,SAAA,iBAAyB;AAgB9B,SAAK,cAAc,mBAAmB;AACtC,SAAK,2BAA2B;AAChC,SAAK,0BAA0B;EACjC;;;;;EAKO,MAAM,YACX,KACA,gBAAsC;AAGtC,QAAI,KAAK;AACP,UAAI,KAAK,2BAA2B,KAAK,UAAU;AACjD,aAAK;AACL,aAAK,iBAAiB;AAEtB,YAAI,KAAK,wBAAwB;AAC/B,eAAK,iBAAiB,KAAK;mBAClB,IAAI,gBAAgB;AAC7B,eAAK,iBAAiB,IAAI;;AAG5B,YAAI,KAAK,0BAA0B,KAAK,aAAa;AACnD,eAAK,2BAA2B,KAAK;AACrC,yBAAe,QAAQ,EAAE,uBAAuB,mBAAkB,CAAE;AACpE,iBAAO;;;;AAIb,WAAO;EACT;;;;ACjDI,IAAO,qBAAP,MAAyB;;;;EAS7B,YACU,uBACA,cACA,eACA,kBAAkC;AAHlC,SAAA,wBAAA;AACA,SAAA,eAAA;AACA,SAAA,gBAAA;AACA,SAAA,mBAAA;AAXH,SAAA,2BAA2B;AAE3B,SAAA,iBAAiB;EAUrB;;;;;;;EAQI,MAAM,YACX,KACA,gBACA,cAA2B;AAE3B,QAAI,CAAC,KAAK;AACR,aAAO;;AAGT,QAAI,CAAC,cAAc;AACjB,aAAO;;AAGT,QAAI,CAAC,KAAK,iBAAiB,yBAAyB;AAClD,aAAO;;AAGT,QACE,KAAK,sBAAsB,6BAA6B,KAAK,cAAc,KAAK,aAAa,GAC7F;AAEA,YAAM,YAAY,cAAc,KAAK,aAAa,IAC9C,MAAM,KAAK,sBAAsB,iBAAgB,IACjD,MAAM,KAAK,sBAAsB,kBAAiB;AACtD,UAAI,KAAK,2BAA2B,UAAU,QAAQ;AACpD,eAAO;aACF;AACL,aAAK;AACL,qBAAa;AACb,qBAAa,mCAAmC,KAAK,2BAA2B;AAChF,qBAAa,gCACX,KAAK,6BAA6B,UAAU;AAC9C,uBAAe,QAAQ,EAAE,uBAAuB,UAAS,CAAE;AAC3D,eAAO;;WAEJ;AACL,UAAI,KAAK,2BAA2B,GAAG;AACrC,eAAO;aACF;AACL,aAAK;AACL,qBAAa;AACb,qBAAa,mCAAmC;AAChD,qBAAa,gCAAgC;AAC7C,uBAAe,QAAQ,EAAE,uBAAuB,UAAS,CAAE;AAC3D,eAAO;;;EAGb;;;;AC/DI,IAAO,6BAAP,MAAiC;EAQrC,YACU,uBACA,SACA,YACA,cACA,eACA,yBAAgC;AALhC,SAAA,wBAAA;AACA,SAAA,UAAA;AACA,SAAA,aAAA;AACA,SAAA,eAAA;AACA,SAAA,gBAAA;AACA,SAAA,0BAAA;AAbF,SAAA,uBAAuB;AACvB,SAAA,kCAAkC;AACnC,SAAA,iBAAiB;AACjB,SAAA,qBAAqB;EAWzB;;;;;;EAOK,gCAA6B;AACnC,UAAM,UAAU,UAAU,YAAY,WAAW,KAAK;AACtD,UAAM,cAAc,UAAU,YAAY,eAAe,KAAK;AAC9D,QAAI,KAAK,eAAe,WAAW,OAAO,WAAW,aAAa;AAChE,aAAO;;AAET,WAAO;EACT;EAEO,MAAM,YACX,KACA,gBACA,cACA,kBAAyB;AAEzB,QAAI,CAAC,KAAK;AACR,aAAO;;AAET,QAAI,CAAC,gBAAgB,CAAC,kBAAkB;AACtC,aAAO;;AAGT,QAAI,IAAI,SAAS,oBAAoB,CAAC,KAAK,8BAA6B,GAAI;AAC1E,aAAO;;AAET,QAAI,CAAC,KAAK,yBAAyB;AACjC,aAAO;;AAET,QACE,IAAI,SAAS,YAAY,sBACzB,KAAK,sBAAsB,KAAK,iCAChC;AACA,aAAO;;AAET,QAAI,KAAK,sBAAsB,KAAK,sBAAsB;AACxD,aAAO;;AAET,UAAM,+BAA+B,KAAK,sBAAsB,6BAC9D,KAAK,cACL,KAAK,aAAa;AAEpB,UAAM,cAAc,cAAc,KAAK,aAAa;AAEpD,QAAI,CAAC,gCAAgC,CAAC,aAAa;AAEjD,aAAO;;AAET,SAAK;AAGL,iBAAa,2BAA2B,MAAM,KAAK,kBAAkB,KAAK,kBAAkB;AAC5F,mBAAe,QAAQ,EAAE,uBAAuB,mBAAkB,CAAE;AACpE,WAAO;EACT;;;;;;EAOQ,MAAM,kBAAkB,oBAA0B;AAExD,UAAM,0BAA0B,KAAK,sBAAsB;AAC3D,UAAM,cAAc,cAAc,KAAK,aAAa;AACpD,QAAI,gBAAgB;AAEpB,QAAI,4BAA4B,GAAG;AAEjC,sBAAgB,qBAAqB;WAChC;AAEL,UAAI,aAAa;AACf,cAAM,mBAAmB,MAAM,KAAK,sBAAsB,iBAAgB;AAC1E,YAAI,oBAAoB,iBAAiB,SAAS,GAAG;AACnD,0BAAgB,qBAAqB,iBAAiB;;aAEnD;AACL,cAAM,oBAAoB,MAAM,KAAK,sBAAsB,kBAAiB;AAC5E,YAAI,qBAAqB,kBAAkB,SAAS,GAAG;AACrD,0BAAgB,qBAAqB,kBAAkB;;;;AAI7D,WAAO;EACT;;;;AC/EF,eAAsB,QAAQ,EAC5B,gBACA,eAAe,EAAE,YAAY,EAAC,GAC9B,eACA,gBACA,gBAAAC,gBAAc,GACF;AAEZ,SAAO,kBACL,OAAO,wBAA+C;AACpD,wBAAoB,QAAQ,EAAE,qBAAqB,aAAa,WAAU,CAAE;AAC5E,QAAI,CAAC,eAAe;AAClB,sBAAgB;QACd,8BAA8B,IAAI,6BAChC,eAAe,uBACf,eAAe,aAAa;QAE9B,6BAA6B,IAAI,4BAC/B,eAAe,iBAAiB,aAAa,sBAC7C,eAAe,iBAAiB,aAAa,kCAC7C,eAAe,iBAAiB,aAAa,oBAAoB;QAEnE,wBAAwB,IAAI,mBAC1B,eAAe,uBACf,eAAe,cACf,eAAe,eACf,eAAe,gBAAgB;QAEjC,oBAAoB,IAAI,mBAAmB,eAAe,aAAa;QACvE,4BAA4B,IAAI,2BAC9B,eAAe,uBACf,eAAe,SACf,eAAe,QACf,eAAe,cACf,eAAe,eACf,eAAe,iBAAiB,uBAAuB;;;AAI7D,QAAI,gBAAgB,aAAa,+BAA+B;AAC9D,qBAAe,OAAO,kBAAkB,eAAe,IAAI;AAC3D,aAAO,eAAe,QAAQ,oBAAoB;;AAEpD,QAAI,gBAAgB,aAAa,0BAA0B;AACzD,qBAAe,WAAW,MAAM,eAAe,sBAAsB,uBACnE,qBACA,eAAe,cACf,eAAe,eACf,aAAa,wBAAwB;WAElC;AACL,qBAAe,WAAW,MAAM,eAAe,sBAAsB,uBACnE,qBACA,eAAe,cACf,eAAe,aAAa;;AAGhC,UAAM,mBAAmB,wBAAuB;AAChD,QAAI;AACF,YAAM,WAAW,MAAMA,gBAAe,qBAAqB,cAAc;AACzE,eAAS,QAAQ,UAAU,kBAAkB,IAC3C,cAAc,4BAA4B;AAC5C,eAAS,QAAQ,UAAU,yBAAyB,IAClD,cAAc,4BAA4B;AAC5C,aAAO;aACA,KAAU;AAEjB,UAAIC,eAA2B;AAC/B,YAAM,UAAU,IAAI,WAAW,CAAA;AAC/B,UACE,IAAI,SAAS,YAAY,aACzB,IAAI,SAAS,wBACZ,IAAI,SAAS,YAAY,cACvB,IAAI,cAAc,eAAe,2BAChC,IAAI,cAAc,eAAe,iBACrC;AACA,QAAAA,eAAc,cAAc;iBACnB,IAAI,SAAS,YAAY,iBAAiB;AACnD,QAAAA,eAAc,cAAc;iBAE5B,IAAI,SAAS,YAAY,YACzB,IAAI,cAAc,eAAe,yBACjC;AACA,QAAAA,eAAc,cAAc;iBACnB,IAAI,SAAS,YAAY,sBAAsB,IAAI,SAAS,kBAAkB;AACvF,QAAAA,eAAc,cAAc;aACvB;AACL,QAAAA,eAAc,cAAc;;AAE9B,YAAM,UAAU,MAAMA,aAAY,YAChC,KACA,qBACA,cACA,eAAe,QAAQ;AAEzB,UAAI,CAAC,SAAS;AACZ,gBAAQ,UAAU,kBAAkB,IAClC,cAAc,4BAA4B;AAC5C,gBAAQ,UAAU,yBAAyB,IACzC,cAAc,4BAA4B;AAC5C,YAAI,UAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GAAQ,IAAI,OAAO,GAAK,OAAO;AAC1C,cAAM;aACD;AACL,uBAAe;AACf,cAAM,SAAU,QAAgB,CAAC;AACjC,YAAI,WAAW,QAAW;AACxB,yBAAe,WAAW;;AAE5B,4BAAoB,wBAClB,kBACA,gBACA,aAAa,YACb,IAAI,MACJ,IAAI,gBACJ,OAAO;AAET,cAAM,MAAMA,aAAY,cAAc;AACtC,eAAO,QAAQ;UACb;UACA,gBAAAD;UACA;UACA;UACA;SACD;;;EAGP,GACA,gBACA,mBAAmB,YAAY;AAEnC;;;AC3KO,IAAI;AAIJ,IAAI;;;ACLX,IAAI;AAEE,SAAU,6BAA0B;AACxC,MAAI,CAAC,kBAAkB;AACrB,uBAAmB,wBAAuB;;AAG5C,SAAO;AACT;;;ARWA,IAAME,UAAsB,mBAAmB,gBAAgB;AAE/D,eAAe,eACb,gBACA,gBAA8B;AAE9B,SAAO,eAAe,gBAAgB,gBAAgB,aAAa,SAAS,OAAO;AACrF;AAKA,eAAe,YACb,gBACA,gBAAsC;AAOtC,QAAM,aAAa,IAAI,6CAAe;AACtC,QAAM,SAAS,WAAW;AAG1B,QAAM,aAAa,eAAe,WAAW,eAAe,QAAQ;AACpE,MAAI,YAAY;AACd,QAAI,WAAW,SAAS;AACtB,iBAAW,MAAK;WACX;AACL,iBAAW,iBAAiB,SAAS,MAAK;AACxC,mBAAW,MAAK;MAClB,CAAC;;;AAIL,QAAM,UAAU,WAAW,MAAK;AAC9B,eAAW,MAAK;EAClB,GAAG,eAAe,iBAAiB,cAAc;AAEjD,MAAI;AAEJ,MAAI,eAAe,MAAM;AACvB,mBAAe,OAAO,aAAa,eAAe,IAAI;;AAGxD,QAAM,cAAc,2BAA0B;AAC9C,QAAM,MAAM,WAAW,eAAe,UAAU,eAAe,IAAI;AACnE,QAAM,aAAa,kBAAkB,eAAe,OAAc;AAClE,QAAM,kBAAkB,sBAAsB;IAC5C;IACA,SAAS;IACT,QAAQ,eAAe;IACvB,aAAa;IACb,MAAM,eAAe;GACtB;AACD,MAAI,eAAe,cAAc;AAC/B,oBAAgB,QAAQ,eAAe;SAClC;AACL,UAAM,YAAY,IAAI,IAAI,GAAG;AAC7B,oBAAgB,QAAQ,UAAU,aAAa,SAAS,mBAAmB;;AAG7E,QAAM,mBAAmB,wBAAuB;AAChD,MAAI;AACF,QAAI,eAAe,UAAU;AAC3B,iBAAW,MAAM,eAAe,SAAS,YAAY,aAAa,eAAe;WAC5E;AACL,iBAAW,MAAM,YAAY,YAAY,eAAe;;WAEnD,OAAY;AACnB,QAAI,MAAM,SAAS,cAAc;AAE/B,UAAI,cAAc,WAAW,YAAY,MAAM;AAC7C,qBAAa,OAAO;AACpB,cAAM;;AAGR,YAAM,IAAI,aACR,yCAAyC,eAAe,iBAAiB,cAAc,KAAK;;AAGhG,UAAM;;AAGR,eAAa,OAAO;AACpB,QAAM,SACJ,SAAS,WAAW,OAAO,SAAS,WAAW,OAAO,SAAS,eAAe,KAC1E,OACA,KAAK,MAAM,SAAS,UAAU;AACpC,QAAM,kBAAkB,SAAS,QAAQ,OAAM;AAE/C,QAAM,YAAY,gBAAgB,UAAU,YAAY,SAAS,IAC7D,SAAS,gBAAgB,UAAU,YAAY,SAAS,GAAG,EAAE,IAC7D;AAEJ,iBAAe,4BACb,kBACA,gBACA,UACA,WACA,GAAG;AAGL,MAAI,SAAS,UAAU,KAAK;AAC1B,UAAM,gBAA+B,IAAI,cAAc,OAAO,OAAO;AACrE,IAAAA,QAAO,QACL,SAAS,SACP,MACA,eAAe,WACf,MACA,eAAe,OACf,MACA,OAAO,OAAO;AAGlB,kBAAc,OAAO,SAAS;AAC9B,kBAAc,OAAO;AACrB,kBAAc,UAAU;AAExB,QAAI,UAAU,YAAY,cAAc,iBAAiB;AACvD,oBAAc,aAAa,gBAAgB,UAAU,YAAY,UAAU;;AAG7E,QAAI,UAAU,YAAY,aAAa,iBAAiB;AACtD,oBAAc,YAAY;;AAG5B,QAAI,UAAU,YAAY,kBAAkB,iBAAiB;AAC3D,oBAAc,iBAAiB,SAC7B,gBAAgB,UAAU,YAAY,cAAc,GACpD,EAAE;AAEJ,aAAO,eAAe,eAAe,4BAA4B;QAC/D,KAAK,MAAK;AACR,iBAAO,cAAc;QACvB;OACD;;AAGH,UAAM;;AAER,SAAO;IACL,SAAS;IACT;IACA,MAAM,SAAS;IACf;;AAEJ;AAKA,eAAe,QACb,gBACA,gBAAsC;AAEtC,MAAI,eAAe,MAAM;AACvB,mBAAe,OAAO,aAAa,eAAe,IAAI;AACtD,QAAI,CAAC,eAAe,MAAM;AACxB,YAAM,IAAI,MAAM,+DAA+D;;;AAInF,SAAO,kBACL,OAAO,cAAqC;AAC1C,WAAoB,QAAQ;MAC1B,gBAAgB;MAChB;MACA;KACD;EACH,GACA,gBACA,mBAAmB,gBAAgB;AAEvC;AAEO,IAAM,iBAAiB;EAC5B;;;;AS7LF,IAAa,qBAAb,MAAa,oBAAkB;EAI7B,YACmB,SACA,WACA,kBACA,cAAqB;AAHrB,SAAA,UAAA;AACA,SAAA,YAAA;AACA,SAAA,mBAAA;AACA,SAAA,eAAA;AAEjB,QAAI,CAAC,KAAK,cAAc;AACtB,YAAM,oBAAoB,CAAA;AAC1B,iBAAW,CAAC,KAAK,KAAK,KAAK,KAAK,iBAAiB,QAAO,GAAI;AAC1D,0BAAkB,KAAK,GAAG,GAAG,GAAG,oBAAmB,yBAAyB,GAAG,KAAK,EAAE;;AAExF,YAAM,iBAAiB,kBAAkB,KAAK,oBAAmB,iBAAiB;AAClF,UAAI,mBAAmB,IAAI;AACzB,aAAK,eAAe,GAAG,KAAK,OAAO,GAAG,oBAAmB,iBAAiB,GAAG,KAAK,SAAS;aACtF;AACL,aAAK,eAAe,GAAG,KAAK,OAAO,GAAG,oBAAmB,iBAAiB,GAAG,KAAK,SAAS,GAAG,oBAAmB,iBAAiB,GAAG,cAAc;;;EAGzJ;EAEO,OAAO,OAAO,cAAoB;AACvC,UAAM,CAAC,YAAY,cAAc,GAAG,cAAc,IAAI,aAAa,MACjE,oBAAmB,iBAAiB;AAGtC,UAAM,UAAU,SAAS,YAAY,EAAE;AACvC,UAAM,YAAY,WAAW,YAAY;AAEzC,QAAI,OAAO,YAAY,YAAY,OAAO,cAAc,UAAU;AAChE,aAAO;;AAGT,UAAM,cAAc,oBAAI,IAAG;AAC3B,eAAW,iBAAiB,gBAAgB;AAC1C,YAAM,CAAC,aAAa,WAAW,IAAI,cAAc,MAC/C,oBAAmB,yBAAyB;AAG9C,UAAI,CAAC,eAAe,CAAC,aAAa;AAChC,eAAO;;AAGT,YAAM,WAAW,SAAS,aAAa,EAAE;AACzC,UAAI;AACJ,UAAI;AACF,mBAAW;eACJ,KAAU;AAEjB,eAAO;;AAET,UAAI,OAAO,aAAa,UAAU;AAChC,eAAO;;AAGT,kBAAY,IAAI,UAAU,QAAQ;;AAGpC,WAAO,IAAI,oBAAmB,SAAS,WAAW,aAAa,YAAY;EAC7E;EAEO,OAAO,OAAyB;AACrC,WAAO,CAAC,QACJ,QACA,KAAK,YAAY,MAAM,WACrB,KAAK,cAAc,MAAM,aACzB,KAAK,uBAAuB,MAAM,gBAAgB;EAC1D;EAEO,MAAM,OAAyB;AACpC,QAAI,SAAS,MAAM;AACjB,YAAM,IAAI,MAAM,+CAA+C;;AAGjE,QACE,KAAK,YAAY,MAAM,WACvB,KAAK,iBAAiB,SAAS,MAAM,iBAAiB,MACtD;AACA,YAAM,IAAI,MACR,2BAA2B,KAAK,YAAY,QAAQ,MAAM,YAAY,0BAA0B;;AAIpG,UAAM,CAAC,2BAA2B,wBAAwB,IAGtD,KAAK,UAAU,MAAM,UAAU,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,KAAK;AAE/D,UAAM,0BAA0B,oBAAI,IAAG;AAEvC,eAAW,CAAC,UAAU,YAAY,KAAK,0BAA0B,iBAAiB,QAAO,GAAI;AAC3F,YAAM,cAAc,yBAAyB,iBAAiB,IAAI,QAAQ;AAC1E,UAAI,aAAa;AACf,gCAAwB,IAAI,UAAU,IAAI,cAAc,WAAW,CAAC;iBAC3D,KAAK,YAAY,MAAM,SAAS;AACzC,cAAM,IAAI,MACR,+DAA+D,KAAK,YAAY,iBAAiB,KAAK,YAAY,EAAE;aAEjH;AACL,gCAAwB,IAAI,UAAU,YAAY;;;AAItD,WAAO,IAAI,oBACT,KAAK,IAAI,KAAK,SAAS,MAAM,OAAO,GACpC,KAAK,IAAI,KAAK,WAAW,MAAM,SAAS,GACxC,uBAAuB;EAE3B;EAEO,WAAQ;AACb,WAAO,KAAK;EACd;EAEQ,uBAAuB,OAA0B;AACvD,QAAI,KAAK,iBAAiB,SAAS,MAAM,MAAM;AAC7C,aAAO;;AAGT,eAAW,CAAC,UAAU,QAAQ,KAAK,KAAK,iBAAiB,QAAO,GAAI;AAClE,YAAM,gBAAgB,MAAM,IAAI,QAAQ;AAExC,UAAI,aAAa,eAAe;AAC9B,eAAO;;;AAGX,WAAO;EACT;;AAjIwB,mBAAA,oBAAoB;AACpB,mBAAA,4BAA4B;AAsItD,SAAS,IAAI,MAAc,MAAY;AAErC,MAAI,KAAK,WAAW,KAAK,QAAQ;AAC/B,WAAO,OAAO,OAAO,OAAO;aACnB,KAAK,SAAS,KAAK,QAAQ;AACpC,WAAO;SACF;AACL,WAAO;;AAEX;;;ACrJA,IAAa,mBAAb,MAAa,kBAAgB;EAI3B,YACU,uCAAuC,oBAAI,IAAG,GAC9C,sCAAsC,oBAAI,IAAG,GAA2C;AADxF,SAAA,uCAAA;AACA,SAAA,sCAAA;EACP;EAEI,IAAIC,UAAuB;AAChC,QAAI,CAACA,UAAS;AACZ,YAAM,IAAI,MAAM,wBAAwB;;AAE1C,UAAM,iBAAiB,iBAAiB,YAAYA,SAAQ,eAAe,CAAC;AAC5E,UAAM,oBAAoB,KAAK,iCAAiC,cAAc;AAC9E,WAAO,kBAAiB,8BAA8B,iBAAiB;EACzE;EAEO,OAAOA,UAAuB;AACnC,QAAI;AACJ,UAAM,kBAAkB,YAAYA,SAAQ,eAAe;AAC3D,UAAM,iBAAiB,iBAAiB,eAAe;AACvD,QAAI,gBAAgB;AAClB,6BAAuB,KAAK,qCAAqC,IAAI,cAAc;AACnF,WAAK,qCAAqC,OAAO,cAAc;;AAEjE,QAAI,yBAAyB,QAAW;AACtC,WAAK,oCAAoC,OAAO,oBAAoB;;EAExE;EAEO,IAAIA,UAAyB,YAAyB;AAE3D,QACE,CAAC,cACD,kBAAiB,oBAAoBA,SAAQ,cAAcA,SAAQ,aAAa,GAChF;AACA;;AAGF,UAAM,qBAAqB,WAAW,UAAU,YAAY,YAAY;AACxE,QAAI,CAAC,oBAAoB;AACvB;;AAGF,UAAM,gBAAgB,KAAK,iBAAiBA,UAAS,UAAU;AAE/D,UAAM,UAAU,CAACA,SAAQ,cACrBA,SAAQ,aACR,WAAW,UAAU,YAAY,OAAO,KAAKA,SAAQ;AAEzD,QAAI,CAAC,SAAS;AACZ;;AAGF,QAAI,iBAAiB,KAAK,gBAAgB,OAAO,GAAG;AAClD,UAAI,CAAC,KAAK,oCAAoC,IAAI,OAAO,GAAG;AAC1D,aAAK,oCAAoC,IAAI,SAAS,oBAAI,IAAG,CAAE;;AAGjE,UAAI,CAAC,KAAK,qCAAqC,IAAI,aAAa,GAAG;AACjE,aAAK,qCAAqC,IAAI,eAAe,OAAO;;AAGtE,YAAM,4BAA4B,KAAK,oCAAoC,IAAI,OAAO;AACtF,wBAAiB,mBAAmB,oBAAoB,yBAAyB;;EAErF;EAEQ,gBAAgB,SAAe;AAKrC,WAAO,qBAAK,QAAQ,QAAQ,MAAM,GAAG,CAAC,EAAE,WAAW;EACrD;EAEQ,iCACN,gBAAsB;AAEtB,QAAI,oBAAqD;AACzD,QAAI,kBAAkB,KAAK,qCAAqC,IAAI,cAAc,GAAG;AACnF,0BAAoB,KAAK,oCAAoC,IAC3D,KAAK,qCAAqC,IAAI,cAAc,CAAC;;AAIjE,WAAO;EACT;EAEQ,OAAO,8BAA8B,QAAuC;AAClF,QAAI,CAAC,UAAU,OAAO,SAAS,GAAG;AAChC,aAAO,kBAAiB;;AAG1B,QAAI,SAAS;AACb,eAAW,CAAC,OAAO,KAAK,KAAK,OAAO,QAAO,GAAI;AAC7C,gBACE,QACA,kBAAiB,mCACjB,MAAM,SAAQ,IACd,kBAAiB;;AAErB,WAAO,OAAO,MAAM,GAAG,EAAE;EAC3B;EAEQ,OAAO,mBACb,gBACA,wBAAuD;AAEvD,QAAI,CAAC,gBAAgB;AACnB;;AAGF,UAAM,kBAAkB,eAAe,MAAM,kBAAiB,uBAAuB;AACrF,eAAW,iBAAiB,iBAAiB;AAC3C,YAAM,gBAAgB,cAAc,MAAM,kBAAiB,gCAAgC;AAC3F,UAAI,cAAc,WAAW,GAAG;AAC9B;;AAGF,YAAM,QAAQ,cAAc,CAAC;AAC7B,YAAM,WAAW,mBAAmB,OAAO,cAAc,CAAC,CAAC;AAC3D,YAAM,gBAAgB,CAAC,uBAAuB,IAAI,KAAK,IACnD,WACA,uBAAuB,IAAI,KAAK,EAAE,MAAM,QAAQ;AACpD,6BAAuB,IAAI,OAAO,aAAa;;EAEnD;;EAGQ,OAAO,oBACb,cACA,eAA4B;AAE5B,QACE,iBAAiB,UAAU,KAAK,qBAChC,iBAAiB,UAAU,KAAK,wBAChC,iBAAiB,UAAU,KAAK,oBAChC,iBAAiB,UAAU,KAAK,0BAChC,iBAAiB,UAAU,KAAK,uBAChC,iBAAiB,UAAU,KAAK,8BAChC,iBAAiB,UAAU,KAAK,iCAC/B,iBAAiB,UAAU,KAAK,0BAC/B,kBAAkB,cAAc,OAClC;AACA,aAAO;;AAGT,WAAO;EACT;EAEQ,iBAAiBA,UAAyB,SAAsB;AACtE,QAAI,gBAAgB,QAAQ,UAAU,YAAY,aAAa;AAC/D,QAAI,CAAC,eAAe;AAClB,sBAAgB,YAAYA,SAAQ,eAAe;;AAGrD,WAAO,iBAAiB,aAAuB;EACjD;;AA9JwB,iBAAA,sBAAsB;AACtB,iBAAA,0BAA0B;AAC1B,iBAAA,mCAAmC;;;ACTvD,SAAU,SAAS,YAAkB;AACzC,SAAO,IAAI,IAAI,UAAU;AAC3B;AAEM,SAAU,iBAAiB,KAAW;AAC1C,SAAO,IAAI,IAAI,GAAG,EAAE,KAAK,QAAQ,OAAO,EAAE;AAC5C;;;ACSM,IAAO,sBAAP,MAA0B;EAAhC,cAAA;AACU,SAAA,SAAsB,mBAAmB,qBAAqB;EAIxE;EAHS,MAAM,MAAM,iBAAuB;AACxC,SAAK,OAAO,QAAQ,eAAe;EACrC;;AAOI,IAAO,uBAAP,MAA2B;EACxB,MAAM,MAAM,kBAAwB;EAE3C;;;;ACvBI,IAAO,6BAAP,MAAiC;EACrC,OAAO,kBAAmC;AACxC,WAAO,KAAK,UAAU,gBAAgB;EACxC;;;;ACTF,IAAMC,QAAO;AA6Cb,IAAMC,UAAsB,mBAAmB,eAAe;AAE9D,IAAM,uBAAuB;AAC7B,IAAM,cAAc,UAAU;AAKxB,IAAO,gBAAP,MAAoB;EAOxB,YACU,qBACA,uBACA,cACD,iBAAwC;AAHvC,SAAA,sBAAA;AACA,SAAA,wBAAA;AACA,SAAA,eAAA;AACD,SAAA,kBAAA;AAEP,SAAK,mBAAmB,oBAAoB;AAC5C,SAAK,mBAAmB,IAAI,iBAAgB;AAC5C,SAAK,8BAA8B,CAAA;AACnC,SAAK,WAAW;AAChB,QAAI,oBAAoB,gBAAgB;AACtC,WAAK,WAAW,oBAAmB;AACnC,YAAM,eAAe,iBAAiB,oBAAoB,QAAQ;AAClE,YAAM,QAAQ,GAAG,YAAY;AAC7B,WAAK,SAAS,UACZ,gCAAgC;QAC9B,YAAY,oBAAoB;QAChC,QAAQ;QACR,oBAAoB;UAClB,MAAM,iBAAiB,EAAE,SAAAC,UAAS,eAAc,GAAE;AAChD,kBAAM,gBAAgB,MAAM,eAAe,CAAC,KAAK,GAAG,CAAA,CAAE;AACtD,kBAAM,cAAc;AACpB,kBAAM,qBAAqB,GAAG,WAAW,GAAG,cAAc,KAAK;AAC/D,YAAAA,SAAQ,QAAQ,IAAI,iBAAiB,kBAAkB;UACzD;;OAEH,CAAC;;AAGN,SAAK,6BAA6B,eAAe;EACnD;;EAEO,MAAM,KAAQ,EACnB,MACA,cACA,YACA,UAAU,CAAA,GACV,cACA,eAAc,GAQf;AACC,QAAI;AACF,YAAMA,WAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,yCAAwC,CAAE,GAAA;QAClD,QAAQ,WAAW;QACnB;QACA,eAAe,cAAc;QAC7B;QACA;QACA;QACA;MAAY,CAAA;AAEd,qBAAe,QAAQ;QACrB,eAAe,cAAc;QAC7B;OACD;AAED,MAAAA,SAAQ,UAAU,MAAM,KAAK,aAAaA,QAAO;AACjD,WAAK,kBAAkBA,QAAO;AAG9B,MAAAA,SAAQ,WAAW,MAAM,KAAK,sBAAsB,uBAClD,gBACAA,SAAQ,cACRA,SAAQ,aAAa;AAEvB,YAAM,WAAW,MAAM,eACrB,gBACAA,UACA,eAAe,SACf,SAAS,SAAS;AAEpB,WAAK,oBAAoB,QAAW,MAAM,cAAc,MAAM,SAAS,OAAO;AAC9E,aAAO;aACA,KAAU;AACjB,WAAK,oBAAoB,KAAK,MAAM,cAAc,QAAS,IAAsB,OAAO;AACxF,YAAM;;EAEV;EAEO,MAAM,UAAa,EACxB,MACA,cACA,YACA,UACA,OACA,SACA,gBACA,qBACA,cACA,UACA,OAAM,GAaP;AAIC,UAAMA,WAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,yCAAwC,CAAE,GAAA;MAClD,QAAQ,WAAW;MACnB;MACA,eAAe,cAAc;MAC7B;MACA;MACA;MACA;MACA,MAAM;MACN;IAAY,CAAA;AAEd,mBAAe,QAAQ;MACrB,eAAe,cAAc;MAC7B;KACD;AACD,UAAM,YAAYF,MAAI;AACtB,QAAI,UAAU,QAAW;AACvB,MAAAE,SAAQ,SAAS,WAAW;;AAE9B,IAAAA,SAAQ,WAAW,MAAM,KAAK,sBAAsB,uBAClD,gBACAA,SAAQ,cACRA,SAAQ,aAAa;AAEvB,IAAAA,SAAQ,UAAU,MAAM,KAAK,aAAaA,QAAO;AAEjD,QAAI,aAAa,UAAa,WAAW,QAAW;AAClD,MAAAA,SAAQ,QAAQ,YAAY,QAAQ,IAAI;AACxC,MAAAA,SAAQ,QAAQ,YAAY,MAAM,IAAI;AACtC,MAAAA,SAAQ,QAAQ,YAAY,eAAe,IAAI;;AAGjD,QAAI,UAAU,QAAW;AACvB,MAAAA,SAAQ,QAAQ,YAAY,OAAO,IAAI;AACvC,MAAAA,SAAQ,QAAQ,YAAY,WAAW,IAAI;AAC3C,UAAI,OAAO,UAAU,UAAU;AAC7B,QAAAA,SAAQ,OAAO,EAAE,MAAK;;;AAG1B,SAAK,kBAAkBA,QAAO;AAC9B,IAAAD,QAAO,KACL,WACE,YACA,cACCC,SAAQ,sBAAsB,aAAaA,SAAQ,sBAAsB,GAAG;AAEjF,IAAAD,QAAO,QAAQC,QAAO;AACtB,UAAM,QAAQ,KAAK,IAAG;AACtB,UAAM,WAAW,MAAM,eAAe,QAAQA,UAAS,cAAc;AACrE,IAAAD,QAAO,KAAK,WAAW,YAAY,kBAAkB,KAAK,IAAG,IAAK,SAAS,IAAI;AAC/E,SAAK,oBAAoB,QAAW,MAAM,cAAc,OAAO,SAAS,OAAO;AAC/E,WAAO,KAAK,yBAAyB,UAAU,CAAC,CAAC,OAAO,QAAQ;EAClE;EAEO,MAAM,aACX,MACA,cACA,YACA,OACA,UAAuB,CAAA,GACvB,gBAAsC;AAEtC,UAAMC,WAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,yCAAwC,CAAE,GAAA;MAClD,QAAQ,WAAW;MACnB;MACA,eAAe,cAAc;MAC7B;MACA;MACA;MACA,MAAM;IAAK,CAAA;AAEb,mBAAe,QAAQ;MACrB,eAAe,cAAc;MAC7B;KACD;AACD,IAAAA,SAAQ,WAAW,MAAM,KAAK,sBAAsB,uBAClD,gBACAA,SAAQ,cACRA,SAAQ,aAAa;AAEvB,IAAAA,SAAQ,UAAU,MAAM,KAAK,aAAaA,QAAO;AACjD,IAAAA,SAAQ,QAAQ,YAAY,WAAW,IAAI;AAC3C,IAAAA,SAAQ,QAAQ,YAAY,YAAY,IAAI;AAC5C,IAAAA,SAAQ,QAAQ,YAAY,sBAAsB,IAChD;AACF,IAAAA,SAAQ,QAAQ,YAAY,WAAW,IAAI;AAC3C,QAAI,OAAO,UAAU,UAAU;AAC7B,MAAAA,SAAQ,OAAO,EAAE,MAAK;;AAGxB,SAAK,kBAAkBA,QAAO;AAC9B,UAAM,WAAW,MAAM,eAAe,QAAQA,UAAS,cAAc;AACrE,SAAK,oBAAoB,QAAW,MAAM,cAAc,OAAO,SAAS,OAAO;AAC/E,WAAO;EACT;EAEO,wBACL,gBACA,OACA,SAAqB;AAErB,UAAM,OAAO,gBAAgB,gBAAgB,aAAa,QAAQ;AAClE,UAAM,KAAK,cAAc,cAAc;AACvC,UAAM,KAA4B,OAAO,UAAU,iBAAgB;AACjE,YAAM,WAAW,MAAM,KAAK,UAAU;QACpC;QACA,cAAc,aAAa;QAC3B,YAAY;QACZ,UAAU,CAAC,WAAW,OAAO;QAC7B;QACA,SAAS;QACT,gBAAgB;OACjB;AACD,aAAO;IACT;AACA,WAAO,IAAI,cAAiC,MAAM,OAAO,SAAS,EAAE;EACtE;EAEO,MAAM,OAAU,EACrB,MACA,cACA,YACA,UAAU,CAAA,GACV,cACA,SAAS,WAAW,QACpB,eAAc,GASf;AACC,QAAI;AACF,YAAMA,WAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,yCAAwC,CAAE,GAAA;QAClD;QACA,eAAe,cAAc;QAC7B;QACA;QACA;QACA;QACA;MAAY,CAAA;AAEd,qBAAe,QAAQ;QACrB,eAAe,cAAc;QAC7B;OACD;AACD,MAAAA,SAAQ,UAAU,MAAM,KAAK,aAAaA,QAAO;AACjD,WAAK,kBAAkBA,QAAO;AAE9B,MAAAA,SAAQ,WAAW,MAAM,KAAK,sBAAsB,uBAClD,gBACAA,SAAQ,cACRA,SAAQ,aAAa;AAEvB,YAAM,WAAW,MAAM,eACrB,gBACAA,UACA,eAAe,SACf,SAAS,SAAS;AAEpB,UAAI,UAAU,IAAI,EAAE,SAAS,SAAS;AACpC,aAAK,oBAAoB,QAAW,MAAM,cAAc,QAAQ,SAAS,OAAO;aAC3E;AACL,aAAK,kBAAkB,IAAI;;AAE7B,aAAO;aACA,KAAU;AACjB,WAAK,oBAAoB,KAAK,MAAM,cAAc,QAAS,IAAsB,OAAO;AACxF,YAAM;;EAEV;EAEO,MAAM,MAAS,EACpB,MACA,MACA,cACA,YACA,UAAU,CAAA,GACV,cACA,eAAc,GASf;AACC,QAAI;AACF,YAAMA,WAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,yCAAwC,CAAE,GAAA;QAClD,QAAQ,WAAW;QACnB,eAAe,cAAc;QAC7B;QACA;QACA;QACA;QACA;QACA;MAAY,CAAA;AAEd,qBAAe,QAAQ;QACrB,eAAe,cAAc;QAC7B;OACD;AACD,MAAAA,SAAQ,UAAU,MAAM,KAAK,aAAaA,QAAO;AACjD,WAAK,kBAAkBA,QAAO;AAG9B,MAAAA,SAAQ,WAAW,MAAM,KAAK,sBAAsB,uBAClD,gBACAA,SAAQ,cACRA,SAAQ,aAAa;AAEvB,YAAM,WAAW,MAAM,eACrB,gBACAA,UACA,eAAe,SACf,SAAS,SAAS;AAEpB,WAAK,oBAAoB,QAAW,MAAM,cAAc,OAAO,SAAS,OAAO;AAC/E,aAAO;aACA,KAAU;AACjB,WAAK,oBAAoB,KAAK,MAAM,cAAc,QAAS,IAAsB,OAAO;AACxF,YAAM;;EAEV;EAEO,MAAM,OAAiB,EAC5B,MACA,MACA,cACA,YACA,gBACA,UAAU,CAAA,GACV,aAAY,GASb;AACC,QAAI;AACF,YAAMA,WAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,yCAAwC,CAAE,GAAA;QAClD,QAAQ,WAAW;QACnB,eAAe,cAAc;QAC7B;QACA;QACA;QACA;QACA;QACA;MAAY,CAAA;AAEd,qBAAe,QAAQ;QACrB,eAAe,cAAc;QAC7B;OACD;AACD,MAAAA,SAAQ,UAAU,MAAM,KAAK,aAAaA,QAAO;AAEjD,WAAK,kBAAkBA,QAAO;AAE9B,MAAAA,SAAQ,WAAW,MAAM,KAAK,sBAAsB,uBAClD,gBACAA,SAAQ,cACRA,SAAQ,aAAa;AAEvB,YAAM,WAAW,MAAM,eACrB,gBACAA,UACA,eAAe,SACf,SAAS,SAAS;AAEpB,WAAK,oBAAoB,QAAW,MAAM,cAAc,QAAQ,SAAS,OAAO;AAChF,aAAO;aACA,KAAU;AACjB,WAAK,oBAAoB,KAAK,MAAM,cAAc,QAAS,IAAsB,OAAO;AACxF,YAAM;;EAEV;EAEQ,yBACN,KACA,SACA,UAAmD;AAEnD,QAAI,SAAS;AACX,aAAO;QACL,QAAQ,SAAS,IAAI,MAAM;QAC3B,SAAS,IAAI;QACb,MAAM,IAAI;;WAEP;AACL,YAAM,YAAY,SAAS,IAAI,MAAM,EAAE,IAAI,CAAC,SAAc,IAAI;AAC9D,aAAO;QACL,QAAQ;QACR,SAAS,IAAI;QACb,MAAM,IAAI;;;EAGhB;EAEQ,kBAAkB,gBAA8B;AACtD,UAAMA,WAAU,KAAK,iBAAiB,eAAe,IAAI;AAEzD,QAAI,eAAe,WAAW,eAAe,QAAQ,YAAY,YAAY,GAAG;AAC9E;;AAGF,UAAM,qBAAuC,eAAe,QAC1D,YAAY,gBAAgB;AAE9B,QAAI,CAAC,oBAAoB;AACvB;;AAGF,QAAI,uBAAuB,iBAAiB,SAAS;AACnD;;AAGF,QAAIA,SAAQ,iBAAiB;AAC3B,YAAM,eAAe,KAAK,iBAAiB,IAAIA,QAAO;AACtD,UAAI,cAAc;AAChB,uBAAe,QAAQ,YAAY,YAAY,IAAI;;;EAGzD;EAEO,MAAM,QAAW,EACtB,MACA,MACA,cACA,YACA,UAAU,CAAA,GACV,cACA,eAAc,GASf;AACC,QAAI;AACF,YAAMA,WAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,yCAAwC,CAAE,GAAA;QAClD,QAAQ,WAAW;QACnB,eAAe,cAAc;QAC7B;QACA;QACA;QACA;QACA;QACA;MAAY,CAAA;AAEd,qBAAe,QAAQ;QACrB,eAAe,cAAc;QAC7B;OACD;AACD,MAAAA,SAAQ,UAAU,MAAM,KAAK,aAAaA,QAAO;AACjD,WAAK,kBAAkBA,QAAO;AAG9B,MAAAA,SAAQ,WAAW,MAAM,KAAK,sBAAsB,uBAClD,gBACAA,SAAQ,cACRA,SAAQ,aAAa;AAEvB,YAAM,WAAW,MAAM,eACrB,gBACAA,UACA,eAAe,SACf,SAAS,SAAS;AAEpB,WAAK,oBAAoB,QAAW,MAAM,cAAc,SAAS,SAAS,OAAO;AACjF,aAAO;aACA,KAAU;AACjB,WAAK,oBAAoB,KAAK,MAAM,cAAc,QAAS,IAAsB,OAAO;AACxF,YAAM;;EAEV;EAEO,MAAM,OAAiB,EAC5B,MACA,MACA,cACA,YACA,UAAU,CAAA,GACV,cACA,eAAc,GASf;AACC,QAAI;AACF,YAAMA,WAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,yCAAwC,CAAE,GAAA;QAClD,QAAQ,WAAW;QACnB,eAAe,cAAc;QAC7B;QACA;QACA;QACA;QACA;QACA;MAAY,CAAA;AAEd,qBAAe,QAAQ;QACrB,eAAe,cAAc;QAC7B;OACD;AACD,MAAAA,SAAQ,UAAU,MAAM,KAAK,aAAaA,QAAO;AACjD,MAAAA,SAAQ,QAAQ,YAAY,QAAQ,IAAI;AACxC,WAAK,kBAAkBA,QAAO;AAG9B,MAAAA,SAAQ,WAAW,MAAM,KAAK,sBAAsB,uBAClD,gBACAA,SAAQ,cACRA,SAAQ,aAAa;AAEvB,YAAM,WAAW,MAAM,eACrB,gBACAA,UACA,eAAe,SACf,SAAS,SAAS;AAEpB,WAAK,oBAAoB,QAAW,MAAM,cAAc,QAAQ,SAAS,OAAO;AAChF,aAAO;aACA,KAAU;AACjB,WAAK,oBAAoB,KAAK,MAAM,cAAc,QAAS,IAAsB,OAAO;AACxF,YAAM;;EAEV;EAEO,MAAM,QAAW,EACtB,WACA,QACA,UAAU,CAAA,GACV,cACA,eAAc,GAOf;AAGC,QAAI,WAAW,QAAQ,WAAW,UAAa,CAAC,MAAM,QAAQ,MAAM,GAAG;AACrE,eAAS,CAAC,MAAM;;AAElB,UAAM,OAAO,gBAAgB,SAAS;AACtC,UAAM,KAAK,cAAc,SAAS;AAElC,UAAMA,WAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,yCAAwC,CAAE,GAAA,EAClD,QAAQ,WAAW,MACnB,eAAe,cAAc,SAC7B,MACA,cAAc,aAAa,OAC3B,SACA,YAAY,IACZ,MAAM,QACN,aAAY,CAAA;AAEd,mBAAe,QAAQ;MACrB,eAAe,cAAc;MAC7B,cAAc,aAAa;KAC5B;AACD,IAAAA,SAAQ,UAAU,MAAM,KAAK,aAAaA,QAAO;AAEjD,IAAAA,SAAQ,WAAW,MAAM,KAAK,sBAAsB,uBAClD,gBACAA,SAAQ,cACRA,SAAQ,aAAa;AAEvB,UAAM,WAAW,MAAM,eACrB,gBACAA,UACA,eAAe,SACf,SAAS,SAAS;AAEpB,WAAO;EACT;;;;;;EAOO,MAAM,mBACX,gBACA,UAA0B,CAAA,GAAE;AAE5B,UAAM,WAAW,QAAQ,iBAAiB,KAAK,oBAAoB;AACnE,UAAMA,WAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,yCAAwC,CAAE,GAAA,EAClD,UACA,QAAQ,WAAW,KACnB,eAAe,cAAc,MAC7B,MAAM,IACN,cAAc,aAAa,MAC3B,QAAO,CAAA;AAET,mBAAe,QAAQ;MACrB,eAAe,cAAc;MAC7B,cAAc,aAAa;KAC5B;AACD,IAAAA,SAAQ,UAAU,MAAM,KAAK,aAAaA,QAAO;AAEjD,UAAM,EAAE,QAAQ,SAAS,MAAM,WAAW,YAAW,IAAK,MAAM,eAC9D,gBACAA,UACA,eAAe,SACf,SAAS,SAAS;AAGpB,UAAM,kBAAkB,IAAI,gBAAgB,QAAQ,OAAO;AAC3D,WAAO;MACL,QAAQ;MACR;MACA;MACA;MACA;;EAEJ;EAEO,iBAAiB,gBAAsC;AAC5D,WAAO,KAAK,sBAAsB,iBAAiB,cAAc;EACnE;EAEO,gBAAgB,gBAAsC;AAC3D,WAAO,KAAK,sBAAsB,gBAAgB,cAAc;EAClE;EAEO,oBAAiB;AACtB,WAAO,KAAK,sBAAsB,kBAAiB;EACrD;EAEO,mBAAgB;AACrB,WAAO,KAAK,sBAAsB,iBAAgB;EACpD;EAEO,MAAM,MAAS,EACpB,MACA,MACA,cACA,YACA,UAAU,CAAA,GACV,eAAc,GAQf;AACC,QAAI;AACF,YAAMA,WAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,yCAAwC,CAAE,GAAA;QAClD,QAAQ,WAAW;QACnB,eAAe,cAAc;QAC7B;QACA;QACA,cAAc,aAAa;QAC3B;QACA;QACA;MAAY,CAAA;AAEd,qBAAe,QAAQ;QACrB,eAAe,cAAc;QAC7B,cAAc,aAAa;OAC5B;AACD,MAAAA,SAAQ,UAAU,MAAM,KAAK,aAAaA,QAAO;AACjD,MAAAA,SAAQ,QAAQ,YAAY,cAAc,IAAI;AAC9C,MAAAA,SAAQ,QAAQ,YAAY,aAAa,IAAI;AAE7C,WAAK,kBAAkBA,QAAO;AAE9B,MAAAA,SAAQ,WAAW,MAAM,KAAK,sBAAsB,uBAClD,gBACAA,SAAQ,cACRA,SAAQ,aAAa;AAEvB,YAAM,WAAW,MAAM,eACrB,gBACAA,UACA,eAAe,SACf,SAAS,SAAS;AAEpB,WAAK,oBAAoB,QAAW,MAAM,cAAc,OAAO,SAAS,OAAO;AAC/E,eAAS,cAAc,eAAe,aAAa,KAAK,gBAAe,CAAE;AACzE,aAAO;aACA,KAAU;AACjB,WAAK,oBAAoB,KAAK,MAAM,cAAc,QAAS,IAAsB,OAAO;AACxF,YAAM;;EAEV;EAEO,MAAM,KAAQ,EACnB,MACA,MACA,qBACA,YACA,cAAc,CAAA,GACd,UAAU,CAAA,GACV,eAAc,GASf;AACC,QAAI;AACF,YAAMA,WAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,yCAAwC,CAAE,GAAA;QAClD,QAAQ,WAAW;QACnB,eAAe,cAAc;QAC7B;QACA;QACA,cAAc,aAAa;QAC3B;QACA;MAAO,CAAA;AAET,qBAAe,QAAQ;QACrB,eAAe,cAAc;QAC7B,cAAc,aAAa;OAC5B;AACD,MAAAA,SAAQ,UAAU,MAAM,KAAK,aAAaA,QAAO;AACjD,MAAAA,SAAQ,QAAQ,YAAY,cAAc,IAAI;AAC9C,MAAAA,SAAQ,QAAQ,YAAY,mBAAmB,IAAI;AACnD,MAAAA,SAAQ,QAAQ,YAAY,aAAa,IAAI;AAC7C,MAAAA,SAAQ,QAAQ,YAAY,oBAAoB,IAAI,YAAY,mBAAmB;AAEnF,WAAK,kBAAkBA,QAAO;AAE9B,MAAAA,SAAQ,WAAW,MAAM,KAAK,sBAAsB,uBAClD,gBACAA,SAAQ,cACRA,SAAQ,aAAa;AAEvB,YAAM,WAAW,MAAM,eACrB,gBACAA,UACA,eAAe,SACf,SAAS,SAAS;AAEpB,WAAK,oBAAoB,QAAW,MAAM,cAAc,OAAO,SAAS,OAAO;AAC/E,aAAO;aACA,KAAU;AACjB,WAAK,oBAAoB,KAAK,MAAM,cAAc,QAAS,IAAsB,OAAO;AACxF,YAAM;;EAEV;EAEQ,oBACN,KACA,MACA,eACA,YAAyB;AAEzB,UAAMA,WAAU,KAAK,iBAAiB,IAAI;AAC1C,IAAAA,SAAQ,gBAAgB;AACxB,QACE,CAAC,OACA,CAAC,KAAK,iBAAiBA,SAAQ,YAAY,MACzC,IAAI,SAAS,YAAY,sBACxB,IAAI,SAAS,YAAY,YACxB,IAAI,SAAS,YAAY,YACxB,IAAI,cAAc,eAAe,0BACvC;AACA,WAAK,iBAAiB,IAAIA,UAAS,UAAU;;EAEjD;EAEO,kBAAkB,MAAY;AACnC,UAAMA,WAAU,KAAK,iBAAiB,IAAI;AAC1C,SAAK,iBAAiB,OAAOA,QAAO;EACtC;EAEO,kBAAkB,YAA6B;AACpD,UAAM,YAAY,KAAK,oBAAoB,OAAO,UAAU;AAC5D,SAAK,iBAAiB,MAAM,SAAS;EACvC;EAEO,6BAA6B,iBAAwC;AAC1E,SAAK,sBAAsB,IAAI,2BAA0B;AACzD,YAAQ,iBAAiB;MACvB,KAAK,wBAAwB;AAC3B,aAAK,mBAAmB,IAAI,qBAAoB;AAChD;MACF;AACE,aAAK,mBAAmB,IAAI,oBAAmB;;EAErD;;EAGQ,iBAAiB,cAAoB;AAC3C,UAAM,aAAqB;AAC3B,QAAI,kBAA0B;AAC9B,UAAM,eAAe,UAAU,YAAY;AAE3C,sBAAkB,aAAa,WAAW;AAE1C,UAAM,eAAe,aAAa;AAClC,WAAO;MACL;MACA;MACA;MACA,aAAa;;EAEjB;EAEQ,iBAAiB,cAAoB;AAC3C,QACE,iBAAiB,UAAU,KAAK,qBAChC,iBAAiB,UAAU,KAAK,wBAChC,iBAAiB,UAAU,KAAK,oBAChC,iBAAiB,UAAU,KAAK,0BAChC,iBAAiB,UAAU,KAAK,uBAChC,iBAAiB,UAAU,KAAK,8BAChC,iBAAiB,UAAU,KAAK,iCAChC,iBAAiB,UAAU,KAAK,wBAChC;AACA,aAAO;;AAGT,WAAO;EACT;EAEQ,aAAa,gBAA8B;AACjD,WAAO,WAAW;MAChB,eAAe,KAAK;MACpB,gBAAc,OAAA,OAAA,OAAA,OAAA,CAAA,GACT,KAAK,oBAAoB,cAAc,GACvC,eAAe,QAAQ,cAAc;MAE1C,MAAM,eAAe;MACrB,MAAM,eAAe;MACrB,YAAY,eAAe;MAC3B,cAAc,eAAe;MAC7B,SAAS,eAAe;MACxB,qBAAqB,eAAe;MACpC,2BAA2B,KAAK,iBAAiB;MACjD,cACE,eAAe,iBAAiB,SAC5B,8BAA8B,eAAe,YAAY,IACzD;;KACP;EACH;;;;;;EAOQ,2CAAwC;AAQ9C,WAAO;MACL,uBAAuB,KAAK;MAC5B,cAAc,KAAK,oBAAoB;MACvC,kBAAkB,KAAK;MACvB,QAAQ;MACR,SAAS,KAAK,oBAAoB;MAClC,UAAU,KAAK;;EAEnB;EAEO,kBAAe;AACpB,WAAO,KAAK;EACd;;;;AC98BK,SAAS,eAAe;AAC3B,MAAI,OAAO,cAAc,YAAY,eAAe,WAAW;AAC3D,WAAO,UAAU;EACzB;AACI,MAAI,OAAO,YAAY,YAAY,QAAQ,YAAY,QAAW;AAC9D,WAAO,WAAW,QAAQ,QAAQ,OAAO,CAAC,CAAC,KAAK,QAAQ,QAAQ,KAAK,QAAQ,IAAI;EACzF;AACI,SAAO;AACX;;;ACAM,SAAUC,cAAa,QAAe;AAC1C,QAAM,KAAK,GAAG,aAAS,CAAE,IAAI,UAAU,OAAO,IAAI,UAAU,UAAU;AACtE,MAAI,QAAQ;AACV,WAAO,KAAK,MAAM;;AAEpB,SAAO;AACT;;;ACXM,SAAU,iBAAiB,UAAiB;AAChD,SAAO,OAAO,aAAa,YAAY,SAAS,KAAI,EAAG,SAAS;AAClE;;;ACKO,IAAM,8BAA8B,wBAAwB;AAEnE,IAAM,yBACH,OAAO,YAAY,eAClB,QAAQ,OACR,QAAQ,IAAI,UAAU,iCAAiC,KACzD;AAEF,IAAM,kCAAkC,OAAO,OAAO,uBAAuB,EAAE,IAAI,CAAC,MAClF,EAAE,SAAQ,CAAE;AAGd,IAAI;AAEJ,IAAI,iBAAiB,sBAAsB,GAAG;AAE5C,MAAI,wBAAwB,sBAAsB,GAAG;AACnD,uBAAmB,sBAAiD;SAC/D;AACL,YAAQ,MACN,GACE,UAAU,iCACZ,qCAAqC,sBAAsB,qEAAqE,gCAAgC,KAC9J,IAAI,CACL,GAAG;;;AAKJ,SAAU,mBAAmB,OAA+B;AAChE,MAAI,SAAS,CAAC,wBAAwB,KAAK,GAAG;AAC5C,UAAM,IAAI,MACR,6BAA6B,KAAK,yBAAyB,gCAAgC,KACzF,GAAG,CACJ,EAAE;;AAGP,0BAAwB;AAC1B;AAEM,SAAU,oCAAiC;AAC/C,SAAO;AACT;AAEA,SAAS,wBACP,iBAAuB;AAEvB,SAAO,gCAAgC,SAAS,eAAe;AACjE;AAEM,SAAU,yBACd,iCACA,gCAAuD;AAEvD,QAAM,iCACJ,mCAA8B,QAA9B,mCAA8B,SAA9B,iCAAkC;AACpC,SAAO,mCAA8B,QAA9B,mCAA8B,SAA9B,iCAAkC;AAC3C;;;ACnDM,IAAO,wBAAP,MAAO,uBAAqB;;;;;EAyBhC,YACE,SACQ,qBAGuC;AAHvC,SAAA,sBAAA;AAZF,SAAA,qBAAiC,CAAA;AACjC,SAAA,oBAAgC,CAAA;AAChC,SAAA,+BAA2C,CAAA;AAC3C,SAAA,gCAA4C,CAAA;AAclD,SAAK,UAAU;AACf,SAAK,kBAAkB,QAAQ;AAC/B,SAAK,0BAA0B,QAAQ,iBAAiB;AACxD,SAAK,eAAe;AACpB,SAAK,qBAAqB,KAAK,QAAQ,iBAAiB;AACxD,SAAK,0BAA0B,KAAK,qBAAqB,KAAK,mBAAmB,SAAS;EAC5F;;;;EAKO,MAAM,gBAAgB,gBAAsC;AACjE,WAAO,KAAK,uBAAuB,gBAAgB,aAAa,MAAM,cAAc,IAAI;EAC1F;;;;EAKO,MAAM,iBAAiB,gBAAsC;AAClE,WAAO,KAAK,uBAAuB,gBAAgB,aAAa,MAAM,cAAc,OAAO;EAC7F;EAEO,MAAM,mBAAgB;AAC3B,WAAO,KAAK,kBAAkB,IAAI,CAAC,QAAQ,IAAI,uBAAuB;EACxE;EAEO,MAAM,oBAAiB;AAC5B,WAAO,KAAK,mBAAmB,IAAI,CAAC,QAAQ,IAAI,uBAAuB;EACzE;EAEO,MAAM,sCACX,gBACA,UAAgB;AAEhB,UAAM,KAAK,oBAAoB,cAAc;AAC7C,UAAM,WAAW,KAAK,kBAAkB,KAAK,CAAC,QAAQ,IAAI,4BAA4B,QAAQ;AAC9F,QAAI,UAAU;AACZ,eAAS,cAAc;AACvB,eAAS,kCAAkC,KAAK,IAAG;AACnD,WAAK,6BAA6B,KAAK,QAAQ;;EAEnD;EAEO,MAAM,uCACX,gBACA,UAAgB;AAEhB,UAAM,KAAK,oBAAoB,cAAc;AAC7C,UAAM,WAAW,KAAK,mBAAmB,KACvC,CAAC,QAAQ,IAAI,4BAA4B,QAAQ;AAEnD,QAAI,UAAU;AACZ,eAAS,cAAc;AACvB,eAAS,kCAAkC,KAAK,IAAG;AACnD,WAAK,8BAA8B,KAAK,QAAQ;;EAEpD;EAEO,6BACL,cACA,eAA6B;AAE7B,QAAI,SAAS,KAAK,QAAQ,iBAAiB;AAE3C,QAAI,cAAc;AAChB,eACE,WACC,iBAAiB,aAAa,QAC5B,iBAAiB,aAAa,SAAS,kBAAkB,cAAc;;AAG9E,WAAO;EACT;EAEO,MAAM,uBACX,gBACA,cACA,eACA,4BAAoC;AAIpC,QAAI,CAAC,KAAK,QAAQ,iBAAiB,yBAAyB;AAC1D,qBAAe,QAAQ,EAAE,eAAe,KAAI,GAAI,kBAAkB;AAClE,qBAAe,yBAAyB,KAAK,eAAe;AAC5D,aAAO,KAAK;;AAId,QAAI,iBAAiB,aAAa,MAAM;AACtC,qBAAe,QAAQ,EAAE,eAAe,KAAI,GAAI,eAAe;AAC/D,qBAAe,yBAAyB,KAAK,eAAe;AAC5D,aAAO,KAAK;;AAGd,QAAI,KAAK,kBAAkB,WAAW,KAAK,KAAK,mBAAmB,WAAW,GAAG;AAC/E,YAAM,mBAAmB,MAAM,wBAC7B,OAAO,iBAAwC;AAC7C,eAAO,KAAK,oBAAoB,cAAc;UAC5C,eAAe,KAAK;SACrB;MACH,GACA,gBACA,mBAAmB,qBAAqB;AAG1C,WAAK,qBAAqB,iBAAiB,SAAS;AACpD,WAAK,oBAAoB,iBAAiB,SAAS;;AAGrD,UAAM,YAAY,cAAc,aAAa,IACzC,KAAK,oBACL,KAAK;AAET,QAAI;AAEJ,QACE,KAAK,sBACL,KAAK,mBAAmB,SAAS,KACjC,4BAA4B,KAAK,mBAAmB,QACpD;AACA,eAAS,IAAI,2BAA2B,IAAI,KAAK,mBAAmB,QAAQ,KAAK;AAC/E,cAAM,oBAAoB,KAAK,mBAAmB,CAAC;AACnD,mBAAW,UAAU,KACnB,CAAC,QACC,IAAI,gBAAgB,QACpB,kBAAkB,IAAI,IAAI,MAAM,kBAAkB,iBAAiB,CAAC;AAExE,YAAI,UAAU;AACZ;;;;AAMN,QAAI,CAAC,UAAU;AACb,YAAM,kBACJ,6BAA6B,KAAK,4BAA4B,UAAU;AAC1E,YAAM,oBAAoB,kBACtB,UAAU,MAAM,yBAAyB,IACzC;AACJ,iBAAW,kBAAkB,KAAK,CAAC,QAAO;AACxC,eAAO,IAAI,gBAAgB;MAC7B,CAAC;;AAGH,eAAW,WAAW,WAAW,EAAE,MAAM,IAAI,yBAAyB,KAAK,gBAAe;AAC1F,mBAAe,yBAAyB,SAAS,uBAAuB;AACxE,WAAO,SAAS;EAClB;;;;;;;EAQO,MAAM,oBAAoB,gBAAsC;AACrE,QAAI,CAAC,KAAK,gBAAgB,KAAK,yBAAyB;AACtD,WAAK,eAAe;AACpB,YAAM,kBAAkB,MAAM,KAAK,kCAAkC,cAAc;AACnF,UAAI,iBAAiB;AACnB,aAAK,iCAAgC;AACrC,aAAK,iBAAiB,eAAe;;AAEvC,WAAK,eAAe;;EAExB;EAEQ,iBAAiB,iBAAgC;AACvD,eAAW,YAAY,gBAAgB,mBAAmB;AACxD,YAAM,mBAAmB,KAAK,mBAAmB,KAAK,CAAC,QAAQ,IAAI,SAAS,SAAS,IAAI;AACzF,UAAI,CAAC,kBAAkB;AACrB,aAAK,mBAAmB,KAAK,QAAQ;;;AAGzC,eAAW,YAAY,gBAAgB,mBAAmB;AACxD,YAAM,mBAAmB,KAAK,kBAAkB,KAAK,CAAC,QAAQ,IAAI,SAAS,SAAS,IAAI;AACxF,UAAI,CAAC,kBAAkB;AACrB,aAAK,kBAAkB,KAAK,QAAQ;;;EAG1C;EAEQ,mCAAgC;AACtC,UAAM,MAAM,KAAK,IAAG;AACpB,SAAK,eAAe,KAAK,KAAK,8BAA8B,KAAK,iBAAiB;AAClF,SAAK,+BAA+B,KAAK,6BACvC,KACA,KAAK,4BAA4B;AAGnC,SAAK,eAAe,KAAK,KAAK,+BAA+B,KAAK,kBAAkB;AACpF,SAAK,gCAAgC,KAAK,6BACxC,KACA,KAAK,6BAA6B;EAEtC;;;;;;;EAQQ,eACN,KACA,sBACA,cAAwB;AAExB,eAAW,YAAY,sBAAsB;AAC3C,YAAM,uBAAuB,aAAa,KAAK,CAAC,QAAQ,IAAI,SAAS,SAAS,IAAI;AAClF,UACE,wBACA,MAAM,qBAAqB,kCACzB,UAAU,uCACZ;AACA,6BAAqB,cAAc;;;EAGzC;EAEQ,6BAA6B,KAAa,sBAAgC;AAChF,WAAO,qBAAqB,OAAO,CAAC,QAAO;AACzC,UACE,OACA,MAAM,IAAI,mCAAmC,UAAU,uCACvD;AACA,eAAO;;AAET,aAAO;IACT,CAAC;EACH;;;;;;EAOQ,MAAM,kCACZ,gBAAsC;AAEtC,QAAI;AACF,YAAM,UAAU,EAAE,eAAe,KAAK,gBAAe;AACrD,YAAM,EAAE,UAAU,gBAAe,IAAK,MAAM,KAAK,oBAAoB,gBAAgB,OAAO;AAC5F,aAAO;aAOA,KAAU;;AAInB,QAAI,KAAK,oBAAoB;AAC3B,iBAAW,YAAY,KAAK,oBAAoB;AAC9C,YAAI;AACF,gBAAM,qBAAqB,uBAAsB,sBAC/C,KAAK,iBACL,QAAQ;AAEV,gBAAM,UAAU,EAAE,eAAe,mBAAkB;AACnD,gBAAM,EAAE,UAAU,gBAAe,IAAK,MAAM,KAAK,oBAC/C,gBACA,OAAO;AAET,cAAI,iBAAiB;AACnB,mBAAO;;iBAEF,KAAU;;;;EAKzB;;;;;;;EAQQ,OAAO,sBAAsB,iBAAyB,cAAoB;AAIhF,UAAM,cAAc,IAAI,IAAI,eAAe;AAG3C,QAAI,YAAY,UAAU;AACxB,YAAM,gBAAgB,YAAY,SAAS,SAAQ,EAAG,YAAW,EAAG,MAAM,GAAG;AAC7E,UAAI,eAAe;AAEjB,cAAM,4BAA4B,cAAc,CAAC;AAGjD,cAAM,gCACJ,4BAA4B,MAAM,aAAa,QAAQ,KAAK,EAAE;AAIhE,cAAM,qBAAqB,gBACxB,YAAW,EACX,QAAQ,2BAA2B,6BAA6B;AACnE,eAAO;;;AAIX,WAAO;EACT;;AAGF,SAAS,kBAAkB,UAAgB;AACzC,SAAO,SAAS,MAAM,GAAG,EAAE,KAAK,EAAE,EAAE,YAAW;AACjD;;;ACvUM,IAAO,eAAP,MAAmB;EA6BvB,YAAY,2BAAuD;;AACjE,QAAI,OAAO,8BAA8B,UAAU;AACjD,kCAA4B,sBAAsB,yBAAyB;;AAG7E,UAAM,WAAW,SAAS,0BAA0B,QAAQ;AAC5D,QAAI,CAAC,UAAU;AACb,YAAM,IAAI,MAAM,4BAA4B;;AAG9C,UAAM,eACJ,KAAK,iCAAiC,yBAAyB;AAEjE,8BAA0B,mBAAmB,OAAO,OAClD,CAAA,GACA,yBACA,0BAA0B,gBAAgB;AAG5C,8BAA0B,iBAAiB,0BAA0B,kBAAkB,CAAA;AACvF,8BAA0B,eAAe,UAAU,YAAY,YAAY,IAAI;AAC/E,8BAA0B,eAAe,UAAU,YAAY,OAAO,IACpE,UAAU;AACZ,QAAI,0BAA0B,qBAAqB,QAAW;AAC5D,gCAA0B,eAAe,UAAU,YAAY,gBAAgB,IAC7E,0BAA0B;;AAG9B,8BAA0B,eAAe,UAAU,YAAY,SAAS,IAAIC,cAC1E,0BAA0B,eAAe;AAG3C,UAAM,wBAAwB,IAAI,sBAChC,2BACA,OAAO,gBAAwC,SAC7C,KAAK,2BAA2B,gBAAgB,IAAI,CAAC;AAGzD,SAAK,gBAAgB,IAAI,cACvB,2BACA,uBACA,cACA,yBACE,0BAA0B,iBAC1B,kCAAiC,CAAE,CACpC;AAEH,UACEC,MAAA,0BAA0B,sBAAgB,QAAAA,QAAA,SAAA,SAAAA,IAAE,8BAC5CC,MAAA,0BAA0B,sBAAgB,QAAAA,QAAA,SAAA,SAAAA,IAAE,qCAC5C;AACA,WAAK,8BACH,uBACA,0BAA0B,iBAAiB,2BACzC,wBAAwB,uBAAuB;;AAIrD,SAAK,YAAY,IAAI,UAAU,MAAM,KAAK,aAAa;AACvD,SAAK,SAAS,IAAI,OAAO,MAAM,KAAK,aAAa;EACnD;EAEQ,iCACN,2BAA8C;AAE9C,WAAO;MACL,UAAU,0BAA0B;MACpC,0BAA0B,0BAA0B,mBAAmB;MACvE,yBAAyB,0BAA0B,kBAAkB;MACrE,0BAA0B,0BAA0B,mBAAmB;MACvE,4BAA4B,0BAA0B,qBAAqB;MAC3E,kBAAkB,0BAA0B;MAC5C,gBAAgB,0BAA0B;MAC1C,iBAAiB,0BAA0B,UAAU;MACrD,iBAAiB,0BAA0B;MAC3C,iBAAiB,0BAA0B;MAC3C,mBAAmB,0BAA0B,YAAY;MACzD,YAAY,UAAU;;EAE1B;;;;EAKO,MAAM,mBACX,SAAwB;AAExB,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,aAAO,KAAK,2BAA2B,gBAAgB,OAAO;IAChE,GAAG,KAAK,aAAa;EACvB;;;;EAKO,MAAM,2BACX,gBACA,SAAwB;AAExB,UAAM,WAAW,MAAM,KAAK,cAAc,mBAAmB,gBAAgB,OAAO;AACpF,WAAO,IAAI,iBACT,SAAS,QACT,SAAS,SACT,SAAS,MACT,0BAAyB,GACzB,SAAS,SAAS;EAEtB;;;;;;EAOO,MAAM,mBAAgB;AAC3B,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,aAAO,KAAK,cAAc,iBAAiB,cAAc;IAC3D,GAAG,KAAK,aAAa;EACvB;;;;;;EAOO,MAAM,kBAAe;AAC1B,WAAO,gBAAgB,OAAO,mBAA0C;AACtE,aAAO,KAAK,cAAc,gBAAgB,cAAc;IAC1D,GAAG,KAAK,aAAa;EACvB;;;;;;EAOO,oBAAiB;AACtB,WAAO,KAAK,cAAc,kBAAiB;EAC7C;;;;;;EAOO,mBAAgB;AACrB,WAAO,KAAK,cAAc,iBAAgB;EAC5C;;;;;;;;;;;;;;;;;EAkBO,SAAS,IAAU;AACxB,WAAO,IAAI,SAAS,MAAM,IAAI,KAAK,aAAa;EAClD;;;;;EAMO,MAAM,IAAU;AACrB,WAAO,IAAI,MAAM,MAAM,IAAI,KAAK,aAAa;EAC/C;;;;EAKO,UAAO;AACZ,iBAAa,KAAK,iBAAiB;EACrC;EAEQ,MAAM,8BACZ,uBACA,aAAmB;AAEnB,SAAK,oBAAoB,YAAY,MAAK;AACxC,UAAI;AACF,eAAO,gBACL,OAAO,mBAA0C;AAC/C,iBAAO,sBAAsB,oBAAoB,cAAc;QACjE,GACA,KAAK,eACL,mBAAmB,yBAAyB;eAEvC,GAAQ;AACf,gBAAQ,KAAK,+BAA+B,CAAC;;IAEjD,GAAG,WAAW;AACd,QAAI,KAAK,kBAAkB,SAAS,OAAO,KAAK,kBAAkB,UAAU,YAAY;AACtF,WAAK,kBAAkB,MAAK;;EAEhC;;;;ACxQI,IAAO,qBAAP,MAAyB;;;;ACO/B,eAAsB,4BACpB,WACA,oBAAsC;AAEtC,MAAI,qBAAqB;AACzB,MACE,OAAO,mBAAmB,iBAAiB,YAC3C,mBAAmB,iBAAiB,IACpC;AACA,0BAAsB,IAAI,UAAU,KAAK,oBAAoB,IAAI,mBAAmB,YAAY;;AAGlG,MACE,OAAO,mBAAmB,kBAAkB,YAC5C,mBAAmB,kBAAkB,IACrC;AACA,QAAI,mBAAmB,iBAAiB,IAAI;AAC1C,YAAM,IAAI,MAAM,8BAA8B,mBAAmB,YAAY,wDAC7B;;AAElD,0BAAsB,IAAI,UAAU,KAAK,sBAAsB,IAAI,mBAAmB,aAAa;;AAGrG,MACE,OAAO,mBAAmB,iBAAiB,YAC3C,mBAAmB,iBAAiB,IACpC;AACA,QAAI,mBAAmB,kBAAkB,IAAI;AAC3C,YAAM,IAAI,MAAM,8BAA8B,mBAAmB,aAAa,yDAC7B;;AAEnD,YAAQ,mBAAmB,cAAc;MACvC,KAAK;AACH,8BAAsB,GAAG,UAAU,KAAK,IAAI,GAAG,UAAU,KAAK,oBAAoB;AAClF;MACF,KAAK;AACH,8BAAsB,GAAG,UAAU,KAAK,IAAI,GAAG,UAAU,KAAK,2BAA2B;AACzF;MACF,KAAK;AACH,8BAAsB,GAAG,UAAU,KAAK,IAAI,GAAG,UAAU,KAAK,+BAA+B;AAC7F;MACF,KAAK;AACH,8BAAsB,GAAG,UAAU,KAAK,IAAI,GAAG,UAAU,KAAK,mBAAmB;AACjF;MACF;AACE,cAAM,IAAI,MAAM,8BAA8B,mBAAmB,YAAY,wDAC/B;AAC9C;;AAEJ,0BAAsB,GAAG,UAAU,KAAK,IAAI,GAAG,mBAAmB,YAAY,GAAG,UAAU,KAAK,IAAI;;AAEtG,qBAAmB,eAAe,mBAAmB,SAAQ;AAE7D,MAAI,kBAAkB;AAEtB,MACE,mBAAmB,4BAA4B,UAC/C,mBAAmB,wBAAwB,SAAS,GACpD;AACA,QACE,OAAO,mBAAmB,iBAAiB,YAC3C,mBAAmB,iBAAiB,QACpC;AACA,YAAM,IAAI,MAAM,8BAA8B,mBAAmB,YAAY,oEACjB;;AAE9D,uBAAmB,wBAAwB,QAAQ,CAAC,UAAS;AAC3D,yBAAmB,GAAG,WAAW,KAAK,CAAC;IACzC,CAAC;;AAGH,MAAI,mBAAmB,4BAA4B,GAAG;AACpD,uBAAmB,2BAA2B,uBAAuB;AACrE,uBAAmB,2BAA2B,uBAAuB;;AAGvE,MACE,mBAAmB,yBAAyB,KAC5C,mBAAmB,yBAAyB,GAC5C;AACA,uBAAmB,uBAAuB,uBAAuB;AACjE,uBAAmB,uBAAuB,uBAAuB;;AAGnE,MACE,OAAO,mBAAmB,YAAY,YACtC,OAAO,mBAAmB,YAAY,QACtC;AACA,YAAQ,mBAAmB,SAAS;MAClC,KAAK,cAAc;AACjB,2BAAmB,UAAU;AAC7B;MACF,KAAK,cAAc;AACjB,2BAAmB,UAAU;AAC7B;MACF,KAAK,cAAc;AACjB,2BAAmB,UAAU;AAC7B;MACF,KAAK,cAAc;AACjB,2BAAmB,UAAU;AAC7B;MACF;AACE,cAAM,IAAI,MAAM,8BAA8B,mBAAmB,OAAO,mDAC/B;AACzC;;;AAIN,QAAM,UACJ,mBAAmB,OACnB,OACA,mBAAmB,UACnB,OACA,mBAAmB,eACnB,OACA,kBACA,OACA,qBAAqB,mBAAmB,SAAS,EAAE,SAAS,EAAE,IAC9D,OACA,qBAAqB,mBAAmB,UAAU,EAAE,SAAS,EAAE,IAC/D,OACA,mBAAmB,UACnB,OACA,mBAAmB,wBAAwB,SAAS,EAAE,IACtD,OACA,mBAAmB,wBAAwB,SAAS,EAAE,IACtD,OACA,mBAAmB,qBAAqB,SAAS,EAAE,IACnD,OACA,mBAAmB,qBAAqB,SAAS,EAAE,IACnD;AAEF,QAAM,gBAAgB,MAAM,KAAK,WAAW,OAAO,KAAK,OAAO,EAAE,SAAS,QAAQ,CAAC;AACnF,SAAO,0BAA0B,gBAAgB,MAAM,OAAO,KAAK,OAAO,EAAE,SAAS,QAAQ;AAC/F;AAKM,SAAU,qBAAqB,MAAU;AAC7C,SAAO,KAAK,MAAM,KAAK,QAAO,IAAK,GAAI;AACzC;",
  "names": ["PriorityQueue", "semaphore", "f", "stringify", "ResourceType", "HTTPMethod", "OperationType", "CosmosKeyType", "CosmosContainerChildResourceKind", "PermissionScopeValues", "SasTokenPermissionKind", "signature", "enabledNamespaces", "logger", "logger", "enabledNamespaces", "ConnectionMode", "ConsistencyLevel", "DataType", "IndexingMode", "SpatialType", "IndexKind", "PartitionKeyDefinitionVersion", "PartitionKeyKind", "PermissionMode", "PriorityLevel", "TriggerOperation", "TriggerType", "UserDefinedFunctionType", "GeospatialType", "uuid", "uuid", "uuid", "URL", "generateUUID", "max", "_a", "MetadataLookUpType", "CosmosDbDiagnosticLevel", "_a", "DiagnosticNodeType", "logger", "STATES", "FetchResultType", "options", "logger", "ParallelQueryExecutionContextBaseStates", "PriorityQueue", "semaphore", "stableStringify", "_a", "ConflictResolutionMode", "JSBI", "Array", "constructor", "length", "sign", "__kMaxLength", "RangeError", "BigInt", "arg", "Math", "floor", "Number", "isFinite", "__zero", "__isOneDigitInt", "__oneDigit", "__fromDouble", "result", "__fromString", "SyntaxError", "primitive", "__toPrimitive", "TypeError", "toDebugString", "digit", "push", "toString", "join", "radix", "__toStringBasePowerOfTwo", "__toStringGeneric", "toNumber", "x", "xLength", "value", "__unsignedDigit", "xMsd", "__digit", "msdLeadingZeros", "__clz30", "xBitLength", "exponent", "currentDigit", "digitIndex", "shift", "mantissaHigh", "mantissaHighBitsUnset", "mantissaLow", "mantissaLowBitsUnset", "rounding", "__decideRounding", "signBit", "__kBitConversionInts", "__kBitConversionDouble", "unaryMinus", "__copy", "bitwiseNot", "__absoluteSubOne", "__trim", "__absoluteAddOne", "exponentiate", "y", "expValue", "__kMaxLengthBits", "neededDigits", "__initializeDigits", "msd", "__setDigit", "runningSquare", "multiply", "resultLength", "__clzmsd", "i", "__multiplyAccumulate", "divide", "__absoluteCompare", "resultSign", "divisor", "quotient", "__absoluteDivSmall", "__absoluteDivLarge", "remainder", "remainderDigit", "__absoluteModSmall", "add", "__absoluteAdd", "__absoluteSub", "subtract", "leftShift", "__rightShiftByAbsolute", "__leftShiftByAbsolute", "signedRightShift", "unsignedRightShift", "lessThan", "__compareToBigInt", "lessThanOrEqual", "greaterThan", "greaterThanOrEqual", "equal", "notEqual", "bitwiseAnd", "max", "__absoluteAnd", "y1", "__absoluteOr", "__absoluteAndNot", "bitwiseXor", "__absoluteXor", "bitwiseOr", "asIntN", "n", "neededLength", "topDigit", "compareDigit", "__truncateToNBits", "__truncateAndSubFromPowerOfTwo", "asUintN", "bitsInTopDigit", "ADD", "__toNumeric", "__isBigInt", "LT", "__compare", "LE", "GT", "GE", "EQ", "__equalToNumber", "NE", "newLength", "last", "pop", "mantissaBitsUnset", "topUnconsumedBit", "mask", "rawExponent", "digits", "kMantissaHighTopBit", "msdTopBit", "remainingMantissaBits", "__isWhitespace", "c", "string", "cursor", "current", "charCodeAt", "chars", "bitsPerChar", "__kMaxBitsPerChar", "roundup", "__kBitsPerCharTableMultiplier", "bitsMin", "__kBitsPerCharTableShift", "limDigit", "limAlpha", "parts", "partsBits", "done", "part", "bits", "d", "__fillFromParts", "charsSoFar", "multiplier", "m", "digitsSoFar", "__inplaceMultiplyAdd", "bitsInDigit", "partBits", "Error", "charMask", "charsRequired", "pos", "availableBits", "newDigit", "__kConversionChars", "consumedBits", "isRecursiveCall", "bitLength", "maxBitsPerChar", "minBitsPerChar", "secondHalfChars", "conqueror", "secondHalf", "input", "__halfDigit", "__setHalfDigit", "divisionResult", "firstHalf", "__unequalSign", "leftNegative", "__absoluteGreater", "bothNegative", "__absoluteLess", "xSign", "__compareToNumber", "ySign", "yAbs", "abs", "xDigit", "__compareToDouble", "yBitLength", "compareMantissa", "__comparisonResultToBool", "op", "carry", "r", "borrow", "inputLength", "__setDigitGrow", "yLength", "numPairs", "tmp", "tmpLength", "diff", "multiplicand", "accumulator", "accumulatorIndex", "m2Low", "m2High", "high", "acc", "m1", "m1Low", "m1High", "rLow", "__imul", "rMid1", "rMid2", "rHigh", "__internalMultiplyAdd", "source", "factor", "summand", "rx", "ry", "mLow", "mHigh", "dLow", "dHigh", "pLow", "pMid1", "pMid2", "pHigh", "upperHalf", "lowerHalf", "dividend", "wantQuotient", "wantRemainder", "__halfDigitLength", "n2", "q", "qhatv", "__clz15", "__specialLeftShift", "u", "vn1", "halfDigitBuffer", "qhat", "j", "ujn", "rhat", "vn2", "ujn2", "__inplaceSub", "__inplaceAdd", "__inplaceRightShift", "startIndex", "halfDigits", "sum", "subtrahend", "r0", "sub", "r15", "addDigit", "__toShiftAmount", "digitShift", "bitsShift", "grow", "__rightShiftByMaximum", "mustRoundDown", "obj", "hint", "Symbol", "toPrimitive", "exoticToPrim", "valueOf", "call", "drop", "min", "limit", "msdBitsConsumed", "resultMsd", "minuendMsd", "len", "previous", "updated", "__digitPow", "base", "ArrayBuffer", "Float64Array", "__kBitConversionBuffer", "Int32Array", "clz32", "log", "LN2", "imul", "a", "b", "reverse", "prefixKeyByType", "max", "ChangeFeedResourceType", "uuid", "response", "_a", "request", "logger", "uuid", "_a", "AbortError", "delay", "AbortError", "_a", "isBlob", "request", "_a", "_b", "AbortError", "_a", "_b", "_c", "_d", "_a", "delay", "request", "logger", "_a", "PluginOn", "executeRequest", "retryPolicy", "logger", "request", "uuid", "logger", "request", "getUserAgent", "getUserAgent", "_a", "_b"]
}
